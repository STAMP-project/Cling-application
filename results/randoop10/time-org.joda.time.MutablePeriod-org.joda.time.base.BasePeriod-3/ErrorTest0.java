import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant10 = dateTime4.toInstant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        boolean boolean21 = instant11.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant25 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration23, (-1));
        boolean boolean27 = instant25.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant25, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.PeriodType periodType40 = periodType38.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.Chronology chronology49 = dateTime44.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.minutes();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-259200000L), periodType40, chronology49);
        org.joda.time.Days days52 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod53 = days52.toMutablePeriod();
        org.joda.time.Days days54 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod55 = days54.toMutablePeriod();
        mutablePeriod55.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval58 = null;
        mutablePeriod55.add(readableInterval58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.eras();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = mutablePeriod53.isSupported(durationFieldType60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DurationField durationField64 = durationFieldType60.getField(chronology63);
        int int65 = mutablePeriod51.get(durationFieldType60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField50 and durationField64", Math.signum(durationField50.compareTo(durationField64)) == -Math.signum(durationField64.compareTo(durationField50)));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((-1L));
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType26 = periodType25.withHoursRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableDuration) duration24, periodType25);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType29 = periodType28.withDaysRemoved();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        int int34 = dateTime32.getHourOfDay();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.toLanguageTag();
        java.util.Calendar calendar38 = dateTime32.toCalendar(locale36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = dateTime32.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime47 = dateTime45.withZone(dateTimeZone46);
        int int48 = dateTime47.getDayOfMonth();
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration51 = period50.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime56 = null;
        boolean boolean57 = dateTimeZone54.isLocalDateTimeGap(localDateTime56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        org.joda.time.Duration duration61 = period50.toDurationTo((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean62 = dateTime47.equals((java.lang.Object) dateTime58);
        org.joda.time.Days days63 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod64 = days63.toMutablePeriod();
        org.joda.time.Days days65 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod66 = days65.toMutablePeriod();
        mutablePeriod66.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval69 = null;
        mutablePeriod66.add(readableInterval69);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.eras();
        int int72 = mutablePeriod66.get(durationFieldType71);
        boolean boolean73 = mutablePeriod64.isSupported(durationFieldType71);
        mutablePeriod64.addSeconds((int) '#');
        mutablePeriod64.addMillis((int) (short) 10);
        java.lang.Object obj79 = null;
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Interval interval81 = new org.joda.time.Interval(obj79, chronology80);
        org.joda.time.Chronology chronology82 = interval81.getChronology();
        mutablePeriod64.add((long) (byte) 10, chronology82);
        org.joda.time.MutableDateTime mutableDateTime84 = dateTime47.toMutableDateTime(chronology82);
        org.joda.time.Period period85 = duration24.toPeriod(periodType29, chronology82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and mutableDateTime84", (dateTime32.compareTo(mutableDateTime84) == 0) == dateTime32.equals(mutableDateTime84));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DateTime dateTime10 = instant8.toDateTimeISO();
        boolean boolean12 = instant8.isBefore((-2678400000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime10", (dateTime7.compareTo(dateTime10) == 0) == dateTime7.equals(dateTime10));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime8.plus((long) 3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = dateTime13.toLocalDateTime();
        boolean boolean19 = dateTimeZone6.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime28 = dateTime23.toLocalDateTime();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime18, (org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean30 = dateTimeZone2.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int32 = localDateTime28.get(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.Instant instant43 = instant42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(0);
        boolean boolean53 = instant43.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant57 = instant43.withDurationAdded((org.joda.time.ReadableDuration) duration55, (-1));
        boolean boolean59 = instant57.isBefore((long) (short) 10);
        org.joda.time.DateTime dateTime60 = instant57.toDateTime();
        org.joda.time.DateTime dateTime61 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime70 = dateTime65.toLocalDateTime();
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.lang.String str72 = locale71.getVariant();
        java.util.Calendar calendar73 = dateTime65.toCalendar(locale71);
        int int74 = dateTime65.getCenturyOfEra();
        org.joda.time.DateTime dateTime75 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant57 and dateTime60", (instant57.compareTo(dateTime60) == 0) == instant57.equals(dateTime60));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration2 = period1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(0);
        int int12 = dateTime11.getDayOfWeek();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        int int14 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period15 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Days days16 = period15.toStandardDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime13", (dateTime9.compareTo(dateTime13) == 0) == dateTime9.equals(dateTime13));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isStandardOffset((long) (byte) 100);
        boolean boolean33 = dateTimeZone28.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Duration duration59 = minutes57.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration59);
        int int61 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime62 = dateTime15.withZoneRetainFields(dateTimeZone28);
        int int63 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        boolean boolean64 = dateTime15.isEqualNow();
        org.joda.time.DateTime dateTime66 = dateTime15.withCenturyOfEra(1439);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        java.util.GregorianCalendar gregorianCalendar70 = dateTime69.toGregorianCalendar();
        int int71 = dateTime69.getHourOfDay();
        java.util.Locale locale72 = java.util.Locale.CHINA;
        java.util.Locale locale73 = locale72.stripExtensions();
        java.lang.String str74 = locale73.toLanguageTag();
        java.util.Calendar calendar75 = dateTime69.toCalendar(locale73);
        org.joda.time.DateTime.Property property76 = dateTime69.minuteOfHour();
        org.joda.time.Days days77 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod78 = days77.toMutablePeriod();
        org.joda.time.Duration duration79 = days77.toStandardDuration();
        org.joda.time.Days days80 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod81 = days80.toMutablePeriod();
        org.joda.time.Duration duration82 = days80.toStandardDuration();
        boolean boolean83 = duration79.isLongerThan((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableDuration) duration79);
        org.joda.time.Chronology chronology85 = dateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.halfdayOfDay();
        org.joda.time.DateTime dateTime87 = dateTime15.toDateTime(chronology85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType33 = periodType32.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant21, (org.joda.time.ReadableInstant) dateTime31, periodType32);
        org.joda.time.DateTime dateTime35 = dateTime8.minus((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.setMinutes((-100));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isStandardOffset((long) (byte) 100);
        boolean boolean33 = dateTimeZone28.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Duration duration59 = minutes57.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration59);
        int int61 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime62 = dateTime15.withZoneRetainFields(dateTimeZone28);
        int int63 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean65 = dateTime8.isSupported(dateTimeFieldType64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.Duration duration31 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        mutablePeriod36.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval39 = null;
        mutablePeriod36.add(readableInterval39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.eras();
        int int42 = mutablePeriod36.get(durationFieldType41);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType41);
        mutablePeriod34.addSeconds((int) '#');
        mutablePeriod34.addMillis((int) (short) 10);
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        mutablePeriod34.add((long) (byte) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime17.toMutableDateTime(chronology52);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime17.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and mutableDateTime54", (dateTime17.compareTo(mutableDateTime54) == 0) == dateTime17.equals(mutableDateTime54));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = dateTime13.toLocalDateTime();
        boolean boolean19 = dateTimeZone6.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime28 = dateTime23.toLocalDateTime();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime18, (org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean30 = dateTimeZone2.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int32 = localDateTime28.get(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.Instant instant43 = instant42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(0);
        boolean boolean53 = instant43.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant57 = instant43.withDurationAdded((org.joda.time.ReadableDuration) duration55, (-1));
        boolean boolean59 = instant57.isBefore((long) (short) 10);
        org.joda.time.DateTime dateTime60 = instant57.toDateTime();
        org.joda.time.DateTime dateTime61 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = null;
        boolean boolean67 = dateTimeZone64.isLocalDateTimeGap(localDateTime66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Calendar calendar73 = dateTime71.toCalendar(locale72);
        org.joda.time.DateTime dateTime75 = dateTime71.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime76 = dateTime71.toLocalDateTime();
        boolean boolean77 = dateTimeZone64.isLocalDateTimeGap(localDateTime76);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((-1L), dateTimeZone80);
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Calendar calendar83 = dateTime81.toCalendar(locale82);
        org.joda.time.DateTime dateTime85 = dateTime81.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime86 = dateTime81.toLocalDateTime();
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime76, (org.joda.time.ReadablePartial) localDateTime86);
        int int88 = localDateTime86.size();
        org.joda.time.Hours hours89 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime28, (org.joda.time.ReadablePartial) localDateTime86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant57 and dateTime60", (instant57.compareTo(dateTime60) == 0) == instant57.equals(dateTime60));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isStandardOffset((long) (byte) 100);
        boolean boolean33 = dateTimeZone28.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        boolean boolean56 = dateTime54.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Duration duration59 = minutes57.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration59);
        int int61 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime62 = dateTime15.withZoneRetainFields(dateTimeZone28);
        int int63 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        int int64 = dateTime8.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType8.getField(chronology11);
        java.lang.String str13 = durationField12.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology22.years();
        long long27 = durationField24.add(2L, 100);
        long long28 = durationField24.getUnitMillis();
        int int29 = durationField12.compareTo(durationField24);
        long long30 = durationField24.getUnitMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField24, and durationField12", !(durationField12.compareTo(durationField24) == 0) || (Math.signum(durationField12.compareTo(durationField12)) == Math.signum(durationField24.compareTo(durationField12))));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        boolean boolean10 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period11 = duration9.toPeriod();
        org.joda.time.Period period13 = period11.plusMinutes((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) 10);
        mutablePeriod15.setMillis((int) (short) 10);
        mutablePeriod15.clear();
        org.joda.time.Period period19 = period11.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration22 = period21.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(0);
        int int32 = dateTime31.getDayOfWeek();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        int int34 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period35 = duration22.toPeriodTo((org.joda.time.ReadableInstant) dateTime33);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) period35);
        mutablePeriod15.setMinutes(2022);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime33", (dateTime29.compareTo(dateTime33) == 0) == dateTime29.equals(dateTime33));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType33 = periodType32.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant21, (org.joda.time.ReadableInstant) dateTime31, periodType32);
        org.joda.time.DateTime dateTime35 = dateTime8.minus((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period(6, (int) (short) -1, (int) (byte) 0, (int) ' ');
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) period21);
        boolean boolean23 = interval6.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration27 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration28 = duration25.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone31.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        int int38 = dateTime37.getDayOfWeek();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        int int40 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval6.abuts((org.joda.time.ReadableInterval) mutableInterval41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime39", (dateTime11.compareTo(dateTime39) == 0) == dateTime11.equals(dateTime39));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        org.joda.time.Duration duration16 = minutes14.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.plusMillis((int) '#');
        int int53 = instant41.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTimeISO();
        org.joda.time.Instant instant63 = dateTime57.toInstant();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime66 = dateTime57.plusMillis((int) (short) 1);
        org.joda.time.Interval interval67 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval(obj69, chronology70);
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType68.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.yearOfEra();
        org.joda.time.DateTime dateTime75 = dateTime57.toDateTime(chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime75", (dateTime3.compareTo(dateTime75) == 0) == dateTime3.equals(dateTime75));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        boolean boolean11 = instant9.isBefore((long) 100);
        org.joda.time.Instant instant14 = instant9.withDurationAdded((long) 10, (int) (short) 10);
        org.joda.time.DateTime dateTime15 = instant9.toDateTimeISO();
        int int16 = dateTime15.getEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.Instant instant43 = instant27.withMillis(100L);
        org.joda.time.Days days44 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) instant43);
        int int45 = days44.getDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime15", (dateTime3.compareTo(dateTime15) == 0) == dateTime3.equals(dateTime15));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        org.joda.time.Duration duration16 = minutes14.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.plusMillis((int) '#');
        int int53 = instant41.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTimeISO();
        org.joda.time.Instant instant63 = dateTime57.toInstant();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime66 = dateTime57.plusMillis((int) (short) 1);
        org.joda.time.Interval interval67 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval(obj69, chronology70);
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType68.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.yearOfEra();
        org.joda.time.DateTime dateTime75 = dateTime57.toDateTime(chronology72);
        org.joda.time.DurationField durationField76 = chronology72.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime75", (dateTime3.compareTo(dateTime75) == 0) == dateTime3.equals(dateTime75));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period2 = mutableInterval0.toPeriod(periodType1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTimeISO();
        org.joda.time.Instant instant12 = dateTime6.toInstant();
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(0);
        boolean boolean23 = instant13.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime27.toDateTimeISO();
        org.joda.time.Instant instant33 = dateTime27.toInstant();
        org.joda.time.Instant instant34 = instant33.toInstant();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone37.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        boolean boolean44 = instant34.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant48 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration46, (-1));
        boolean boolean50 = instant48.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime54.toDateTimeISO();
        org.joda.time.Instant instant60 = dateTime54.toInstant();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant48, (org.joda.time.ReadableInstant) dateTime54, periodType61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant13, (org.joda.time.ReadablePeriod) period62);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Period period66 = org.joda.time.Period.months(999);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateTime dateTime68 = mutableInterval0.getEnd();
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval0.toMutableInterval();
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration72 = period71.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        org.joda.time.LocalDateTime localDateTime77 = null;
        boolean boolean78 = dateTimeZone75.isLocalDateTimeGap(localDateTime77);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone75);
        org.joda.time.DateTime dateTime81 = dateTime79.withHourOfDay(0);
        int int82 = dateTime81.getDayOfWeek();
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime();
        int int84 = dateTime81.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Period period85 = duration72.toPeriodTo((org.joda.time.ReadableInstant) dateTime83);
        mutableInterval69.setPeriodAfterStart((org.joda.time.ReadablePeriod) period85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime83", (dateTime20.compareTo(dateTime83) == 0) == dateTime20.equals(dateTime83));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long6 = dateTimeZone3.adjustOffset(32L, false);
        int int8 = dateTimeZone3.getOffsetFromLocal(4459615861L);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 59, 6700148978639999L, dateTimeZone3);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration11 = duration10.toDuration();
        long long12 = duration10.getMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.ZERO;
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        long long15 = duration13.getMillis();
        int int16 = duration10.compareTo((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType38 = periodType37.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant26, (org.joda.time.ReadableInstant) dateTime36, periodType37);
        org.joda.time.Instant instant42 = instant26.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant44 = instant42.plus((long) (byte) 0);
        org.joda.time.Duration duration46 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration48 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration49 = duration46.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        java.util.GregorianCalendar gregorianCalendar53 = dateTime52.toGregorianCalendar();
        int int54 = dateTime52.getHourOfDay();
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Locale locale56 = locale55.stripExtensions();
        java.lang.String str57 = locale56.toLanguageTag();
        java.util.Calendar calendar58 = dateTime52.toCalendar(locale56);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone61.isLocalDateTimeGap(localDateTime63);
        org.joda.time.DateTime dateTime65 = dateTime52.withZone(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime67 = dateTime65.withZone(dateTimeZone66);
        org.joda.time.Interval interval68 = duration49.toIntervalTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Instant instant69 = instant42.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period70 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) instant69);
        boolean boolean71 = interval9.isBefore((org.joda.time.ReadableInstant) instant69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar53 and calendar58", (gregorianCalendar53.compareTo(calendar58) == 0) == gregorianCalendar53.equals(calendar58));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval8.contains((long) '4');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = dateTime13.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = dateTime32.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.Days days41 = org.joda.time.Days.ZERO;
        org.joda.time.Minutes minutes42 = days41.toStandardMinutes();
        org.joda.time.Minutes minutes43 = minutes40.minus(minutes42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar14 and calendar19", (gregorianCalendar14.compareTo(calendar19) == 0) == gregorianCalendar14.equals(calendar19));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        boolean boolean11 = instant9.isBefore((long) 100);
        org.joda.time.Instant instant14 = instant9.withDurationAdded((long) 10, (int) (short) 10);
        org.joda.time.DateTime dateTime15 = instant9.toDateTimeISO();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        boolean boolean18 = instant9.equals((java.lang.Object) periodType17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime15", (dateTime3.compareTo(dateTime15) == 0) == dateTime3.equals(dateTime15));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime dateTime6 = dateTime3.withWeekyear(0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        long long13 = dateTimeZone9.convertLocalToUTC((-259200000L), true);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        boolean boolean18 = dateTime16.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property19 = dateTime16.millisOfSecond();
        org.joda.time.DateTime dateTime20 = property19.getDateTime();
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.centuryOfEra();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) long13, chronology21);
        org.joda.time.Chronology chronology25 = chronology21.withUTC();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime6.toMutableDateTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        int int31 = dateTime29.getHourOfDay();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Calendar calendar35 = dateTime29.toCalendar(locale33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone38.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = dateTime29.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) -1);
        boolean boolean45 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar30 and calendar35", (gregorianCalendar30.compareTo(calendar35) == 0) == gregorianCalendar30.equals(calendar35));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes((int) 'x');
        org.joda.time.DateTime.Property property20 = dateTime17.era();
        org.joda.time.DateTime dateTime22 = dateTime17.plusMonths(36);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int24 = dateTime22.get(dateTimeFieldType23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfEvenCopy();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.ONE;
        org.joda.time.Seconds seconds22 = seconds21.negated();
        org.joda.time.Seconds seconds24 = seconds22.multipliedBy(6);
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) seconds22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property9.addToCopy((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        int int16 = dateTime14.getHourOfDay();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Calendar calendar20 = dateTime14.toCalendar(locale18);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        boolean boolean26 = dateTimeZone23.isStandardOffset((long) (byte) 100);
        boolean boolean28 = dateTimeZone23.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime14.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime48 = dateTime43.toLocalDateTime();
        boolean boolean49 = dateTimeZone36.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Calendar calendar55 = dateTime53.toCalendar(locale54);
        org.joda.time.DateTime dateTime57 = dateTime53.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime58 = dateTime53.toLocalDateTime();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime48, (org.joda.time.ReadablePartial) localDateTime58);
        boolean boolean60 = dateTimeZone32.isLocalDateTimeGap(localDateTime58);
        boolean boolean61 = dateTimeZone23.isLocalDateTimeGap(localDateTime58);
        int int62 = property9.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime18 = dateTime15.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = property5.getAsText(locale21);
        org.joda.time.DateTime dateTime24 = property5.setCopy("52");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        int int35 = dateTime34.getDayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime34.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) (short) 10);
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        int int42 = days40.getDays();
        org.joda.time.Days days43 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod44 = days43.toMutablePeriod();
        boolean boolean45 = days40.equals((java.lang.Object) mutablePeriod44);
        org.joda.time.DateTime dateTime46 = dateTime39.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getDisplayVariant();
        java.util.Calendar calendar49 = dateTime46.toCalendar(locale47);
        java.lang.String str50 = locale47.getDisplayScript();
        org.joda.time.DateTime dateTime51 = property5.setCopy("518", locale47);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        java.util.GregorianCalendar gregorianCalendar55 = dateTime54.toGregorianCalendar();
        int int56 = dateTime54.getHourOfDay();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Locale locale58 = locale57.stripExtensions();
        java.lang.String str59 = locale58.toLanguageTag();
        java.util.Calendar calendar60 = dateTime54.toCalendar(locale58);
        java.lang.String str61 = property5.getAsShortText(locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        java.lang.String str38 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime39 = dateTime34.withZoneRetainFields(dateTimeZone36);
        boolean boolean40 = instant25.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekOfWeekyear(6);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        java.util.GregorianCalendar gregorianCalendar46 = dateTime45.toGregorianCalendar();
        int int47 = dateTime45.getHourOfDay();
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = locale48.stripExtensions();
        java.lang.String str50 = locale49.toLanguageTag();
        java.util.Calendar calendar51 = dateTime45.toCalendar(locale49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime56 = null;
        boolean boolean57 = dateTimeZone54.isLocalDateTimeGap(localDateTime56);
        org.joda.time.DateTime dateTime58 = dateTime45.withZone(dateTimeZone54);
        int int60 = dateTimeZone54.getOffsetFromLocal((long) 86399);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime42.toMutableDateTime(dateTimeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar46 and calendar51", (gregorianCalendar46.compareTo(calendar51) == 0) == gregorianCalendar46.equals(calendar51));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.Duration duration31 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        mutablePeriod36.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval39 = null;
        mutablePeriod36.add(readableInterval39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.eras();
        int int42 = mutablePeriod36.get(durationFieldType41);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType41);
        mutablePeriod34.addSeconds((int) '#');
        mutablePeriod34.addMillis((int) (short) 10);
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        mutablePeriod34.add((long) (byte) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime17.toMutableDateTime(chronology52);
        int int55 = mutableDateTime54.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime2.withZoneRetainFields(dateTimeZone11);
        boolean boolean18 = dateTime2.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = property5.getAsText(locale21);
        int int23 = property5.getMaximumValueOverall();
        org.joda.time.DateTime dateTime24 = property5.withMinimumValue();
        int int25 = dateTime24.getMonthOfYear();
        org.joda.time.DateTime dateTime27 = dateTime24.withCenturyOfEra((int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.Interval interval20 = property5.toInterval();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.Chronology chronology29 = dateTime24.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.minutes();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfHalfday();
        int int34 = dateTimeField32.getLeapAmount((long) 59);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime43 = dateTime38.toLocalDateTime();
        int int44 = localDateTime43.size();
        int int45 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDateTime43);
        java.util.Locale locale46 = java.util.Locale.US;
        java.lang.String str47 = locale46.getLanguage();
        int int48 = dateTimeField32.getMaximumShortTextLength(locale46);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str50 = property5.getAsShortText(locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.Interval interval20 = property5.toInterval();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) (-1), periodType23, chronology24);
        org.joda.time.Period period26 = interval20.toPeriod(periodType23);
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        org.joda.time.Duration duration29 = days27.toStandardDuration();
        org.joda.time.Days days30 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod31 = days30.toMutablePeriod();
        org.joda.time.Duration duration32 = days30.toStandardDuration();
        boolean boolean33 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Days days34 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod35 = days34.toMutablePeriod();
        org.joda.time.Duration duration36 = days34.toStandardDuration();
        boolean boolean37 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period38 = duration36.toPeriod();
        long long39 = duration36.getStandardHours();
        org.joda.time.Duration duration40 = duration36.toDuration();
        org.joda.time.Interval interval41 = interval20.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Days days42 = duration40.toStandardDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime2.withZoneRetainFields(dateTimeZone11);
        long long19 = dateTimeZone11.convertUTCToLocal((long) 59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime8.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        long long11 = interval6.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone16);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval20 = interval18.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        long long29 = interval27.getStartMillis();
        boolean boolean30 = interval18.contains((org.joda.time.ReadableInterval) interval27);
        boolean boolean31 = interval6.abuts((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) 10L);
        org.joda.time.Interval interval34 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        int int39 = dateTime37.getHourOfDay();
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Calendar calendar43 = dateTime37.toCalendar(locale41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = dateTime37.withZone(dateTimeZone46);
        org.joda.time.Duration duration52 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration54 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration55 = duration52.minus((org.joda.time.ReadableDuration) duration54);
        long long56 = duration52.getMillis();
        org.joda.time.DateTime dateTime57 = dateTime37.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = dateTime61.toCalendar(locale62);
        org.joda.time.DateTime dateTime65 = dateTime61.plusMillis((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime61.toDateTimeISO();
        org.joda.time.Instant instant67 = dateTime61.toInstant();
        org.joda.time.Instant instant68 = instant67.toInstant();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        org.joda.time.DateTime dateTime76 = dateTime72.plusMillis((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime72.toDateTimeISO();
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType79 = periodType78.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant67, (org.joda.time.ReadableInstant) dateTime77, periodType78);
        org.joda.time.Instant instant83 = instant67.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = null;
        java.lang.String str85 = instant83.toString(dateTimeFormatter84);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) instant83);
        boolean boolean87 = interval34.equals((java.lang.Object) instant83);
        long long88 = interval34.toDurationMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar38 and calendar43", (gregorianCalendar38.compareTo(calendar43) == 0) == gregorianCalendar38.equals(calendar43));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration4 = duration1.minus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone7.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(0);
        int int14 = dateTime13.getDayOfWeek();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        int int16 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        int int24 = dateTime21.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology33.years();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime21.toMutableDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.millisOfDay();
        org.joda.time.Period period39 = new org.joda.time.Period((java.lang.Object) duration4, chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime15", (dateTime11.compareTo(dateTime15) == 0) == dateTime11.equals(dateTime15));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Days days11 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        boolean boolean16 = dateTime14.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property17 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str30 = locale24.getDisplayVariant(locale29);
        int int31 = property17.getMaximumTextLength(locale29);
        org.joda.time.DateTime dateTime32 = property17.roundHalfEvenCopy();
        org.joda.time.Interval interval33 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.DateTime dateTime36 = dateTime34.minusYears(59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar26", (gregorianCalendar21.compareTo(calendar26) == 0) == gregorianCalendar21.equals(calendar26));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((-6000));
        boolean boolean20 = dateTime15.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime26 = dateTime12.plusHours(22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTime29.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property32 = dateTime29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar36 = dateTime35.toGregorianCalendar();
        int int37 = dateTime35.getHourOfDay();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale39.toLanguageTag();
        java.util.Calendar calendar41 = dateTime35.toCalendar(locale39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str45 = locale39.getDisplayVariant(locale44);
        int int46 = property32.getMaximumTextLength(locale44);
        org.joda.time.DateTime dateTime47 = property32.roundHalfFloorCopy();
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = property32.getAsText(locale48);
        int int50 = property32.getMaximumValueOverall();
        org.joda.time.DateTime dateTime51 = property32.withMinimumValue();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime56.plusMonths((int) (short) -1);
        int int63 = dateTime62.getDayOfMonth();
        org.joda.time.Interval interval64 = duration52.toIntervalTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime65, readableInstant66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar36 and calendar41", (gregorianCalendar36.compareTo(calendar41) == 0) == gregorianCalendar36.equals(calendar41));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        mutablePeriod8.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval11 = null;
        mutablePeriod8.add(readableInterval11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        int int14 = mutablePeriod8.get(durationFieldType13);
        boolean boolean15 = mutablePeriod6.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DurationField durationField17 = durationFieldType13.getField(chronology16);
        java.lang.String str18 = durationFieldType13.getName();
        boolean boolean19 = period4.isSupported(durationFieldType13);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone24);
        boolean boolean28 = interval26.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone33);
        boolean boolean37 = interval35.isAfter(100L);
        long long38 = interval35.getEndMillis();
        org.joda.time.Interval interval39 = interval35.toInterval();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval39.withDurationBeforeEnd(readableDuration40);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType43 = periodType42.withMillisRemoved();
        org.joda.time.Period period44 = interval39.toPeriod(periodType43);
        org.joda.time.Chronology chronology45 = interval39.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.centuries();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.dayOfYear();
        org.joda.time.Interval interval48 = interval26.withChronology(chronology45);
        org.joda.time.DurationField durationField49 = durationFieldType13.getField(chronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField49 and durationField46", Math.signum(durationField49.compareTo(durationField46)) == -Math.signum(durationField46.compareTo(durationField49)));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime5.toGregorianCalendar();
        int int7 = dateTime5.getHourOfDay();
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Calendar calendar11 = dateTime5.toCalendar(locale9);
        org.joda.time.DateTime.Property property12 = dateTime5.minuteOfHour();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        org.joda.time.Days days16 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod17 = days16.toMutablePeriod();
        org.joda.time.Duration duration18 = days16.toStandardDuration();
        boolean boolean19 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology21 = dateTime5.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.centuries();
        org.joda.time.Period period23 = new org.joda.time.Period(0L, (long) 31, periodType2, chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar6 and calendar11", (gregorianCalendar6.compareTo(calendar11) == 0) == gregorianCalendar6.equals(calendar11));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getHourOfDay();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Calendar calendar10 = dateTime4.toCalendar(locale8);
        org.joda.time.DateTime.Property property11 = dateTime4.minuteOfHour();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        org.joda.time.Duration duration14 = days12.toStandardDuration();
        org.joda.time.Days days15 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod16 = days15.toMutablePeriod();
        org.joda.time.Duration duration17 = days15.toStandardDuration();
        boolean boolean18 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime4.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getRangeDurationType();
        boolean boolean23 = instant1.isSupported(dateTimeFieldType20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar5 and calendar10", (gregorianCalendar5.compareTo(calendar10) == 0) == gregorianCalendar5.equals(calendar10));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Chronology chronology18 = dateTime2.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = dateTime2.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        int int13 = dateTime10.getMillisOfSecond();
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration15 = duration14.toDuration();
        long long16 = duration14.getMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.ZERO;
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        long long19 = duration17.getMillis();
        int int20 = duration14.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property26 = dateTime23.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        int int31 = dateTime29.getHourOfDay();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Calendar calendar35 = dateTime29.toCalendar(locale33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str39 = locale33.getDisplayVariant(locale38);
        int int40 = property26.getMaximumTextLength(locale38);
        org.joda.time.DateTime dateTime41 = property26.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime43 = property26.addWrapFieldToCopy(59);
        org.joda.time.Period period44 = duration14.toPeriodTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType45.getField(chronology49);
        java.lang.String str52 = dateTimeField50.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime61 = dateTime56.toLocalDateTime();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale62.getDisplayVariant();
        java.lang.String str64 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int66 = localDateTime61.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime68 = dateTime43.withField(dateTimeFieldType65, 6);
        int int69 = dateTime10.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime70 = dateTime10.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar30 and calendar35", (gregorianCalendar30.compareTo(calendar35) == 0) == gregorianCalendar30.equals(calendar35));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType14 = periodType13.withMillisRemoved();
        org.joda.time.Period period15 = interval10.toPeriod(periodType14);
        org.joda.time.Chronology chronology16 = interval10.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = dateTimeField18.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean24 = dateTime22.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property25 = dateTime22.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime28.toGregorianCalendar();
        int int30 = dateTime28.getHourOfDay();
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale32.toLanguageTag();
        java.util.Calendar calendar34 = dateTime28.toCalendar(locale32);
        java.util.Locale locale37 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str38 = locale32.getDisplayVariant(locale37);
        int int39 = property25.getMaximumTextLength(locale37);
        org.joda.time.DurationField durationField40 = property25.getLeapDurationField();
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = property25.getAsShortText(locale42);
        int int45 = dateTimeField18.getMaximumTextLength(locale42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar29 and calendar34", (gregorianCalendar29.compareTo(calendar34) == 0) == gregorianCalendar29.equals(calendar34));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        long long18 = dateTimeZone11.adjustOffset(28117244232000L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean19 = dateTime2.isSupported(dateTimeFieldType18);
        org.joda.time.DateTime.Property property20 = dateTime2.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime19 = dateTime15.minus((long) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean24 = dateTimeZone21.isStandardOffset((long) (byte) 100);
        boolean boolean26 = dateTimeZone21.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        boolean boolean49 = dateTime47.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes50 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration51 = minutes50.toStandardDuration();
        org.joda.time.Duration duration52 = minutes50.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration52);
        int int54 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime55 = dateTime15.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime57 = dateTime55.plusDays(7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.Duration duration1 = days0.toStandardDuration();
        org.joda.time.Days days3 = days0.plus(4);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        int int8 = dateTime6.getHourOfDay();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = locale10.toLanguageTag();
        java.util.Calendar calendar12 = dateTime6.toCalendar(locale10);
        org.joda.time.DateTime.Property property13 = dateTime6.minuteOfHour();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = dateTime6.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getRangeDurationType();
        boolean boolean25 = days0.isSupported(durationFieldType24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar7 and calendar12", (gregorianCalendar7.compareTo(calendar12) == 0) == gregorianCalendar7.equals(calendar12));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        java.util.Locale.setDefault(locale6);
        java.lang.String str10 = locale6.getISO3Country();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DurationField durationField11 = dateTimeField10.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime8.toGregorianCalendar();
        org.joda.time.DateTime.Property property13 = dateTime8.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType33 = periodType32.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant21, (org.joda.time.ReadableInstant) dateTime31, periodType32);
        org.joda.time.DateTime dateTime35 = dateTime8.minus((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, readableDuration36, periodType37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) '4', (long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime41 = dateTime36.toLocalDateTime();
        boolean boolean42 = dateTimeZone29.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTime dateTime43 = dateTime23.withZone(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime47.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime56.toDateTimeISO();
        org.joda.time.Instant instant62 = dateTime56.toInstant();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime66.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        boolean boolean76 = dateTime74.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes77 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration78 = minutes77.toStandardDuration();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration78);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) 1, (long) (short) -1, periodType82);
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration78, periodType82);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime23, periodType82);
        boolean boolean86 = instant8.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime87 = instant8.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime88 = instant8.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime87", (dateTime7.compareTo(dateTime87) == 0) == dateTime7.equals(dateTime87));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        org.joda.time.Duration duration16 = minutes14.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.plusMillis((int) '#');
        int int53 = instant41.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTimeISO();
        org.joda.time.Instant instant63 = dateTime57.toInstant();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime66 = dateTime57.plusMillis((int) (short) 1);
        org.joda.time.Interval interval67 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval(obj69, chronology70);
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType68.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.yearOfEra();
        org.joda.time.DateTime dateTime75 = dateTime57.toDateTime(chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime75", (dateTime3.compareTo(dateTime75) == 0) == dateTime3.equals(dateTime75));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        boolean boolean11 = instant9.isBefore((long) 100);
        org.joda.time.Instant instant14 = instant9.withDurationAdded((long) 10, (int) (short) 10);
        org.joda.time.DateTime dateTime15 = instant9.toDateTimeISO();
        int int16 = dateTime15.getEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.Instant instant43 = instant27.withMillis(100L);
        org.joda.time.Days days44 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime15", (dateTime3.compareTo(dateTime15) == 0) == dateTime3.equals(dateTime15));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.DateTime dateTime27 = instant24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.monthOfYear();
        org.joda.time.DateTime dateTime30 = dateTime27.plusHours((int) 'x');
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears(11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime27", (instant24.compareTo(dateTime27) == 0) == instant24.equals(dateTime27));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.plus((-1));
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        boolean boolean4 = minutes2.isLessThan(minutes3);
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        boolean boolean18 = mutableInterval16.isBefore((long) 59);
        boolean boolean19 = mutableInterval16.containsNow();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) mutableInterval16);
        int[] intArray22 = chronology8.get((org.joda.time.ReadablePeriod) minutes20, (long) 8);
        org.joda.time.Minutes minutes23 = minutes3.minus(minutes20);
        org.joda.time.Minutes minutes25 = minutes20.minus((int) (byte) -1);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        boolean boolean39 = mutableInterval37.isBefore((long) 59);
        boolean boolean40 = mutableInterval37.containsNow();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) mutableInterval37);
        int[] intArray43 = chronology29.get((org.joda.time.ReadablePeriod) minutes41, (long) 8);
        org.joda.time.Minutes minutes44 = minutes20.minus(minutes41);
        org.joda.time.DurationFieldType durationFieldType45 = minutes20.getFieldType();
        org.joda.time.DurationFieldType durationFieldType46 = minutes20.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = dateTime50.toCalendar(locale51);
        org.joda.time.DateTime dateTime54 = dateTime50.plusMillis((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime50.toDateTimeISO();
        org.joda.time.Instant instant56 = dateTime50.toInstant();
        boolean boolean58 = instant56.isBefore((long) 100);
        org.joda.time.Instant instant61 = instant56.withDurationAdded((long) 10, (int) (short) 10);
        org.joda.time.DateTime dateTime62 = instant56.toDateTimeISO();
        int int63 = dateTime62.getEra();
        org.joda.time.DateTime dateTime66 = dateTime62.withDurationAdded((long) (-8), (-8));
        boolean boolean67 = minutes20.equals((java.lang.Object) (-8));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime62", (dateTime14.compareTo(dateTime62) == 0) == dateTime14.equals(dateTime62));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.Duration duration31 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        mutablePeriod36.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval39 = null;
        mutablePeriod36.add(readableInterval39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.eras();
        int int42 = mutablePeriod36.get(durationFieldType41);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType41);
        mutablePeriod34.addSeconds((int) '#');
        mutablePeriod34.addMillis((int) (short) 10);
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        mutablePeriod34.add((long) (byte) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime17.toMutableDateTime(chronology52);
        java.lang.String str56 = dateTime17.toString("126");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and mutableDateTime54", (dateTime17.compareTo(mutableDateTime54) == 0) == dateTime17.equals(mutableDateTime54));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.Instant instant30 = dateTime24.toInstant();
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        boolean boolean41 = instant31.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant45 = instant31.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        boolean boolean47 = instant45.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant57 = dateTime51.toInstant();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant45, (org.joda.time.ReadableInstant) dateTime51, periodType58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadablePeriod) period59);
        long long61 = instant10.getMillis();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Calendar calendar69 = dateTime67.toCalendar(locale68);
        org.joda.time.DateTime dateTime71 = dateTime67.plusMillis((int) '4');
        org.joda.time.Chronology chronology72 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.dayOfWeek();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 12, (long) 3, chronology72);
        org.joda.time.Period period76 = period74.plusDays((int) (short) 0);
        org.joda.time.Duration duration77 = period76.toStandardDuration();
        org.joda.time.ReadableDuration readableDuration78 = null;
        boolean boolean79 = duration77.isShorterThan(readableDuration78);
        org.joda.time.Instant instant80 = instant10.plus(readableDuration78);
        org.joda.time.MutableDateTime mutableDateTime81 = instant80.toMutableDateTime();
        org.joda.time.Instant instant83 = instant80.plus((long) 70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime81", (dateTime3.compareTo(mutableDateTime81) == 0) == dateTime3.equals(mutableDateTime81));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.Instant instant29 = instant24.withDurationAdded(19L, 12);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        int int35 = dateTime33.getHourOfDay();
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.lang.String str38 = locale37.toLanguageTag();
        java.util.Calendar calendar39 = dateTime33.toCalendar(locale37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime44 = null;
        boolean boolean45 = dateTimeZone42.isLocalDateTimeGap(localDateTime44);
        org.joda.time.DateTime dateTime46 = dateTime33.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime48 = dateTime46.withZone(dateTimeZone47);
        int int49 = dateTime48.getDayOfMonth();
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration52 = period51.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime57 = null;
        boolean boolean58 = dateTimeZone55.isLocalDateTimeGap(localDateTime57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime61 = dateTime59.withHourOfDay(0);
        org.joda.time.Duration duration62 = period51.toDurationTo((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean63 = dateTime48.equals((java.lang.Object) dateTime59);
        int int64 = instant29.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime.Property property65 = dateTime59.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and mutableDateTime30", (instant29.compareTo(mutableDateTime30) == 0) == instant29.equals(mutableDateTime30));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours(9);
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and dateTime26", (instant25.compareTo(dateTime26) == 0) == instant25.equals(dateTime26));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant27 = instant25.plus((long) (byte) 0);
        org.joda.time.Instant instant28 = instant25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTimeISO();
        org.joda.time.Instant instant38 = dateTime32.toInstant();
        boolean boolean40 = instant38.isBefore((long) 100);
        org.joda.time.Instant instant43 = instant38.withDurationAdded((long) 10, (int) (short) 10);
        org.joda.time.DateTime dateTime44 = instant38.toDateTimeISO();
        int int45 = dateTime44.getEra();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime49.toDateTimeISO();
        org.joda.time.Instant instant55 = dateTime49.toInstant();
        org.joda.time.Instant instant56 = instant55.toInstant();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = null;
        boolean boolean62 = dateTimeZone59.isLocalDateTimeGap(localDateTime61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = dateTime63.withHourOfDay(0);
        boolean boolean66 = instant56.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant70 = instant56.withDurationAdded((org.joda.time.ReadableDuration) duration68, (-1));
        org.joda.time.Instant instant72 = instant56.withMillis(100L);
        org.joda.time.Days days73 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) instant72);
        boolean boolean74 = instant25.isBefore((org.joda.time.ReadableInstant) instant72);
        org.joda.time.Instant instant76 = instant25.plus((long) 83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime44", (dateTime3.compareTo(dateTime44) == 0) == dateTime3.equals(dateTime44));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        boolean boolean11 = instant9.isBefore((long) 100);
        org.joda.time.Instant instant14 = instant9.withDurationAdded((long) 10, (int) (short) 10);
        org.joda.time.DateTime dateTime15 = instant9.toDateTimeISO();
        int int16 = dateTime15.getEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.Instant instant43 = instant27.withMillis(100L);
        org.joda.time.Days days44 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.Days days46 = days44.dividedBy(22);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = days46.get(durationFieldType47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime15", (dateTime3.compareTo(dateTime15) == 0) == dateTime3.equals(dateTime15));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime8.toGregorianCalendar();
        org.joda.time.DateTime dateTime14 = dateTime8.minusMillis(7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        long long22 = dateTimeField20.roundHalfEven((long) 59);
        java.lang.String str23 = dateTimeField20.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone26.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime38 = dateTime33.toLocalDateTime();
        boolean boolean39 = dateTimeZone26.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime48 = dateTime43.toLocalDateTime();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime38, (org.joda.time.ReadablePartial) localDateTime48);
        int int50 = localDateTime48.size();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = null;
        boolean boolean56 = dateTimeZone53.isLocalDateTimeGap(localDateTime55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime57.withHourOfDay(0);
        int int60 = dateTime59.getDayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime59.plusYears((int) (short) 1);
        org.joda.time.DateTime.Property property63 = dateTime59.secondOfDay();
        org.joda.time.DateTime dateTime65 = property63.addWrapFieldToCopy((int) (short) 0);
        java.util.Locale locale67 = new java.util.Locale("P6DT35S");
        int int68 = property63.getMaximumShortTextLength(locale67);
        java.lang.String str69 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime48, locale67);
        int int70 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime48);
        int int72 = dateTimeField10.getMinimumValue(880L);
        org.joda.time.DurationField durationField73 = dateTimeField10.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField73, and durationField9", !(durationField9.compareTo(durationField73) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField73.compareTo(durationField9))));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 100);
        boolean boolean21 = dateTimeZone16.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.Duration duration47 = minutes45.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration47);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime50 = dateTime3.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime50.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime50.withYear(2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime53", (dateTime50.compareTo(dateTime53) == 0) == dateTime50.equals(dateTime53));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.Instant instant36 = dateTime30.toInstant();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime30, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withWeeksRemoved();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period42 = mutableInterval40.toPeriod(periodType41);
        org.joda.time.Hours hours43 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Hours hours45 = hours43.dividedBy(856);
        org.joda.time.DurationFieldType durationFieldType46 = hours45.getFieldType();
        int int47 = periodType37.indexOf(durationFieldType46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.clockhourOfDay();
        java.lang.String str59 = chronology56.toString();
        org.joda.time.DurationField durationField60 = durationFieldType46.getField(chronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField57, durationField60, and durationField57", !(durationField57.compareTo(durationField60) == 0) || (Math.signum(durationField57.compareTo(durationField57)) == Math.signum(durationField60.compareTo(durationField57))));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology4);
        org.joda.time.DurationField durationField6 = chronology4.millis();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.secondOfMinute();
        boolean boolean8 = dateTimeField7.isSupported();
        int int10 = dateTimeField7.getMaximumValue((-52L));
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        boolean boolean16 = dateTime14.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property17 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str30 = locale24.getDisplayVariant(locale29);
        int int31 = property17.getMaximumTextLength(locale29);
        org.joda.time.DateTime dateTime32 = property17.roundHalfFloorCopy();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = property17.getAsText(locale33);
        org.joda.time.DateTime dateTime36 = property17.setCopy("52");
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone40.isLocalDateTimeGap(localDateTime42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime44.withHourOfDay(0);
        int int47 = dateTime46.getDayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime46.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) (short) 10);
        org.joda.time.Days days52 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod53 = days52.toMutablePeriod();
        int int54 = days52.getDays();
        org.joda.time.Days days55 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod56 = days55.toMutablePeriod();
        boolean boolean57 = days52.equals((java.lang.Object) mutablePeriod56);
        org.joda.time.DateTime dateTime58 = dateTime51.plus((org.joda.time.ReadablePeriod) mutablePeriod56);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getDisplayVariant();
        java.util.Calendar calendar61 = dateTime58.toCalendar(locale59);
        java.lang.String str62 = locale59.getDisplayScript();
        org.joda.time.DateTime dateTime63 = property17.setCopy("518", locale59);
        java.lang.String str64 = dateTimeField7.getAsShortText(59, locale59);
        long long66 = dateTimeField7.roundFloor(518405299L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar26", (gregorianCalendar21.compareTo(calendar26) == 0) == gregorianCalendar21.equals(calendar26));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        int int19 = dateTime17.getHourOfDay();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar calendar23 = dateTime17.toCalendar(locale21);
        java.util.Locale locale26 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str27 = locale21.getDisplayVariant(locale26);
        int int28 = property14.getMaximumTextLength(locale26);
        org.joda.time.DurationField durationField29 = property14.getLeapDurationField();
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.lang.String str33 = property14.getAsShortText(locale31);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = locale34.stripExtensions();
        int int36 = property14.getMaximumTextLength(locale35);
        java.util.Calendar calendar37 = dateTime8.toCalendar(locale35);
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("277");
        java.lang.String str40 = locale35.getDisplayLanguage(locale39);
        java.util.Locale locale41 = locale39.stripExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar18 and calendar23", (gregorianCalendar18.compareTo(calendar23) == 0) == gregorianCalendar18.equals(calendar23));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime8 = interval6.getStart();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        boolean boolean17 = interval6.isBefore((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone22);
        org.joda.time.MutableInterval mutableInterval25 = interval24.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval26 = interval24.toMutableInterval();
        boolean boolean28 = mutableInterval26.contains((long) '4');
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        int int33 = dateTime31.getHourOfDay();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale35.toLanguageTag();
        java.util.Calendar calendar37 = dateTime31.toCalendar(locale35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone40.isLocalDateTimeGap(localDateTime42);
        org.joda.time.DateTime dateTime44 = dateTime31.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime44.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = dateTime50.toCalendar(locale51);
        org.joda.time.DateTime dateTime54 = dateTime50.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime55 = dateTime50.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        mutableInterval26.setEnd((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval58 = mutableInterval26.copy();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone63);
        boolean boolean67 = interval65.isAfter(100L);
        long long68 = interval65.getEndMillis();
        org.joda.time.Interval interval69 = interval65.toInterval();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone74);
        org.joda.time.MutableInterval mutableInterval77 = interval76.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval78 = interval76.toMutableInterval();
        org.joda.time.Interval interval79 = interval69.overlap((org.joda.time.ReadableInterval) mutableInterval78);
        boolean boolean80 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) interval79);
        boolean boolean81 = mutableInterval16.isBefore((org.joda.time.ReadableInterval) mutableInterval58);
        mutableInterval16.setEndMillis(4459728132L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar32 and calendar37", (gregorianCalendar32.compareTo(calendar37) == 0) == gregorianCalendar32.equals(calendar37));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval8.contains((long) '4');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = dateTime13.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = dateTime32.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval8.copy();
        org.joda.time.Duration duration41 = org.joda.time.Duration.ZERO;
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        mutableInterval40.setDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Interval interval44 = mutableInterval40.toInterval();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone49);
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.DateTime dateTime53 = interval51.getStart();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone58);
        org.joda.time.MutableInterval mutableInterval61 = interval60.toMutableInterval();
        boolean boolean62 = interval51.isBefore((org.joda.time.ReadableInterval) mutableInterval61);
        mutableInterval61.setStartMillis((long) (short) -1);
        long long65 = mutableInterval61.toDurationMillis();
        org.joda.time.Hours hours66 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours68 = hours66.plus((int) (byte) 100);
        org.joda.time.Hours hours70 = hours66.minus((int) (byte) 10);
        org.joda.time.Hours hours72 = hours66.dividedBy(6);
        org.joda.time.DurationFieldType durationFieldType73 = hours66.getFieldType();
        mutableInterval61.setPeriodAfterStart((org.joda.time.ReadablePeriod) hours66);
        boolean boolean75 = interval44.isAfter((org.joda.time.ReadableInterval) mutableInterval61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar14 and calendar19", (gregorianCalendar14.compareTo(calendar19) == 0) == gregorianCalendar14.equals(calendar19));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.Duration duration31 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        mutablePeriod36.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval39 = null;
        mutablePeriod36.add(readableInterval39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.eras();
        int int42 = mutablePeriod36.get(durationFieldType41);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType41);
        mutablePeriod34.addSeconds((int) '#');
        mutablePeriod34.addMillis((int) (short) 10);
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        mutablePeriod34.add((long) (byte) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime17.toMutableDateTime(chronology52);
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration57 = period56.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone60.isLocalDateTimeGap(localDateTime62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime66 = dateTime64.withHourOfDay(0);
        int int67 = dateTime66.getDayOfWeek();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        int int69 = dateTime66.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period70 = duration57.toPeriodTo((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = mutableDateTime54.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime72 = dateTime68.toDateTimeISO();
        org.joda.time.DateTime dateTime75 = dateTime72.withDurationAdded((long) 52, 102);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = dateTime14.toLocalDateTime();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getVariant();
        java.util.Calendar calendar22 = dateTime14.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = property9.setCopy("52", locale20);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        int int35 = dateTime34.getDayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) ' ');
        org.joda.time.DateTime.Property property38 = dateTime37.secondOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        mutablePeriod43.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval46 = null;
        mutablePeriod43.add(readableInterval46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.eras();
        int int49 = mutablePeriod43.get(durationFieldType48);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType48);
        mutablePeriod41.addSeconds((int) '#');
        mutablePeriod41.addSeconds((int) (short) 0);
        java.lang.String str55 = mutablePeriod41.toString();
        org.joda.time.PeriodType periodType56 = mutablePeriod41.getPeriodType();
        org.joda.time.PeriodType periodType57 = periodType56.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, readableInstant39, periodType56);
        java.lang.Object obj59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval(obj59, chronology60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.Chronology chronology70 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period74 = mutableInterval72.toPeriod(periodType73);
        int[] intArray77 = chronology70.get((org.joda.time.ReadablePeriod) period74, (long) (byte) 0, (long) 12);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((java.lang.Object) interval61, chronology70);
        org.joda.time.DurationField durationField79 = chronology70.minutes();
        org.joda.time.DateTimeField dateTimeField80 = chronology70.hourOfHalfday();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 488, 525949L, periodType56, chronology70);
        org.joda.time.DateTime dateTime82 = dateTime23.toDateTime(chronology70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getHourOfDay();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.toLanguageTag();
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale15);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        boolean boolean25 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime29 = dateTime3.minusMinutes(5);
        org.joda.time.DateTime.Property property30 = dateTime3.secondOfMinute();
        java.lang.String str31 = property30.getAsString();
        org.joda.time.DateTime dateTime32 = property30.getDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar12 and calendar17", (gregorianCalendar12.compareTo(calendar17) == 0) == gregorianCalendar12.equals(calendar17));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.lang.String str12 = dateTimeZone10.toString();
        org.joda.time.DateTime dateTime13 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime14 = dateTime8.toLocalDateTime();
        org.joda.time.DateTime dateTime16 = dateTime8.minusDays((-100));
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone21);
        boolean boolean25 = interval23.isAfter(100L);
        long long26 = interval23.getEndMillis();
        org.joda.time.Interval interval27 = interval23.toInterval();
        org.joda.time.Days days28 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        boolean boolean33 = dateTime31.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime31.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        int int39 = dateTime37.getHourOfDay();
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Calendar calendar43 = dateTime37.toCalendar(locale41);
        java.util.Locale locale46 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str47 = locale41.getDisplayVariant(locale46);
        int int48 = property34.getMaximumTextLength(locale46);
        org.joda.time.DateTime dateTime49 = property34.roundHalfEvenCopy();
        org.joda.time.Interval interval50 = interval23.withEnd((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, (long) (short) -1, periodType54);
        mutablePeriod55.setSeconds((int) ' ');
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = mutablePeriod55.getFieldTypes();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.forFields(durationFieldTypeArray58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime51, periodType59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar38 and calendar43", (gregorianCalendar38.compareTo(calendar43) == 0) == gregorianCalendar38.equals(calendar43));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime22 = property5.addWrapFieldToCopy(59);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) 5);
        org.joda.time.DateTime dateTime26 = dateTime22.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration25.minus(readableDuration27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.Duration duration17 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration20 = duration17.minus((org.joda.time.ReadableDuration) duration19);
        long long21 = duration17.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime2.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.Instant instant32 = dateTime26.toInstant();
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType44 = periodType43.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime42, periodType43);
        org.joda.time.Instant instant48 = instant32.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = instant48.toString(dateTimeFormatter49);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) instant48);
        org.joda.time.Chronology chronology52 = instant48.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        boolean boolean54 = durationField53.isPrecise();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime23.toGregorianCalendar();
        int int25 = dateTime23.getHourOfDay();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale27.toLanguageTag();
        java.util.Calendar calendar29 = dateTime23.toCalendar(locale27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTime dateTime36 = dateTime23.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.minutes();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.clockhourOfHalfday();
        int int53 = dateTimeField51.getLeapAmount((long) 59);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime62 = dateTime57.toLocalDateTime();
        int int63 = localDateTime62.size();
        int int64 = dateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTime dateTime65 = dateTime38.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMonths(1);
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfYear(32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = property5.getAsText(locale21);
        org.joda.time.DateTime dateTime24 = property5.setCopy("52");
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType26 = periodType25.withHoursRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone31.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        int int38 = dateTime37.getDayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime37.minusWeeks((int) (short) 100);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType42 = minutes41.getFieldType();
        org.joda.time.DateTime dateTime44 = dateTime40.withFieldAdded(durationFieldType42, (-8));
        int int45 = period28.get(durationFieldType42);
        boolean boolean46 = periodType25.isSupported(durationFieldType42);
        boolean boolean47 = property5.equals((java.lang.Object) durationFieldType42);
        int int48 = property5.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) -1);
        org.joda.time.DateTime.Property property18 = dateTime17.weekyear();
        long long19 = property18.remainder();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Chronology chronology18 = dateTime2.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.era();
        long long22 = dateTimeField20.roundFloor(1613918860172L);
        long long24 = dateTimeField20.remainder(1645404496893L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        long long11 = interval6.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone16);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval20 = interval18.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        long long29 = interval27.getStartMillis();
        boolean boolean30 = interval18.contains((org.joda.time.ReadableInterval) interval27);
        boolean boolean31 = interval6.abuts((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) 10L);
        org.joda.time.Interval interval34 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        int int39 = dateTime37.getHourOfDay();
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Calendar calendar43 = dateTime37.toCalendar(locale41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = dateTime37.withZone(dateTimeZone46);
        org.joda.time.Duration duration52 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration54 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration55 = duration52.minus((org.joda.time.ReadableDuration) duration54);
        long long56 = duration52.getMillis();
        org.joda.time.DateTime dateTime57 = dateTime37.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = dateTime61.toCalendar(locale62);
        org.joda.time.DateTime dateTime65 = dateTime61.plusMillis((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime61.toDateTimeISO();
        org.joda.time.Instant instant67 = dateTime61.toInstant();
        org.joda.time.Instant instant68 = instant67.toInstant();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        org.joda.time.DateTime dateTime76 = dateTime72.plusMillis((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime72.toDateTimeISO();
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType79 = periodType78.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant67, (org.joda.time.ReadableInstant) dateTime77, periodType78);
        org.joda.time.Instant instant83 = instant67.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = null;
        java.lang.String str85 = instant83.toString(dateTimeFormatter84);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) instant83);
        boolean boolean87 = interval34.equals((java.lang.Object) instant83);
        org.joda.time.DateTime dateTime88 = interval34.getStart();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar38 and calendar43", (gregorianCalendar38.compareTo(calendar43) == 0) == gregorianCalendar38.equals(calendar43));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime26 = dateTime12.plusHours(22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTime29.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property32 = dateTime29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar36 = dateTime35.toGregorianCalendar();
        int int37 = dateTime35.getHourOfDay();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale39.toLanguageTag();
        java.util.Calendar calendar41 = dateTime35.toCalendar(locale39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str45 = locale39.getDisplayVariant(locale44);
        int int46 = property32.getMaximumTextLength(locale44);
        org.joda.time.DateTime dateTime47 = property32.roundHalfFloorCopy();
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = property32.getAsText(locale48);
        int int50 = property32.getMaximumValueOverall();
        org.joda.time.DateTime dateTime51 = property32.withMinimumValue();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime51.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMonths(21);
        int int57 = dateTime54.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar36 and calendar41", (gregorianCalendar36.compareTo(calendar41) == 0) == gregorianCalendar36.equals(calendar41));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        java.lang.String str10 = dateTime6.toString("52");
        org.joda.time.Hours hours11 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours13 = hours11.plus((int) (byte) 100);
        org.joda.time.Hours hours15 = hours11.minus((int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod16 = hours11.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        boolean boolean27 = interval25.isAfter(100L);
        long long28 = interval25.getEndMillis();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval29.withDurationBeforeEnd(readableDuration30);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType33 = periodType32.withMillisRemoved();
        org.joda.time.Period period34 = interval29.toPeriod(periodType33);
        org.joda.time.Chronology chronology35 = interval29.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.centuries();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekOfWeekyear();
        mutablePeriod16.setPeriod(31556952000L, (long) 0, chronology35);
        org.joda.time.DateTime dateTime39 = dateTime6.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        boolean boolean46 = dateTime44.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property47 = dateTime44.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        java.util.GregorianCalendar gregorianCalendar51 = dateTime50.toGregorianCalendar();
        int int52 = dateTime50.getHourOfDay();
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = locale54.toLanguageTag();
        java.util.Calendar calendar56 = dateTime50.toCalendar(locale54);
        java.util.Locale locale59 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str60 = locale54.getDisplayVariant(locale59);
        int int61 = property47.getMaximumTextLength(locale59);
        java.lang.String str62 = dateTimeField40.getAsText(0, locale59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar51 and calendar56", (gregorianCalendar51.compareTo(calendar56) == 0) == gregorianCalendar51.equals(calendar56));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        org.joda.time.Hours hours0 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours2 = hours0.plus((int) (byte) 100);
        org.joda.time.Hours hours4 = hours0.minus((int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod5 = hours4.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        boolean boolean10 = dateTime8.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property11 = dateTime8.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        int int16 = dateTime14.getHourOfDay();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Calendar calendar20 = dateTime14.toCalendar(locale18);
        java.util.Locale locale23 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str24 = locale18.getDisplayVariant(locale23);
        int int25 = property11.getMaximumTextLength(locale23);
        org.joda.time.Interval interval26 = property11.toInterval();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType29 = periodType28.withMillisRemoved();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (-1), periodType29, chronology30);
        org.joda.time.Period period32 = interval26.toPeriod(periodType29);
        org.joda.time.DateTime dateTime33 = interval26.getEnd();
        java.util.Date date34 = dateTime33.toDate();
        boolean boolean35 = mutablePeriod5.equals((java.lang.Object) dateTime33);
        org.joda.time.Chronology chronology36 = dateTime33.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar15 and calendar20", (gregorianCalendar15.compareTo(calendar20) == 0) == gregorianCalendar15.equals(calendar20));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Chronology chronology18 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DurationField durationField20 = property5.getLeapDurationField();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = property5.getAsShortText(locale22);
        org.joda.time.DateTime dateTime25 = property5.roundCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 10, (long) (byte) 0);
        mutablePeriod28.addSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Days days34 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod35 = days34.toMutablePeriod();
        org.joda.time.Days days36 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod37 = days36.toMutablePeriod();
        mutablePeriod37.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval40 = null;
        mutablePeriod37.add(readableInterval40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.eras();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType42);
        mutablePeriod35.addSeconds((int) '#');
        mutablePeriod35.addSeconds((int) (short) 0);
        java.lang.String str49 = mutablePeriod35.toString();
        org.joda.time.PeriodType periodType50 = mutablePeriod35.getPeriodType();
        mutablePeriod35.addDays((int) (short) 100);
        mutablePeriod35.clear();
        mutablePeriod35.setPeriod(1585442213488L, (long) 31);
        java.lang.Object obj57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval(obj57, chronology58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.Chronology chronology68 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period72 = mutableInterval70.toPeriod(periodType71);
        int[] intArray75 = chronology68.get((org.joda.time.ReadablePeriod) period72, (long) (byte) 0, (long) 12);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((java.lang.Object) interval59, chronology68);
        org.joda.time.DurationField durationField77 = chronology68.minutes();
        org.joda.time.Period period78 = new org.joda.time.Period((java.lang.Object) mutablePeriod35, chronology68);
        boolean boolean79 = dateTimeFieldType33.isSupported(chronology68);
        mutablePeriod28.setPeriod(10368000000L, 0L, chronology68);
        org.joda.time.DateTime dateTime81 = dateTime25.toDateTime(chronology68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.UK;
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withLocale(locale3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter4.withParseType(periodType6);
        boolean boolean9 = periodFormatter8.isParser();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTime12.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property15 = dateTime12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        int int20 = dateTime18.getHourOfDay();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Calendar calendar24 = dateTime18.toCalendar(locale22);
        java.util.Locale locale27 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str28 = locale22.getDisplayVariant(locale27);
        int int29 = property15.getMaximumTextLength(locale27);
        org.joda.time.format.PeriodFormatter periodFormatter30 = periodFormatter8.withLocale(locale27);
        org.joda.time.format.PeriodParser periodParser31 = periodFormatter8.getParser();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar19 and calendar24", (gregorianCalendar19.compareTo(calendar24) == 0) == gregorianCalendar19.equals(calendar24));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Days days11 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        boolean boolean16 = dateTime14.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property17 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str30 = locale24.getDisplayVariant(locale29);
        int int31 = property17.getMaximumTextLength(locale29);
        org.joda.time.DateTime dateTime32 = property17.roundHalfEvenCopy();
        org.joda.time.Interval interval33 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone38);
        boolean boolean42 = interval40.isAfter(100L);
        long long43 = interval40.getEndMillis();
        org.joda.time.Interval interval44 = interval6.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Days days47 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod48 = days47.toMutablePeriod();
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        mutablePeriod50.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval53 = null;
        mutablePeriod50.add(readableInterval53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.eras();
        int int56 = mutablePeriod50.get(durationFieldType55);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType55);
        mutablePeriod48.addSeconds((int) '#');
        mutablePeriod48.addSeconds((int) (short) 0);
        java.lang.String str62 = mutablePeriod48.toString();
        org.joda.time.PeriodType periodType63 = mutablePeriod48.getPeriodType();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 53249647, 120L, periodType63);
        org.joda.time.Period period65 = interval40.toPeriod(periodType63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar26", (gregorianCalendar21.compareTo(calendar26) == 0) == gregorianCalendar21.equals(calendar26));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = property5.getAsText(locale21);
        int int23 = property5.getMaximumValueOverall();
        org.joda.time.DateTime dateTime24 = property5.withMinimumValue();
        java.lang.String str25 = property5.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 100);
        boolean boolean21 = dateTimeZone16.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.Duration duration47 = minutes45.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration47);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime50 = dateTime3.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime50.withZone(dateTimeZone52);
        int int55 = dateTimeZone52.getOffsetFromLocal(139L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime53", (dateTime3.compareTo(dateTime53) == 0) == dateTime3.equals(dateTime53));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType8.getField(chronology11);
        java.lang.String str13 = durationField12.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology22.years();
        long long27 = durationField24.add(2L, 100);
        long long28 = durationField24.getUnitMillis();
        int int29 = durationField12.compareTo(durationField24);
        org.joda.time.DurationFieldType durationFieldType30 = durationField12.getType();
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10);
        int int33 = period32.getSeconds();
        org.joda.time.Period period35 = period32.minusHours(100);
        int int36 = period35.getMillis();
        org.joda.time.Period period38 = period35.plusDays((int) 'a');
        org.joda.time.Period period39 = period35.negated();
        org.joda.time.Duration duration40 = period39.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval(obj43, chronology44);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType42.getField(chronology46);
        org.joda.time.DurationField durationField48 = durationFieldType41.getField(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.dayOfWeek();
        org.joda.time.Period period50 = duration40.toPeriod(chronology46);
        org.joda.time.DurationField durationField51 = chronology46.days();
        int int52 = durationField12.compareTo(durationField51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField24, and durationField48", !(durationField12.compareTo(durationField24) == 0) || (Math.signum(durationField12.compareTo(durationField48)) == Math.signum(durationField24.compareTo(durationField48))));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 100);
        boolean boolean21 = dateTimeZone16.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.Duration duration47 = minutes45.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration47);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime50 = dateTime3.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime50.withZone(dateTimeZone52);
        long long55 = dateTimeZone52.convertUTCToLocal((long) 'a');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime53", (dateTime3.compareTo(dateTime53) == 0) == dateTime3.equals(dateTime53));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        int int8 = dateTime7.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long13 = dateTimeZone10.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone10);
        int int16 = dateTimeZone10.getOffsetFromLocal(12L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime14", (dateTime7.compareTo(dateTime14) == 0) == dateTime7.equals(dateTime14));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 100);
        boolean boolean21 = dateTimeZone16.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.Duration duration47 = minutes45.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration47);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime50 = dateTime3.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime50.withZone(dateTimeZone52);
        java.lang.String str55 = dateTimeZone52.getName((long) 'a');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime53", (dateTime3.compareTo(dateTime53) == 0) == dateTime3.equals(dateTime53));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusDays((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Period period6 = period1.minus(readablePeriod5);
        org.joda.time.Period period8 = period1.plusHours(1439);
        org.joda.time.Period period10 = period8.withDays((-7));
        org.joda.time.Days days11 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod12 = days11.toMutablePeriod();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        mutablePeriod14.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval17 = null;
        mutablePeriod14.add(readableInterval17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.eras();
        int int20 = mutablePeriod14.get(durationFieldType19);
        boolean boolean21 = mutablePeriod12.isSupported(durationFieldType19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DurationField durationField23 = durationFieldType19.getField(chronology22);
        java.lang.String str24 = durationField23.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology33.years();
        long long38 = durationField35.add(2L, 100);
        long long39 = durationField35.getUnitMillis();
        int int40 = durationField23.compareTo(durationField35);
        boolean boolean41 = durationField23.isSupported();
        org.joda.time.DurationFieldType durationFieldType42 = durationField23.getType();
        boolean boolean43 = period10.isSupported(durationFieldType42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField23 and durationField35", Math.signum(durationField23.compareTo(durationField35)) == -Math.signum(durationField35.compareTo(durationField23)));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType3.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField10 = chronology7.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 10, chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.era();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((long) (short) -1, 252460800000L, chronology7);
        org.joda.time.DurationField durationField14 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.era();
        org.joda.time.DurationField durationField16 = dateTimeField15.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField10, and durationField14", !(durationField16.compareTo(durationField10) == 0) || (Math.signum(durationField16.compareTo(durationField14)) == Math.signum(durationField10.compareTo(durationField14))));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        java.lang.String str11 = chronology8.toString();
        org.joda.time.DurationField durationField12 = chronology8.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField12, and durationField9", !(durationField9.compareTo(durationField12) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField12.compareTo(durationField9))));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property17 = dateTime2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime21.toDateTimeISO();
        org.joda.time.Instant instant27 = dateTime21.toInstant();
        org.joda.time.Instant instant28 = instant27.toInstant();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone31.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(0);
        boolean boolean38 = instant28.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Days days39 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod40 = days39.toMutablePeriod();
        org.joda.time.Duration duration41 = days39.toStandardDuration();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        boolean boolean45 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime46 = dateTime37.minus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime48 = dateTime37.withCenturyOfEra(52);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long55 = dateTimeZone52.adjustOffset(32L, false);
        int int57 = dateTimeZone52.getOffsetFromLocal(4459615861L);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 59, 6700148978639999L, dateTimeZone52);
        org.joda.time.DateTime dateTime59 = dateTime37.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime60 = dateTime2.withZone(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime59", (dateTime37.compareTo(dateTime59) == 0) == dateTime37.equals(dateTime59));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        int int8 = dateTime7.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long13 = dateTimeZone10.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime15 = dateTime7.toLocalDateTime();
        int int16 = localDateTime15.size();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime14", (dateTime7.compareTo(dateTime14) == 0) == dateTime7.equals(dateTime14));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes((int) 'x');
        org.joda.time.DateTime.Property property20 = dateTime17.era();
        org.joda.time.DateTime dateTime22 = dateTime17.minusWeeks((int) (byte) 100);
        org.joda.time.DateTime dateTime24 = dateTime17.minusMonths((int) (byte) 10);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration27 = period26.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        org.joda.time.Duration duration37 = period26.toDurationTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration39 = new org.joda.time.Duration(31556952000L);
        boolean boolean40 = duration37.isEqual((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime3.withMillis((long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone14);
        boolean boolean18 = interval16.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean32 = dateTime30.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean34 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime36 = dateTime22.plusHours(22);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        boolean boolean41 = dateTime39.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property42 = dateTime39.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        java.util.GregorianCalendar gregorianCalendar46 = dateTime45.toGregorianCalendar();
        int int47 = dateTime45.getHourOfDay();
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = locale48.stripExtensions();
        java.lang.String str50 = locale49.toLanguageTag();
        java.util.Calendar calendar51 = dateTime45.toCalendar(locale49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str55 = locale49.getDisplayVariant(locale54);
        int int56 = property42.getMaximumTextLength(locale54);
        org.joda.time.DateTime dateTime57 = property42.roundHalfFloorCopy();
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.lang.String str59 = property42.getAsText(locale58);
        int int60 = property42.getMaximumValueOverall();
        org.joda.time.DateTime dateTime61 = property42.withMinimumValue();
        org.joda.time.Duration duration62 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Calendar calendar68 = dateTime66.toCalendar(locale67);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis((int) '4');
        org.joda.time.DateTime dateTime72 = dateTime66.plusMonths((int) (short) -1);
        int int73 = dateTime72.getDayOfMonth();
        org.joda.time.Interval interval74 = duration62.toIntervalTo((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean75 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((-1L), dateTimeZone78);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.util.Calendar calendar81 = dateTime79.toCalendar(locale80);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((-1L), dateTimeZone84);
        boolean boolean86 = dateTime79.equals((java.lang.Object) dateTime85);
        int int87 = dateTime79.getMillisOfSecond();
        boolean boolean88 = dateTime72.isAfter((org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar46 and calendar51", (gregorianCalendar46.compareTo(calendar51) == 0) == gregorianCalendar46.equals(calendar51));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        boolean boolean6 = dateTime4.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime4.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        int int12 = dateTime10.getHourOfDay();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Calendar calendar16 = dateTime10.toCalendar(locale14);
        java.util.Locale locale19 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str20 = locale14.getDisplayVariant(locale19);
        int int21 = property7.getMaximumTextLength(locale19);
        org.joda.time.DateTime dateTime22 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = property7.addWrapFieldToCopy(59);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) 5);
        org.joda.time.DateTime dateTime28 = dateTime24.plus((org.joda.time.ReadableDuration) duration27);
        java.lang.Object obj29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj29, dateTimeZone31);
        org.joda.time.DateTime.Property property34 = dateTime33.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime38.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime47.toDateTimeISO();
        org.joda.time.Instant instant53 = dateTime47.toInstant();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        boolean boolean67 = dateTime65.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes68 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration69 = minutes68.toStandardDuration();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration69);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 1, (long) (short) -1, periodType73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration69, periodType73);
        org.joda.time.PeriodType periodType76 = periodType73.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime33, periodType73);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period(1680396554448000000L, (long) 43799, periodType73, chronology78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar11 and calendar16", (gregorianCalendar11.compareTo(calendar16) == 0) == gregorianCalendar11.equals(calendar16));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        int int6 = dateTime3.getMonthOfYear();
        org.joda.time.DateTime dateTime8 = dateTime3.plusDays(366);
        org.joda.time.Duration duration9 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration10 = duration9.toDuration();
        long long11 = duration9.getMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.ZERO;
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        long long14 = duration12.getMillis();
        int int15 = duration9.compareTo((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean20 = dateTime18.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property21 = dateTime18.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        java.util.GregorianCalendar gregorianCalendar25 = dateTime24.toGregorianCalendar();
        int int26 = dateTime24.getHourOfDay();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Calendar calendar30 = dateTime24.toCalendar(locale28);
        java.util.Locale locale33 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str34 = locale28.getDisplayVariant(locale33);
        int int35 = property21.getMaximumTextLength(locale33);
        org.joda.time.DateTime dateTime36 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime38 = property21.addWrapFieldToCopy(59);
        org.joda.time.Period period39 = duration9.toPeriodTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType40.getField(chronology44);
        java.lang.String str47 = dateTimeField45.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime56 = dateTime51.toLocalDateTime();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale57.getDisplayVariant();
        java.lang.String str59 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localDateTime56, locale57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int61 = localDateTime56.get(dateTimeFieldType60);
        org.joda.time.DateTime dateTime63 = dateTime38.withField(dateTimeFieldType60, 6);
        org.joda.time.DateTime dateTime65 = dateTime8.withField(dateTimeFieldType60, 51);
        int int66 = dateTime8.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar25 and calendar30", (gregorianCalendar25.compareTo(calendar30) == 0) == gregorianCalendar25.equals(calendar30));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period2 = mutableInterval0.toPeriod(periodType1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime5.toGregorianCalendar();
        int int7 = dateTime5.getHourOfDay();
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Calendar calendar11 = dateTime5.toCalendar(locale9);
        org.joda.time.DateTime.Property property12 = dateTime5.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime22 = dateTime17.toLocalDateTime();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getVariant();
        java.util.Calendar calendar25 = dateTime17.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = property12.setCopy("52", locale23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTime29.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property32 = dateTime29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar36 = dateTime35.toGregorianCalendar();
        int int37 = dateTime35.getHourOfDay();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale39.toLanguageTag();
        java.util.Calendar calendar41 = dateTime35.toCalendar(locale39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str45 = locale39.getDisplayVariant(locale44);
        int int46 = property32.getMaximumTextLength(locale44);
        org.joda.time.DateTime dateTime47 = property32.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime49 = dateTime47.minusMonths(36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = dateTime47.toString(dateTimeFormatter50);
        org.joda.time.DateTime.Property property52 = dateTime47.yearOfEra();
        int int53 = property12.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((long) (-8));
        org.joda.time.Duration duration57 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration58 = duration55.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.time();
        org.joda.time.Period period60 = duration58.toPeriod(periodType59);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone65);
        org.joda.time.MutableInterval mutableInterval68 = interval67.toMutableInterval();
        boolean boolean70 = mutableInterval68.isBefore((long) 59);
        boolean boolean71 = mutableInterval68.containsNow();
        org.joda.time.Minutes minutes72 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.Duration duration74 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration76 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration77 = duration74.minus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Minutes minutes78 = duration77.toStandardMinutes();
        org.joda.time.Minutes minutes79 = minutes72.plus(minutes78);
        org.joda.time.PeriodType periodType80 = minutes79.getPeriodType();
        org.joda.time.PeriodType periodType81 = periodType80.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration58, periodType80);
        org.joda.time.Period period83 = period2.withPeriodType(periodType80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar6 and calendar11", (gregorianCalendar6.compareTo(calendar11) == 0) == gregorianCalendar6.equals(calendar11));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getHourOfDay();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Calendar calendar10 = dateTime4.toCalendar(locale8);
        org.joda.time.DateTime.Property property11 = dateTime4.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime21 = dateTime16.toLocalDateTime();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getVariant();
        java.util.Calendar calendar24 = dateTime16.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = property11.setCopy("52", locale22);
        java.util.Locale.setDefault(category0, locale22);
        java.lang.String str27 = locale22.getDisplayCountry();
        java.lang.String str28 = locale22.getLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar5 and calendar10", (gregorianCalendar5.compareTo(calendar10) == 0) == gregorianCalendar5.equals(calendar10));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval(obj7, chronology8);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType6.getField(chronology10);
        java.lang.String str13 = dateTimeField11.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime22 = dateTime17.toLocalDateTime();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getDisplayVariant();
        java.lang.String str25 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale23);
        int int26 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime22);
        int int27 = dateTimeField5.getMaximumValue();
        int int28 = dateTimeField5.getMinimumValue();
        org.joda.time.DurationField durationField29 = dateTimeField5.getDurationField();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField5.getAsText((long) 3, locale31);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        int int41 = dateTime40.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long46 = dateTimeZone43.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime47 = dateTime40.toDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime48 = dateTime40.toLocalDateTime();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Locale locale50 = locale49.stripExtensions();
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = locale50.getDisplayScript();
        java.lang.String str53 = locale50.getVariant();
        java.util.Locale.setDefault(locale50);
        java.lang.String str55 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime48, locale50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime47", (dateTime40.compareTo(dateTime47) == 0) == dateTime40.equals(dateTime47));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Days days1 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        mutablePeriod4.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval7 = null;
        mutablePeriod4.add(readableInterval7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.eras();
        int int10 = mutablePeriod4.get(durationFieldType9);
        boolean boolean11 = mutablePeriod2.isSupported(durationFieldType9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DurationField durationField13 = durationFieldType9.getField(chronology12);
        java.lang.String str14 = durationField13.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology23.years();
        long long28 = durationField25.add(2L, 100);
        long long29 = durationField25.getUnitMillis();
        int int30 = durationField13.compareTo(durationField25);
        boolean boolean31 = durationField13.isSupported();
        org.joda.time.DurationFieldType durationFieldType32 = durationField13.getType();
        int int33 = periodType0.indexOf(durationFieldType32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField13 and durationField25", Math.signum(durationField13.compareTo(durationField25)) == -Math.signum(durationField25.compareTo(durationField13)));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        mutablePeriod1.addWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        int int18 = dateTime17.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long23 = dateTimeZone20.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone20);
        org.joda.time.Duration duration25 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        boolean boolean36 = dateTime17.equals((java.lang.Object) dateTimeField35);
        java.lang.String str38 = dateTimeField35.getAsShortText(84067718400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime24", (dateTime17.compareTo(dateTime24) == 0) == dateTime17.equals(dateTime24));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime8 = interval6.getStart();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        boolean boolean17 = interval6.isBefore((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period21 = mutableInterval19.toPeriod(periodType20);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 365, periodType20);
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        mutablePeriod26.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval29 = null;
        mutablePeriod26.add(readableInterval29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.eras();
        int int32 = mutablePeriod26.get(durationFieldType31);
        boolean boolean33 = mutablePeriod24.isSupported(durationFieldType31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DurationField durationField35 = durationFieldType31.getField(chronology34);
        java.lang.String str36 = durationFieldType31.getName();
        boolean boolean37 = periodType20.isSupported(durationFieldType31);
        org.joda.time.Period period38 = interval6.toPeriod(periodType20);
        org.joda.time.Chronology chronology39 = interval6.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField40, and durationField35", !(durationField35.compareTo(durationField40) == 0) || (Math.signum(durationField35.compareTo(durationField35)) == Math.signum(durationField40.compareTo(durationField35))));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        int int8 = dateTime6.getHourOfDay();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = locale10.toLanguageTag();
        java.util.Calendar calendar12 = dateTime6.toCalendar(locale10);
        org.joda.time.DateTime.Property property13 = dateTime6.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime23 = dateTime18.toLocalDateTime();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getVariant();
        java.util.Calendar calendar26 = dateTime18.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = property13.setCopy("52", locale24);
        org.joda.time.DateTime dateTime28 = property13.roundCeilingCopy();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period2, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.Instant instant39 = dateTime33.toInstant();
        org.joda.time.Instant instant40 = instant39.toInstant();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Calendar calendar46 = dateTime44.toCalendar(locale45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMillis((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime44.toDateTimeISO();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType51 = periodType50.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant39, (org.joda.time.ReadableInstant) dateTime49, periodType50);
        org.joda.time.Duration duration54 = org.joda.time.Duration.millis((-1L));
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType56 = periodType55.withHoursRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant39, (org.joda.time.ReadableDuration) duration54, periodType55);
        org.joda.time.Duration duration59 = org.joda.time.Duration.millis((long) (short) -1);
        long long60 = duration59.getStandardMinutes();
        boolean boolean61 = duration54.isEqual((org.joda.time.ReadableDuration) duration59);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        boolean boolean67 = dateTime65.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property68 = dateTime65.millisOfSecond();
        int int69 = property68.getLeapAmount();
        org.joda.time.DateTime dateTime70 = property68.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime72 = dateTime70.minusMonths(0);
        org.joda.time.DateTime dateTime74 = dateTime72.withMillisOfSecond(10);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period77 = mutableInterval75.toPeriod(periodType76);
        org.joda.time.Hours hours78 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours80 = hours78.plus((int) (byte) 100);
        org.joda.time.Hours hours82 = hours78.minus((int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod83 = hours78.toMutablePeriod();
        org.joda.time.Period period84 = period77.plus((org.joda.time.ReadablePeriod) mutablePeriod83);
        org.joda.time.MutablePeriod mutablePeriod85 = mutablePeriod83.copy();
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadablePeriod) mutablePeriod83);
        mutablePeriod62.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar7 and calendar12", (gregorianCalendar7.compareTo(calendar12) == 0) == gregorianCalendar7.equals(calendar12));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval8.contains((long) '4');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = dateTime13.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = dateTime32.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval8.copy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone45);
        boolean boolean49 = interval47.isAfter(100L);
        long long50 = interval47.getEndMillis();
        org.joda.time.Interval interval51 = interval47.toInterval();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone56);
        org.joda.time.MutableInterval mutableInterval59 = interval58.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval60 = interval58.toMutableInterval();
        org.joda.time.Interval interval61 = interval51.overlap((org.joda.time.ReadableInterval) mutableInterval60);
        boolean boolean62 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Minutes minutes63 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Duration duration65 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration67 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration68 = duration65.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        java.util.GregorianCalendar gregorianCalendar72 = dateTime71.toGregorianCalendar();
        int int73 = dateTime71.getHourOfDay();
        java.util.Locale locale74 = java.util.Locale.CHINA;
        java.util.Locale locale75 = locale74.stripExtensions();
        java.lang.String str76 = locale75.toLanguageTag();
        java.util.Calendar calendar77 = dateTime71.toCalendar(locale75);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((-1L), dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime82 = null;
        boolean boolean83 = dateTimeZone80.isLocalDateTimeGap(localDateTime82);
        org.joda.time.DateTime dateTime84 = dateTime71.withZone(dateTimeZone80);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime86 = dateTime84.withZone(dateTimeZone85);
        org.joda.time.Interval interval87 = duration68.toIntervalTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Duration duration89 = org.joda.time.Duration.standardMinutes((long) 87);
        org.joda.time.Seconds seconds90 = duration89.toStandardSeconds();
        org.joda.time.Interval interval91 = interval87.withDurationAfterStart((org.joda.time.ReadableDuration) duration89);
        org.joda.time.Interval interval92 = interval61.gap((org.joda.time.ReadableInterval) interval87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar14 and calendar19", (gregorianCalendar14.compareTo(calendar19) == 0) == gregorianCalendar14.equals(calendar19));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime2.withZoneRetainFields(dateTimeZone11);
        long long19 = dateTimeZone11.previousTransition(205027200000L);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone11.isLocalDateTimeGap(localDateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = dateTime14.toLocalDateTime();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getVariant();
        java.util.Calendar calendar22 = dateTime14.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = property9.setCopy("52", locale20);
        org.joda.time.DateTime dateTime24 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology4);
        java.lang.String str7 = dateTimeField5.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = dateTime11.toLocalDateTime();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime22.toGregorianCalendar();
        int int24 = dateTime22.getHourOfDay();
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Calendar calendar28 = dateTime22.toCalendar(locale26);
        org.joda.time.DateTime dateTime30 = dateTime22.minusYears(7);
        org.joda.time.DateTime dateTime31 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.DateTime dateTime35 = dateTime31.withDayOfMonth(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType36.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone45.isLocalDateTimeGap(localDateTime47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(0);
        int int52 = dateTime51.getDayOfWeek();
        org.joda.time.DateTime dateTime54 = dateTime51.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) (short) 10);
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        int int59 = days57.getDays();
        org.joda.time.Days days60 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod61 = days60.toMutablePeriod();
        boolean boolean62 = days57.equals((java.lang.Object) mutablePeriod61);
        org.joda.time.DateTime dateTime63 = dateTime56.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale64.getDisplayVariant();
        java.util.Calendar calendar66 = dateTime63.toCalendar(locale64);
        java.lang.String str67 = locale64.getDisplayScript();
        java.util.Set<java.lang.String> strSet68 = locale64.getUnicodeLocaleKeys();
        java.lang.String str69 = locale64.getISO3Country();
        int int70 = dateTimeField42.getMaximumShortTextLength(locale64);
        int int71 = dateTime35.get(dateTimeField42);
        org.joda.time.DateTime dateTime72 = dateTime35.toDateTime();
        org.joda.time.DateTime dateTime74 = dateTime35.plusWeeks((int) ' ');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar23 and calendar28", (gregorianCalendar23.compareTo(calendar28) == 0) == gregorianCalendar23.equals(calendar28));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Duration duration2 = days0.toStandardDuration();
        org.joda.time.Days days3 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod4 = days3.toMutablePeriod();
        org.joda.time.Duration duration5 = days3.toStandardDuration();
        boolean boolean6 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod8 = days7.toMutablePeriod();
        org.joda.time.Duration duration9 = days7.toStandardDuration();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        boolean boolean13 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.withWeekOfWeekyear(52);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        boolean boolean35 = dateTime33.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property36 = dateTime33.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        java.util.GregorianCalendar gregorianCalendar40 = dateTime39.toGregorianCalendar();
        int int41 = dateTime39.getHourOfDay();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.lang.String str44 = locale43.toLanguageTag();
        java.util.Calendar calendar45 = dateTime39.toCalendar(locale43);
        java.util.Locale locale48 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str49 = locale43.getDisplayVariant(locale48);
        int int50 = property36.getMaximumTextLength(locale48);
        java.lang.String str51 = dateTime29.toString("1970", locale48);
        java.util.Set<java.lang.Character> charSet52 = locale48.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet53 = locale48.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar40 and calendar45", (gregorianCalendar40.compareTo(calendar45) == 0) == gregorianCalendar40.equals(calendar45));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        int int16 = dateTime14.getHourOfDay();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Calendar calendar20 = dateTime14.toCalendar(locale18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime27 = dateTime14.withZone(dateTimeZone23);
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration32 = duration29.minus((org.joda.time.ReadableDuration) duration31);
        long long33 = duration29.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime14.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime36 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration29, 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.Chronology chronology46 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.weekyearOfCentury();
        org.joda.time.DurationField durationField49 = chronology46.minutes();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, chronology46);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) dateTime36, chronology46);
        org.joda.time.DateTime.Property property52 = dateTime36.year();
        org.joda.time.DateTime dateTime54 = property52.addToCopy(366);
        long long55 = dateTime54.getMillis();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval(obj58, chronology59);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType57.getField(chronology61);
        org.joda.time.DurationField durationField63 = durationFieldType56.getField(chronology61);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.dayOfWeek();
        org.joda.time.DurationField durationField65 = chronology61.centuries();
        org.joda.time.DateTime dateTime66 = dateTime54.toDateTime(chronology61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar15 and calendar20", (gregorianCalendar15.compareTo(calendar20) == 0) == gregorianCalendar15.equals(calendar20));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(53368, (-24), 53287970, 102, (int) (short) 0, 52, 211, 10);
        org.joda.time.Days days9 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod10 = days9.toMutablePeriod();
        int int11 = days9.getDays();
        org.joda.time.Days days12 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod13 = days12.toMutablePeriod();
        boolean boolean14 = days9.equals((java.lang.Object) mutablePeriod13);
        org.joda.time.Duration duration15 = days9.toStandardDuration();
        org.joda.time.PeriodType periodType16 = days9.getPeriodType();
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) days9);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(6L, (long) 31, chronology20);
        mutablePeriod21.setWeeks(48);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone28);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval32 = interval30.toMutableInterval();
        boolean boolean34 = mutableInterval32.contains((long) '4');
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        int int39 = dateTime37.getHourOfDay();
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Calendar calendar43 = dateTime37.toCalendar(locale41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = dateTime37.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime61 = dateTime56.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        mutableInterval32.setEnd((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval64 = mutableInterval32.copy();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone69);
        boolean boolean73 = interval71.isAfter(100L);
        long long74 = interval71.getEndMillis();
        org.joda.time.Interval interval75 = interval71.toInterval();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((-1L), dateTimeZone80);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone80);
        org.joda.time.MutableInterval mutableInterval83 = interval82.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval84 = interval82.toMutableInterval();
        org.joda.time.Interval interval85 = interval75.overlap((org.joda.time.ReadableInterval) mutableInterval84);
        boolean boolean86 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) interval85);
        boolean boolean88 = mutableInterval64.isBefore((long) 30);
        org.joda.time.PeriodType periodType91 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType92 = periodType91.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod(52L, (long) 86399, periodType91);
        mutableInterval64.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod93);
        mutablePeriod21.add((org.joda.time.ReadableInterval) mutableInterval64);
        mutablePeriod8.add((org.joda.time.ReadableInterval) mutableInterval64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar38 and calendar43", (gregorianCalendar38.compareTo(calendar43) == 0) == gregorianCalendar38.equals(calendar43));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.DateTime dateTime4 = property3.withMaximumValue();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone17.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTime dateTime21 = dateTime8.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime8.withLaterOffsetAtOverlap();
        boolean boolean24 = dateTime8.equals((java.lang.Object) 365);
        org.joda.time.DateTime.Property property25 = dateTime8.hourOfDay();
        int int26 = dateTime8.getYearOfEra();
        org.joda.time.Instant instant27 = dateTime8.toInstant();
        org.joda.time.Instant instant28 = instant27.toInstant();
        long long29 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) instant28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.format.PeriodPrinter periodPrinter5 = null;
        org.joda.time.format.PeriodParser periodParser6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = new org.joda.time.format.PeriodFormatter(periodPrinter5, periodParser6);
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter7.withLocale(locale8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter9.withParseType(periodType11);
        boolean boolean14 = periodFormatter13.isParser();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTime17.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property20 = dateTime17.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime23.toGregorianCalendar();
        int int25 = dateTime23.getHourOfDay();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale27.toLanguageTag();
        java.util.Calendar calendar29 = dateTime23.toCalendar(locale27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str33 = locale27.getDisplayVariant(locale32);
        int int34 = property20.getMaximumTextLength(locale32);
        org.joda.time.format.PeriodFormatter periodFormatter35 = periodFormatter13.withLocale(locale32);
        org.joda.time.format.PeriodFormatter periodFormatter36 = periodFormatter2.withLocale(locale32);
        org.joda.time.format.PeriodParser periodParser37 = periodFormatter36.getParser();
        org.joda.time.format.PeriodParser periodParser38 = periodFormatter36.getParser();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar24 and calendar29", (gregorianCalendar24.compareTo(calendar29) == 0) == gregorianCalendar24.equals(calendar29));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.DateTime dateTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        boolean boolean9 = dateTime7.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property10 = dateTime7.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str23 = locale17.getDisplayVariant(locale22);
        int int24 = property10.getMaximumTextLength(locale22);
        org.joda.time.DurationField durationField25 = property10.getLeapDurationField();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = property10.getAsShortText(locale27);
        int int30 = property3.getMaximumTextLength(locale27);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale31.getISO3Language();
        java.lang.String str34 = locale31.getCountry();
        java.lang.String str35 = locale31.getDisplayCountry();
        java.util.Locale locale36 = locale31.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        java.util.GregorianCalendar gregorianCalendar40 = dateTime39.toGregorianCalendar();
        int int41 = dateTime39.getHourOfDay();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.lang.String str44 = locale43.toLanguageTag();
        java.util.Calendar calendar45 = dateTime39.toCalendar(locale43);
        org.joda.time.DateTime.Property property46 = dateTime39.minuteOfHour();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getDisplayCountry();
        java.lang.String str49 = property46.getAsShortText(locale47);
        java.lang.String str50 = locale31.getDisplayName(locale47);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("277");
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale52.getDisplayLanguage();
        java.lang.String str55 = locale47.getDisplayCountry(locale52);
        int int56 = property3.getMaximumTextLength(locale47);
        int int57 = property3.get();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar14 and calendar19", (gregorianCalendar14.compareTo(calendar19) == 0) == gregorianCalendar14.equals(calendar19));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration4 = duration1.minus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        int int9 = dateTime7.getHourOfDay();
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.util.Calendar calendar13 = dateTime7.toCalendar(locale11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = dateTime7.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = dateTime20.withZone(dateTimeZone21);
        org.joda.time.Interval interval23 = duration4.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime24 = interval23.getStart();
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfWeek();
        org.joda.time.DateTime dateTime26 = property25.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar8 and calendar13", (gregorianCalendar8.compareTo(calendar13) == 0) == gregorianCalendar8.equals(calendar13));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis((int) '#');
        int int36 = instant24.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        org.joda.time.Instant instant46 = dateTime40.toInstant();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime49 = dateTime40.plusMillis((int) (short) 1);
        org.joda.time.DateTime dateTime51 = dateTime40.withYear((int) '#');
        org.joda.time.DateTime dateTime53 = dateTime40.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime40.getZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        java.util.GregorianCalendar gregorianCalendar58 = dateTime57.toGregorianCalendar();
        int int59 = dateTime57.getHourOfDay();
        java.util.Locale locale60 = java.util.Locale.CHINA;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.lang.String str62 = locale61.toLanguageTag();
        java.util.Calendar calendar63 = dateTime57.toCalendar(locale61);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone66.isLocalDateTimeGap(localDateTime68);
        org.joda.time.DateTime dateTime70 = dateTime57.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = dateTime57.withLaterOffsetAtOverlap();
        boolean boolean73 = dateTime57.equals((java.lang.Object) 365);
        org.joda.time.DateTime.Property property74 = dateTime57.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours(1);
        long long78 = dateTimeZone76.nextTransition(0L);
        org.joda.time.format.PeriodPrinter periodPrinter80 = null;
        org.joda.time.format.PeriodParser periodParser81 = null;
        org.joda.time.format.PeriodFormatter periodFormatter82 = new org.joda.time.format.PeriodFormatter(periodPrinter80, periodParser81);
        java.util.Locale locale83 = java.util.Locale.CHINA;
        java.util.Locale locale84 = locale83.stripExtensions();
        java.lang.String str85 = locale84.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter86 = periodFormatter82.withLocale(locale84);
        java.lang.String str87 = dateTimeZone76.getShortName((long) 4, locale84);
        java.lang.String str88 = property74.getAsText(locale84);
        java.lang.String str89 = property74.getName();
        long long90 = property74.remainder();
        boolean boolean91 = dateTimeZone54.equals((java.lang.Object) property74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar58 and calendar63", (gregorianCalendar58.compareTo(calendar63) == 0) == gregorianCalendar58.equals(calendar63));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        int int13 = dateTime10.getMillisOfSecond();
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration15 = duration14.toDuration();
        long long16 = duration14.getMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.ZERO;
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        long long19 = duration17.getMillis();
        int int20 = duration14.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property26 = dateTime23.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        int int31 = dateTime29.getHourOfDay();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Calendar calendar35 = dateTime29.toCalendar(locale33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str39 = locale33.getDisplayVariant(locale38);
        int int40 = property26.getMaximumTextLength(locale38);
        org.joda.time.DateTime dateTime41 = property26.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime43 = property26.addWrapFieldToCopy(59);
        org.joda.time.Period period44 = duration14.toPeriodTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType45.getField(chronology49);
        java.lang.String str52 = dateTimeField50.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime61 = dateTime56.toLocalDateTime();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale62.getDisplayVariant();
        java.lang.String str64 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int66 = localDateTime61.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime68 = dateTime43.withField(dateTimeFieldType65, 6);
        int int69 = dateTime10.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime71 = dateTime10.withCenturyOfEra(19);
        int int72 = dateTime71.getSecondOfMinute();
        org.joda.time.DateTime.Property property73 = dateTime71.year();
        boolean boolean74 = property73.isLeap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar30 and calendar35", (gregorianCalendar30.compareTo(calendar35) == 0) == gregorianCalendar30.equals(calendar35));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) -1);
        org.joda.time.DateTime.Property property18 = dateTime17.weekyear();
        java.lang.String str19 = property18.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration4 = duration1.minus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        int int9 = dateTime7.getHourOfDay();
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.util.Calendar calendar13 = dateTime7.toCalendar(locale11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = dateTime7.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = dateTime20.withZone(dateTimeZone21);
        org.joda.time.Interval interval23 = duration4.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime24 = interval23.getStart();
        int int25 = dateTime24.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar8 and calendar13", (gregorianCalendar8.compareTo(calendar13) == 0) == gregorianCalendar8.equals(calendar13));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.Instant instant20 = dateTime14.toInstant();
        org.joda.time.Instant instant21 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        boolean boolean31 = instant21.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        boolean boolean36 = instant21.isEqual((org.joda.time.ReadableInstant) dateTime34);
        long long37 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime34);
        java.lang.Object obj38 = null;
        boolean boolean39 = dateTime34.equals(obj38);
        int int40 = dateTime34.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime23.toGregorianCalendar();
        int int25 = dateTime23.getHourOfDay();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale27.toLanguageTag();
        java.util.Calendar calendar29 = dateTime23.toCalendar(locale27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTime dateTime36 = dateTime23.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Chronology chronology48 = dateTime43.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.minutes();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.clockhourOfHalfday();
        int int53 = dateTimeField51.getLeapAmount((long) 59);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime dateTime61 = dateTime57.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime62 = dateTime57.toLocalDateTime();
        int int63 = localDateTime62.size();
        int int64 = dateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTime dateTime65 = dateTime38.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMonths(1);
        org.joda.time.DateTime dateTime69 = dateTime65.plus(1621787192571L);
        org.joda.time.DateTime.Property property70 = dateTime69.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.Period period5 = new org.joda.time.Period(6, (int) (short) -1, (int) (byte) 0, (int) ' ');
        org.joda.time.Period period7 = period5.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period7, (org.joda.time.ReadableInstant) dateTime11);
        int int17 = period7.size();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone22);
        boolean boolean26 = interval24.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        java.util.GregorianCalendar gregorianCalendar39 = dateTime38.toGregorianCalendar();
        int int40 = dateTime38.getHourOfDay();
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = locale42.toLanguageTag();
        java.util.Calendar calendar44 = dateTime38.toCalendar(locale42);
        org.joda.time.DateTime.Property property45 = dateTime38.minuteOfHour();
        org.joda.time.Days days46 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod47 = days46.toMutablePeriod();
        org.joda.time.Duration duration48 = days46.toStandardDuration();
        org.joda.time.Days days49 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod50 = days49.toMutablePeriod();
        org.joda.time.Duration duration51 = days49.toStandardDuration();
        boolean boolean52 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval54.setDurationBeforeEnd(4459615861L);
        boolean boolean57 = interval24.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone62);
        org.joda.time.MutableInterval mutableInterval65 = interval64.toMutableInterval();
        boolean boolean67 = mutableInterval65.isBefore((long) 59);
        boolean boolean68 = mutableInterval65.containsNow();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone73);
        boolean boolean77 = interval75.isAfter(100L);
        long long78 = interval75.getEndMillis();
        org.joda.time.Interval interval79 = interval75.toInterval();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Interval interval81 = interval79.withDurationBeforeEnd(readableDuration80);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType83 = periodType82.withMillisRemoved();
        org.joda.time.Period period84 = interval79.toPeriod(periodType83);
        org.joda.time.Chronology chronology85 = interval79.getChronology();
        mutableInterval65.setChronology(chronology85);
        mutableInterval54.setInterval((org.joda.time.ReadableInterval) mutableInterval65);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj89 = null;
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Interval interval91 = new org.joda.time.Interval(obj89, chronology90);
        org.joda.time.Chronology chronology92 = interval91.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = dateTimeFieldType88.getField(chronology92);
        org.joda.time.DurationField durationField94 = chronology92.millis();
        mutableInterval54.setChronology(chronology92);
        org.joda.time.Period period96 = new org.joda.time.Period((java.lang.Object) period7, chronology92);
        org.joda.time.DateTime dateTime97 = new org.joda.time.DateTime(20L, chronology92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar39 and calendar44", (gregorianCalendar39.compareTo(calendar44) == 0) == gregorianCalendar39.equals(calendar44));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant27 = instant25.plus((long) (byte) 0);
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration32 = duration29.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar36 = dateTime35.toGregorianCalendar();
        int int37 = dateTime35.getHourOfDay();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale39.toLanguageTag();
        java.util.Calendar calendar41 = dateTime35.toCalendar(locale39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone44.isLocalDateTimeGap(localDateTime46);
        org.joda.time.DateTime dateTime48 = dateTime35.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = dateTime48.withZone(dateTimeZone49);
        org.joda.time.Interval interval51 = duration32.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Instant instant52 = instant25.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration53 = duration32.toDuration();
        org.joda.time.Duration duration54 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration55 = duration54.toDuration();
        long long56 = duration54.getMillis();
        org.joda.time.Duration duration58 = duration54.minus(6700148978639999L);
        boolean boolean59 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration60 = duration58.toDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar36 and calendar41", (gregorianCalendar36.compareTo(calendar41) == 0) == gregorianCalendar36.equals(calendar41));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (-1));
        org.joda.time.Instant instant14 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration12, 7);
        org.joda.time.Chronology chronology15 = instant9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(2123);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(4, 0);
        long long26 = dateTimeZone24.previousTransition(31556952000L);
        org.joda.time.DateTime dateTime27 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology28 = chronology15.withZone(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime27", (dateTime3.compareTo(dateTime27) == 0) == dateTime3.equals(dateTime27));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfWeek();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 12, (long) 3, chronology10);
        org.joda.time.Period period14 = period12.plusDays((int) (short) 0);
        org.joda.time.Duration duration15 = period14.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        int int20 = dateTime18.getHourOfDay();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Calendar calendar24 = dateTime18.toCalendar(locale22);
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime35 = dateTime30.toLocalDateTime();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getVariant();
        java.util.Calendar calendar38 = dateTime30.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = property25.setCopy("52", locale36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property45 = dateTime42.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        java.util.GregorianCalendar gregorianCalendar49 = dateTime48.toGregorianCalendar();
        int int50 = dateTime48.getHourOfDay();
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Calendar calendar54 = dateTime48.toCalendar(locale52);
        java.util.Locale locale57 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str58 = locale52.getDisplayVariant(locale57);
        int int59 = property45.getMaximumTextLength(locale57);
        org.joda.time.DateTime dateTime60 = property45.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime62 = dateTime60.minusMonths(36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime60.toString(dateTimeFormatter63);
        org.joda.time.DateTime.Property property65 = dateTime60.yearOfEra();
        int int66 = property25.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration68 = org.joda.time.Duration.millis((long) (-8));
        org.joda.time.Duration duration70 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration71 = duration68.minus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.time();
        org.joda.time.Period period73 = duration71.toPeriod(periodType72);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((-1L), dateTimeZone78);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone78);
        org.joda.time.MutableInterval mutableInterval81 = interval80.toMutableInterval();
        boolean boolean83 = mutableInterval81.isBefore((long) 59);
        boolean boolean84 = mutableInterval81.containsNow();
        org.joda.time.Minutes minutes85 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.Duration duration87 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration89 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration90 = duration87.minus((org.joda.time.ReadableDuration) duration89);
        org.joda.time.Minutes minutes91 = duration90.toStandardMinutes();
        org.joda.time.Minutes minutes92 = minutes85.plus(minutes91);
        org.joda.time.PeriodType periodType93 = minutes92.getPeriodType();
        org.joda.time.PeriodType periodType94 = periodType93.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration71, periodType93);
        int int96 = duration15.compareTo((org.joda.time.ReadableDuration) duration71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar19 and calendar24", (gregorianCalendar19.compareTo(calendar24) == 0) == gregorianCalendar19.equals(calendar24));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Days days11 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        boolean boolean16 = dateTime14.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property17 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str30 = locale24.getDisplayVariant(locale29);
        int int31 = property17.getMaximumTextLength(locale29);
        org.joda.time.DateTime dateTime32 = property17.roundHalfEvenCopy();
        org.joda.time.Interval interval33 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime32);
        java.lang.Object obj34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj34, dateTimeZone36);
        int int39 = dateTime38.getMillisOfDay();
        org.joda.time.Interval interval40 = interval33.withStart((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Interval interval42 = interval33.withEndMillis((long) 53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar26", (gregorianCalendar21.compareTo(calendar26) == 0) == gregorianCalendar21.equals(calendar26));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.clear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        int int9 = dateTime7.getHourOfDay();
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.util.Calendar calendar13 = dateTime7.toCalendar(locale11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = dateTime7.withZone(dateTimeZone16);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration25 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        long long26 = duration22.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime7.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.Instant instant38 = instant37.toInstant();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime42.toDateTimeISO();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType49 = periodType48.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant37, (org.joda.time.ReadableInstant) dateTime47, periodType48);
        org.joda.time.Instant instant53 = instant37.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = instant53.toString(dateTimeFormatter54);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) instant53);
        org.joda.time.DurationFieldType durationFieldType58 = mutablePeriod56.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Calendar calendar66 = dateTime64.toCalendar(locale65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusMillis((int) '4');
        org.joda.time.Instant instant69 = dateTime68.toInstant();
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10);
        int int73 = period72.getSeconds();
        org.joda.time.Period period75 = period72.minusHours(100);
        int int76 = period75.getMillis();
        org.joda.time.Period period78 = period75.minusSeconds((int) '#');
        org.joda.time.Duration duration79 = period78.toStandardDuration();
        org.joda.time.Period period80 = period78.toPeriod();
        int[] intArray82 = chronology70.get((org.joda.time.ReadablePeriod) period78, (long) (byte) 0);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) (short) -1, (long) 2, chronology70);
        mutablePeriod56.setPeriod((org.joda.time.ReadableInterval) mutableInterval83);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) mutableInterval83);
        mutablePeriod1.add(113607360000082L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar8 and calendar13", (gregorianCalendar8.compareTo(calendar13) == 0) == gregorianCalendar8.equals(calendar13));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Days days11 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        boolean boolean16 = dateTime14.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property17 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str30 = locale24.getDisplayVariant(locale29);
        int int31 = property17.getMaximumTextLength(locale29);
        org.joda.time.DateTime dateTime32 = property17.roundHalfEvenCopy();
        org.joda.time.Interval interval33 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime32);
        java.lang.Object obj34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj34, dateTimeZone36);
        int int39 = dateTime38.getMillisOfDay();
        org.joda.time.Interval interval40 = interval33.withStart((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period41 = interval33.toPeriod();
        org.joda.time.DateTime dateTime42 = interval33.getStart();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar26", (gregorianCalendar21.compareTo(calendar26) == 0) == gregorianCalendar21.equals(calendar26));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.clear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        int int9 = dateTime7.getHourOfDay();
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.util.Calendar calendar13 = dateTime7.toCalendar(locale11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = dateTime7.withZone(dateTimeZone16);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration25 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        long long26 = duration22.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime7.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.Instant instant38 = instant37.toInstant();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime42.toDateTimeISO();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType49 = periodType48.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant37, (org.joda.time.ReadableInstant) dateTime47, periodType48);
        org.joda.time.Instant instant53 = instant37.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = instant53.toString(dateTimeFormatter54);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) instant53);
        org.joda.time.DurationFieldType durationFieldType58 = mutablePeriod56.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Calendar calendar66 = dateTime64.toCalendar(locale65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusMillis((int) '4');
        org.joda.time.Instant instant69 = dateTime68.toInstant();
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10);
        int int73 = period72.getSeconds();
        org.joda.time.Period period75 = period72.minusHours(100);
        int int76 = period75.getMillis();
        org.joda.time.Period period78 = period75.minusSeconds((int) '#');
        org.joda.time.Duration duration79 = period78.toStandardDuration();
        org.joda.time.Period period80 = period78.toPeriod();
        int[] intArray82 = chronology70.get((org.joda.time.ReadablePeriod) period78, (long) (byte) 0);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) (short) -1, (long) 2, chronology70);
        mutablePeriod56.setPeriod((org.joda.time.ReadableInterval) mutableInterval83);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) mutableInterval83);
        long long86 = mutableInterval83.getEndMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar8 and calendar13", (gregorianCalendar8.compareTo(calendar13) == 0) == gregorianCalendar8.equals(calendar13));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration1 = duration0.toDuration();
        long long2 = duration0.getMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.ZERO;
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        long long5 = duration3.getMillis();
        int int6 = duration0.compareTo((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean11 = dateTime9.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property12 = dateTime9.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        int int17 = dateTime15.getHourOfDay();
        java.util.Locale locale18 = java.util.Locale.CHINA;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Calendar calendar21 = dateTime15.toCalendar(locale19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str25 = locale19.getDisplayVariant(locale24);
        int int26 = property12.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime29 = property12.addWrapFieldToCopy(59);
        org.joda.time.Period period30 = duration0.toPeriodTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Days days31 = period30.toStandardDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar16 and calendar21", (gregorianCalendar16.compareTo(calendar21) == 0) == gregorianCalendar16.equals(calendar21));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.setPeriod(59, 59, (int) 'x', (int) (short) 100, (int) (short) -1, 999, (int) (short) 0, 100);
        mutablePeriod1.add((long) 10);
        mutablePeriod1.setWeeks((int) (short) 100);
        mutablePeriod1.addMonths((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        java.util.GregorianCalendar gregorianCalendar20 = dateTime19.toGregorianCalendar();
        int int21 = dateTime19.getHourOfDay();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.toLanguageTag();
        java.util.Calendar calendar25 = dateTime19.toCalendar(locale23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTime dateTime32 = dateTime19.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = dateTime32.withZone(dateTimeZone33);
        int int35 = dateTime34.getDayOfMonth();
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration38 = period37.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(0);
        org.joda.time.Duration duration48 = period37.toDurationTo((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = dateTime34.equals((java.lang.Object) dateTime45);
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime56 = null;
        boolean boolean57 = dateTimeZone54.isLocalDateTimeGap(localDateTime56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(0);
        int int61 = dateTime60.getDayOfWeek();
        org.joda.time.DateTime dateTime63 = dateTime60.minusWeeks((int) (short) 100);
        org.joda.time.Minutes minutes64 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType65 = minutes64.getFieldType();
        org.joda.time.DateTime dateTime67 = dateTime63.withFieldAdded(durationFieldType65, (-8));
        int int68 = period51.get(durationFieldType65);
        org.joda.time.DateTime dateTime70 = dateTime45.withFieldAdded(durationFieldType65, (-1));
        int int71 = mutablePeriod1.get(durationFieldType65);
        java.lang.String str72 = durationFieldType65.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar20 and calendar25", (gregorianCalendar20.compareTo(calendar25) == 0) == gregorianCalendar20.equals(calendar25));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology4);
        java.lang.String str7 = dateTimeField5.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = dateTime11.toLocalDateTime();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime22.toGregorianCalendar();
        int int24 = dateTime22.getHourOfDay();
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Calendar calendar28 = dateTime22.toCalendar(locale26);
        org.joda.time.DateTime dateTime30 = dateTime22.minusYears(7);
        org.joda.time.DateTime dateTime31 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        boolean boolean38 = dateTime36.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property39 = dateTime36.millisOfSecond();
        org.joda.time.DateTime dateTime40 = property39.getDateTime();
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.Period period46 = new org.joda.time.Period(6, (int) (short) -1, (int) (byte) 0, (int) ' ');
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone52);
        boolean boolean56 = interval54.isAfter(100L);
        long long57 = interval54.getEndMillis();
        org.joda.time.Interval interval58 = interval54.toInterval();
        long long59 = interval54.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone64);
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval68 = interval66.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone73);
        org.joda.time.MutableInterval mutableInterval76 = interval75.toMutableInterval();
        long long77 = interval75.getStartMillis();
        boolean boolean78 = interval66.contains((org.joda.time.ReadableInterval) interval75);
        boolean boolean79 = interval54.abuts((org.joda.time.ReadableInterval) interval75);
        boolean boolean80 = interval47.contains((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Chronology chronology81 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.millisOfDay();
        org.joda.time.DateTime dateTime83 = dateTime33.toDateTime(chronology81);
        org.joda.time.LocalDateTime localDateTime84 = dateTime33.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar23 and calendar28", (gregorianCalendar23.compareTo(calendar28) == 0) == gregorianCalendar23.equals(calendar28));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime dateTime6 = dateTime3.withWeekyear(0);
        org.joda.time.DateTime dateTime8 = dateTime3.plusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration24 = minutes23.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone27.isLocalDateTimeGap(localDateTime29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        int int34 = dateTime31.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration36 = duration24.toDuration();
        org.joda.time.DateTime dateTime37 = dateTime3.minus((org.joda.time.ReadableDuration) duration24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar4 and calendar14", (gregorianCalendar4.compareTo(calendar14) == 0) == gregorianCalendar4.equals(calendar14));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.Interval interval20 = property5.toInterval();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) (-1), periodType23, chronology24);
        org.joda.time.Period period26 = interval20.toPeriod(periodType23);
        org.joda.time.DateTime dateTime27 = interval20.getEnd();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        int int37 = dateTime36.getDayOfWeek();
        org.joda.time.DateTime dateTime39 = dateTime36.minusWeeks((int) (short) 100);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType41 = minutes40.getFieldType();
        org.joda.time.DateTime dateTime43 = dateTime39.withFieldAdded(durationFieldType41, (-8));
        int int44 = dateTime39.getCenturyOfEra();
        int int45 = dateTime39.getDayOfYear();
        boolean boolean46 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType48.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.dayOfMonth();
        org.joda.time.DurationField durationField55 = chronology52.weeks();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 10, chronology52);
        org.joda.time.DurationField durationField57 = chronology52.centuries();
        org.joda.time.DurationFieldType durationFieldType58 = durationField57.getType();
        org.joda.time.DateTime dateTime60 = dateTime27.withFieldAdded(durationFieldType58, 339);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime26 = dateTime12.plusHours(22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTime29.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property32 = dateTime29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar36 = dateTime35.toGregorianCalendar();
        int int37 = dateTime35.getHourOfDay();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale39.toLanguageTag();
        java.util.Calendar calendar41 = dateTime35.toCalendar(locale39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str45 = locale39.getDisplayVariant(locale44);
        int int46 = property32.getMaximumTextLength(locale44);
        org.joda.time.DateTime dateTime47 = property32.roundHalfFloorCopy();
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = property32.getAsText(locale48);
        int int50 = property32.getMaximumValueOverall();
        org.joda.time.DateTime dateTime51 = property32.withMinimumValue();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime56.plusMonths((int) (short) -1);
        int int63 = dateTime62.getDayOfMonth();
        org.joda.time.Interval interval64 = duration52.toIntervalTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        java.lang.Object obj66 = null;
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Interval interval68 = new org.joda.time.Interval(obj66, chronology67);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        org.joda.time.DateTime dateTime76 = dateTime72.plusMillis((int) '4');
        org.joda.time.Chronology chronology77 = dateTime72.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period81 = mutableInterval79.toPeriod(periodType80);
        int[] intArray84 = chronology77.get((org.joda.time.ReadablePeriod) period81, (long) (byte) 0, (long) 12);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((java.lang.Object) interval68, chronology77);
        org.joda.time.DateTime dateTime86 = dateTime65.toDateTime(chronology77);
        java.lang.String str87 = chronology77.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar36 and calendar41", (gregorianCalendar36.compareTo(calendar41) == 0) == gregorianCalendar36.equals(calendar41));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.Duration duration17 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration20 = duration17.minus((org.joda.time.ReadableDuration) duration19);
        long long21 = duration17.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime2.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        boolean boolean28 = dateTimeZone26.isFixed();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime23.toMutableDateTime(dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        java.lang.String str25 = duration22.toString();
        org.joda.time.Duration duration27 = duration22.withMillis((long) 36);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Period period37 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime36.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone43);
        org.joda.time.MutableInterval mutableInterval46 = interval45.toMutableInterval();
        boolean boolean48 = mutableInterval46.isBefore((long) 59);
        boolean boolean49 = mutableInterval46.containsNow();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone54);
        boolean boolean58 = interval56.isAfter(100L);
        long long59 = interval56.getEndMillis();
        org.joda.time.Interval interval60 = interval56.toInterval();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Interval interval62 = interval60.withDurationBeforeEnd(readableDuration61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType64 = periodType63.withMillisRemoved();
        org.joda.time.Period period65 = interval60.toPeriod(periodType64);
        org.joda.time.Chronology chronology66 = interval60.getChronology();
        mutableInterval46.setChronology(chronology66);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        java.util.GregorianCalendar gregorianCalendar71 = dateTime70.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight72 = dateTime70.toDateMidnight();
        boolean boolean73 = mutableInterval46.isAfter((org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        java.util.GregorianCalendar gregorianCalendar77 = dateTime76.toGregorianCalendar();
        int int78 = dateTime76.getHourOfDay();
        java.util.Locale locale79 = java.util.Locale.CHINA;
        java.util.Locale locale80 = locale79.stripExtensions();
        java.lang.String str81 = locale80.toLanguageTag();
        java.util.Calendar calendar82 = dateTime76.toCalendar(locale80);
        org.joda.time.DateTime.Property property83 = dateTime76.minuteOfHour();
        org.joda.time.Days days84 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod85 = days84.toMutablePeriod();
        org.joda.time.Duration duration86 = days84.toStandardDuration();
        org.joda.time.Days days87 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod88 = days87.toMutablePeriod();
        org.joda.time.Duration duration89 = days87.toStandardDuration();
        boolean boolean90 = duration86.isLongerThan((org.joda.time.ReadableDuration) duration89);
        org.joda.time.Interval interval91 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableDuration) duration86);
        org.joda.time.Chronology chronology92 = dateTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = chronology92.halfdayOfDay();
        org.joda.time.DateTime dateTime94 = dateMidnight72.toDateTime(chronology92);
        java.lang.String str95 = chronology92.toString();
        org.joda.time.MutableDateTime mutableDateTime96 = mutableDateTime38.toMutableDateTime(chronology92);
        org.joda.time.DateTime dateTime97 = org.joda.time.DateTime.now(chronology92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar77 and calendar82", (gregorianCalendar77.compareTo(calendar82) == 0) == gregorianCalendar77.equals(calendar82));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(14);
        org.joda.time.DateTime.Property property7 = dateTime2.dayOfYear();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        org.joda.time.DateTime dateTime10 = property7.addToCopy(8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime25 = dateTime20.toLocalDateTime();
        boolean boolean26 = dateTimeZone13.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime35 = dateTime30.toLocalDateTime();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime25, (org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(obj38, chronology39);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType37.getField(chronology41);
        java.lang.String str44 = dateTimeField42.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime53 = dateTime48.toLocalDateTime();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale54.getDisplayVariant();
        java.lang.String str56 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        java.util.GregorianCalendar gregorianCalendar60 = dateTime59.toGregorianCalendar();
        int int61 = dateTime59.getHourOfDay();
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale63.toLanguageTag();
        java.util.Calendar calendar65 = dateTime59.toCalendar(locale63);
        org.joda.time.DateTime dateTime67 = dateTime59.minusYears(7);
        org.joda.time.DateTime dateTime68 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMinutes(0);
        org.joda.time.DateTime dateTime71 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = dateTime10.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTime.Property property73 = dateTime72.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property73.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar65", (gregorianCalendar3.compareTo(calendar65) == 0) == gregorianCalendar3.equals(calendar65));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        int int6 = property5.getLeapAmount();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = dateTime7.toLocalDateTime();
        org.joda.time.DateTime.Property property9 = dateTime7.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone23);
        boolean boolean27 = interval25.isAfter(100L);
        long long28 = interval25.getEndMillis();
        org.joda.time.Interval interval29 = interval25.toInterval();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval29.withDurationBeforeEnd(readableDuration30);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType33 = periodType32.withMillisRemoved();
        org.joda.time.Period period34 = interval29.toPeriod(periodType33);
        org.joda.time.Chronology chronology35 = interval29.getChronology();
        boolean boolean36 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Interval interval37 = mutableInterval18.toInterval();
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval18.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology47);
        mutableInterval38.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType10.getField(chronology47);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        java.util.GregorianCalendar gregorianCalendar56 = dateTime55.toGregorianCalendar();
        int int57 = dateTime55.getHourOfDay();
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.lang.String str60 = locale59.toLanguageTag();
        java.util.Calendar calendar61 = dateTime55.toCalendar(locale59);
        java.util.Locale.setDefault(locale59);
        int int63 = dateTimeField52.getMaximumTextLength(locale59);
        java.lang.String str64 = locale59.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar56 and calendar61", (gregorianCalendar56.compareTo(calendar61) == 0) == gregorianCalendar56.equals(calendar61));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DurationField durationField11 = chronology8.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getYear();
        org.joda.time.Hours hours10 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours12 = hours10.plus((int) (byte) 100);
        boolean boolean13 = dateTime8.equals((java.lang.Object) hours12);
        org.joda.time.DateTime dateTime15 = dateTime8.plusWeeks((-2147483648));
        org.joda.time.LocalDateTime localDateTime16 = dateTime8.toLocalDateTime();
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        boolean boolean20 = localDateTime16.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        int int29 = dateTime28.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long34 = dateTimeZone31.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime35 = dateTime28.toDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime36 = dateTime28.toLocalDateTime();
        org.joda.time.Days days37 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDateTime16, (org.joda.time.ReadablePartial) localDateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime35", (dateTime28.compareTo(dateTime35) == 0) == dateTime28.equals(dateTime35));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        java.lang.String str18 = dateTimeFieldType16.getName();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.minutes();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DurationField durationField31 = chronology27.eras();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType16.getField(chronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField28 and durationField31", Math.signum(durationField28.compareTo(durationField31)) == -Math.signum(durationField31.compareTo(durationField28)));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        int int8 = dateTime7.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long13 = dateTimeZone10.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(52);
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks(53293197);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime14", (dateTime7.compareTo(dateTime14) == 0) == dateTime7.equals(dateTime14));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        mutablePeriod1.addWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        int int18 = dateTime17.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long23 = dateTimeZone20.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone20);
        org.joda.time.Duration duration25 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        boolean boolean36 = dateTime17.equals((java.lang.Object) dateTimeField35);
        org.joda.time.DateTime dateTime38 = dateTime17.minusMillis(110);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillis(1681770859977600000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime24", (dateTime17.compareTo(dateTime24) == 0) == dateTime17.equals(dateTime24));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DateTime.Property property5 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        int int12 = dateTime10.getHourOfDay();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Calendar calendar16 = dateTime10.toCalendar(locale14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = dateTime10.withZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        long long30 = dateTimeZone26.convertLocalToUTC(52L, false);
        long long32 = dateTimeZone26.previousTransition((long) 'x');
        long long34 = dateTimeZone19.getMillisKeepLocal(dateTimeZone26, 31556952000L);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(18350);
        org.joda.time.Seconds seconds38 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property39 = dateTime35.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar16", (gregorianCalendar3.compareTo(calendar16) == 0) == gregorianCalendar3.equals(calendar16));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes5 = minutes3.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.plus(minutes3);
        org.joda.time.Minutes minutes7 = minutes3.negated();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        int int12 = dateTime10.getHourOfDay();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Calendar calendar16 = dateTime10.toCalendar(locale14);
        org.joda.time.DateTime.Property property17 = dateTime10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isStandardOffset((long) (byte) 100);
        boolean boolean24 = dateTimeZone19.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTime dateTime25 = dateTime10.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime44 = dateTime39.toLocalDateTime();
        boolean boolean45 = dateTimeZone32.isLocalDateTimeGap(localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime54 = dateTime49.toLocalDateTime();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime44, (org.joda.time.ReadablePartial) localDateTime54);
        boolean boolean56 = dateTimeZone28.isLocalDateTimeGap(localDateTime54);
        boolean boolean57 = dateTimeZone19.isLocalDateTimeGap(localDateTime54);
        boolean boolean58 = minutes7.equals((java.lang.Object) boolean57);
        org.joda.time.Minutes minutes60 = minutes7.multipliedBy(0);
        org.joda.time.Minutes minutes62 = minutes7.multipliedBy(53293197);
        org.joda.time.Minutes minutes64 = minutes62.multipliedBy(2888);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar11 and calendar16", (gregorianCalendar11.compareTo(calendar16) == 0) == gregorianCalendar11.equals(calendar16));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(3600000L);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = dateTime5.toLocalDateTime();
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getVariant();
        java.util.Calendar calendar13 = dateTime5.toCalendar(locale11);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration16 = org.joda.time.Duration.millis((long) (-8));
        org.joda.time.Duration duration18 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration19 = duration16.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime22.toGregorianCalendar();
        int int24 = dateTime22.getHourOfDay();
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Calendar calendar28 = dateTime22.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone31.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTime dateTime35 = dateTime22.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime46 = dateTime41.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime49 = dateTime41.plusMillis(59);
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10);
        int int52 = period51.getSeconds();
        org.joda.time.Period period54 = period51.minusHours(100);
        int int55 = period54.getMillis();
        org.joda.time.Period period57 = period54.plusDays((int) 'a');
        org.joda.time.Period period58 = period54.negated();
        org.joda.time.Duration duration59 = period58.toStandardDuration();
        org.joda.time.DateTime dateTime60 = dateTime49.plus((org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        long long68 = dateTimeZone64.convertLocalToUTC((-259200000L), true);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        boolean boolean73 = dateTime71.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property74 = dateTime71.millisOfSecond();
        org.joda.time.DateTime dateTime75 = property74.getDateTime();
        org.joda.time.Chronology chronology76 = dateTime75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.millisOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.centuryOfEra();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((java.lang.Object) long68, chronology76);
        org.joda.time.Chronology chronology80 = chronology76.withUTC();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(chronology76);
        boolean boolean82 = duration59.equals((java.lang.Object) dateTime81);
        org.joda.time.Duration duration83 = duration1.minus((org.joda.time.ReadableDuration) duration59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar23 and calendar28", (gregorianCalendar23.compareTo(calendar28) == 0) == gregorianCalendar23.equals(calendar28));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.months();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.Instant instant11 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        int int16 = dateTime14.getHourOfDay();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Calendar calendar20 = dateTime14.toCalendar(locale18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime27 = dateTime14.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = dateTime27.withZone(dateTimeZone28);
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration33 = period32.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(0);
        org.joda.time.Duration duration43 = period32.toDurationTo((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean44 = dateTime29.equals((java.lang.Object) dateTime40);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.seconds();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = dateTime50.toCalendar(locale51);
        org.joda.time.DateTime dateTime54 = dateTime50.plusMillis((int) '4');
        org.joda.time.Chronology chronology55 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) -1, periodType46, chronology55);
        org.joda.time.DateTime dateTime59 = dateTime29.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 19);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant11, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Hours hours61 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours63 = hours61.plus((int) (byte) 100);
        org.joda.time.Hours hours65 = hours61.minus((int) (byte) 10);
        boolean boolean66 = duration60.equals((java.lang.Object) hours61);
        org.joda.time.DurationFieldType durationFieldType67 = hours61.getFieldType();
        int int68 = periodType0.indexOf(durationFieldType67);
        org.joda.time.PeriodType periodType69 = periodType0.withWeeksRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar15 and calendar20", (gregorianCalendar15.compareTo(calendar20) == 0) == gregorianCalendar15.equals(calendar20));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getHourOfDay();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Calendar calendar10 = dateTime4.toCalendar(locale8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = dateTime4.withZone(dateTimeZone13);
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration21 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration22 = duration19.minus((org.joda.time.ReadableDuration) duration21);
        long long23 = duration19.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime4.plus((org.joda.time.ReadableDuration) duration19);
        boolean boolean25 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Days days26 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod27 = days26.toMutablePeriod();
        mutablePeriod27.addWeeks((int) (short) -1);
        mutablePeriod27.clear();
        mutablePeriod27.addMillis((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.Instant instant43 = instant42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(0);
        boolean boolean53 = instant43.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Days days54 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod55 = days54.toMutablePeriod();
        org.joda.time.Duration duration56 = days54.toStandardDuration();
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        org.joda.time.Duration duration59 = days57.toStandardDuration();
        boolean boolean60 = duration56.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTime dateTime61 = dateTime52.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration62 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime64 = dateTime52.minusDays(2123);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.plus(readableDuration65);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar5 and calendar10", (gregorianCalendar5.compareTo(calendar10) == 0) == gregorianCalendar5.equals(calendar10));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getHourOfDay();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Calendar calendar10 = dateTime4.toCalendar(locale8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = dateTime4.withZone(dateTimeZone13);
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration21 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration22 = duration19.minus((org.joda.time.ReadableDuration) duration21);
        long long23 = duration19.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime4.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType46 = periodType45.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime44, periodType45);
        org.joda.time.Instant instant50 = instant34.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = instant50.toString(dateTimeFormatter51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) instant50);
        org.joda.time.Chronology chronology54 = instant50.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645488000000L, 31452522789L, chronology54);
        mutablePeriod56.setDays(34);
        org.joda.time.Seconds seconds59 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds61 = seconds59.multipliedBy(999);
        org.joda.time.Duration duration62 = seconds59.toStandardDuration();
        org.joda.time.Seconds seconds64 = seconds59.multipliedBy(0);
        org.joda.time.Seconds seconds66 = org.joda.time.Seconds.seconds(31);
        org.joda.time.Seconds seconds67 = seconds59.plus(seconds66);
        mutablePeriod56.add((org.joda.time.ReadablePeriod) seconds67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar5 and calendar10", (gregorianCalendar5.compareTo(calendar10) == 0) == gregorianCalendar5.equals(calendar10));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = dateTime14.toLocalDateTime();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getVariant();
        java.util.Calendar calendar22 = dateTime14.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = property9.setCopy("52", locale20);
        org.joda.time.DateTime dateTime24 = property9.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField25 = property9.getField();
        boolean boolean26 = property9.isLeap();
        org.joda.time.DateTime dateTime27 = property9.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = dateTime14.toLocalDateTime();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getVariant();
        java.util.Calendar calendar22 = dateTime14.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = property9.setCopy("52", locale20);
        java.lang.String str24 = locale20.getDisplayCountry();
        java.util.Locale locale25 = locale20.stripExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.Duration duration31 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone37.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay(0);
        int int44 = dateTime43.getDayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime43.minusWeeks((int) (short) 100);
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType48 = minutes47.getFieldType();
        org.joda.time.DateTime dateTime50 = dateTime46.withFieldAdded(durationFieldType48, (-8));
        int int51 = period34.get(durationFieldType48);
        org.joda.time.DateTime dateTime53 = dateTime28.withFieldAdded(durationFieldType48, (-1));
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime28.getZone();
        int int56 = dateTimeZone54.getOffset(79199999L);
        java.util.TimeZone timeZone57 = dateTimeZone54.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        org.joda.time.DateTime.Property property27 = dateTime20.minuteOfHour();
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Duration duration30 = days28.toStandardDuration();
        org.joda.time.Days days31 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod32 = days31.toMutablePeriod();
        org.joda.time.Duration duration33 = days31.toStandardDuration();
        boolean boolean34 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        mutableInterval36.setDurationBeforeEnd(4459615861L);
        boolean boolean39 = interval6.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Interval interval40 = interval6.toInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar26", (gregorianCalendar21.compareTo(calendar26) == 0) == gregorianCalendar21.equals(calendar26));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType10.getField(chronology14);
        java.lang.String str17 = dateTimeField15.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime26 = dateTime21.toLocalDateTime();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getDisplayVariant();
        java.lang.String str29 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, locale27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        int int34 = dateTime32.getHourOfDay();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.toLanguageTag();
        java.util.Calendar calendar38 = dateTime32.toCalendar(locale36);
        org.joda.time.DateTime dateTime40 = dateTime32.minusYears(7);
        org.joda.time.DateTime dateTime41 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        int int42 = localDateTime26.size();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis((int) '4');
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.minuteOfHour();
        long long56 = dateTimeField54.roundHalfFloor((long) (-18358));
        java.lang.String str57 = dateTimeField54.getName();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getISO3Language();
        java.lang.String str61 = dateTimeField54.getAsText(12, locale59);
        java.lang.String str62 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime26, (int) (short) 100, locale59);
        java.lang.String str64 = dateTimeField9.getAsText((-420001L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar33 and calendar38", (gregorianCalendar33.compareTo(calendar38) == 0) == gregorianCalendar33.equals(calendar38));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (-1), (long) (byte) 1);
        org.joda.time.DateTime dateTime27 = dateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (short) 0);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long33 = dateTimeZone30.adjustOffset(32L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType35.getField(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfMonth();
        java.lang.String str42 = dateTimeField41.toString();
        java.util.Locale locale46 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str47 = dateTimeField41.getAsText(1, locale46);
        java.lang.String str48 = dateTimeZone30.getName((long) 102, locale46);
        java.util.TimeZone timeZone49 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime50 = dateTime27.withZone(dateTimeZone30);
        int int52 = dateTimeZone30.getOffsetFromLocal(176707320000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime50", (dateTime3.compareTo(dateTime50) == 0) == dateTime3.equals(dateTime50));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.format.PeriodPrinter periodPrinter5 = null;
        org.joda.time.format.PeriodParser periodParser6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = new org.joda.time.format.PeriodFormatter(periodPrinter5, periodParser6);
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter7.withLocale(locale8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter9.withParseType(periodType11);
        boolean boolean14 = periodFormatter13.isParser();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTime17.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property20 = dateTime17.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime23.toGregorianCalendar();
        int int25 = dateTime23.getHourOfDay();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale27.toLanguageTag();
        java.util.Calendar calendar29 = dateTime23.toCalendar(locale27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str33 = locale27.getDisplayVariant(locale32);
        int int34 = property20.getMaximumTextLength(locale32);
        org.joda.time.format.PeriodFormatter periodFormatter35 = periodFormatter13.withLocale(locale32);
        org.joda.time.format.PeriodFormatter periodFormatter36 = periodFormatter2.withLocale(locale32);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType37);
        org.joda.time.format.PeriodParser periodParser39 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser40 = periodFormatter2.getParser();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar24 and calendar29", (gregorianCalendar24.compareTo(calendar29) == 0) == gregorianCalendar24.equals(calendar29));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = property5.getAsText(locale21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        int int27 = dateTime25.getHourOfDay();
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale29.toLanguageTag();
        java.util.Calendar calendar31 = dateTime25.toCalendar(locale29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = dateTime25.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes((int) 'x');
        int int43 = property5.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime45 = property5.addToCopy(7);
        org.joda.time.DateMidnight dateMidnight46 = dateTime45.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight47 = dateTime45.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = property5.getAsText(locale21);
        org.joda.time.DateTime dateTime24 = property5.setCopy("52");
        org.joda.time.DateTime dateTime25 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime27 = property5.setCopy("822");
        org.joda.time.DateTime dateTime29 = property5.addWrapFieldToCopy(13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = dateTime14.toLocalDateTime();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getVariant();
        java.util.Calendar calendar22 = dateTime14.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = property9.setCopy("52", locale20);
        java.lang.String str24 = locale20.getDisplayCountry();
        java.util.Set<java.lang.String> strSet25 = locale20.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet26 = locale20.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMillis((int) '4');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = dateTime32.toLocalDateTime();
        int[] intArray38 = null;
        int int39 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37, intArray38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime48 = dateTime43.toLocalDateTime();
        int int49 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        java.util.GregorianCalendar gregorianCalendar53 = dateTime52.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int55 = dateTime52.get(dateTimeFieldType54);
        boolean boolean56 = localDateTime48.isSupported(dateTimeFieldType54);
        boolean boolean57 = dateTimeZone16.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = dateTime61.toCalendar(locale62);
        org.joda.time.DateTime dateTime65 = dateTime61.plusMillis((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime61.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        boolean boolean71 = dateTime69.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes72 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime69);
        boolean boolean73 = dateTimeZone16.equals((java.lang.Object) dateTime69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        int int6 = property5.getLeapAmount();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond(10);
        org.joda.time.DateTime dateTime12 = dateTime11.withLaterOffsetAtOverlap();
        int int13 = dateTime11.getDayOfWeek();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration16.toPeriod();
        org.joda.time.DateTime dateTime23 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone28);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval32 = interval30.toMutableInterval();
        boolean boolean34 = mutableInterval32.contains((long) '4');
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        int int39 = dateTime37.getHourOfDay();
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Calendar calendar43 = dateTime37.toCalendar(locale41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = dateTime37.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime61 = dateTime56.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        mutableInterval32.setEnd((org.joda.time.ReadableInstant) dateTime56);
        long long64 = mutableInterval32.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Calendar calendar72 = dateTime70.toCalendar(locale71);
        org.joda.time.DateTime dateTime74 = dateTime70.plusMillis((int) '4');
        org.joda.time.Chronology chronology75 = dateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.dayOfWeek();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 12, (long) 3, chronology75);
        org.joda.time.Period period79 = period77.minusMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(dateTimeZone81);
        boolean boolean84 = dateTime82.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property85 = dateTime82.millisOfSecond();
        org.joda.time.Duration duration86 = period77.toDurationFrom((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean87 = mutableInterval32.isBefore((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Hours hours88 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar38 and calendar43", (gregorianCalendar38.compareTo(calendar43) == 0) == gregorianCalendar38.equals(calendar43));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.minuteOfHour();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(53231114059L, 6700148978639999L, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.year();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean20 = dateTime18.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property21 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime22 = property21.getDateTime();
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.era();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(3628800000L, 100L, chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.clockhourOfHalfday();
        java.lang.String str30 = dateTimeField28.getAsShortText(10368000L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        int int35 = dateTime33.getHourOfDay();
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.lang.String str38 = locale37.toLanguageTag();
        java.util.Calendar calendar39 = dateTime33.toCalendar(locale37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime44 = null;
        boolean boolean45 = dateTimeZone42.isLocalDateTimeGap(localDateTime44);
        org.joda.time.DateTime dateTime46 = dateTime33.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime48 = dateTime46.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.Chronology chronology57 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Calendar calendar65 = dateTime63.toCalendar(locale64);
        org.joda.time.DateTime dateTime67 = dateTime63.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime68 = dateTime63.toLocalDateTime();
        int[] intArray69 = null;
        int int70 = dateTimeField59.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68, intArray69);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        org.joda.time.DateTime dateTime78 = dateTime74.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime79 = dateTime74.toLocalDateTime();
        int int80 = localDateTime68.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        java.util.GregorianCalendar gregorianCalendar84 = dateTime83.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int86 = dateTime83.get(dateTimeFieldType85);
        boolean boolean87 = localDateTime79.isSupported(dateTimeFieldType85);
        boolean boolean88 = dateTimeZone47.isLocalDateTimeGap(localDateTime79);
        int int89 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) localDateTime79);
        int[] intArray91 = chronology10.get((org.joda.time.ReadablePartial) localDateTime79, 94694400000L);
        int int92 = localDateTime79.size();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar34 and calendar39", (gregorianCalendar34.compareTo(calendar39) == 0) == gregorianCalendar34.equals(calendar39));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.addWeeks((int) (short) -1);
        mutablePeriod1.clear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        int int9 = dateTime7.getHourOfDay();
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.util.Calendar calendar13 = dateTime7.toCalendar(locale11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone16.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTime dateTime20 = dateTime7.withZone(dateTimeZone16);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration25 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        long long26 = duration22.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime7.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.Instant instant37 = dateTime31.toInstant();
        org.joda.time.Instant instant38 = instant37.toInstant();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMillis((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime42.toDateTimeISO();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType49 = periodType48.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant37, (org.joda.time.ReadableInstant) dateTime47, periodType48);
        org.joda.time.Instant instant53 = instant37.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = instant53.toString(dateTimeFormatter54);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) instant53);
        org.joda.time.DurationFieldType durationFieldType58 = mutablePeriod56.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Calendar calendar66 = dateTime64.toCalendar(locale65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusMillis((int) '4');
        org.joda.time.Instant instant69 = dateTime68.toInstant();
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10);
        int int73 = period72.getSeconds();
        org.joda.time.Period period75 = period72.minusHours(100);
        int int76 = period75.getMillis();
        org.joda.time.Period period78 = period75.minusSeconds((int) '#');
        org.joda.time.Duration duration79 = period78.toStandardDuration();
        org.joda.time.Period period80 = period78.toPeriod();
        int[] intArray82 = chronology70.get((org.joda.time.ReadablePeriod) period78, (long) (byte) 0);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) (short) -1, (long) 2, chronology70);
        mutablePeriod56.setPeriod((org.joda.time.ReadableInterval) mutableInterval83);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) mutableInterval83);
        java.lang.String str86 = mutablePeriod1.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar8 and calendar13", (gregorianCalendar8.compareTo(calendar13) == 0) == gregorianCalendar8.equals(calendar13));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime11.withSecondOfMinute(12);
        org.joda.time.DateTime dateTime21 = dateTime11.withYear(6);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra(1);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType26.getField(chronology30);
        org.joda.time.DurationField durationField32 = durationFieldType25.getField(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.clockhourOfHalfday();
        int int34 = dateTime21.get(dateTimeField33);
        long long36 = dateTimeField33.roundCeiling(28117244232000L);
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = locale39.getISO3Language();
        java.lang.String str42 = locale39.getCountry();
        java.lang.String str43 = locale39.getDisplayCountry();
        java.util.Locale locale44 = locale39.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        java.util.GregorianCalendar gregorianCalendar48 = dateTime47.toGregorianCalendar();
        int int49 = dateTime47.getHourOfDay();
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale51.toLanguageTag();
        java.util.Calendar calendar53 = dateTime47.toCalendar(locale51);
        org.joda.time.DateTime.Property property54 = dateTime47.minuteOfHour();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale55.getDisplayCountry();
        java.lang.String str57 = property54.getAsShortText(locale55);
        java.lang.String str58 = locale39.getDisplayName(locale55);
        java.lang.String str59 = dateTimeField33.getAsText(readablePartial37, 211, locale39);
        long long62 = dateTimeField33.addWrapField(3024056L, 83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar48 and calendar53", (gregorianCalendar48.compareTo(calendar53) == 0) == gregorianCalendar48.equals(calendar53));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("P-1M6D");
        java.lang.String str2 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-1L), dateTimeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        int int16 = dateTime14.getHourOfDay();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Calendar calendar20 = dateTime14.toCalendar(locale18);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.Duration duration27 = days25.toStandardDuration();
        boolean boolean28 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime14);
        mutableInterval30.setDurationBeforeEnd(4459615861L);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone37);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval41 = interval39.toMutableInterval();
        boolean boolean42 = interval39.isAfterNow();
        org.joda.time.Days days43 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod44 = days43.toMutablePeriod();
        org.joda.time.Duration duration45 = days43.toStandardDuration();
        org.joda.time.Days days46 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod47 = days46.toMutablePeriod();
        org.joda.time.Duration duration48 = days46.toStandardDuration();
        boolean boolean49 = duration45.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Days days50 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod51 = days50.toMutablePeriod();
        org.joda.time.Duration duration52 = days50.toStandardDuration();
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        boolean boolean56 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        org.joda.time.Duration duration59 = days57.toStandardDuration();
        boolean boolean60 = duration55.isShorterThan((org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period72 = period70.minusMinutes((int) ' ');
        org.joda.time.Interval interval73 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period72);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-1L), dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime78 = null;
        boolean boolean79 = dateTimeZone76.isLocalDateTimeGap(localDateTime78);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime82 = dateTime80.withHourOfDay(0);
        java.lang.String str84 = dateTime80.toString("52");
        org.joda.time.DateTime.Property property85 = dateTime80.dayOfMonth();
        boolean boolean86 = interval73.isBefore((org.joda.time.ReadableInstant) dateTime80);
        mutableInterval30.setEnd((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval88 = mutableInterval30.copy();
        boolean boolean89 = languageRange1.equals((java.lang.Object) mutableInterval88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar15 and calendar20", (gregorianCalendar15.compareTo(calendar20) == 0) == gregorianCalendar15.equals(calendar20));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        java.util.Locale locale11 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str12 = locale6.getDisplayVariant(locale11);
        java.util.Set<java.lang.String> strSet13 = locale6.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.Duration duration17 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration20 = duration17.minus((org.joda.time.ReadableDuration) duration19);
        long long21 = duration17.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime2.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.Instant instant32 = dateTime26.toInstant();
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType44 = periodType43.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime42, periodType43);
        org.joda.time.Instant instant48 = instant32.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = instant48.toString(dateTimeFormatter49);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) instant48);
        org.joda.time.Duration duration53 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration56 = duration53.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Instant instant57 = instant48.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        boolean boolean62 = dateTime60.isAfter((long) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval(obj65, chronology66);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType64.getField(chronology68);
        org.joda.time.DurationField durationField70 = durationFieldType63.getField(chronology68);
        org.joda.time.DateTimeField dateTimeField71 = chronology68.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField72 = chronology68.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime60.toMutableDateTime(chronology68);
        java.lang.String str75 = mutableDateTime73.toString("934");
        org.joda.time.Period period76 = duration53.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime73);
        org.joda.time.Period period78 = period76.withWeeks(766);
        org.joda.time.Period period79 = period78.normalizedStandard();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.Duration duration31 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.DateTime.Property property33 = dateTime17.secondOfDay();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime44 = dateTime39.toLocalDateTime();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getVariant();
        java.util.Calendar calendar47 = dateTime39.toCalendar(locale45);
        java.util.Locale.Builder builder48 = builder35.setLocale(locale45);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale.Builder builder50 = builder48.setLocale(locale49);
        java.util.Locale.Builder builder51 = builder48.clearExtensions();
        java.util.Locale locale52 = builder48.build();
        java.lang.String str53 = dateTime17.toString("593", locale52);
        org.joda.time.Days days54 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod55 = days54.toMutablePeriod();
        mutablePeriod55.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval58 = null;
        mutablePeriod55.add(readableInterval58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.eras();
        int int61 = mutablePeriod55.get(durationFieldType60);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10);
        int int66 = period65.getSeconds();
        org.joda.time.Period period68 = period65.minusHours(100);
        int int69 = period68.getMillis();
        org.joda.time.Period period71 = period68.minusSeconds((int) '#');
        org.joda.time.Duration duration72 = period71.toStandardDuration();
        org.joda.time.Period period73 = period71.toPeriod();
        mutablePeriod55.add((org.joda.time.ReadablePeriod) period71);
        java.lang.Object obj75 = mutablePeriod55.clone();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.Duration duration31 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        mutablePeriod36.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval39 = null;
        mutablePeriod36.add(readableInterval39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.eras();
        int int42 = mutablePeriod36.get(durationFieldType41);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType41);
        mutablePeriod34.addSeconds((int) '#');
        mutablePeriod34.addMillis((int) (short) 10);
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        mutablePeriod34.add((long) (byte) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime17.toMutableDateTime(chronology52);
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration57 = period56.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone60.isLocalDateTimeGap(localDateTime62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime66 = dateTime64.withHourOfDay(0);
        int int67 = dateTime66.getDayOfWeek();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        int int69 = dateTime66.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period70 = duration57.toPeriodTo((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = mutableDateTime54.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime73 = dateTime68.plusSeconds(2);
        org.joda.time.DateMidnight dateMidnight74 = dateTime73.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.seconds();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) -1, periodType3, chronology12);
        org.joda.time.Period period15 = new org.joda.time.Period((long) 14, periodType1, chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.hourOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology12);
        java.lang.Object obj18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj18, dateTimeZone20);
        int int23 = dateTime22.getMillisOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.isStandardOffset((long) (byte) 100);
        boolean boolean47 = dateTimeZone42.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone50.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        boolean boolean70 = dateTime68.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes71 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration72 = minutes71.toStandardDuration();
        org.joda.time.Duration duration73 = minutes71.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration73);
        int int75 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime76 = dateTime29.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime79 = dateTime76.withZone(dateTimeZone78);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period25, (org.joda.time.ReadableInstant) dateTime76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime79", (dateTime7.compareTo(dateTime79) == 0) == dateTime7.equals(dateTime79));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.Duration duration17 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration20 = duration17.minus((org.joda.time.ReadableDuration) duration19);
        long long21 = duration17.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime2.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMillis((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTimeISO();
        org.joda.time.Instant instant32 = dateTime26.toInstant();
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusMillis((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType44 = periodType43.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime42, periodType43);
        org.joda.time.Instant instant48 = instant32.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = instant48.toString(dateTimeFormatter49);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) instant48);
        org.joda.time.Duration duration53 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration56 = duration53.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Instant instant57 = instant48.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Instant instant59 = instant57.withMillis(518400L);
        org.joda.time.Instant instant61 = instant59.withMillis(1645440506571L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes5 = minutes3.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.plus(minutes3);
        org.joda.time.Minutes minutes7 = minutes3.negated();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        int int12 = dateTime10.getHourOfDay();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Calendar calendar16 = dateTime10.toCalendar(locale14);
        org.joda.time.DateTime.Property property17 = dateTime10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isStandardOffset((long) (byte) 100);
        boolean boolean24 = dateTimeZone19.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTime dateTime25 = dateTime10.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime44 = dateTime39.toLocalDateTime();
        boolean boolean45 = dateTimeZone32.isLocalDateTimeGap(localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime54 = dateTime49.toLocalDateTime();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime44, (org.joda.time.ReadablePartial) localDateTime54);
        boolean boolean56 = dateTimeZone28.isLocalDateTimeGap(localDateTime54);
        boolean boolean57 = dateTimeZone19.isLocalDateTimeGap(localDateTime54);
        boolean boolean58 = minutes7.equals((java.lang.Object) boolean57);
        org.joda.time.Minutes minutes60 = minutes7.multipliedBy(0);
        org.joda.time.Minutes minutes62 = minutes7.multipliedBy(53293197);
        org.joda.time.Minutes minutes63 = minutes7.negated();
        org.joda.time.Duration duration64 = minutes63.toStandardDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar11 and calendar16", (gregorianCalendar11.compareTo(calendar16) == 0) == gregorianCalendar11.equals(calendar16));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Days days11 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        boolean boolean16 = dateTime14.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property17 = dateTime14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str30 = locale24.getDisplayVariant(locale29);
        int int31 = property17.getMaximumTextLength(locale29);
        org.joda.time.DateTime dateTime32 = property17.roundHalfEvenCopy();
        org.joda.time.Interval interval33 = interval6.withEnd((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.DateTime dateTime36 = dateTime34.plusWeeks(53293197);
        int int37 = dateTime34.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar26", (gregorianCalendar21.compareTo(calendar26) == 0) == gregorianCalendar21.equals(calendar26));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        boolean boolean11 = instant9.isBefore((long) 100);
        org.joda.time.Instant instant14 = instant9.withDurationAdded((long) 10, (int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime15 = instant9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        int int20 = dateTime18.getHourOfDay();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Calendar calendar24 = dateTime18.toCalendar(locale22);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType26.getField(chronology30);
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime18.toDateTime(chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar19 and calendar24", (gregorianCalendar19.compareTo(calendar24) == 0) == gregorianCalendar19.equals(calendar24));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        boolean boolean10 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone15);
        boolean boolean19 = interval17.isAfter(100L);
        long long20 = interval17.getEndMillis();
        org.joda.time.Interval interval21 = interval17.toInterval();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval21.withDurationBeforeEnd(readableDuration22);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType25 = periodType24.withMillisRemoved();
        org.joda.time.Period period26 = interval21.toPeriod(periodType25);
        org.joda.time.Chronology chronology27 = interval21.getChronology();
        mutableInterval7.setChronology(chronology27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean39 = interval35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration41 = mutableInterval7.toDuration();
        long long42 = mutableInterval7.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        java.util.GregorianCalendar gregorianCalendar46 = dateTime45.toGregorianCalendar();
        int int47 = dateTime45.getHourOfDay();
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = locale48.stripExtensions();
        java.lang.String str50 = locale49.toLanguageTag();
        java.util.Calendar calendar51 = dateTime45.toCalendar(locale49);
        org.joda.time.DateTime.Property property52 = dateTime45.minuteOfHour();
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        org.joda.time.Days days56 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod57 = days56.toMutablePeriod();
        org.joda.time.Duration duration58 = days56.toStandardDuration();
        boolean boolean59 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration55);
        long long61 = duration55.getStandardDays();
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration55);
        long long63 = duration55.getStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        boolean boolean68 = dateTime66.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property69 = dateTime66.millisOfSecond();
        int int70 = property69.getLeapAmount();
        org.joda.time.DateTime dateTime71 = property69.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime73 = dateTime71.minusMonths(0);
        org.joda.time.DateTime dateTime75 = dateTime73.withMillisOfSecond(10);
        org.joda.time.DateTime dateTime76 = dateTime75.withLaterOffsetAtOverlap();
        int int77 = dateTime75.getDayOfWeek();
        org.joda.time.Days days78 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod79 = days78.toMutablePeriod();
        org.joda.time.Duration duration80 = days78.toStandardDuration();
        org.joda.time.Days days81 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod82 = days81.toMutablePeriod();
        org.joda.time.Duration duration83 = days81.toStandardDuration();
        boolean boolean84 = duration80.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Period period85 = duration80.toPeriod();
        org.joda.time.DateTime dateTime87 = dateTime75.withDurationAdded((org.joda.time.ReadableDuration) duration80, (int) '#');
        boolean boolean88 = duration55.isEqual((org.joda.time.ReadableDuration) duration80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar46 and calendar51", (gregorianCalendar46.compareTo(calendar51) == 0) == gregorianCalendar46.equals(calendar51));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime22 = property5.addWrapFieldToCopy(59);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) 5);
        org.joda.time.DateTime dateTime26 = dateTime22.plus((org.joda.time.ReadableDuration) duration25);
        java.lang.Object obj27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj27, dateTimeZone29);
        org.joda.time.DateTime.Property property32 = dateTime31.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime36.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTimeISO();
        org.joda.time.Instant instant51 = dateTime45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Calendar calendar57 = dateTime55.toCalendar(locale56);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime55.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        boolean boolean65 = dateTime63.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes66 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration67 = minutes66.toStandardDuration();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 1, (long) (short) -1, periodType71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration67, periodType71);
        org.joda.time.PeriodType periodType74 = periodType71.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime31, periodType71);
        org.joda.time.DateTime.Property property76 = dateTime31.yearOfEra();
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.getDefault(category78);
        java.util.Locale locale80 = java.util.Locale.getDefault(category78);
        org.joda.time.DateTime dateTime81 = property76.setCopy("791", locale80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MIN_VALUE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds3 = seconds1.multipliedBy(999);
        org.joda.time.Duration duration4 = seconds1.toStandardDuration();
        org.joda.time.Seconds seconds6 = seconds1.multipliedBy(0);
        boolean boolean7 = seconds0.isLessThan(seconds6);
        org.joda.time.Seconds seconds9 = seconds6.plus(1969);
        org.joda.time.Seconds seconds11 = seconds9.minus(856);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        int int16 = dateTime14.getHourOfDay();
        org.joda.time.DateTime.Property property17 = dateTime14.yearOfCentury();
        org.joda.time.DateTime dateTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime19 = property17.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime22.toGregorianCalendar();
        int int24 = dateTime22.getHourOfDay();
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Calendar calendar28 = dateTime22.toCalendar(locale26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone31.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTime dateTime35 = dateTime22.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC(52L, false);
        long long44 = dateTimeZone38.previousTransition((long) 'x');
        long long46 = dateTimeZone31.getMillisKeepLocal(dateTimeZone38, 31556952000L);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(18350);
        org.joda.time.Seconds seconds50 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Seconds seconds51 = seconds50.negated();
        org.joda.time.Seconds seconds52 = seconds11.plus(seconds50);
        org.joda.time.DurationFieldType durationFieldType53 = seconds52.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar15 and calendar28", (gregorianCalendar15.compareTo(calendar28) == 0) == gregorianCalendar15.equals(calendar28));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology4);
        java.lang.String str7 = dateTimeField5.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = dateTime11.toLocalDateTime();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime22.toGregorianCalendar();
        int int24 = dateTime22.getHourOfDay();
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Calendar calendar28 = dateTime22.toCalendar(locale26);
        org.joda.time.DateTime dateTime30 = dateTime22.minusYears(7);
        org.joda.time.DateTime dateTime31 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        long long36 = property34.getDifferenceAsLong(readableInstant35);
        org.joda.time.DateTime dateTime38 = property34.addToCopy((long) 653);
        int int39 = property34.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar23 and calendar28", (gregorianCalendar23.compareTo(calendar28) == 0) == gregorianCalendar23.equals(calendar28));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.Duration duration1 = days0.toStandardDuration();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        int int4 = days2.getDays();
        org.joda.time.Days days5 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod6 = days5.toMutablePeriod();
        boolean boolean7 = days2.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.Duration duration8 = days2.toStandardDuration();
        boolean boolean9 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone14);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        boolean boolean19 = mutableInterval17.isBefore((long) 59);
        boolean boolean20 = mutableInterval17.containsNow();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1L), dateTimeZone25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone25);
        boolean boolean29 = interval27.isAfter(100L);
        long long30 = interval27.getEndMillis();
        org.joda.time.Interval interval31 = interval27.toInterval();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Interval interval33 = interval31.withDurationBeforeEnd(readableDuration32);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType35 = periodType34.withMillisRemoved();
        org.joda.time.Period period36 = interval31.toPeriod(periodType35);
        org.joda.time.Chronology chronology37 = interval31.getChronology();
        mutableInterval17.setChronology(chronology37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        java.util.GregorianCalendar gregorianCalendar42 = dateTime41.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight43 = dateTime41.toDateMidnight();
        boolean boolean44 = mutableInterval17.isAfter((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        java.util.GregorianCalendar gregorianCalendar48 = dateTime47.toGregorianCalendar();
        int int49 = dateTime47.getHourOfDay();
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale51.toLanguageTag();
        java.util.Calendar calendar53 = dateTime47.toCalendar(locale51);
        org.joda.time.DateTime.Property property54 = dateTime47.minuteOfHour();
        org.joda.time.Days days55 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod56 = days55.toMutablePeriod();
        org.joda.time.Duration duration57 = days55.toStandardDuration();
        org.joda.time.Days days58 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod59 = days58.toMutablePeriod();
        org.joda.time.Duration duration60 = days58.toStandardDuration();
        boolean boolean61 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology63 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.halfdayOfDay();
        org.joda.time.DateTime dateTime65 = dateMidnight43.toDateTime(chronology63);
        org.joda.time.DateTime dateTime67 = dateTime65.withCenturyOfEra(645);
        org.joda.time.Days days69 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod70 = days69.toMutablePeriod();
        int int71 = days69.getDays();
        org.joda.time.Days days72 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod73 = days72.toMutablePeriod();
        boolean boolean74 = days69.equals((java.lang.Object) mutablePeriod73);
        org.joda.time.Duration duration75 = days69.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType76 = days69.getFieldType();
        org.joda.time.PeriodType periodType77 = days69.getPeriodType();
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.yearWeekDayTime();
        java.lang.String str82 = periodType81.toString();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) 14, periodType81);
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj86 = null;
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Interval interval88 = new org.joda.time.Interval(obj86, chronology87);
        org.joda.time.Chronology chronology89 = interval88.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType85.getField(chronology89);
        org.joda.time.DurationField durationField91 = durationFieldType84.getField(chronology89);
        org.joda.time.DateTimeField dateTimeField92 = chronology89.hourOfHalfday();
        org.joda.time.Period period93 = new org.joda.time.Period((long) 0, 10L, periodType81, chronology89);
        org.joda.time.DateTimeField dateTimeField94 = chronology89.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((long) (-1032438240), periodType77, chronology89);
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime67, periodType77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar42 and calendar53", (gregorianCalendar42.compareTo(calendar53) == 0) == gregorianCalendar42.equals(calendar53));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period25 = interval6.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime28.toGregorianCalendar();
        int int30 = dateTime28.getHourOfDay();
        org.joda.time.DateTime.Property property31 = dateTime28.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        int int36 = dateTime34.getHourOfDay();
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = locale38.toLanguageTag();
        java.util.Calendar calendar40 = dateTime34.toCalendar(locale38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone43.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DateTime dateTime47 = dateTime34.withZone(dateTimeZone43);
        org.joda.time.Duration duration49 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration51 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration52 = duration49.minus((org.joda.time.ReadableDuration) duration51);
        long long53 = duration49.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime34.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration55 = org.joda.time.Duration.ZERO;
        org.joda.time.Minutes minutes56 = duration55.toStandardMinutes();
        org.joda.time.DateTime dateTime57 = dateTime34.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval6.contains((org.joda.time.ReadableInterval) mutableInterval58);
        boolean boolean60 = interval6.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar29 and calendar40", (gregorianCalendar29.compareTo(calendar40) == 0) == gregorianCalendar29.equals(calendar40));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone8);
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = interval10.toMutableInterval();
        org.joda.time.Period period13 = mutableInterval12.toPeriod();
        org.joda.time.Days days14 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod15 = days14.toMutablePeriod();
        org.joda.time.Duration duration16 = days14.toStandardDuration();
        org.joda.time.Days days17 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod18 = days17.toMutablePeriod();
        org.joda.time.Duration duration19 = days17.toStandardDuration();
        boolean boolean20 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Days days21 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod22 = days21.toMutablePeriod();
        org.joda.time.Duration duration23 = days21.toStandardDuration();
        boolean boolean24 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration23);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        boolean boolean26 = interval2.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone31);
        boolean boolean35 = interval33.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        java.util.GregorianCalendar gregorianCalendar48 = dateTime47.toGregorianCalendar();
        int int49 = dateTime47.getHourOfDay();
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale51.toLanguageTag();
        java.util.Calendar calendar53 = dateTime47.toCalendar(locale51);
        org.joda.time.DateTime.Property property54 = dateTime47.minuteOfHour();
        org.joda.time.Days days55 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod56 = days55.toMutablePeriod();
        org.joda.time.Duration duration57 = days55.toStandardDuration();
        org.joda.time.Days days58 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod59 = days58.toMutablePeriod();
        org.joda.time.Duration duration60 = days58.toStandardDuration();
        boolean boolean61 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime47);
        mutableInterval63.setDurationBeforeEnd(4459615861L);
        boolean boolean66 = interval33.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableInterval63.setDurationBeforeEnd(readableDuration67);
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.centuries();
        mutableInterval12.setChronology(chronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar48 and calendar53", (gregorianCalendar48.compareTo(calendar53) == 0) == gregorianCalendar48.equals(calendar53));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (-8));
        org.joda.time.Duration duration21 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration22 = duration19.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.time();
        org.joda.time.Period period24 = duration22.toPeriod(periodType23);
        org.joda.time.Period period25 = interval17.toPeriod(periodType23);
        org.joda.time.Period period27 = period25.plusMinutes(0);
        org.joda.time.Period period29 = period27.minusMinutes(35);
        org.joda.time.Minutes minutes30 = period29.toStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        boolean boolean10 = interval8.isAfter(100L);
        long long11 = interval8.getEndMillis();
        org.joda.time.Interval interval12 = interval8.toInterval();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Interval interval14 = interval12.withDurationBeforeEnd(readableDuration13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType16 = periodType15.withMillisRemoved();
        org.joda.time.Period period17 = interval12.toPeriod(periodType16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = period17.withPeriodType(periodType18);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant31 = dateTime25.toInstant();
        org.joda.time.Instant instant32 = instant31.toInstant();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        boolean boolean42 = instant32.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant46 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration44, (-1));
        boolean boolean48 = instant46.isBefore((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime52.toDateTimeISO();
        org.joda.time.Instant instant58 = dateTime52.toInstant();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant46, (org.joda.time.ReadableInstant) dateTime52, periodType59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) (short) 1, (long) 999, periodType59);
        mutablePeriod61.addDays(0);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod61.copy();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        java.util.GregorianCalendar gregorianCalendar70 = dateTime69.toGregorianCalendar();
        org.joda.time.DateTime dateTime72 = dateTime69.withWeekyear(0);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        long long79 = dateTimeZone75.convertLocalToUTC((-259200000L), true);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(dateTimeZone81);
        boolean boolean84 = dateTime82.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property85 = dateTime82.millisOfSecond();
        org.joda.time.DateTime dateTime86 = property85.getDateTime();
        org.joda.time.Chronology chronology87 = dateTime86.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.millisOfDay();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.centuryOfEra();
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((java.lang.Object) long79, chronology87);
        org.joda.time.Chronology chronology91 = chronology87.withUTC();
        org.joda.time.MutableDateTime mutableDateTime92 = dateTime72.toMutableDateTime(chronology87);
        mutablePeriod64.add((-259200100L), chronology87);
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((long) 1970, (long) 102, periodType18, chronology87);
        mutablePeriod94.clear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and gregorianCalendar70", (calendar27.compareTo(gregorianCalendar70) == 0) == calendar27.equals(gregorianCalendar70));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime26 = dateTime12.plusHours(22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTime29.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property32 = dateTime29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar36 = dateTime35.toGregorianCalendar();
        int int37 = dateTime35.getHourOfDay();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale39.toLanguageTag();
        java.util.Calendar calendar41 = dateTime35.toCalendar(locale39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str45 = locale39.getDisplayVariant(locale44);
        int int46 = property32.getMaximumTextLength(locale44);
        org.joda.time.DateTime dateTime47 = property32.roundHalfFloorCopy();
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = property32.getAsText(locale48);
        int int50 = property32.getMaximumValueOverall();
        org.joda.time.DateTime dateTime51 = property32.withMinimumValue();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime51.plusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.Instant instant63 = dateTime62.toInstant();
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.Instant instant65 = instant63.toInstant();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.MutableDateTime mutableDateTime68 = instant63.toMutableDateTime(dateTimeZone67);
        long long70 = dateTimeZone67.nextTransition(22L);
        org.joda.time.DateTime dateTime71 = dateTime51.withZone(dateTimeZone67);
        int int73 = dateTimeZone67.getStandardOffset(1664758038843L);
        java.util.Locale locale77 = new java.util.Locale("PT6H", "hi!");
        java.lang.String str78 = dateTimeZone67.getName(20L, locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar36 and calendar41", (gregorianCalendar36.compareTo(calendar41) == 0) == gregorianCalendar36.equals(calendar41));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes((int) 'x');
        org.joda.time.DateTime.Property property20 = dateTime17.era();
        int int21 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime.Property property22 = dateTime17.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(0L, chronology1);
        int int3 = period2.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        int int8 = dateTime6.getHourOfDay();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = locale10.toLanguageTag();
        java.util.Calendar calendar12 = dateTime6.toCalendar(locale10);
        org.joda.time.DateTime.Property property13 = dateTime6.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime23 = dateTime18.toLocalDateTime();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getVariant();
        java.util.Calendar calendar26 = dateTime18.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = property13.setCopy("52", locale24);
        org.joda.time.DateTime dateTime28 = property13.roundCeilingCopy();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period2, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = mutableInterval29.isBefore(2861872L);
        org.joda.time.Days days32 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod33 = days32.toMutablePeriod();
        org.joda.time.Duration duration34 = days32.toStandardDuration();
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Duration duration37 = days35.toStandardDuration();
        boolean boolean38 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Days days39 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod40 = days39.toMutablePeriod();
        org.joda.time.Duration duration41 = days39.toStandardDuration();
        boolean boolean42 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.Period period45 = period43.plusMinutes((int) (short) -1);
        org.joda.time.Period period46 = period43.normalizedStandard();
        mutableInterval29.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 10, (long) (byte) 0);
        mutablePeriod50.addSeconds((int) 'a');
        int int53 = mutablePeriod50.getMinutes();
        mutablePeriod50.setWeeks(52);
        org.joda.time.Period period56 = period43.withFields((org.joda.time.ReadablePeriod) mutablePeriod50);
        int int57 = mutablePeriod50.getMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar7 and calendar12", (gregorianCalendar7.compareTo(calendar12) == 0) == gregorianCalendar7.equals(calendar12));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone11.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        boolean boolean39 = dateTime37.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Duration duration42 = minutes40.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration42);
        int int44 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology45 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField46 = chronology45.eras();
        org.joda.time.DurationField durationField47 = chronology45.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField46", Math.signum(durationField9.compareTo(durationField46)) == -Math.signum(durationField46.compareTo(durationField9)));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DurationField durationField20 = property5.getLeapDurationField();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = property5.getAsShortText(locale22);
        org.joda.time.DateTime dateTime25 = property5.roundCeilingCopy();
        java.lang.String str26 = property5.getAsString();
        org.joda.time.DateTime dateTime27 = property5.withMaximumValue();
        org.joda.time.Hours hours28 = org.joda.time.Hours.TWO;
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) hours28);
        org.joda.time.Hours hours31 = hours28.plus(53);
        int int32 = hours28.getHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        mutablePeriod1.addWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        int int18 = dateTime17.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long23 = dateTimeZone20.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone20);
        org.joda.time.Duration duration25 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime17);
        long long26 = duration25.getStandardSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime24", (dateTime17.compareTo(dateTime24) == 0) == dateTime17.equals(dateTime24));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 100);
        boolean boolean21 = dateTimeZone16.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.Duration duration47 = minutes45.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration47);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime50 = dateTime3.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime50.withZone(dateTimeZone52);
        long long55 = dateTimeZone52.previousTransition((-2208988799994L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime53", (dateTime3.compareTo(dateTime53) == 0) == dateTime3.equals(dateTime53));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime26 = dateTime12.plusHours(22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean31 = dateTime29.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property32 = dateTime29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar36 = dateTime35.toGregorianCalendar();
        int int37 = dateTime35.getHourOfDay();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale39.toLanguageTag();
        java.util.Calendar calendar41 = dateTime35.toCalendar(locale39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str45 = locale39.getDisplayVariant(locale44);
        int int46 = property32.getMaximumTextLength(locale44);
        org.joda.time.DateTime dateTime47 = property32.roundHalfFloorCopy();
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = property32.getAsText(locale48);
        int int50 = property32.getMaximumValueOverall();
        org.joda.time.DateTime dateTime51 = property32.withMinimumValue();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime56.plusMonths((int) (short) -1);
        int int63 = dateTime62.getDayOfMonth();
        org.joda.time.Interval interval64 = duration52.toIntervalTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Calendar calendar70 = dateTime68.toCalendar(locale69);
        org.joda.time.DateTime dateTime72 = dateTime68.plusMillis((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime68.toDateTimeISO();
        org.joda.time.Instant instant74 = dateTime68.toInstant();
        org.joda.time.Instant instant75 = instant74.toInstant();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((-1L), dateTimeZone78);
        org.joda.time.LocalDateTime localDateTime80 = null;
        boolean boolean81 = dateTimeZone78.isLocalDateTimeGap(localDateTime80);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone78);
        org.joda.time.DateTime dateTime84 = dateTime82.withHourOfDay(0);
        boolean boolean85 = instant75.isEqual((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Duration duration87 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant89 = instant75.withDurationAdded((org.joda.time.ReadableDuration) duration87, (-1));
        boolean boolean91 = instant89.isBefore((long) (short) 10);
        org.joda.time.Instant instant92 = instant89.toInstant();
        boolean boolean93 = interval64.contains((org.joda.time.ReadableInstant) instant89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar36 and calendar41", (gregorianCalendar36.compareTo(calendar41) == 0) == gregorianCalendar36.equals(calendar41));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.Days days10 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod11 = days10.toMutablePeriod();
        org.joda.time.Duration duration12 = days10.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod14 = days13.toMutablePeriod();
        org.joda.time.Duration duration15 = days13.toStandardDuration();
        boolean boolean16 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Chronology chronology18 = dateTime2.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.centuries();
        long long21 = durationField19.getMillis(36);
        int int24 = durationField19.getValue((long) 891, (-227207375999965L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.Chronology chronology33 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.Chronology chronology43 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime54 = dateTime49.toLocalDateTime();
        int[] intArray55 = null;
        int int56 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54, intArray55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime65 = dateTime60.toLocalDateTime();
        int int66 = localDateTime54.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        int[] intArray68 = chronology33.get((org.joda.time.ReadablePartial) localDateTime54, (long) 12);
        org.joda.time.DurationField durationField69 = chronology33.halfdays();
        long long72 = durationField69.getDifferenceAsLong((long) 31, (-37120L));
        long long75 = durationField69.subtract(10368000000L, 7);
        int int76 = durationField19.compareTo(durationField69);
        long long79 = durationField69.subtract(3456000031L, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getHourOfDay();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime20.toCalendar(locale24);
        org.joda.time.DateTime.Property property27 = dateTime20.minuteOfHour();
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Duration duration30 = days28.toStandardDuration();
        org.joda.time.Days days31 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod32 = days31.toMutablePeriod();
        org.joda.time.Duration duration33 = days31.toStandardDuration();
        boolean boolean34 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        mutableInterval36.setDurationBeforeEnd(4459615861L);
        boolean boolean39 = interval6.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableInterval36.setDurationBeforeEnd(readableDuration40);
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.centuries();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar26", (gregorianCalendar21.compareTo(calendar26) == 0) == gregorianCalendar21.equals(calendar26));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DurationField durationField11 = chronology7.weeks();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes((int) (short) 10);
        org.joda.time.Days days26 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod27 = days26.toMutablePeriod();
        int int28 = days26.getDays();
        org.joda.time.Days days29 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod30 = days29.toMutablePeriod();
        boolean boolean31 = days26.equals((java.lang.Object) mutablePeriod30);
        org.joda.time.DateTime dateTime32 = dateTime25.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        int[] intArray35 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod30, 6700148978639999L, 20L);
        org.joda.time.DateTimeField dateTimeField36 = chronology7.secondOfMinute();
        long long38 = dateTimeField36.roundCeiling(32L);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property45 = dateTime42.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        java.util.GregorianCalendar gregorianCalendar49 = dateTime48.toGregorianCalendar();
        int int50 = dateTime48.getHourOfDay();
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Calendar calendar54 = dateTime48.toCalendar(locale52);
        java.util.Locale locale57 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str58 = locale52.getDisplayVariant(locale57);
        int int59 = property45.getMaximumTextLength(locale57);
        org.joda.time.DurationField durationField60 = property45.getLeapDurationField();
        java.util.Locale locale61 = java.util.Locale.CHINA;
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.lang.String str64 = property45.getAsShortText(locale62);
        java.lang.String str65 = locale62.getDisplayLanguage();
        java.lang.String str66 = dateTimeField36.getAsShortText(53256912, locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar49 and calendar54", (gregorianCalendar49.compareTo(calendar54) == 0) == gregorianCalendar49.equals(calendar54));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval8.contains((long) '4');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = dateTime13.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = dateTime32.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval8.copy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone45);
        boolean boolean49 = interval47.isAfter(100L);
        long long50 = interval47.getEndMillis();
        org.joda.time.Interval interval51 = interval47.toInterval();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone56);
        org.joda.time.MutableInterval mutableInterval59 = interval58.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval60 = interval58.toMutableInterval();
        org.joda.time.Interval interval61 = interval51.overlap((org.joda.time.ReadableInterval) mutableInterval60);
        boolean boolean62 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) interval61);
        org.joda.time.DateTime dateTime63 = mutableInterval40.getStart();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(3784233600120L);
        org.joda.time.LocalDateTime localDateTime66 = dateTime65.toLocalDateTime();
        java.lang.String str67 = localDateTime66.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getDurationType();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType68.getRangeDurationType();
        boolean boolean71 = localDateTime66.isSupported(dateTimeFieldType68);
        int int72 = dateTime63.get(dateTimeFieldType68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar14 and calendar19", (gregorianCalendar14.compareTo(calendar19) == 0) == gregorianCalendar14.equals(calendar19));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes5 = minutes3.multipliedBy((int) (short) -1);
        org.joda.time.Minutes minutes6 = minutes0.plus(minutes3);
        org.joda.time.Minutes minutes7 = minutes3.negated();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        int int12 = dateTime10.getHourOfDay();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Calendar calendar16 = dateTime10.toCalendar(locale14);
        org.joda.time.DateTime.Property property17 = dateTime10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isStandardOffset((long) (byte) 100);
        boolean boolean24 = dateTimeZone19.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTime dateTime25 = dateTime10.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime44 = dateTime39.toLocalDateTime();
        boolean boolean45 = dateTimeZone32.isLocalDateTimeGap(localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime54 = dateTime49.toLocalDateTime();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime44, (org.joda.time.ReadablePartial) localDateTime54);
        boolean boolean56 = dateTimeZone28.isLocalDateTimeGap(localDateTime54);
        boolean boolean57 = dateTimeZone19.isLocalDateTimeGap(localDateTime54);
        boolean boolean58 = minutes7.equals((java.lang.Object) boolean57);
        org.joda.time.Minutes minutes60 = minutes7.multipliedBy(0);
        org.joda.time.Minutes minutes62 = minutes7.multipliedBy(53293197);
        org.joda.time.Minutes minutes64 = minutes62.plus(496);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar11 and calendar16", (gregorianCalendar11.compareTo(calendar16) == 0) == gregorianCalendar11.equals(calendar16));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval8.contains((long) '4');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = dateTime13.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = dateTime32.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval8.copy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone45);
        boolean boolean49 = interval47.isAfter(100L);
        long long50 = interval47.getEndMillis();
        org.joda.time.Interval interval51 = interval47.toInterval();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone56);
        org.joda.time.MutableInterval mutableInterval59 = interval58.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval60 = interval58.toMutableInterval();
        org.joda.time.Interval interval61 = interval51.overlap((org.joda.time.ReadableInterval) mutableInterval60);
        boolean boolean62 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) interval61);
        boolean boolean64 = mutableInterval40.isBefore((long) 30);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType68 = periodType67.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(52L, (long) 86399, periodType67);
        mutableInterval40.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = mutableInterval40.toPeriod(periodType71);
        org.joda.time.Hours hours73 = period72.toStandardHours();
        org.joda.time.Period period75 = period72.plusYears(32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar14 and calendar19", (gregorianCalendar14.compareTo(calendar19) == 0) == gregorianCalendar14.equals(calendar19));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        boolean boolean11 = dateTimeField9.isLeap(31556952000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval(obj13, chronology14);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType12.getField(chronology16);
        java.lang.String str19 = dateTimeField17.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime28 = dateTime23.toLocalDateTime();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getDisplayVariant();
        java.lang.String str31 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        int int36 = dateTime34.getHourOfDay();
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = locale38.toLanguageTag();
        java.util.Calendar calendar40 = dateTime34.toCalendar(locale38);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime51 = dateTime46.toLocalDateTime();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = locale52.getVariant();
        java.util.Calendar calendar54 = dateTime46.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = property41.setCopy("52", locale52);
        java.lang.String str56 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale52);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        long long63 = dateTimeZone59.convertLocalToUTC((-259200000L), true);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        boolean boolean68 = dateTime66.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property69 = dateTime66.millisOfSecond();
        org.joda.time.DateTime dateTime70 = property69.getDateTime();
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.millisOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.centuryOfEra();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((java.lang.Object) long63, chronology71);
        org.joda.time.Chronology chronology75 = chronology71.withUTC();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((-1L), dateTimeZone79);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Calendar calendar82 = dateTime80.toCalendar(locale81);
        org.joda.time.DateTime dateTime84 = dateTime80.plusMillis((int) '4');
        org.joda.time.DateTime dateTime85 = dateTime80.toDateTimeISO();
        org.joda.time.DateTime dateTime87 = dateTime85.plusMillis((int) '#');
        org.joda.time.YearMonthDay yearMonthDay88 = dateTime85.toYearMonthDay();
        int[] intArray90 = chronology75.get((org.joda.time.ReadablePartial) yearMonthDay88, (-89202663935991264L));
        int int91 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar35 and calendar40", (gregorianCalendar35.compareTo(calendar40) == 0) == gregorianCalendar35.equals(calendar40));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DurationField durationField20 = property5.getLeapDurationField();
        long long21 = property5.remainder();
        java.lang.String str22 = property5.getName();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        int int25 = property5.getMaximumShortTextLength(locale23);
        org.joda.time.DateTime dateTime26 = property5.roundFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration24 = minutes23.toStandardDuration();
        org.joda.time.Duration duration25 = minutes23.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.Chronology chronology37 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 12, (long) 3, chronology37);
        org.joda.time.Period period41 = period39.minusMonths((int) ' ');
        org.joda.time.format.PeriodPrinter periodPrinter42 = null;
        org.joda.time.format.PeriodParser periodParser43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = new org.joda.time.format.PeriodFormatter(periodPrinter42, periodParser43);
        boolean boolean45 = period41.equals((java.lang.Object) periodParser43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        java.util.GregorianCalendar gregorianCalendar49 = dateTime48.toGregorianCalendar();
        int int50 = dateTime48.getHourOfDay();
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Calendar calendar54 = dateTime48.toCalendar(locale52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = null;
        boolean boolean60 = dateTimeZone57.isLocalDateTimeGap(localDateTime59);
        org.joda.time.DateTime dateTime61 = dateTime48.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime63 = dateTime61.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMinutes((int) 'x');
        org.joda.time.Duration duration66 = period41.toDurationFrom((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration67 = duration25.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration70 = duration25.withDurationAdded((long) 2147483647, 0);
        org.joda.time.Hours hours71 = duration25.toStandardHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar49 and calendar54", (gregorianCalendar49.compareTo(calendar54) == 0) == gregorianCalendar49.equals(calendar54));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.withCenturyOfEra(3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfHour();
        org.joda.time.Days days21 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod22 = days21.toMutablePeriod();
        org.joda.time.Duration duration23 = days21.toStandardDuration();
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        boolean boolean27 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Chronology chronology29 = dateTime13.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.centuries();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        boolean boolean32 = dateTime8.equals((java.lang.Object) durationField31);
        long long34 = durationField31.getMillis(999);
        java.lang.String str35 = durationField31.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar14 and calendar19", (gregorianCalendar14.compareTo(calendar19) == 0) == gregorianCalendar14.equals(calendar19));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        mutablePeriod1.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod1.add(readableInterval4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.eras();
        int int7 = mutablePeriod1.get(durationFieldType6);
        mutablePeriod1.addWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        int int18 = dateTime17.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long23 = dateTimeZone20.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone20);
        org.joda.time.Duration duration25 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.Chronology chronology34 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        boolean boolean36 = dateTime17.equals((java.lang.Object) dateTimeField35);
        org.joda.time.DateTime dateTime38 = dateTime17.minusMillis(110);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        boolean boolean43 = dateTime41.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property44 = dateTime41.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        java.util.GregorianCalendar gregorianCalendar48 = dateTime47.toGregorianCalendar();
        int int49 = dateTime47.getHourOfDay();
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale51.toLanguageTag();
        java.util.Calendar calendar53 = dateTime47.toCalendar(locale51);
        java.util.Locale locale56 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str57 = locale51.getDisplayVariant(locale56);
        int int58 = property44.getMaximumTextLength(locale56);
        org.joda.time.DurationField durationField59 = property44.getLeapDurationField();
        java.util.Locale locale60 = java.util.Locale.CHINA;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleKeys();
        java.lang.String str63 = property44.getAsShortText(locale61);
        org.joda.time.DateTime dateTime64 = property44.roundCeilingCopy();
        org.joda.time.DateTime dateTime66 = dateTime64.withMillisOfDay((int) (byte) 1);
        int int67 = dateTime66.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int69 = dateTime66.get(dateTimeFieldType68);
        org.joda.time.DateTime dateTime70 = dateTime66.withLaterOffsetAtOverlap();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime24", (dateTime17.compareTo(dateTime24) == 0) == dateTime17.equals(dateTime24));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfFloorCopy();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = property5.getAsText(locale21);
        org.joda.time.DateTime dateTime24 = property5.setCopy("52");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(0);
        int int35 = dateTime34.getDayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime34.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) (short) 10);
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        int int42 = days40.getDays();
        org.joda.time.Days days43 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod44 = days43.toMutablePeriod();
        boolean boolean45 = days40.equals((java.lang.Object) mutablePeriod44);
        org.joda.time.DateTime dateTime46 = dateTime39.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getDisplayVariant();
        java.util.Calendar calendar49 = dateTime46.toCalendar(locale47);
        java.lang.String str50 = locale47.getDisplayScript();
        org.joda.time.DateTime dateTime51 = property5.setCopy("518", locale47);
        java.lang.String str52 = property5.getAsString();
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.setRegion("ja");
        java.util.Locale.Builder builder57 = builder53.setVariant("1969");
        java.util.Locale locale58 = builder57.build();
        int int59 = property5.getMaximumTextLength(locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy(292278993);
        org.joda.time.DurationFieldType durationFieldType3 = minutes2.getFieldType();
        org.joda.time.Duration duration4 = minutes2.toStandardDuration();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType5.getField(chronology9);
        java.lang.String str12 = dateTimeField10.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime21 = dateTime16.toLocalDateTime();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getDisplayVariant();
        java.lang.String str24 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, locale22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        java.util.GregorianCalendar gregorianCalendar28 = dateTime27.toGregorianCalendar();
        int int29 = dateTime27.getHourOfDay();
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale31.toLanguageTag();
        java.util.Calendar calendar33 = dateTime27.toCalendar(locale31);
        org.joda.time.DateTime dateTime35 = dateTime27.minusYears(7);
        org.joda.time.DateTime dateTime36 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant40 = null;
        long long41 = property39.getDifferenceAsLong(readableInstant40);
        boolean boolean42 = minutes2.equals((java.lang.Object) property39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar28 and calendar33", (gregorianCalendar28.compareTo(calendar33) == 0) == gregorianCalendar28.equals(calendar33));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime8 = interval6.getStart();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight13 = dateTime11.toDateMidnight();
        boolean boolean14 = interval6.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        int int19 = dateTime17.getHourOfDay();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar calendar23 = dateTime17.toCalendar(locale21);
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.Duration duration27 = days25.toStandardDuration();
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Duration duration30 = days28.toStandardDuration();
        boolean boolean31 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Chronology chronology33 = dateTime17.getChronology();
        boolean boolean34 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime17);
        int int35 = dateTime17.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = dateTime17.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar12 and calendar23", (gregorianCalendar12.compareTo(calendar23) == 0) == gregorianCalendar12.equals(calendar23));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DateTime.Property property5 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getHourOfDay();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.toLanguageTag();
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = dateTime11.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes((int) 'x');
        boolean boolean29 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(488);
        long long34 = dateTimeZone32.previousTransition((long) 40);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(84067718400000L, dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime6.toMutableDateTime(dateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar17", (gregorianCalendar3.compareTo(calendar17) == 0) == gregorianCalendar3.equals(calendar17));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        int int13 = dateTime10.getMillisOfSecond();
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration15 = duration14.toDuration();
        long long16 = duration14.getMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.ZERO;
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        long long19 = duration17.getMillis();
        int int20 = duration14.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property26 = dateTime23.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        int int31 = dateTime29.getHourOfDay();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Calendar calendar35 = dateTime29.toCalendar(locale33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str39 = locale33.getDisplayVariant(locale38);
        int int40 = property26.getMaximumTextLength(locale38);
        org.joda.time.DateTime dateTime41 = property26.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime43 = property26.addWrapFieldToCopy(59);
        org.joda.time.Period period44 = duration14.toPeriodTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType45.getField(chronology49);
        java.lang.String str52 = dateTimeField50.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime61 = dateTime56.toLocalDateTime();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale62.getDisplayVariant();
        java.lang.String str64 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int66 = localDateTime61.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime68 = dateTime43.withField(dateTimeFieldType65, 6);
        int int69 = dateTime10.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime71 = dateTime10.withCenturyOfEra(19);
        int int72 = dateTime71.getSecondOfMinute();
        boolean boolean74 = dateTime71.isAfter(359999L);
        java.util.Date date75 = dateTime71.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar30 and calendar35", (gregorianCalendar30.compareTo(calendar35) == 0) == gregorianCalendar30.equals(calendar35));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(36);
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        java.lang.String str25 = property23.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology4);
        java.lang.String str7 = dateTimeField5.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = dateTime11.toLocalDateTime();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime22.toGregorianCalendar();
        int int24 = dateTime22.getHourOfDay();
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Calendar calendar28 = dateTime22.toCalendar(locale26);
        org.joda.time.DateTime dateTime30 = dateTime22.minusYears(7);
        org.joda.time.DateTime dateTime31 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.DateTime dateTime35 = dateTime31.withDayOfMonth(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval(obj37, chronology38);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType36.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone45.isLocalDateTimeGap(localDateTime47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(0);
        int int52 = dateTime51.getDayOfWeek();
        org.joda.time.DateTime dateTime54 = dateTime51.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes((int) (short) 10);
        org.joda.time.Days days57 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod58 = days57.toMutablePeriod();
        int int59 = days57.getDays();
        org.joda.time.Days days60 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod61 = days60.toMutablePeriod();
        boolean boolean62 = days57.equals((java.lang.Object) mutablePeriod61);
        org.joda.time.DateTime dateTime63 = dateTime56.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale64.getDisplayVariant();
        java.util.Calendar calendar66 = dateTime63.toCalendar(locale64);
        java.lang.String str67 = locale64.getDisplayScript();
        java.util.Set<java.lang.String> strSet68 = locale64.getUnicodeLocaleKeys();
        java.lang.String str69 = locale64.getISO3Country();
        int int70 = dateTimeField42.getMaximumShortTextLength(locale64);
        int int71 = dateTime35.get(dateTimeField42);
        org.joda.time.DateTime dateTime72 = dateTime35.toDateTime();
        org.joda.time.DateTime dateTime74 = dateTime35.withMillisOfDay(58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar23 and calendar28", (gregorianCalendar23.compareTo(calendar28) == 0) == gregorianCalendar23.equals(calendar28));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval(obj1, chronology2);
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType0.getField(chronology4);
        java.lang.String str7 = dateTimeField5.getAsText((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        int int12 = dateTime10.getHourOfDay();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Calendar calendar16 = dateTime10.toCalendar(locale14);
        java.util.Locale locale19 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str20 = locale14.getDisplayVariant(locale19);
        int int21 = dateTimeField5.getMaximumShortTextLength(locale19);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("277");
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = locale23.getDisplayLanguage();
        boolean boolean26 = locale23.hasExtensions();
        java.lang.String str27 = locale19.getDisplayVariant(locale23);
        java.util.Set<java.lang.String> strSet28 = locale23.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar11 and calendar16", (gregorianCalendar11.compareTo(calendar16) == 0) == gregorianCalendar11.equals(calendar16));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.Instant instant10 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = dateTime13.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime28 = dateTime26.withZone(dateTimeZone27);
        int int29 = dateTime28.getDayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration32 = period31.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        org.joda.time.Duration duration42 = period31.toDurationTo((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean43 = dateTime28.equals((java.lang.Object) dateTime39);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.seconds();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusMillis((int) '4');
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) -1, periodType45, chronology54);
        org.joda.time.DateTime dateTime58 = dateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) period56, 19);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology60 = dateTime28.getChronology();
        org.joda.time.LocalTime localTime61 = dateTime28.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar14 and calendar19", (gregorianCalendar14.compareTo(calendar19) == 0) == gregorianCalendar14.equals(calendar19));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime dateTime6 = dateTime3.withWeekyear(0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        java.util.GregorianCalendar gregorianCalendar10 = dateTime9.toGregorianCalendar();
        int int11 = dateTime9.getHourOfDay();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Calendar calendar15 = dateTime9.toCalendar(locale13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone18.isLocalDateTimeGap(localDateTime20);
        org.joda.time.DateTime dateTime22 = dateTime9.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes((int) 'x');
        org.joda.time.DateTime.Property property27 = dateTime24.era();
        org.joda.time.DateTime dateTime29 = dateTime24.minusWeeks((int) (byte) 100);
        int int30 = dateTime24.getMillisOfSecond();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar10 and calendar15", (gregorianCalendar10.compareTo(calendar15) == 0) == gregorianCalendar10.equals(calendar15));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        org.joda.time.Period period4 = new org.joda.time.Period(6, (int) (short) -1, (int) (byte) 0, (int) ' ');
        org.joda.time.Period period6 = period4.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period6, (org.joda.time.ReadableInstant) dateTime10);
        int int16 = period6.size();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone21);
        boolean boolean25 = interval23.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        int int39 = dateTime37.getHourOfDay();
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Calendar calendar43 = dateTime37.toCalendar(locale41);
        org.joda.time.DateTime.Property property44 = dateTime37.minuteOfHour();
        org.joda.time.Days days45 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod46 = days45.toMutablePeriod();
        org.joda.time.Duration duration47 = days45.toStandardDuration();
        org.joda.time.Days days48 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod49 = days48.toMutablePeriod();
        org.joda.time.Duration duration50 = days48.toStandardDuration();
        boolean boolean51 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime37);
        mutableInterval53.setDurationBeforeEnd(4459615861L);
        boolean boolean56 = interval23.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone61);
        org.joda.time.MutableInterval mutableInterval64 = interval63.toMutableInterval();
        boolean boolean66 = mutableInterval64.isBefore((long) 59);
        boolean boolean67 = mutableInterval64.containsNow();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1L), dateTimeZone72);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone72);
        boolean boolean76 = interval74.isAfter(100L);
        long long77 = interval74.getEndMillis();
        org.joda.time.Interval interval78 = interval74.toInterval();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Interval interval80 = interval78.withDurationBeforeEnd(readableDuration79);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType82 = periodType81.withMillisRemoved();
        org.joda.time.Period period83 = interval78.toPeriod(periodType82);
        org.joda.time.Chronology chronology84 = interval78.getChronology();
        mutableInterval64.setChronology(chronology84);
        mutableInterval53.setInterval((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj88 = null;
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Interval interval90 = new org.joda.time.Interval(obj88, chronology89);
        org.joda.time.Chronology chronology91 = interval90.getChronology();
        org.joda.time.DateTimeField dateTimeField92 = dateTimeFieldType87.getField(chronology91);
        org.joda.time.DurationField durationField93 = chronology91.millis();
        mutableInterval53.setChronology(chronology91);
        org.joda.time.Period period95 = new org.joda.time.Period((java.lang.Object) period6, chronology91);
        org.joda.time.Period period97 = period95.minusSeconds(36);
        int int98 = period95.getDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar38 and calendar43", (gregorianCalendar38.compareTo(calendar43) == 0) == gregorianCalendar38.equals(calendar43));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.Duration duration31 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.seconds();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMillis((int) '4');
        org.joda.time.Chronology chronology43 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfHalfday();
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) -1, periodType34, chronology43);
        org.joda.time.DateTime dateTime47 = dateTime17.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 19);
        org.joda.time.LocalDate localDate48 = dateTime47.toLocalDate();
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10);
        int int51 = period50.getSeconds();
        org.joda.time.Period period53 = period50.minusHours(100);
        int int54 = period53.getMillis();
        org.joda.time.Period period56 = period53.plusDays((int) 'a');
        org.joda.time.Period period57 = period53.negated();
        org.joda.time.Duration duration58 = period57.toStandardDuration();
        org.joda.time.Period period60 = period57.withHours(100);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getEnd();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        boolean boolean10 = interval6.containsNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone15);
        boolean boolean19 = interval17.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        int int33 = dateTime31.getHourOfDay();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale35.toLanguageTag();
        java.util.Calendar calendar37 = dateTime31.toCalendar(locale35);
        org.joda.time.DateTime.Property property38 = dateTime31.minuteOfHour();
        org.joda.time.Days days39 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod40 = days39.toMutablePeriod();
        org.joda.time.Duration duration41 = days39.toStandardDuration();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        boolean boolean45 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime31);
        mutableInterval47.setDurationBeforeEnd(4459615861L);
        boolean boolean50 = interval17.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone55);
        org.joda.time.MutableInterval mutableInterval58 = interval57.toMutableInterval();
        boolean boolean60 = mutableInterval58.isBefore((long) 59);
        boolean boolean61 = mutableInterval58.containsNow();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone66);
        boolean boolean70 = interval68.isAfter(100L);
        long long71 = interval68.getEndMillis();
        org.joda.time.Interval interval72 = interval68.toInterval();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Interval interval74 = interval72.withDurationBeforeEnd(readableDuration73);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType76 = periodType75.withMillisRemoved();
        org.joda.time.Period period77 = interval72.toPeriod(periodType76);
        org.joda.time.Chronology chronology78 = interval72.getChronology();
        mutableInterval58.setChronology(chronology78);
        mutableInterval47.setInterval((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj82 = null;
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Interval interval84 = new org.joda.time.Interval(obj82, chronology83);
        org.joda.time.Chronology chronology85 = interval84.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType81.getField(chronology85);
        org.joda.time.DurationField durationField87 = chronology85.millis();
        mutableInterval47.setChronology(chronology85);
        boolean boolean89 = interval6.contains((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.Period period90 = interval6.toPeriod();
        org.joda.time.Duration duration91 = period90.toStandardDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar32 and calendar37", (gregorianCalendar32.compareTo(calendar37) == 0) == gregorianCalendar32.equals(calendar37));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone7);
        boolean boolean11 = interval9.isAfter(100L);
        long long12 = interval9.getEndMillis();
        org.joda.time.Interval interval13 = interval9.toInterval();
        long long14 = interval9.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone19);
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval23 = interval21.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone28);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        long long32 = interval30.getStartMillis();
        boolean boolean33 = interval21.contains((org.joda.time.ReadableInterval) interval30);
        boolean boolean34 = interval9.abuts((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) 10L);
        org.joda.time.Interval interval37 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime40.toGregorianCalendar();
        int int42 = dateTime40.getHourOfDay();
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.lang.String str45 = locale44.toLanguageTag();
        java.util.Calendar calendar46 = dateTime40.toCalendar(locale44);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone49.isLocalDateTimeGap(localDateTime51);
        org.joda.time.DateTime dateTime53 = dateTime40.withZone(dateTimeZone49);
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration57 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration58 = duration55.minus((org.joda.time.ReadableDuration) duration57);
        long long59 = duration55.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime40.plus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Calendar calendar66 = dateTime64.toCalendar(locale65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusMillis((int) '4');
        org.joda.time.DateTime dateTime69 = dateTime64.toDateTimeISO();
        org.joda.time.Instant instant70 = dateTime64.toInstant();
        org.joda.time.Instant instant71 = instant70.toInstant();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Calendar calendar77 = dateTime75.toCalendar(locale76);
        org.joda.time.DateTime dateTime79 = dateTime75.plusMillis((int) '4');
        org.joda.time.DateTime dateTime80 = dateTime75.toDateTimeISO();
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType82 = periodType81.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant70, (org.joda.time.ReadableInstant) dateTime80, periodType81);
        org.joda.time.Instant instant86 = instant70.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = null;
        java.lang.String str88 = instant86.toString(dateTimeFormatter87);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) instant86);
        boolean boolean90 = interval37.equals((java.lang.Object) instant86);
        org.joda.time.Instant instant91 = instant86.toInstant();
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) instant91);
        boolean boolean93 = mutableInterval92.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar41 and calendar46", (gregorianCalendar41.compareTo(calendar46) == 0) == gregorianCalendar41.equals(calendar46));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime19 = dateTime15.minus((long) 1);
        int int20 = dateTime15.getDayOfWeek();
        org.joda.time.DateTime.Property property21 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar3 and calendar8", (gregorianCalendar3.compareTo(calendar8) == 0) == gregorianCalendar3.equals(calendar8));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.DurationField durationField20 = property5.getLeapDurationField();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = property5.getAsShortText(locale22);
        org.joda.time.DateTime dateTime25 = property5.roundCeilingCopy();
        java.lang.String str26 = property5.getAsString();
        org.joda.time.DateTime dateTime27 = property5.withMaximumValue();
        org.joda.time.Hours hours28 = org.joda.time.Hours.TWO;
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) hours28);
        org.joda.time.Hours hours31 = hours28.plus(53);
        org.joda.time.Seconds seconds32 = hours31.toStandardSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar14", (gregorianCalendar9.compareTo(calendar14) == 0) == gregorianCalendar9.equals(calendar14));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        int int8 = dateTime7.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long13 = dateTimeZone10.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime15 = dateTime7.toLocalDateTime();
        org.joda.time.DateTime dateTime17 = dateTime7.minus((long) 53333158);
        int int18 = dateTime17.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime14", (dateTime7.compareTo(dateTime14) == 0) == dateTime7.equals(dateTime14));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone3.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 14, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime7.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        boolean boolean19 = dateTime12.equals((java.lang.Object) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        java.lang.String str23 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime24 = dateTime12.withZone(dateTimeZone21);
        boolean boolean25 = dateTimeZone8.equals((java.lang.Object) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(7);
        long long30 = dateTimeZone27.convertLocalToUTC(3327L, false);
        long long32 = dateTimeZone8.getMillisKeepLocal(dateTimeZone27, (long) 47);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone27);
        java.lang.String str35 = dateTimeZone27.getShortName(1585442558924L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime33", (dateTime22.compareTo(dateTime33) == 0) == dateTime22.equals(dateTime33));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean4 = dateTime2.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        int int10 = dateTime8.getHourOfDay();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Calendar calendar14 = dateTime8.toCalendar(locale12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "zh-CN");
        java.lang.String str18 = locale12.getDisplayVariant(locale17);
        int int19 = property5.getMaximumTextLength(locale17);
        org.joda.time.Interval interval20 = property5.toInterval();
        org.joda.time.DateTime dateTime21 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        java.util.GregorianCalendar gregorianCalendar27 = dateTime26.toGregorianCalendar();
        int int28 = dateTime26.getHourOfDay();
        org.joda.time.DateTime.Property property29 = dateTime26.yearOfCentury();
        long long30 = property29.remainder();
        java.lang.String str31 = property29.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.Chronology chronology40 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfHalfday();
        boolean boolean42 = property29.equals((java.lang.Object) chronology40);
        java.lang.String str43 = property29.getAsText();
        org.joda.time.DateTime dateTime45 = property29.addWrapFieldToCopy(0);
        java.util.Locale.Category category46 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale47 = java.util.Locale.getDefault(category46);
        java.util.Locale locale48 = java.util.Locale.getDefault(category46);
        java.util.Locale locale49 = java.util.Locale.getDefault(category46);
        java.util.Locale locale50 = java.util.Locale.getDefault(category46);
        java.lang.String str51 = property29.getAsShortText(locale50);
        java.util.Calendar calendar52 = dateTime21.toCalendar(locale50);
        java.lang.String str53 = locale50.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar9 and calendar52", (gregorianCalendar9.compareTo(calendar52) == 0) == gregorianCalendar9.equals(calendar52));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) 10);
        mutablePeriod1.setMillis((int) (short) 10);
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval(obj4, chronology5);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone22);
        org.joda.time.MutableInterval mutableInterval25 = interval24.toMutableInterval();
        boolean boolean26 = interval15.isBefore((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period30 = mutableInterval28.toPeriod(periodType29);
        org.joda.time.Period period31 = new org.joda.time.Period((long) 365, periodType29);
        org.joda.time.Days days32 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod33 = days32.toMutablePeriod();
        org.joda.time.Days days34 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod35 = days34.toMutablePeriod();
        mutablePeriod35.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval38 = null;
        mutablePeriod35.add(readableInterval38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.eras();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DurationField durationField44 = durationFieldType40.getField(chronology43);
        java.lang.String str45 = durationFieldType40.getName();
        boolean boolean46 = periodType29.isSupported(durationFieldType40);
        org.joda.time.Period period47 = interval15.toPeriod(periodType29);
        org.joda.time.Chronology chronology48 = interval15.getChronology();
        boolean boolean49 = interval6.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime50 = interval6.getStart();
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField44, durationField52, and durationField44", !(durationField44.compareTo(durationField52) == 0) || (Math.signum(durationField44.compareTo(durationField44)) == Math.signum(durationField52.compareTo(durationField44))));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 100);
        boolean boolean21 = dateTimeZone16.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.Duration duration47 = minutes45.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration47);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime50 = dateTime3.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime50.withZone(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        boolean boolean58 = dateTime56.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property59 = dateTime56.millisOfSecond();
        org.joda.time.DateTime dateTime60 = property59.getDateTime();
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.era();
        org.joda.time.DurationField durationField65 = chronology61.weeks();
        boolean boolean66 = dateTimeZone52.equals((java.lang.Object) durationField65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime53", (dateTime3.compareTo(dateTime53) == 0) == dateTime3.equals(dateTime53));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.Chronology chronology9 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long16 = dateTimeZone13.adjustOffset(32L, false);
        int int18 = dateTimeZone13.getOffsetFromLocal(4459615861L);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 59, 6700148978639999L, dateTimeZone13);
        org.joda.time.DateTime dateTime20 = dateTime3.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime22 = dateTime3.minusWeeks(12);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime20", (dateTime3.compareTo(dateTime20) == 0) == dateTime3.equals(dateTime20));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        int int8 = dateTime7.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long13 = dateTimeZone10.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds(919);
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(29);
        int int19 = dateTime18.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime14", (dateTime7.compareTo(dateTime14) == 0) == dateTime7.equals(dateTime14));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 12, chronology10);
        org.joda.time.DurationField durationField14 = chronology10.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis((int) '4');
        org.joda.time.Chronology chronology23 = dateTime18.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime40 = dateTime35.toLocalDateTime();
        boolean boolean41 = dateTimeZone28.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = dateTime45.toCalendar(locale46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis((int) '4');
        org.joda.time.Chronology chronology50 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        org.joda.time.DateTime dateTime60 = dateTime56.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime61 = dateTime56.toLocalDateTime();
        int[] intArray62 = null;
        int int63 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDateTime61, intArray62);
        boolean boolean64 = dateTimeZone28.isLocalDateTimeGap(localDateTime61);
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, 130, locale66);
        long long69 = chronology10.set((org.joda.time.ReadablePartial) localDateTime61, 0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField24", Math.signum(durationField11.compareTo(durationField24)) == -Math.signum(durationField24.compareTo(durationField11)));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.lang.String str12 = dateTimeZone10.toString();
        org.joda.time.DateTime dateTime13 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime14 = dateTime8.toLocalDateTime();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone18.isLocalDateTimeGap(localDateTime20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime24 = dateTime22.withHourOfDay(0);
        int int25 = dateTime24.getDayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime24.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes((int) (short) 10);
        org.joda.time.Days days30 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod31 = days30.toMutablePeriod();
        int int32 = days30.getDays();
        org.joda.time.Days days33 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod34 = days33.toMutablePeriod();
        boolean boolean35 = days30.equals((java.lang.Object) mutablePeriod34);
        org.joda.time.DateTime dateTime36 = dateTime29.plus((org.joda.time.ReadablePeriod) mutablePeriod34);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getDisplayVariant();
        java.util.Calendar calendar39 = dateTime36.toCalendar(locale37);
        java.lang.String str40 = locale15.getDisplayName(locale37);
        java.util.Calendar calendar41 = dateTime8.toCalendar(locale15);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder42.setRegion("ja");
        java.util.Locale.Builder builder46 = builder42.setVariant("1969");
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone50.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(0);
        int int57 = dateTime56.getDayOfWeek();
        org.joda.time.DateTime dateTime59 = dateTime56.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes((int) (short) 10);
        org.joda.time.Days days62 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod63 = days62.toMutablePeriod();
        int int64 = days62.getDays();
        org.joda.time.Days days65 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod66 = days65.toMutablePeriod();
        boolean boolean67 = days62.equals((java.lang.Object) mutablePeriod66);
        org.joda.time.DateTime dateTime68 = dateTime61.plus((org.joda.time.ReadablePeriod) mutablePeriod66);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale69.getDisplayVariant();
        java.util.Calendar calendar71 = dateTime68.toCalendar(locale69);
        java.lang.String str72 = locale47.getDisplayName(locale69);
        java.util.Locale.Builder builder73 = builder46.setLocale(locale69);
        java.lang.String str74 = locale15.getDisplayLanguage(locale69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar41", (calendar5.compareTo(calendar41) == 0) == calendar5.equals(calendar41));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 12);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        boolean boolean22 = instant12.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        org.joda.time.Days days26 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod27 = days26.toMutablePeriod();
        org.joda.time.Duration duration28 = days26.toStandardDuration();
        boolean boolean29 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime21.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime32 = dateTime21.withCenturyOfEra(52);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long39 = dateTimeZone36.adjustOffset(32L, false);
        int int41 = dateTimeZone36.getOffsetFromLocal(4459615861L);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 59, 6700148978639999L, dateTimeZone36);
        org.joda.time.DateTime dateTime43 = dateTime21.toDateTime(dateTimeZone36);
        org.joda.time.Period period44 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration45 = duration1.toDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime43", (dateTime21.compareTo(dateTime43) == 0) == dateTime21.equals(dateTime43));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long3 = dateTimeZone1.previousTransition(43842799L);
        java.lang.String str5 = dateTimeZone1.getShortName((long) 1998);
        org.joda.time.Days days6 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod7 = days6.toMutablePeriod();
        mutablePeriod7.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval10 = null;
        mutablePeriod7.add(readableInterval10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.eras();
        int int13 = mutablePeriod7.get(durationFieldType12);
        mutablePeriod7.addWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(obj18, chronology19);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType17.getField(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.millis();
        mutablePeriod7.setPeriod((long) 2022, chronology21);
        long long28 = chronology21.add(292278993L, (long) '#', 0);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        java.util.GregorianCalendar gregorianCalendar34 = dateTime33.toGregorianCalendar();
        int int35 = dateTime33.getHourOfDay();
        org.joda.time.DateTime dateTime37 = dateTime33.withCenturyOfEra(14);
        org.joda.time.DateTime.Property property38 = dateTime33.dayOfYear();
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = locale40.toLanguageTag();
        java.lang.String str42 = property38.getAsShortText(locale40);
        int int43 = dateTimeField30.getMaximumTextLength(locale40);
        boolean boolean44 = dateTimeZone1.equals((java.lang.Object) int43);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone1);
        java.lang.String str47 = dateTimeZone1.getName((-1100940000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime45", (dateTime33.compareTo(dateTime45) == 0) == dateTime33.equals(dateTime45));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) (byte) 100);
        boolean boolean21 = dateTimeZone16.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Calendar calendar36 = dateTime34.toCalendar(locale35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusMillis((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean44 = dateTime42.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.Duration duration47 = minutes45.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration47);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime50 = dateTime3.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime53 = dateTime50.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime50.withWeekyear(339);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime53", (dateTime50.compareTo(dateTime53) == 0) == dateTime50.equals(dateTime53));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology8.eras();
        org.joda.time.DurationField durationField13 = chronology8.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField13, and durationField12", !(durationField12.compareTo(durationField13) == 0) || (Math.signum(durationField12.compareTo(durationField12)) == Math.signum(durationField13.compareTo(durationField12))));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        boolean boolean8 = interval6.isAfter(100L);
        long long9 = interval6.getEndMillis();
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval10.withDurationBeforeEnd(readableDuration11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType14 = periodType13.withMillisRemoved();
        org.joda.time.Period period15 = interval10.toPeriod(periodType14);
        org.joda.time.Chronology chronology16 = interval10.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology16.months();
        org.joda.time.Days days21 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod22 = days21.toMutablePeriod();
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        mutablePeriod24.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval27 = null;
        mutablePeriod24.add(readableInterval27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.eras();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = mutablePeriod22.isSupported(durationFieldType29);
        mutablePeriod22.setDays((int) (short) 100);
        int int34 = mutablePeriod22.size();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval(obj38, chronology39);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType37.getField(chronology41);
        org.joda.time.DurationField durationField43 = durationFieldType36.getField(chronology41);
        mutablePeriod22.setPeriod(0L, chronology41);
        mutablePeriod22.addHours(31);
        mutablePeriod22.addSeconds(1439);
        mutablePeriod22.addMonths(5);
        mutablePeriod22.addMinutes(19044);
        mutablePeriod22.setDays(78);
        int[] intArray57 = chronology16.get((org.joda.time.ReadablePeriod) mutablePeriod22, 1645454953904L, 41L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField20 and durationField43", (durationField20.compareTo(durationField43) == 0) == durationField20.equals(durationField43));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(14);
        org.joda.time.DateTime.Property property7 = dateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        boolean boolean16 = interval14.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        boolean boolean30 = dateTime28.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime20);
        int int33 = property7.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime35 = dateTime20.minusHours(31);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.Instant instant45 = dateTime39.toInstant();
        org.joda.time.Instant instant46 = instant45.toInstant();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardMinutes((long) (-1));
        org.joda.time.Instant instant50 = instant45.withDurationAdded((org.joda.time.ReadableDuration) duration48, 7);
        boolean boolean51 = dateTime35.isBefore((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Instant instant52 = instant50.toInstant();
        org.joda.time.MutableDateTime mutableDateTime53 = instant50.toMutableDateTimeISO();
        long long54 = instant50.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and mutableDateTime53", (instant50.compareTo(mutableDateTime53) == 0) == instant50.equals(mutableDateTime53));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        int int8 = dateTime7.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long13 = dateTimeZone10.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime15 = dateTime7.toLocalDateTime();
        org.joda.time.DateTime dateTime17 = dateTime7.minus((long) 53333158);
        org.joda.time.DateTime dateTime19 = dateTime7.withMillisOfDay(243);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime14", (dateTime7.compareTo(dateTime14) == 0) == dateTime7.equals(dateTime14));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 14);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.Chronology chronology11 = dateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean34 = dateTime32.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration36 = minutes35.toStandardDuration();
        org.joda.time.Duration duration37 = minutes35.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime40 = dateTime20.withWeekOfWeekyear(3);
        org.joda.time.Period period45 = new org.joda.time.Period(6, (int) (short) -1, (int) (byte) 0, (int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime20.plus((org.joda.time.ReadablePeriod) period45);
        int int47 = dateTime46.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone50.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(0);
        int int57 = dateTime56.getDayOfWeek();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) ' ');
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType61 = periodType60.withDaysRemoved();
        org.joda.time.PeriodType periodType62 = periodType61.withSecondsRemoved();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime59, periodType61);
        org.joda.time.PeriodType periodType64 = periodType61.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime5, periodType64);
        org.joda.time.Period period67 = org.joda.time.Period.years(0);
        org.joda.time.DateTime dateTime68 = dateTime5.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusMonths(18258);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(102, 30);
        org.joda.time.DateTime dateTime74 = dateTime68.withZone(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        boolean boolean79 = dateTime77.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property80 = dateTime77.millisOfSecond();
        org.joda.time.DateTime dateTime81 = property80.roundCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime68 and dateTime74", (dateTime68.compareTo(dateTime74) == 0) == dateTime68.equals(dateTime74));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        boolean boolean10 = mutableInterval8.contains((long) '4');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getHourOfDay();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone22.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTime dateTime26 = dateTime13.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = dateTime32.toLocalDateTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval8.copy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.plusMinutes(10368000);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long58 = dateTimeZone55.adjustOffset(32L, false);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone63);
        boolean boolean67 = interval65.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Calendar calendar73 = dateTime71.toCalendar(locale72);
        org.joda.time.DateTime dateTime75 = dateTime71.plusMillis((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime71.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone78);
        boolean boolean81 = dateTime79.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes82 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean83 = interval65.isAfter((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime85 = dateTime71.plusHours(22);
        org.joda.time.Instant instant86 = dateTime85.toInstant();
        int int87 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) instant86);
        org.joda.time.DateTime dateTime88 = dateTime51.toDateTime(dateTimeZone55);
        int int90 = dateTimeZone55.getOffsetFromLocal((long) 276);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime51 and dateTime88", (dateTime51.compareTo(dateTime88) == 0) == dateTime51.equals(dateTime88));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime2.toCalendar(locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTime dateTime15 = dateTime2.withZone(dateTimeZone11);
        org.joda.time.Duration duration17 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration20 = duration17.minus((org.joda.time.ReadableDuration) duration19);
        long long21 = duration17.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime2.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration23 = org.joda.time.Duration.ZERO;
        org.joda.time.Minutes minutes24 = duration23.toStandardMinutes();
        org.joda.time.DateTime dateTime25 = dateTime2.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime27 = dateTime2.minusDays((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        int int36 = dateTime35.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long41 = dateTimeZone38.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime42 = dateTime35.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.withMinuteOfHour(52);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime42);
        int int46 = minutes45.getMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime42", (dateTime35.compareTo(dateTime42) == 0) == dateTime35.equals(dateTime42));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getHourOfDay();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.toLanguageTag();
        java.util.Calendar calendar17 = dateTime11.toCalendar(locale15);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.Days days19 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod20 = days19.toMutablePeriod();
        org.joda.time.Duration duration21 = days19.toStandardDuration();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        org.joda.time.Duration duration24 = days22.toStandardDuration();
        boolean boolean25 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime29 = dateTime3.minusMinutes(5);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTimeISO();
        org.joda.time.Instant instant39 = dateTime33.toInstant();
        org.joda.time.Instant instant40 = instant39.toInstant();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((long) (-1));
        org.joda.time.Instant instant44 = instant39.withDurationAdded((org.joda.time.ReadableDuration) duration42, 7);
        org.joda.time.MutableDateTime mutableDateTime45 = instant44.toMutableDateTime();
        org.joda.time.Instant instant47 = instant44.plus((long) 'x');
        java.lang.String str48 = instant47.toString();
        org.joda.time.MutableDateTime mutableDateTime49 = instant47.toMutableDateTime();
        long long50 = instant47.getMillis();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        boolean boolean57 = dateTime55.isAfter((long) (byte) 10);
        boolean boolean58 = duration52.equals((java.lang.Object) dateTime55);
        org.joda.time.Duration duration60 = duration52.withMillis((long) 69);
        boolean boolean61 = instant47.equals((java.lang.Object) duration60);
        boolean boolean62 = dateTime29.isBefore((org.joda.time.ReadableInstant) instant47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant44 and mutableDateTime45", (instant44.compareTo(mutableDateTime45) == 0) == instant44.equals(mutableDateTime45));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant10 = dateTime4.toInstant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        boolean boolean21 = instant11.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant25 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration23, (-1));
        boolean boolean27 = instant25.isBefore((long) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime28 = instant25.toMutableDateTime();
        org.joda.time.Instant instant30 = instant25.plus(2300698598400000L);
        org.joda.time.DateTimeZone dateTimeZone31 = instant25.getZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-227207375999965L), dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and mutableDateTime28", (instant25.compareTo(mutableDateTime28) == 0) == instant25.equals(mutableDateTime28));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant27 = instant25.plus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTimeISO();
        org.joda.time.Instant instant30 = instant27.withMillis(31556952000L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((-1L), dateTimeZone44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone44);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        boolean boolean48 = interval37.isBefore((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        boolean boolean53 = dateTime51.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property54 = dateTime51.millisOfSecond();
        org.joda.time.DateTime dateTime55 = property54.getDateTime();
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        int int57 = dateTime55.getDayOfMonth();
        mutableInterval47.setEnd((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Days days59 = org.joda.time.Days.THREE;
        org.joda.time.Duration duration60 = days59.toStandardDuration();
        org.joda.time.DateTime dateTime61 = dateTime55.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration62 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration63 = duration62.toDuration();
        int int64 = duration60.compareTo((org.joda.time.ReadableDuration) duration62);
        long long65 = duration62.getStandardSeconds();
        org.joda.time.Instant instant67 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration62, 53368);
        org.joda.time.MutableDateTime mutableDateTime68 = instant67.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant67 and mutableDateTime28", (instant67.compareTo(mutableDateTime28) == 0) == instant67.equals(mutableDateTime28));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = dateTime13.toLocalDateTime();
        boolean boolean19 = dateTimeZone6.isLocalDateTimeGap(localDateTime18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime28 = dateTime23.toLocalDateTime();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime18, (org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean30 = dateTimeZone2.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int32 = localDateTime28.get(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.Instant instant43 = instant42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(0);
        boolean boolean53 = instant43.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant57 = instant43.withDurationAdded((org.joda.time.ReadableDuration) duration55, (-1));
        boolean boolean59 = instant57.isBefore((long) (short) 10);
        org.joda.time.DateTime dateTime60 = instant57.toDateTime();
        org.joda.time.DateTime dateTime61 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra(53346511);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone68);
        org.joda.time.DateTime dateTime71 = interval70.getEnd();
        int int72 = dateTime71.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long77 = dateTimeZone74.adjustOffset(32L, false);
        org.joda.time.DateTime dateTime78 = dateTime71.toDateTime(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime79 = dateTime71.toLocalDateTime();
        org.joda.time.DateTime dateTime81 = dateTime71.minus((long) 53333158);
        org.joda.time.DateTime dateTime83 = dateTime71.withMillisOfDay(243);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime71);
        mutablePeriod84.setMinutes(11520);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime71 and dateTime78", (dateTime71.compareTo(dateTime78) == 0) == dateTime71.equals(dateTime78));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        boolean boolean5 = dateTime3.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property6 = dateTime3.millisOfSecond();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) 488);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (-6000), (-27424249));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean25 = dateTime23.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Duration duration29 = duration27.withMillis((long) 0);
        java.lang.String str30 = duration27.toString();
        org.joda.time.Duration duration31 = duration27.toDuration();
        long long32 = duration31.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone35.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        int int42 = dateTime41.getDayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime41.minusWeeks((int) (short) 100);
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.ZERO;
        org.joda.time.DurationFieldType durationFieldType46 = minutes45.getFieldType();
        org.joda.time.DateTime dateTime48 = dateTime44.withFieldAdded(durationFieldType46, (-8));
        int int49 = dateTime44.getCenturyOfEra();
        org.joda.time.DateTime.Property property50 = dateTime44.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        java.util.GregorianCalendar gregorianCalendar54 = dateTime53.toGregorianCalendar();
        int int55 = dateTime53.getHourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime53.withCenturyOfEra(14);
        org.joda.time.DateTime.Property property58 = dateTime53.dayOfYear();
        org.joda.time.DateTime dateTime59 = property58.getDateTime();
        org.joda.time.DateTime dateTime61 = property58.addToCopy(8);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale62.getISO3Language();
        java.lang.String str65 = locale62.getCountry();
        java.lang.String str66 = locale62.getDisplayCountry();
        int int67 = property58.getMaximumTextLength(locale62);
        java.lang.String str68 = property50.getAsShortText(locale62);
        org.joda.time.DateTime dateTime69 = property50.withMaximumValue();
        org.joda.time.DateTime dateTime72 = dateTime69.withDurationAdded((long) (-50), 33);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period76 = mutableInterval74.toPeriod(periodType75);
        org.joda.time.Period period77 = new org.joda.time.Period((long) 365, periodType75);
        org.joda.time.PeriodType periodType78 = periodType75.withMinutesRemoved();
        org.joda.time.Period period79 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateTime72, periodType75);
        org.joda.time.PeriodType periodType80 = periodType75.withDaysRemoved();
        org.joda.time.PeriodType periodType81 = periodType75.withSecondsRemoved();
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration8, periodType81);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((-1L), dateTimeZone85);
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.util.Calendar calendar88 = dateTime86.toCalendar(locale87);
        org.joda.time.DateTime dateTime90 = dateTime86.plusMillis((int) '4');
        org.joda.time.Chronology chronology91 = dateTime86.getChronology();
        org.joda.time.DurationField durationField92 = chronology91.minutes();
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(chronology91);
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime(chronology91);
        org.joda.time.DurationField durationField95 = chronology91.eras();
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((long) (short) 100, periodType81, chronology91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField92 and durationField95", Math.signum(durationField92.compareTo(durationField95)) == -Math.signum(durationField95.compareTo(durationField92)));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        boolean boolean11 = instant9.isBefore((long) 100);
        org.joda.time.Instant instant14 = instant9.withDurationAdded((long) 10, (int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime15 = instant9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        int int20 = dateTime18.getHourOfDay();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Calendar calendar24 = dateTime18.toCalendar(locale22);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone26 = instant9.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime15", (dateTime3.compareTo(mutableDateTime15) == 0) == dateTime3.equals(mutableDateTime15));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.multipliedBy(999);
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds5 = seconds3.multipliedBy(999);
        org.joda.time.Seconds seconds7 = seconds5.minus(8);
        boolean boolean8 = seconds2.isGreaterThan(seconds5);
        org.joda.time.Seconds seconds10 = seconds5.plus(21);
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10);
        int int13 = period12.getSeconds();
        org.joda.time.Period period15 = period12.minusHours(100);
        int int16 = period15.getMillis();
        org.joda.time.Period period18 = period15.plusDays((int) 'a');
        org.joda.time.Period period19 = period15.negated();
        org.joda.time.Duration duration20 = period19.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(0);
        java.lang.String str31 = dateTime27.toString("52");
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, (long) (short) -1, periodType34);
        org.joda.time.PeriodType periodType36 = periodType34.withDaysRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime27, periodType36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMillis((int) '4');
        org.joda.time.Chronology chronology46 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period50 = mutableInterval48.toPeriod(periodType49);
        int[] intArray53 = chronology46.get((org.joda.time.ReadablePeriod) period50, (long) (byte) 0, (long) 12);
        org.joda.time.DateTimeField dateTimeField54 = chronology46.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology46.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = chronology46.dayOfYear();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.TimeOfDay timeOfDay58 = dateTime57.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone61.isLocalDateTimeGap(localDateTime63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime67 = dateTime65.withHourOfDay(0);
        int int68 = dateTime67.getDayOfWeek();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        int int70 = dateTime67.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1L), dateTimeZone73);
        java.util.GregorianCalendar gregorianCalendar75 = dateTime74.toGregorianCalendar();
        org.joda.time.DateTime dateTime77 = dateTime74.withWeekyear(0);
        int int78 = dateTime67.compareTo((org.joda.time.ReadableInstant) dateTime74);
        int int79 = dateTime57.compareTo((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Seconds seconds80 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Seconds seconds82 = seconds80.plus(0);
        boolean boolean83 = seconds10.isLessThan(seconds82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime69", (dateTime27.compareTo(dateTime69) == 0) == dateTime27.equals(dateTime69));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        boolean boolean10 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone15);
        boolean boolean19 = interval17.isAfter(100L);
        long long20 = interval17.getEndMillis();
        org.joda.time.Interval interval21 = interval17.toInterval();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval21.withDurationBeforeEnd(readableDuration22);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType25 = periodType24.withMillisRemoved();
        org.joda.time.Period period26 = interval21.toPeriod(periodType25);
        org.joda.time.Chronology chronology27 = interval21.getChronology();
        mutableInterval7.setChronology(chronology27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean39 = interval35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration41 = mutableInterval7.toDuration();
        long long42 = mutableInterval7.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        java.util.GregorianCalendar gregorianCalendar46 = dateTime45.toGregorianCalendar();
        int int47 = dateTime45.getHourOfDay();
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = locale48.stripExtensions();
        java.lang.String str50 = locale49.toLanguageTag();
        java.util.Calendar calendar51 = dateTime45.toCalendar(locale49);
        org.joda.time.DateTime.Property property52 = dateTime45.minuteOfHour();
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        org.joda.time.Days days56 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod57 = days56.toMutablePeriod();
        org.joda.time.Duration duration58 = days56.toStandardDuration();
        boolean boolean59 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration55);
        long long61 = duration55.getStandardDays();
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration55);
        long long63 = duration55.getStandardMinutes();
        org.joda.time.Period period64 = duration55.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Calendar calendar70 = dateTime68.toCalendar(locale69);
        org.joda.time.DateTime dateTime72 = dateTime68.plusMillis((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime68.toDateTimeISO();
        org.joda.time.Instant instant74 = dateTime68.toInstant();
        org.joda.time.Instant instant75 = instant74.toInstant();
        org.joda.time.Instant instant76 = instant74.toInstant();
        org.joda.time.Instant instant78 = instant74.plus((long) 0);
        org.joda.time.DateTime dateTime79 = instant74.toDateTimeISO();
        org.joda.time.Interval interval80 = duration55.toIntervalTo((org.joda.time.ReadableInstant) instant74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime79", (dateTime5.compareTo(dateTime79) == 0) == dateTime5.equals(dateTime79));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 'a');
        org.joda.time.Instant instant3 = instant1.minus(518405299L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(2888);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime10.withSecondOfMinute(12);
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours((-1));
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone26);
        boolean boolean30 = interval28.isAfter(100L);
        long long31 = interval28.getEndMillis();
        org.joda.time.Interval interval32 = interval28.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = interval32.toMutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone39);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval43 = interval41.toMutableInterval();
        long long44 = mutableInterval43.getEndMillis();
        mutableInterval43.setDurationBeforeEnd((long) 53249647);
        boolean boolean47 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType49 = periodType48.withHoursRemoved();
        org.joda.time.PeriodType periodType50 = periodType48.withWeeksRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withMinutesRemoved();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.years();
        java.lang.String str53 = durationFieldType52.toString();
        boolean boolean54 = periodType50.isSupported(durationFieldType52);
        org.joda.time.Period period55 = mutableInterval33.toPeriod(periodType50);
        org.joda.time.Hours hours57 = org.joda.time.Hours.hours(6);
        org.joda.time.DurationFieldType durationFieldType58 = hours57.getFieldType();
        int int59 = periodType50.indexOf(durationFieldType58);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime20, periodType50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        int int11 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(0);
        int int21 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-1L), dateTimeZone28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone28);
        boolean boolean32 = interval30.isAfter(100L);
        long long33 = interval30.getEndMillis();
        org.joda.time.Interval interval34 = interval30.toInterval();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval34.withDurationBeforeEnd(readableDuration35);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType38 = periodType37.withMillisRemoved();
        org.joda.time.Period period39 = interval34.toPeriod(periodType38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period41 = period39.withPeriodType(periodType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime20, periodType40);
        org.joda.time.PeriodType periodType43 = periodType40.withHoursRemoved();
        org.joda.time.PeriodType periodType44 = periodType40.withHoursRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime10", (dateTime6.compareTo(dateTime10) == 0) == dateTime6.equals(dateTime10));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 'a');
        org.joda.time.Instant instant3 = instant1.minus(518405299L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTimeISO();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 14);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(905);
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property12 = dateTime10.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime4", (instant1.compareTo(dateTime4) == 0) == instant1.equals(dateTime4));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-6000));
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone6);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        boolean boolean11 = mutableInterval9.isBefore((long) 59);
        boolean boolean12 = mutableInterval9.containsNow();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = mutableInterval9.toPeriod(periodType13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        boolean boolean25 = dateTime18.equals((java.lang.Object) dateTime24);
        int int26 = dateTime18.getMillisOfSecond();
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.Chronology chronology38 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period42 = mutableInterval40.toPeriod(periodType41);
        int[] intArray45 = chronology38.get((org.joda.time.ReadablePeriod) period42, (long) (byte) 0, (long) 12);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) interval29, chronology38);
        org.joda.time.DateTime dateTime47 = interval29.getEnd();
        mutableInterval9.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        java.util.GregorianCalendar gregorianCalendar52 = dateTime51.toGregorianCalendar();
        int int53 = dateTime51.getHourOfDay();
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Locale locale55 = locale54.stripExtensions();
        java.lang.String str56 = locale55.toLanguageTag();
        java.util.Calendar calendar57 = dateTime51.toCalendar(locale55);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone60.isLocalDateTimeGap(localDateTime62);
        org.joda.time.DateTime dateTime64 = dateTime51.withZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        long long71 = dateTimeZone67.convertLocalToUTC(52L, false);
        long long73 = dateTimeZone67.previousTransition((long) 'x');
        long long75 = dateTimeZone60.getMillisKeepLocal(dateTimeZone67, 31556952000L);
        int int77 = dateTimeZone60.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime78 = dateTime47.toDateTime(dateTimeZone60);
        long long80 = dateTimeZone1.getMillisKeepLocal(dateTimeZone60, (long) 5279999);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime47 and dateTime51", (dateTime47.compareTo(dateTime51) == 0) == dateTime47.equals(dateTime51));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.DateTime dateTime27 = instant24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.monthOfYear();
        org.joda.time.DateTime dateTime30 = dateTime27.plusHours((int) 'x');
        org.joda.time.DateTime dateTime32 = dateTime30.plus((-50400L));
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfMinute();
        org.joda.time.DateTime dateTime34 = property33.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime27", (instant24.compareTo(dateTime27) == 0) == instant24.equals(dateTime27));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime8 = interval6.getStart();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        boolean boolean17 = interval6.isBefore((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        boolean boolean22 = dateTime20.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property23 = dateTime20.millisOfSecond();
        org.joda.time.DateTime dateTime24 = property23.getDateTime();
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        int int26 = dateTime24.getDayOfMonth();
        mutableInterval16.setEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology28 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.year();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant41 = dateTime35.toInstant();
        org.joda.time.Instant instant42 = instant41.toInstant();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone45.isLocalDateTimeGap(localDateTime47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(0);
        boolean boolean52 = instant42.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Days days53 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod54 = days53.toMutablePeriod();
        org.joda.time.Duration duration55 = days53.toStandardDuration();
        org.joda.time.Days days56 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod57 = days56.toMutablePeriod();
        org.joda.time.Duration duration58 = days56.toStandardDuration();
        boolean boolean59 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTime dateTime60 = dateTime51.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime62 = dateTime51.withCenturyOfEra(52);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMillis(10);
        org.joda.time.Days days65 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod66 = days65.toMutablePeriod();
        org.joda.time.Days days67 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod68 = days67.toMutablePeriod();
        mutablePeriod68.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval71 = null;
        mutablePeriod68.add(readableInterval71);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.eras();
        int int74 = mutablePeriod68.get(durationFieldType73);
        boolean boolean75 = mutablePeriod66.isSupported(durationFieldType73);
        mutablePeriod66.addSeconds((int) '#');
        mutablePeriod66.addMillis((int) (short) 10);
        java.lang.Object obj81 = null;
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Interval interval83 = new org.joda.time.Interval(obj81, chronology82);
        org.joda.time.Chronology chronology84 = interval83.getChronology();
        mutablePeriod66.add((long) (byte) 10, chronology84);
        org.joda.time.DateTimeZone dateTimeZone86 = chronology84.getZone();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(chronology84);
        org.joda.time.Chronology chronology88 = chronology84.withUTC();
        org.joda.time.MutableDateTime mutableDateTime89 = dateTime64.toMutableDateTime(chronology84);
        org.joda.time.Period period90 = new org.joda.time.Period(63113903270L, (long) (-50), chronology84);
        long long93 = chronology28.add((org.joda.time.ReadablePeriod) period90, (long) (-50), 1970);
        org.joda.time.Period period94 = period90.toPeriod();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime87", (dateTime20.compareTo(dateTime87) == 0) == dateTime20.equals(dateTime87));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (-1));
        org.joda.time.Instant instant14 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration12, 7);
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        org.joda.time.Instant instant17 = instant14.plus((long) 'x');
        java.lang.String str18 = instant17.toString();
        org.joda.time.MutableDateTime mutableDateTime19 = instant17.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTimeISO();
        org.joda.time.Instant instant29 = dateTime23.toInstant();
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone33.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.withHourOfDay(0);
        boolean boolean40 = instant30.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant44 = instant30.withDurationAdded((org.joda.time.ReadableDuration) duration42, (-1));
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusMillis((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime48.toDateTimeISO();
        org.joda.time.DateTime dateTime55 = dateTime53.plusMillis((int) '#');
        int int56 = instant44.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTimeISO();
        org.joda.time.Instant instant66 = dateTime60.toInstant();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Days days68 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant17, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime70 = dateTime60.withYearOfEra(53710);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime15", (instant14.compareTo(mutableDateTime15) == 0) == instant14.equals(mutableDateTime15));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        int int5 = period4.getMillis();
        org.joda.time.Period period7 = period4.plusDays((int) 'a');
        org.joda.time.Period period8 = period4.negated();
        org.joda.time.Duration duration9 = period8.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone12.isLocalDateTimeGap(localDateTime14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        java.lang.String str20 = dateTime16.toString("52");
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, (long) (short) -1, periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withDaysRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime16, periodType25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period39 = mutableInterval37.toPeriod(periodType38);
        int[] intArray42 = chronology35.get((org.joda.time.ReadablePeriod) period39, (long) (byte) 0, (long) 12);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = chronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology35.dayOfYear();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.TimeOfDay timeOfDay47 = dateTime46.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone50.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(0);
        int int57 = dateTime56.getDayOfWeek();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        int int59 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.GregorianCalendar gregorianCalendar64 = dateTime63.toGregorianCalendar();
        org.joda.time.DateTime dateTime66 = dateTime63.withWeekyear(0);
        int int67 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime63);
        int int68 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Seconds seconds69 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Minutes minutes70 = seconds69.toStandardMinutes();
        java.lang.String str71 = minutes70.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime58", (dateTime16.compareTo(dateTime58) == 0) == dateTime16.equals(dateTime58));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.DateTime dateTime27 = instant24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.monthOfYear();
        int int29 = property28.getMinimumValueOverall();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime27", (instant24.compareTo(dateTime27) == 0) == instant24.equals(dateTime27));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(14);
        org.joda.time.DateTime.Property property7 = dateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone12);
        boolean boolean16 = interval14.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        boolean boolean30 = dateTime28.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime20);
        int int33 = property7.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime35 = dateTime20.minusHours(31);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.Instant instant45 = dateTime39.toInstant();
        org.joda.time.Instant instant46 = instant45.toInstant();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardMinutes((long) (-1));
        org.joda.time.Instant instant50 = instant45.withDurationAdded((org.joda.time.ReadableDuration) duration48, 7);
        boolean boolean51 = dateTime35.isBefore((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Instant instant52 = instant50.toInstant();
        org.joda.time.MutableDateTime mutableDateTime53 = instant50.toMutableDateTimeISO();
        long long54 = instant50.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and mutableDateTime53", (instant50.compareTo(mutableDateTime53) == 0) == instant50.equals(mutableDateTime53));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (byte) 10, 3600000L);
        org.joda.time.Chronology chronology3 = mutableInterval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis((int) '4');
        org.joda.time.Chronology chronology12 = dateTime7.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.minutes();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime16.getZone();
        org.joda.time.Days days20 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod21 = days20.toMutablePeriod();
        org.joda.time.Days days22 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod23 = days22.toMutablePeriod();
        mutablePeriod23.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval26 = null;
        mutablePeriod23.add(readableInterval26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.eras();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod21.isSupported(durationFieldType28);
        mutablePeriod21.addSeconds((int) '#');
        mutablePeriod21.addMillis((int) (short) 10);
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        mutablePeriod21.add((long) (byte) 10, chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = chronology39.getZone();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime44 = dateTime42.withCenturyOfEra(18350);
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = mutableInterval2.getEnd();
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval2.copy();
        mutableInterval2.setStartMillis((-9223309849910400000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime42", (dateTime14.compareTo(dateTime42) == 0) == dateTime14.equals(dateTime42));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (-1));
        org.joda.time.Instant instant14 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration12, 7);
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        org.joda.time.Instant instant17 = instant14.plus((long) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = instant17.toString(dateTimeFormatter18);
        org.joda.time.DateTime dateTime20 = instant17.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime15", (instant14.compareTo(mutableDateTime15) == 0) == instant14.equals(mutableDateTime15));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(0);
        boolean boolean20 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant24 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        boolean boolean26 = instant24.isBefore((long) (short) 10);
        org.joda.time.DateTime dateTime27 = instant24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.monthOfYear();
        org.joda.time.DateTime dateTime30 = dateTime27.plusHours((int) 'x');
        org.joda.time.DateTime dateTime32 = dateTime30.plus((-50400L));
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 14);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone50);
        boolean boolean54 = interval52.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = dateTime58.toCalendar(locale59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusMillis((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime58.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        boolean boolean68 = dateTime66.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes69 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = interval52.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property71 = dateTime58.year();
        org.joda.time.Minutes minutes72 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime27", (instant24.compareTo(dateTime27) == 0) == instant24.equals(dateTime27));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(0);
        boolean boolean22 = instant12.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Days days23 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod24 = days23.toMutablePeriod();
        org.joda.time.Duration duration25 = days23.toStandardDuration();
        org.joda.time.Days days26 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod27 = days26.toMutablePeriod();
        org.joda.time.Duration duration28 = days26.toStandardDuration();
        boolean boolean29 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime21.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime32 = dateTime21.withCenturyOfEra(52);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMillis(10);
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Days days37 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod38 = days37.toMutablePeriod();
        mutablePeriod38.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval41 = null;
        mutablePeriod38.add(readableInterval41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.eras();
        int int44 = mutablePeriod38.get(durationFieldType43);
        boolean boolean45 = mutablePeriod36.isSupported(durationFieldType43);
        mutablePeriod36.addSeconds((int) '#');
        mutablePeriod36.addMillis((int) (short) 10);
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        mutablePeriod36.add((long) (byte) 10, chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = chronology54.getZone();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology54);
        org.joda.time.Chronology chronology58 = chronology54.withUTC();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime34.toMutableDateTime(chronology54);
        org.joda.time.Period period60 = new org.joda.time.Period(63113903270L, (long) (-50), chronology54);
        org.joda.time.Period period62 = period60.withWeeks((-97));
        org.joda.time.Period period63 = period62.normalizedStandard();
        org.joda.time.Period period65 = period62.minusYears((-57));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime57", (dateTime19.compareTo(dateTime57) == 0) == dateTime19.equals(dateTime57));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.setPeriod(59, 59, (int) 'x', (int) (short) 100, (int) (short) -1, 999, (int) (short) 0, 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval19 = interval17.toMutableInterval();
        boolean boolean20 = interval17.isAfterNow();
        org.joda.time.Days days21 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod22 = days21.toMutablePeriod();
        org.joda.time.Duration duration23 = days21.toStandardDuration();
        org.joda.time.Days days24 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod25 = days24.toMutablePeriod();
        org.joda.time.Duration duration26 = days24.toStandardDuration();
        boolean boolean27 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Duration duration30 = days28.toStandardDuration();
        org.joda.time.Days days31 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod32 = days31.toMutablePeriod();
        org.joda.time.Duration duration33 = days31.toStandardDuration();
        boolean boolean34 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Duration duration37 = days35.toStandardDuration();
        boolean boolean38 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean39 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusMillis((int) '4');
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period50 = period48.minusMinutes((int) ' ');
        org.joda.time.Interval interval51 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period50);
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval51);
        mutablePeriod1.addMonths((int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod55 = mutablePeriod1.copy();
        org.joda.time.Duration duration57 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration59 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration60 = duration57.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime65 = null;
        boolean boolean66 = dateTimeZone63.isLocalDateTimeGap(localDateTime65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone63);
        org.joda.time.DateTime dateTime69 = dateTime67.withHourOfDay(0);
        int int70 = dateTime69.getDayOfWeek();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        int int72 = dateTime69.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType74.getDurationType();
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType74.getRangeDurationType();
        int int77 = dateTime71.get(dateTimeFieldType74);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime71, readableInstant78);
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval79);
        mutablePeriod1.setHours(19);
        int int83 = mutablePeriod1.getMonths();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime67 and dateTime71", (dateTime67.compareTo(dateTime71) == 0) == dateTime67.equals(dateTime71));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-1L), dateTimeZone8);
        boolean boolean10 = dateTime3.equals((java.lang.Object) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.lang.String str14 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime15 = dateTime3.withZone(dateTimeZone12);
        int int16 = dateTime3.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.Instant instant44 = instant41.withMillis(360002L);
        boolean boolean45 = dateTime3.isBefore((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant48 = instant44.withDurationAdded(1585442213488L, 50);
        org.joda.time.Instant instant50 = instant44.withMillis(1645454945001L);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        org.joda.time.DateTime dateTime58 = dateTime54.plusMillis((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime54.toDateTimeISO();
        org.joda.time.Instant instant60 = dateTime54.toInstant();
        org.joda.time.Instant instant61 = instant60.toInstant();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusMillis((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime65.toDateTimeISO();
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType72 = periodType71.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant60, (org.joda.time.ReadableInstant) dateTime70, periodType71);
        org.joda.time.Instant instant76 = instant60.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant78 = instant76.plus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime79 = instant78.toMutableDateTimeISO();
        org.joda.time.Instant instant81 = instant78.withMillis((long) 5);
        org.joda.time.Minutes minutes82 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) instant50, (org.joda.time.ReadableInstant) instant81);
        long long83 = instant50.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and dateTime42", (instant41.compareTo(dateTime42) == 0) == instant41.equals(dateTime42));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.DurationFieldType durationFieldType1 = days0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Calendar calendar18 = dateTime16.toCalendar(locale17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMillis((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant11, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        org.joda.time.Instant instant27 = instant11.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours(9);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone35);
        boolean boolean39 = interval37.isAfter(100L);
        long long40 = interval37.getEndMillis();
        org.joda.time.Interval interval41 = interval37.toInterval();
        org.joda.time.Days days42 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Days days43 = org.joda.time.Days.SIX;
        boolean boolean44 = days42.isGreaterThan(days43);
        org.joda.time.Days days46 = days42.multipliedBy(8);
        java.lang.String str47 = days46.toString();
        org.joda.time.Days days49 = days46.dividedBy((int) (short) 10);
        org.joda.time.Days days51 = days46.multipliedBy(31);
        org.joda.time.DateTime dateTime53 = dateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) days46, 43919);
        java.lang.String str54 = days46.toString();
        boolean boolean55 = days0.isLessThan(days46);
        org.joda.time.DurationFieldType durationFieldType56 = days46.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime28", (instant27.compareTo(dateTime28) == 0) == instant27.equals(dateTime28));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Instant instant25 = instant9.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTimeISO();
        org.joda.time.Instant instant36 = dateTime30.toInstant();
        org.joda.time.Instant instant37 = instant36.toInstant();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) (-1));
        org.joda.time.Instant instant41 = instant36.withDurationAdded((org.joda.time.ReadableDuration) duration39, 7);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant44 = instant41.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant45 = instant25.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        long long50 = durationField47.getValueAsLong(62135596800366L, 26L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and dateTime26", (instant25.compareTo(dateTime26) == 0) == instant25.equals(dateTime26));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        boolean boolean11 = instant9.isBefore((long) 100);
        org.joda.time.Instant instant14 = instant9.withDurationAdded((long) 10, (int) (short) 10);
        org.joda.time.DateTime dateTime15 = instant9.toDateTimeISO();
        int int16 = dateTime15.getEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-1L), dateTimeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant26 = dateTime20.toInstant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(0);
        boolean boolean37 = instant27.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (-1));
        org.joda.time.Instant instant43 = instant27.withMillis(100L);
        org.joda.time.Days days44 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant47 = instant43.withDurationAdded((long) (short) 1, 404);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime15", (dateTime3.compareTo(dateTime15) == 0) == dateTime3.equals(dateTime15));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10368000L);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime5.weekOfWeekyear();
        org.joda.time.Duration duration13 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration16 = duration13.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property19 = dateTime5.property(dateTimeFieldType18);
        int int20 = property19.getMinimumValue();
        boolean boolean21 = duration1.equals((java.lang.Object) int20);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearWeekDayTime();
        java.lang.String str27 = periodType26.toString();
        org.joda.time.Period period28 = new org.joda.time.Period((long) (short) 10, 2726520621264000130L, periodType26);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1584921599900L, periodType26);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone34);
        boolean boolean38 = interval36.isAfter(100L);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-1L), dateTimeZone43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone43);
        boolean boolean47 = interval45.isAfter(100L);
        long long48 = interval45.getEndMillis();
        org.joda.time.Interval interval49 = interval45.toInterval();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Interval interval51 = interval49.withDurationBeforeEnd(readableDuration50);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType53 = periodType52.withMillisRemoved();
        org.joda.time.Period period54 = interval49.toPeriod(periodType53);
        org.joda.time.Chronology chronology55 = interval49.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.centuries();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.dayOfYear();
        org.joda.time.Interval interval58 = interval36.withChronology(chronology55);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) 10);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        boolean boolean65 = dateTime63.isAfter((long) (byte) 10);
        boolean boolean66 = duration60.equals((java.lang.Object) dateTime63);
        org.joda.time.Duration duration68 = duration60.withMillis((long) 69);
        org.joda.time.Interval interval69 = interval58.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Chronology chronology70 = interval58.getChronology();
        org.joda.time.Period period71 = new org.joda.time.Period(365L, periodType26, chronology70);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        boolean boolean76 = dateTime74.isAfter((long) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj79 = null;
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Interval interval81 = new org.joda.time.Interval(obj79, chronology80);
        org.joda.time.Chronology chronology82 = interval81.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType78.getField(chronology82);
        org.joda.time.DurationField durationField84 = durationFieldType77.getField(chronology82);
        org.joda.time.DateTimeField dateTimeField85 = chronology82.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime74.toMutableDateTime(chronology82);
        org.joda.time.Period period88 = duration1.toPeriod(periodType26, chronology82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime63 and mutableDateTime87", (dateTime63.compareTo(mutableDateTime87) == 0) == dateTime63.equals(mutableDateTime87));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getHourOfDay();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Calendar calendar10 = dateTime4.toCalendar(locale8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = dateTime4.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10);
        org.joda.time.Duration duration23 = period22.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone26.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.Duration duration33 = period22.toDurationTo((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean34 = dateTime19.equals((java.lang.Object) dateTime30);
        org.joda.time.Days days35 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        org.joda.time.Days days37 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod38 = days37.toMutablePeriod();
        mutablePeriod38.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval41 = null;
        mutablePeriod38.add(readableInterval41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.eras();
        int int44 = mutablePeriod38.get(durationFieldType43);
        boolean boolean45 = mutablePeriod36.isSupported(durationFieldType43);
        mutablePeriod36.addSeconds((int) '#');
        mutablePeriod36.addMillis((int) (short) 10);
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        mutablePeriod36.add((long) (byte) 10, chronology54);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime19.toMutableDateTime(chronology54);
        org.joda.time.Period period57 = new org.joda.time.Period(8640L, (-767475054L), chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.weekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.clockhourOfHalfday();
        int int60 = dateTimeField59.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime56", (dateTime4.compareTo(mutableDateTime56) == 0) == dateTime4.equals(mutableDateTime56));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getHourOfDay();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Calendar calendar10 = dateTime4.toCalendar(locale8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTime dateTime17 = dateTime4.withZone(dateTimeZone13);
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration21 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Duration duration22 = duration19.minus((org.joda.time.ReadableDuration) duration21);
        long long23 = duration19.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime4.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.Instant instant34 = dateTime28.toInstant();
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTimeISO();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType46 = periodType45.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant34, (org.joda.time.ReadableInstant) dateTime44, periodType45);
        org.joda.time.Instant instant50 = instant34.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = instant50.toString(dateTimeFormatter51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) instant50);
        org.joda.time.Chronology chronology54 = instant50.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645488000000L, 31452522789L, chronology54);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.hourOfHalfday();
        org.joda.time.DurationField durationField59 = dateTimeField58.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField55, durationField59, and durationField55", !(durationField55.compareTo(durationField59) == 0) || (Math.signum(durationField55.compareTo(durationField55)) == Math.signum(durationField59.compareTo(durationField55))));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 'x');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) 'x');
        long long4 = duration3.getStandardSeconds();
        org.joda.time.Duration duration6 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) 'x');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone10.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.withHourOfDay(0);
        int int17 = dateTime16.getDayOfWeek();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        int int19 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Days days25 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod26 = days25.toMutablePeriod();
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod28 = days27.toMutablePeriod();
        mutablePeriod28.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval31 = null;
        mutablePeriod28.add(readableInterval31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.eras();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = mutablePeriod26.isSupported(durationFieldType33);
        mutablePeriod26.addSeconds((int) '#');
        mutablePeriod26.addSeconds((int) (short) 0);
        java.lang.String str40 = mutablePeriod26.toString();
        org.joda.time.PeriodType periodType41 = mutablePeriod26.getPeriodType();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 53249647, 120L, periodType41);
        org.joda.time.PeriodType periodType43 = periodType41.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(10368000L, (long) 83, periodType41);
        org.joda.time.PeriodType periodType45 = periodType41.withSecondsRemoved();
        org.joda.time.Period period46 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16, periodType45);
        org.joda.time.PeriodType periodType47 = periodType45.withWeeksRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime18", (dateTime14.compareTo(dateTime18) == 0) == dateTime14.equals(dateTime18));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime9 = instant8.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = instant8.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime9", (dateTime7.compareTo(dateTime9) == 0) == dateTime7.equals(dateTime9));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis((int) '4');
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = dateTime11.isAfter((long) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime15.withCenturyOfEra(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.plusMillis((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime22.weekOfWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime22.withSecondOfMinute(12);
        org.joda.time.DateTime dateTime32 = dateTime22.withYear(6);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-1L), dateTimeZone38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone38);
        boolean boolean42 = interval40.isAfter(100L);
        long long43 = interval40.getEndMillis();
        org.joda.time.Interval interval44 = interval40.toInterval();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone49);
        org.joda.time.MutableInterval mutableInterval52 = interval51.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval53 = interval51.toMutableInterval();
        org.joda.time.Interval interval54 = interval44.overlap((org.joda.time.ReadableInterval) mutableInterval53);
        mutablePeriod33.add((org.joda.time.ReadableInterval) interval54);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.Object obj59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval(obj59, chronology60);
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType58.getField(chronology62);
        org.joda.time.DurationField durationField64 = chronology62.millis();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone69);
        boolean boolean73 = interval71.isAfter(100L);
        long long74 = interval71.getEndMillis();
        org.joda.time.Interval interval75 = interval71.toInterval();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval75.withDurationBeforeEnd(readableDuration76);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType79 = periodType78.withMillisRemoved();
        org.joda.time.Period period80 = interval75.toPeriod(periodType79);
        org.joda.time.Chronology chronology81 = interval75.getChronology();
        org.joda.time.Period period82 = interval75.toPeriod();
        int[] intArray85 = chronology62.get((org.joda.time.ReadablePeriod) period82, (long) 53, (long) (byte) 1);
        org.joda.time.DateTimeField dateTimeField86 = chronology62.halfdayOfDay();
        mutablePeriod33.setPeriod(3628800097L, 6700148978639999L, chronology62);
        org.joda.time.DateTime dateTime88 = dateTime8.toDateTime(chronology62);
        org.joda.time.DateTimeField dateTimeField89 = chronology62.hourOfDay();
        org.joda.time.DurationField durationField90 = chronology62.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime88", (dateTime3.compareTo(dateTime88) == 0) == dateTime3.equals(dateTime88));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        int int2 = mutablePeriod1.getSeconds();
        mutablePeriod1.setSeconds(19);
        mutablePeriod1.setHours((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime14.secondOfMinute();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMillis((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime24.weekOfWeekyear();
        org.joda.time.Period period31 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period32 = duration20.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.Instant instant42 = dateTime36.toInstant();
        org.joda.time.Instant instant43 = instant42.toInstant();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone46.isLocalDateTimeGap(localDateTime48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(0);
        boolean boolean53 = instant43.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant57 = instant43.withDurationAdded((org.joda.time.ReadableDuration) duration55, (-1));
        boolean boolean59 = instant57.isBefore((long) (short) 10);
        org.joda.time.DateTime dateTime60 = instant57.toDateTime();
        org.joda.time.DateTime.Property property61 = dateTime60.monthOfYear();
        org.joda.time.DateTime dateTime63 = dateTime60.plusHours((int) 'x');
        org.joda.time.Interval interval64 = duration20.toIntervalFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        java.util.GregorianCalendar gregorianCalendar68 = dateTime67.toGregorianCalendar();
        int int69 = dateTime67.getHourOfDay();
        java.util.Locale locale70 = java.util.Locale.CHINA;
        java.util.Locale locale71 = locale70.stripExtensions();
        java.lang.String str72 = locale71.toLanguageTag();
        java.util.Calendar calendar73 = dateTime67.toCalendar(locale71);
        org.joda.time.DateTime.Property property74 = dateTime67.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((-1L), dateTimeZone78);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.util.Calendar calendar81 = dateTime79.toCalendar(locale80);
        org.joda.time.DateTime dateTime83 = dateTime79.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime84 = dateTime79.toLocalDateTime();
        java.util.Locale locale85 = java.util.Locale.JAPANESE;
        java.lang.String str86 = locale85.getVariant();
        java.util.Calendar calendar87 = dateTime79.toCalendar(locale85);
        org.joda.time.DateTime dateTime88 = property74.setCopy("52", locale85);
        org.joda.time.DateTime.Property property89 = dateTime88.secondOfMinute();
        org.joda.time.DateTime dateTime91 = dateTime88.minusSeconds(9);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod1, (org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant57 and dateTime60", (instant57.compareTo(dateTime60) == 0) == instant57.equals(dateTime60));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Calendar calendar7 = dateTime5.toCalendar(locale6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis((int) '4');
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period14 = mutableInterval12.toPeriod(periodType13);
        int[] intArray17 = chronology10.get((org.joda.time.ReadablePeriod) period14, (long) (byte) 0, (long) 12);
        org.joda.time.DateTimeField dateTimeField18 = chronology10.yearOfCentury();
        org.joda.time.Chronology chronology19 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology10.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = instant0.toMutableDateTime(chronology10);
        long long22 = instant0.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime21", (dateTime1.compareTo(mutableDateTime21) == 0) == dateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minus((long) 856);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(85980);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTimeISO();
        org.joda.time.Instant instant16 = dateTime10.toInstant();
        org.joda.time.Instant instant17 = instant16.toInstant();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        boolean boolean27 = instant17.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Days days28 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod29 = days28.toMutablePeriod();
        org.joda.time.Duration duration30 = days28.toStandardDuration();
        org.joda.time.Days days31 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod32 = days31.toMutablePeriod();
        org.joda.time.Duration duration33 = days31.toStandardDuration();
        boolean boolean34 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTime dateTime35 = dateTime26.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime37 = dateTime26.withCenturyOfEra(52);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis(10);
        org.joda.time.Days days40 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        org.joda.time.Days days42 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod43 = days42.toMutablePeriod();
        mutablePeriod43.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval46 = null;
        mutablePeriod43.add(readableInterval46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.eras();
        int int49 = mutablePeriod43.get(durationFieldType48);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType48);
        mutablePeriod41.addSeconds((int) '#');
        mutablePeriod41.addMillis((int) (short) 10);
        java.lang.Object obj56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval(obj56, chronology57);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        mutablePeriod41.add((long) (byte) 10, chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = chronology59.getZone();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology59);
        org.joda.time.Chronology chronology63 = chronology59.withUTC();
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime39.toMutableDateTime(chronology59);
        org.joda.time.Period period65 = new org.joda.time.Period(63113903270L, (long) (-50), chronology59);
        org.joda.time.Period period67 = period65.withWeeks((-97));
        org.joda.time.Period period69 = period65.plusWeeks(867);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime24", (dateTime0.compareTo(dateTime24) == 0) == dateTime0.equals(dateTime24));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMinutes((int) (short) 100);
        int int6 = dateTime2.getEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.Chronology chronology15 = dateTime10.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) (byte) 100);
        boolean boolean23 = dateTimeZone18.equals((java.lang.Object) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone26.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMillis((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        boolean boolean46 = dateTime44.isAfter((long) (byte) 10);
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration48 = minutes47.toStandardDuration();
        org.joda.time.Duration duration49 = minutes47.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration49);
        int int51 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology52 = chronology15.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.DateTime dateTime54 = dateTime2.toDateTime(chronology52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField53", Math.signum(durationField16.compareTo(durationField53)) == -Math.signum(durationField53.compareTo(durationField16)));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 'x');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) 'x');
        long long4 = duration3.getStandardSeconds();
        org.joda.time.Duration duration6 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMillis((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTimeISO();
        org.joda.time.Instant instant16 = dateTime10.toInstant();
        org.joda.time.Instant instant17 = instant16.toInstant();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-1L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        boolean boolean27 = instant17.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant31 = instant17.withDurationAdded((org.joda.time.ReadableDuration) duration29, (-1));
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        long long33 = instant31.getMillis();
        org.joda.time.DateTime dateTime34 = instant31.toDateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime34.minusSeconds((int) ' ');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime32", (instant31.compareTo(dateTime32) == 0) == instant31.equals(dateTime32));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(0);
        int int9 = dateTime8.getYear();
        org.joda.time.Hours hours10 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours12 = hours10.plus((int) (byte) 100);
        boolean boolean13 = dateTime8.equals((java.lang.Object) hours12);
        org.joda.time.DateTime dateTime15 = dateTime8.plusWeeks((-2147483648));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTimeISO();
        org.joda.time.Instant instant25 = dateTime19.toInstant();
        org.joda.time.Instant instant26 = instant25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime33.withHourOfDay(0);
        boolean boolean36 = instant26.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.millis((-1L));
        org.joda.time.Instant instant40 = instant26.withDurationAdded((org.joda.time.ReadableDuration) duration38, (-1));
        org.joda.time.Instant instant42 = instant26.withMillis(100L);
        org.joda.time.MutableDateTime mutableDateTime43 = instant42.toMutableDateTimeISO();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) instant42);
        org.joda.time.DurationFieldType durationFieldType45 = null;
        int int46 = period44.indexOf(durationFieldType45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and mutableDateTime43", (instant42.compareTo(mutableDateTime43) == 0) == instant42.equals(mutableDateTime43));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone4);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone4);
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore((long) 59);
        boolean boolean10 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-1L), dateTimeZone15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone15);
        boolean boolean19 = interval17.isAfter(100L);
        long long20 = interval17.getEndMillis();
        org.joda.time.Interval interval21 = interval17.toInterval();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval21.withDurationBeforeEnd(readableDuration22);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType25 = periodType24.withMillisRemoved();
        org.joda.time.Period period26 = interval21.toPeriod(periodType25);
        org.joda.time.Chronology chronology27 = interval21.getChronology();
        mutableInterval7.setChronology(chronology27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) -1, (long) 1, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean39 = interval35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Interval interval41 = mutableInterval7.toInterval();
        mutableInterval7.setDurationBeforeEnd(4459615861L);
        org.joda.time.MutableInterval mutableInterval44 = mutableInterval7.toMutableInterval();
        mutableInterval7.setDurationAfterStart((long) 5);
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMillis((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTimeISO();
        org.joda.time.Instant instant57 = dateTime51.toInstant();
        org.joda.time.Instant instant58 = instant57.toInstant();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((-1L), dateTimeZone61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Calendar calendar64 = dateTime62.toCalendar(locale63);
        org.joda.time.DateTime dateTime66 = dateTime62.plusMillis((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime62.toDateTimeISO();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType69 = periodType68.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant57, (org.joda.time.ReadableInstant) dateTime67, periodType68);
        org.joda.time.Instant instant73 = instant57.withDurationAdded(10L, (int) (byte) -1);
        org.joda.time.Instant instant75 = instant73.plus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime76 = instant75.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((-1L), dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime81 = null;
        boolean boolean82 = dateTimeZone79.isLocalDateTimeGap(localDateTime81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime85 = dateTime83.withHourOfDay(0);
        int int86 = dateTime83.getYearOfEra();
        org.joda.time.DateTime dateTime88 = dateTime83.withWeekyear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((long) 20, dateTimeZone91);
        org.joda.time.DateTime dateTime93 = dateTime83.withZone(dateTimeZone91);
        org.joda.time.Seconds seconds94 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) instant75, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Minutes minutes95 = seconds94.toStandardMinutes();
        boolean boolean96 = minutes47.isGreaterThan(minutes95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant73 and mutableDateTime76", (instant73.compareTo(mutableDateTime76) == 0) == instant73.equals(mutableDateTime76));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.Days days0 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod1 = days0.toMutablePeriod();
        org.joda.time.Days days2 = org.joda.time.Days.SIX;
        org.joda.time.MutablePeriod mutablePeriod3 = days2.toMutablePeriod();
        mutablePeriod3.setSeconds((int) (byte) 0);
        org.joda.time.ReadableInterval readableInterval6 = null;
        mutablePeriod3.add(readableInterval6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.eras();
        int int9 = mutablePeriod3.get(durationFieldType8);
        boolean boolean10 = mutablePeriod1.isSupported(durationFieldType8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType8.getField(chronology11);
        java.lang.String str13 = durationField12.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis((int) '4');
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology22.years();
        long long27 = durationField24.add(2L, 100);
        long long28 = durationField24.getUnitMillis();
        int int29 = durationField12.compareTo(durationField24);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((-1L), dateTimeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusMillis((int) '4');
        org.joda.time.Chronology chronology38 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.centuryOfEra();
        org.joda.time.DurationField durationField40 = chronology38.weekyears();
        int int41 = durationField12.compareTo(durationField40);
        long long44 = durationField40.subtract(3148188L, 1036800L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField24", Math.signum(durationField12.compareTo(durationField24)) == -Math.signum(durationField24.compareTo(durationField12)));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (byte) 10);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusHours(100);
        int int5 = period4.getMillis();
        org.joda.time.Period period7 = period4.plusDays((int) 'a');
        org.joda.time.Period period8 = period4.negated();
        org.joda.time.Duration duration9 = period8.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone12.isLocalDateTimeGap(localDateTime14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        java.lang.String str20 = dateTime16.toString("52");
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, (long) (short) -1, periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withDaysRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime16, periodType25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMillis((int) '4');
        org.joda.time.Chronology chronology35 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period39 = mutableInterval37.toPeriod(periodType38);
        int[] intArray42 = chronology35.get((org.joda.time.ReadablePeriod) period39, (long) (byte) 0, (long) 12);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = chronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology35.dayOfYear();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.TimeOfDay timeOfDay47 = dateTime46.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone50.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(0);
        int int57 = dateTime56.getDayOfWeek();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        int int59 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((-1L), dateTimeZone62);
        java.util.GregorianCalendar gregorianCalendar64 = dateTime63.toGregorianCalendar();
        org.joda.time.DateTime dateTime66 = dateTime63.withWeekyear(0);
        int int67 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime63);
        int int68 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Seconds seconds69 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Seconds seconds71 = seconds69.plus(0);
        int int72 = seconds69.getSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime58", (dateTime46.compareTo(dateTime58) == 0) == dateTime46.equals(dateTime58));
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        boolean boolean14 = localDateTime12.isSupported(durationFieldType13);
        boolean boolean15 = localDateTime10.isSupported(durationFieldType13);
        boolean boolean16 = localDateTime9.isSupported(durationFieldType13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withDayOfYear(13);
        int int19 = localDateTime18.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 13 + "'", int19 == 13);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate6.withPeriodAdded(readablePeriod13, 100);
        int int16 = localDate6.getDayOfWeek();
        int int17 = localDate6.getDayOfYear();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 317 + "'", int17 == 317);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(74, 625, 35568524, 35582437, 0, 35512, 999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35582437 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime16.setWeekyear(3);
        java.lang.Object obj19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(obj19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeField dateTimeField24 = null;
        mutableDateTime16.setRounding(dateTimeField24);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime27.setWeekyear(3);
        java.lang.Object obj30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone37);
        mutableDateTime16.setZone(dateTimeZone37);
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.lang.String str42 = dateTimeZone37.getShortName((long) 3, locale41);
        long long44 = dateTimeZone11.getMillisKeepLocal(dateTimeZone37, 1L);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime45.setHourOfDay(35452);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35452 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.MIDNIGHT;
        int int8 = localTime6.compareTo((org.joda.time.ReadablePartial) localTime7);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.DateTime dateTime16 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology17 = dateTime10.getChronology();
        java.lang.String str18 = chronology17.toString();
        java.lang.String str19 = chronology17.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 249, chronology17);
        mutableDateTime1.setChronology(chronology17);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology17.add(readablePeriod22, (long) 35489, 86399999);
        // The following exception was thrown during execution in test generation
        try {
            long long31 = chronology17.getDateTimeMillis(1121538843789000L, 5, 1969, 35489, 35486);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str18, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str19, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35489L + "'", long25 == 35489L);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfWeek();
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime7.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readablePeriod13);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime16.setWeekyear(3);
        java.lang.Object obj19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(obj19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeField dateTimeField24 = null;
        mutableDateTime16.setRounding(dateTimeField24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime16.add(readableDuration26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime16.era();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        mutableDateTime16.setZone(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime14.toDateTime(dateTimeZone29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime33.withYearOfCentury(1987);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1987 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 593 + "'", int10 == 593);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy(10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        int int16 = dateTime14.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime14.withDurationAdded(0L, (int) (short) 0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        int int23 = localTime21.compareTo((org.joda.time.ReadablePartial) localTime22);
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.withPeriodAdded(readablePeriod28, (int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localTime22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology32 = dateTime25.getChronology();
        java.lang.String str33 = chronology32.toString();
        java.lang.Object obj34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(obj34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime35.getZone();
        long long44 = dateTimeZone41.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.Chronology chronology46 = chronology32.withZone(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime48.setWeekyear(3);
        java.lang.Object obj51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(obj51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime57 = dateTime52.withPeriodAdded(readablePeriod55, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime52.getZone();
        mutableDateTime48.setZoneRetainFields(dateTimeZone58);
        java.lang.String str61 = dateTimeZone58.getNameKey(1646041808949L);
        boolean boolean62 = dateTimeZone58.isFixed();
        org.joda.time.Chronology chronology63 = chronology46.withZone(dateTimeZone58);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.now(chronology63);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.centuries();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField68.getType();
        int int70 = dateTime14.get(dateTimeField68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime74 = org.joda.time.LocalTime.MIDNIGHT;
        int int75 = localTime73.compareTo((org.joda.time.ReadablePartial) localTime74);
        java.lang.Object obj76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(obj76);
        org.joda.time.DateTime dateTime79 = dateTime77.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.DateTime dateTime82 = dateTime77.withPeriodAdded(readablePeriod80, (int) (byte) 10);
        org.joda.time.DateTime dateTime83 = localTime74.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Chronology chronology84 = dateTime77.getChronology();
        boolean boolean85 = dateTimeFieldType71.isSupported(chronology84);
        java.lang.String str86 = dateTimeFieldType71.getName();
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType71.getRangeDurationType();
        org.joda.time.DateTime dateTime89 = dateTime14.withFieldAdded(durationFieldType87, 35583);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str33, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 11L + "'", long44 == 11L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "minuteOfDay" + "'", str86, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(11);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime15.setWeekyear(3);
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeField dateTimeField23 = null;
        mutableDateTime15.setRounding(dateTimeField23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime26.setWeekyear(3);
        java.lang.Object obj29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime30.withPeriodAdded(readablePeriod33, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime30.getZone();
        mutableDateTime26.setZoneRetainFields(dateTimeZone36);
        mutableDateTime15.setZone(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate12.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.LocalDate localDate41 = localDate12.minusDays((int) (byte) 100);
        org.joda.time.LocalDate.Property property42 = localDate12.dayOfWeek();
        int int43 = localDate12.getWeekyear();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1996) + "'", int43 == (-1996));
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        int int11 = localDateTime9.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear(70);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime18.setWeekyear(3);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property26 = dateTime24.dayOfWeek();
        int int27 = dateTime24.getMinuteOfDay();
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readablePeriod30);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime31.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime35.setWeekyear(3);
        java.lang.Object obj38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime44 = dateTime39.withPeriodAdded(readablePeriod42, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime39.getZone();
        mutableDateTime35.setZoneRetainFields(dateTimeZone45);
        java.util.TimeZone timeZone47 = dateTimeZone45.toTimeZone();
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone47, locale48);
        java.lang.String str50 = locale48.toLanguageTag();
        int int51 = property33.getMaximumShortTextLength(locale48);
        java.lang.String str52 = dateTimeField15.getAsShortText((long) 19051, locale48);
        java.lang.String str53 = locale48.getLanguage();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 593 + "'", int27 == 593);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644573193096,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=13,MILLISECOND=96,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh-TW" + "'", str50, "zh-TW");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh" + "'", str53, "zh");
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(1644573600000L, dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime9.setWeekyear(3);
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeField dateTimeField17 = null;
        mutableDateTime9.setRounding(dateTimeField17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime20.setWeekyear(3);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone30);
        mutableDateTime9.setZone(dateTimeZone30);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = dateTimeZone30.getShortName((long) 3, locale34);
        java.lang.String str36 = locale34.getDisplayName();
        java.lang.String str37 = dateTimeZone5.getShortName((-124334351999990L), locale34);
        java.util.Locale.Builder builder38 = builder1.setLocale(locale34);
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale.Builder builder41 = builder38.setLanguage("");
        java.util.Locale.Builder builder42 = builder38.clearExtensions();
        java.util.Locale.Builder builder43 = builder38.clearExtensions();
        java.util.Locale.Builder builder45 = builder43.setLanguageTag("weeks");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder48 = builder43.setUnicodeLocaleKeyword("2022-02-11T09:51:27.770Z", "2022-02-11T09:51:36.232");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:51:27.770Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japanisch (Japan)" + "'", str36, "Japanisch (Japan)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.232" + "'", str37, "+00:00:00.232");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone16);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, (long) 35408);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime21.addWeeks(19);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        int int27 = dateTimeFormatter26.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.Chronology chronology29 = dateTimeFormatter26.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter26.withZoneUTC();
        boolean boolean31 = dateTimeFormatter30.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = mutableDateTime21.toString(dateTimeFormatter30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35408L + "'", long19 == 35408L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        java.io.IOException iOException1 = new java.io.IOException("hi!");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.lang.String str4 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.io.IOException: java.io.IOException: hi!" + "'", str4, "java.io.IOException: java.io.IOException: hi!");
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        long long3 = dateTimeZone0.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime5.setWeekyear(3);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.withPeriodAdded(readablePeriod12, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime9.getZone();
        mutableDateTime5.setZoneRetainFields(dateTimeZone15);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (long) 35408);
        java.lang.String str20 = dateTimeZone0.getNameKey((long) 22);
        java.lang.String str22 = dateTimeZone0.getNameKey(1646041850727L);
        java.lang.String str24 = dateTimeZone0.getShortName(4206190450L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35408L + "'", long18 == 35408L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime5 = dateTime2.withField(dateTimeFieldType3, (int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded(readableDuration6, (int) (byte) 10);
        int int9 = dateTime2.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime2.withWeekOfWeekyear((-954));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -954 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.property(dateTimeFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime1.add(readablePeriod8, 11);
        mutableDateTime1.setMillis((long) 50);
        java.util.Date date18 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean21 = localDate19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDate localDate23 = localDate19.withEra(0);
        org.joda.time.LocalDate.Property property24 = localDate23.year();
        org.joda.time.LocalDate localDate25 = property24.withMaximumValue();
        org.joda.time.LocalDate localDate27 = property24.setCopy(1);
        org.joda.time.LocalDate localDate28 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField29 = property24.getField();
        int int30 = mutableDateTime1.get(dateTimeField29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "", "");
        java.lang.String str35 = locale34.toLanguageTag();
        java.lang.String str36 = locale34.getDisplayName();
        int int37 = dateTimeField29.getMaximumTextLength(locale34);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale34);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = calendar38.getActualMinimum(27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644573193285,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=13,MILLISECOND=285,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) '4', dateTimeZone7);
        int int11 = dateTimeZone7.getOffsetFromLocal((long) 32769);
        org.joda.time.DateTime dateTime12 = dateTime3.withZone(dateTimeZone7);
        int int14 = dateTimeZone7.getOffset((long) 22);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        mutableDateTime15.setMillis((long) 31939765);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("DEU");
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder1.setScript("java.io.IOException: java.io.IOException: hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: java.io.IOException: java.io.IOException: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int1 = localTime0.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime.Property property3 = localTime0.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime5 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property3.addWrapFieldToCopy(97);
        org.joda.time.LocalTime localTime8 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property3.roundHalfEvenCopy();
        java.util.Date date11 = new java.util.Date((long) 'a');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromDateFields(date11);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localTime9.compareTo((org.joda.time.ReadablePartial) localDateTime12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("13");
        int int2 = localDateTime1.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int6 = date5.getYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) (short) 10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy(1);
        java.util.Date date18 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean21 = localDate19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDate localDate23 = localDate19.withEra(0);
        org.joda.time.LocalDate.Property property24 = localDate23.year();
        org.joda.time.LocalDate localDate25 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate27 = property24.setCopy(1997);
        java.util.Date date33 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.fromDateFields(date33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean36 = localDate34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDate localDate38 = localDate34.withEra(0);
        org.joda.time.LocalDate localDate40 = localDate34.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property41 = localDate34.yearOfCentury();
        org.joda.time.LocalDate localDate42 = property41.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate44 = localDate42.withEra(1);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = durationFieldType45.isSupported(chronology46);
        java.lang.String str48 = durationFieldType45.toString();
        boolean boolean49 = localDate44.isSupported(durationFieldType45);
        int int50 = localDate27.compareTo((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone52);
        long long55 = dateTimeZone52.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime57.setWeekyear(3);
        java.lang.Object obj60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(obj60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime66 = dateTime61.withPeriodAdded(readablePeriod64, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime61.getZone();
        mutableDateTime57.setZoneRetainFields(dateTimeZone67);
        long long70 = dateTimeZone52.getMillisKeepLocal(dateTimeZone67, (long) 35408);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 4, dateTimeZone52);
        long long73 = dateTimeZone52.convertUTCToLocal(879462060000L);
        org.joda.time.Interval interval74 = localDate44.toInterval(dateTimeZone52);
        java.util.Date date80 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate81 = org.joda.time.LocalDate.fromDateFields(date80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean83 = localDate81.isSupported(dateTimeFieldType82);
        org.joda.time.LocalDate localDate85 = localDate81.withEra(0);
        org.joda.time.LocalDate localDate87 = localDate81.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property88 = localDate81.yearOfCentury();
        org.joda.time.LocalDate localDate89 = property88.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property88.getFieldType();
        int int91 = localDate44.get(dateTimeFieldType90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime93 = localDateTime12.withField(dateTimeFieldType90, 592);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 592 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eras" + "'", str48, "eras");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 35408L + "'", long70 == 35408L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 879462060000L + "'", long73 == 879462060000L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 98 + "'", int91 == 98);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property11.setCopy(1);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.withFields(readablePartial15);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plus(readableDuration7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withPeriodAdded(readablePeriod9, 613);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate((-292275055), 82860000, 35581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275055 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        org.joda.time.DateMidnight dateMidnight23 = localDate6.toDateMidnight(dateTimeZone22);
        java.util.Date date29 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean32 = localDate30.isSupported(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = localDate30.withEra(0);
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths(11);
        org.joda.time.LocalDate localDate38 = localDate34.withWeekyear(10);
        org.joda.time.LocalDate.Property property39 = localDate34.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        int int41 = localDate6.indexOf(dateTimeFieldType40);
        java.util.Date date42 = localDate6.toDate();
        org.joda.time.LocalDate localDate44 = localDate6.plusMonths(35440);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate46 = localDate44.withYearOfCentury(450);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 450 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Nov 13 00:00:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        int int18 = dateTime7.getMillisOfSecond();
        org.joda.time.DateTime dateTime20 = dateTime7.plusDays(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 689 + "'", int18 == 689);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2022-02-28T09:52:20.256Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-28T09:52:20.256Z\" is malformed at \"T09:52:20.256Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronolgy();
        int int7 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.parse("2022-02-28T09:51:17.096Z", dateTimeFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.Interval interval14 = localDate10.toInterval(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        long long18 = dateTimeZone15.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime20.setWeekyear(3);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone30);
        long long33 = dateTimeZone15.getMillisKeepLocal(dateTimeZone30, (long) 35408);
        java.lang.String str35 = dateTimeZone30.getShortName((long) (byte) 0);
        org.joda.time.DateTime dateTime36 = localDate10.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readablePeriod37);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35408L + "'", long33 == 35408L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        java.util.Date date6 = new java.util.Date((int) '4', (int) (short) 0, (int) 'a', (int) (short) 1, (int) 'a', 100);
        java.lang.String str7 = date6.toGMTString();
        java.lang.String str8 = date6.toGMTString();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime10.setWeekyear(3);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.withPeriodAdded(readablePeriod17, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime14.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        java.util.TimeZone timeZone22 = dateTimeZone20.toTimeZone();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone22, locale23);
        int int26 = calendar24.getLeastMaximum(15);
        java.util.Date date32 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.fromDateFields(date32);
        date32.setYear((int) (short) 0);
        int int36 = date32.getHours();
        int int37 = date32.getHours();
        calendar24.setTime(date32);
        calendar24.add(0, (-27409550));
        java.lang.String str42 = calendar24.getCalendarType();
        java.util.Date date48 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.fromDateFields(date48);
        date48.setYear((int) (short) 0);
        int int52 = date48.getHours();
        int int53 = date48.getHours();
        java.time.Instant instant54 = date48.toInstant();
        int int55 = date48.getTimezoneOffset();
        calendar24.setTime(date48);
        boolean boolean57 = date6.before(date48);
        int int58 = date6.getYear();
        org.junit.Assert.assertEquals(date6.toString(), "Sun Apr 06 02:38:40 UTC 1952");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6 Apr 1952 02:38:40 GMT" + "'", str7, "6 Apr 1952 02:38:40 GMT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6 Apr 1952 02:38:40 GMT" + "'", str8, "6 Apr 1952 02:38:40 GMT");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-2181603540000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1900,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=317,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50400000 + "'", int26 == 50400000);
        org.junit.Assert.assertEquals(date32.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "gregory" + "'", str42, "gregory");
        org.junit.Assert.assertEquals(date48.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 23 + "'", int53 == 23);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        java.util.Date date6 = new java.util.Date((int) '4', (int) (short) 0, (int) 'a', (int) (short) 1, (int) 'a', 100);
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (byte) 10);
        boolean boolean11 = dateTime10.isEqualNow();
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime13.getZone();
        long long22 = dateTimeZone19.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(dateTimeZone19);
        org.joda.time.LocalTime localTime24 = dateTime10.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 365);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime29.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime29.add(readableDuration32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime29.property(dateTimeFieldType34);
        org.joda.time.LocalTime.Property property36 = localTime27.property(dateTimeFieldType34);
        org.joda.time.LocalTime localTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalTime localTime39 = property36.addWrapFieldToCopy(32770);
        org.joda.time.LocalTime localTime40 = property36.roundFloorCopy();
        org.joda.time.LocalTime localTime41 = property36.withMinimumValue();
        boolean boolean42 = date6.equals((java.lang.Object) property36);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Apr 06 02:38:40 UTC 1952");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 11L + "'", long22 == 11L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime5 = property4.getLocalTime();
        java.lang.Object obj6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.withPeriodAdded(readablePeriod10, (int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime7.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getScript();
        java.lang.String str21 = dateTimeZone16.getName(1646041809840L, locale18);
        java.util.Calendar calendar22 = dateTime7.toCalendar(locale18);
        int int23 = property4.getMaximumShortTextLength(locale18);
        java.lang.String str24 = locale18.toLanguageTag();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.232" + "'", str21, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644573193999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=13,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "de-DE" + "'", str24, "de-DE");
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        date5.setYear((int) (short) 0);
        date5.setDate(0);
        long long11 = date5.getTime();
        org.junit.Assert.assertEquals(date5.toString(), "Wed Oct 31 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-2182726740000L) + "'", long11 == (-2182726740000L));
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        java.util.Locale locale16 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMonths(0);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.minusMinutes((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = localDateTime24.toString("10", locale31);
        java.lang.String str33 = locale16.getDisplayName(locale31);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar34.clear();
        calendar34.clear();
        int int37 = calendar34.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = calendar34.getGreatestMinimum(2010);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2010");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale16.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10" + "'", str32, "10");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "09:50:02.357" + "'", str33, "09:50:02.357");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de" + "'", str1, "de");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de_DE" + "'", str2, "de_DE");
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusMonths(2022);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minus(readablePeriod8);
        int int10 = localDateTime9.size();
        java.util.Date date17 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int18 = date17.getYear();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromDateFields(date17);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMillis((-27409550));
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusSeconds(11);
        int int26 = localDateTime25.getEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.hourOfDay();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = property27.getAsShortText(locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = localDateTime9.toString("2022-02-28T09:51:22.423Z", locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("gregory");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        int int9 = localTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime.Property property11 = localTime8.property(dateTimeFieldType10);
        org.joda.time.LocalTime localTime12 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime15 = property13.roundHalfCeilingCopy();
        boolean boolean16 = languageRange1.equals((java.lang.Object) localTime15);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withYearOfEra(19);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(50);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withYearOfEra(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withDayOfYear(823);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 823 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear(807);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 807 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        java.io.IOException iOException1 = new java.io.IOException("09:50:14.993");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        boolean boolean4 = dateTime3.isEqualNow();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime3.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime7.setWeekyear(3);
        java.lang.Object obj10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime11.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime7.add(readableDuration19, (int) (byte) 10);
        org.joda.time.DateTime dateTime22 = mutableDateTime7.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime24 = property23.roundFloorCopy();
        boolean boolean25 = gregorianCalendar5.before((java.lang.Object) dateTime24);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readablePeriod30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.plus(readableDuration32);
        java.util.Date date39 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.fromDateFields(date39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean42 = localDate40.isSupported(dateTimeFieldType41);
        boolean boolean43 = dateTime33.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime45 = dateTime33.plusHours(11);
        org.joda.time.DateTime.Property property46 = dateTime45.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        int int48 = dateTime45.get(dateTimeFieldType47);
        org.joda.time.DateTime.Property property49 = dateTime45.weekOfWeekyear();
        org.joda.time.DateTime dateTime51 = property49.addToCopy((long) 35408);
        java.lang.Object obj52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(obj52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime58 = dateTime53.withPeriodAdded(readablePeriod56, (int) (byte) 10);
        org.joda.time.DateTime dateTime60 = dateTime53.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str66 = locale64.getScript();
        java.lang.String str67 = dateTimeZone62.getName(1646041809840L, locale64);
        java.util.Calendar calendar68 = dateTime53.toCalendar(locale64);
        java.util.Calendar calendar69 = dateTime51.toCalendar(locale64);
        java.util.TimeZone timeZone70 = calendar69.getTimeZone();
        gregorianCalendar5.setTimeZone(timeZone70);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = gregorianCalendar5.isSet(35582163);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35582163");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.232" + "'", str67, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1644573194294,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=14,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-40433224005706,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=688,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=261,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=53,SECOND=14,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        int int4 = dateTime3.getHourOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.withCenturyOfEra(17);
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(7);
        int int10 = dateTime9.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35587467 + "'", int10 == 35587467);
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withEra(1);
        org.joda.time.LocalDate localDate18 = localDate14.minusYears(12);
        org.joda.time.LocalDate.Property property19 = localDate18.weekyear();
        org.joda.time.LocalDate localDate21 = property19.setCopy(17);
        org.joda.time.LocalDate localDate22 = property19.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.MIDNIGHT;
        int int5 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime4);
        java.lang.Object obj6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.withPeriodAdded(readablePeriod10, (int) (byte) 10);
        org.joda.time.DateTime dateTime13 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int17 = dateTime15.get(dateTimeFieldType16);
        boolean boolean18 = dateTime1.isSupported(dateTimeFieldType16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        int int23 = localTime21.compareTo((org.joda.time.ReadablePartial) localTime22);
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.withPeriodAdded(readablePeriod28, (int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localTime22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology32 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfDay();
        org.joda.time.DateTime dateTime34 = dateTime19.toDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime1.toMutableDateTime(chronology32);
        boolean boolean39 = mutableDateTime37.isEqual((-50591052574361L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusMillis((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withDurationAdded(readableDuration9, (int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime0.plusYears(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.centuryOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = property15.withMaximumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.withField(dateTimeFieldType3, 15);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime8 = dateTime5.withFieldAdded(durationFieldType6, 35408);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra(22);
        org.joda.time.DateTime dateTime12 = dateTime8.plusHours(5);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime14.setWeekyear(3);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField22 = null;
        mutableDateTime14.setRounding(dateTimeField22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime14.add(readableDuration24);
        mutableDateTime14.setSecondOfMinute((int) ' ');
        java.lang.Object obj28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.plus(readablePeriod32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.plus(readableDuration34);
        java.util.Date date41 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.fromDateFields(date41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean44 = localDate42.isSupported(dateTimeFieldType43);
        boolean boolean45 = dateTime35.isSupported(dateTimeFieldType43);
        int int46 = dateTime35.getEra();
        org.joda.time.DateTime dateTime48 = dateTime35.withMillisOfDay(1997);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) dateTime48);
        mutableDateTime14.addMinutes(35434);
        boolean boolean52 = dateTime8.isAfter((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime14.setSecondOfDay(2022);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setDateTime(35594, 0, 116, (-1995), 343, 710, 903);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1995 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        java.lang.String str13 = chronology12.toString();
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime15.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.Chronology chronology26 = chronology12.withZone(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime28.setWeekyear(3);
        java.lang.Object obj31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime32.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime32.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone38);
        java.lang.String str41 = dateTimeZone38.getNameKey(1646041808949L);
        boolean boolean42 = dateTimeZone38.isFixed();
        org.joda.time.Chronology chronology43 = chronology26.withZone(dateTimeZone38);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.halfdayOfDay();
        org.joda.time.DurationField durationField46 = chronology43.weeks();
        org.joda.time.DurationField durationField47 = chronology43.millis();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.dayOfYear();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str13, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 11L + "'", long24 == 11L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        org.joda.time.DateMidnight dateMidnight23 = localDate6.toDateMidnight(dateTimeZone22);
        java.util.Date date29 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean32 = localDate30.isSupported(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = localDate30.withEra(0);
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths(11);
        org.joda.time.LocalDate localDate38 = localDate34.withWeekyear(10);
        org.joda.time.LocalDate.Property property39 = localDate34.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        int int41 = localDate6.indexOf(dateTimeFieldType40);
        java.util.Date date42 = localDate6.toDate();
        java.util.Date date49 = new java.util.Date(23, 9, 1, (int) (short) -1, (int) (short) -1, (int) '#');
        int int50 = date42.compareTo(date49);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Nov 13 00:00:00 UTC 1997");
        org.junit.Assert.assertEquals(date49.toString(), "Sun Sep 30 22:59:35 UTC 1923");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime1.getZone();
        long long10 = dateTimeZone7.convertLocalToUTC((long) 11, true);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays(50400000);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withCenturyOfEra(317);
        int int16 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.plusWeeks(35423);
        java.lang.String str19 = localDateTime18.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 11L + "'", long10 == 11L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2701-01-04T09:53:14.737" + "'", str19, "2701-01-04T09:53:14.737");
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime2.setWeekyear(3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfMonth();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusYears((int) (short) 1);
        long long12 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime8.toDateTime();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        int int17 = localTime15.compareTo((org.joda.time.ReadablePartial) localTime16);
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.withPeriodAdded(readablePeriod22, (int) (byte) 10);
        org.joda.time.DateTime dateTime25 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology26 = dateTime19.getChronology();
        java.lang.String str27 = chronology26.toString();
        java.lang.Object obj28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime29.getZone();
        long long38 = dateTimeZone35.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.Chronology chronology40 = chronology26.withZone(dateTimeZone35);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((java.lang.Object) dateTime8, dateTimeZone35);
        int int43 = dateTimeZone35.getOffsetFromLocal((long) 35412);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 53, dateTimeZone35);
        org.joda.time.DateTime dateTime46 = dateTime44.minus(1646041858646L);
        org.joda.time.DateTime dateTime48 = dateTime44.plusHours(360000000);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1646041994763L + "'", long12 == 1646041994763L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str27, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 11L + "'", long38 == 11L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime19.setWeekyear(3);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        mutableDateTime19.setMillis((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeField dateTimeField27 = null;
        mutableDateTime19.setRounding(dateTimeField27);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime30.setWeekyear(3);
        java.lang.Object obj33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(obj33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime34.withPeriodAdded(readablePeriod37, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime34.getZone();
        mutableDateTime30.setZoneRetainFields(dateTimeZone40);
        mutableDateTime19.setZone(dateTimeZone40);
        mutableDateTime19.addWeeks((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime19.millisOfDay();
        long long46 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime19.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime50 = property47.set("120");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-105353L) + "'", long46 == (-105353L));
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plus(readableDuration7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withPeriodAdded(readablePeriod9, 613);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime0.minusDays(32769);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, 35447363);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime13.getFieldType(35480843);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35480843");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        int int10 = mutableDateTime1.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        mutableDateTime1.addMonths(0);
        int int15 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.weekyear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime1.add(readablePeriod17);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 925 + "'", int15 == 925);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isParser();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.MIDNIGHT;
        int int10 = localTime8.compareTo((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime.Property property11 = localTime8.minuteOfHour();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localTime8.getFieldTypes();
        org.joda.time.Chronology chronology13 = localTime8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        int int19 = localTime17.compareTo((org.joda.time.ReadablePartial) localTime18);
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        org.joda.time.DateTime dateTime27 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology28 = dateTime21.getChronology();
        java.lang.String str29 = chronology28.toString();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.weekOfWeekyear();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter4.withChronology(chronology28);
        java.io.Writer writer36 = null;
        java.util.Date date42 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.fromDateFields(date42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean45 = localDate43.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDate localDate47 = localDate43.withEra(0);
        org.joda.time.LocalDate localDate49 = localDate43.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate51 = localDate43.plus(readablePeriod50);
        java.lang.Object obj52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(obj52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime58 = dateTime53.withPeriodAdded(readablePeriod56, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime53.getZone();
        org.joda.time.DateMidnight dateMidnight60 = localDate43.toDateMidnight(dateTimeZone59);
        int int61 = localDate43.getDayOfMonth();
        org.joda.time.LocalDate localDate63 = localDate43.minusWeeks((int) (byte) 1);
        int int64 = localDate43.getYear();
        org.joda.time.ReadablePartial readablePartial65 = null;
        org.joda.time.LocalDate localDate66 = localDate43.withFields(readablePartial65);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter35.printTo(writer36, (org.joda.time.ReadablePartial) localDate66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str29, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 13 + "'", int61 == 13);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1997 + "'", int64 == 1997);
        org.junit.Assert.assertNotNull(localDate66);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        java.util.Locale locale3 = new java.util.Locale("09:50:02.357", "", "09:50:02.357");
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.lang.String str6 = locale4.getCountry();
        java.lang.String str7 = locale3.getDisplayVariant(locale4);
        java.lang.String str8 = locale3.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale3.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 09:50:02.357");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "09:50:02.357__09:50:02.357");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CN" + "'", str6, "CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "09:50:02.357" + "'", str7, "09:50:02.357");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(obj0);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, (int) (short) 0);
        java.lang.String str9 = dateTimeZone7.getNameKey((-768686946787157181L));
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(62, (-27409550), (int) (short) 10, 0, 42, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27409550 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (-1), dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfWeek(35459607);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35459607 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.hourOfDay();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        int int21 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime20);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.DateTime dateTime29 = localTime20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology30 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfDay();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, chronology30);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime34.setWeekyear(3);
        java.lang.Object obj37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        mutableDateTime34.setMillis((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeField dateTimeField42 = null;
        mutableDateTime34.setRounding(dateTimeField42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime34.add(readableDuration44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime34.era();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone47);
        mutableDateTime34.setZone(dateTimeZone47);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.MIDNIGHT;
        int int53 = localTime51.compareTo((org.joda.time.ReadablePartial) localTime52);
        java.lang.Object obj54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(obj54);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.DateTime dateTime60 = dateTime55.withPeriodAdded(readablePeriod58, (int) (byte) 10);
        org.joda.time.DateTime dateTime61 = localTime52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology62 = dateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.secondOfDay();
        org.joda.time.DurationField durationField64 = chronology62.millis();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(chronology62);
        org.joda.time.DurationField durationField66 = chronology62.weeks();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = dateTimeField67.getType();
        int int69 = mutableDateTime34.get(dateTimeFieldType68);
        int int70 = mutableDateTime1.get(dateTimeFieldType68);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType68.getRangeDurationType();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(durationFieldType71);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("09:50:04.464");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"09:50:04.464\" is malformed at \":50:04.464\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.MIDNIGHT;
        int int11 = localTime9.compareTo((org.joda.time.ReadablePartial) localTime10);
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        org.joda.time.DateTime dateTime19 = localTime10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology20 = dateTime13.getChronology();
        boolean boolean21 = dateTimeFieldType7.isSupported(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean13 = localDate6.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate6.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) localDate6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.era();
        int int11 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMonths(14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.plusMillis((int) (short) 1);
        int int18 = localDateTime9.getWeekyear();
        boolean boolean19 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime7.withEra(24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        int int13 = property11.getMinimumValueOverall();
        org.joda.time.LocalDate localDate14 = property11.withMinimumValue();
        org.joda.time.LocalDate localDate15 = property11.getLocalDate();
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        int int19 = dateTime18.getMillisOfSecond();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 526 + "'", int19 == 526);
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.lang.String> strCollection3 = null;
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList9);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "10", "java.io.IOException: hi!", "10", "-1997-11-13T09:50:03.940Z", "-1997-11-13T09:50:03.940Z" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList19, filteringMode21);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection3, filteringMode21);
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet26);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode21.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "it-IT" + "'", str25, "it-IT");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 1646041840440L);
        boolean boolean3 = dateTime1.equals((java.lang.Object) 97L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime16.setWeekyear(3);
        java.lang.Object obj19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(obj19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeField dateTimeField24 = null;
        mutableDateTime16.setRounding(dateTimeField24);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime27.setWeekyear(3);
        java.lang.Object obj30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone37);
        mutableDateTime16.setZone(dateTimeZone37);
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.lang.String str42 = dateTimeZone37.getShortName((long) 3, locale41);
        long long44 = dateTimeZone11.getMillisKeepLocal(dateTimeZone37, 1L);
        int int46 = dateTimeZone11.getOffsetFromLocal(1646041808949L);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField48 = mutableDateTime47.getRoundingField();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(dateTimeField48);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = dateTime7.plusHours(11);
        org.joda.time.DateTime.Property property20 = dateTime19.centuryOfEra();
        java.util.Date date26 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromDateFields(date26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean29 = localDate27.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDate localDate31 = localDate27.withEra(0);
        org.joda.time.LocalDate.Property property32 = localDate31.year();
        org.joda.time.LocalDate localDate33 = property32.withMaximumValue();
        int int34 = property32.getMinimumValueOverall();
        org.joda.time.LocalDate localDate35 = property32.withMinimumValue();
        int int36 = property20.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTime dateTime38 = property20.setCopy((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = property20.getDateTime();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getDisplayScript();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        java.lang.String str48 = locale43.getDisplayCountry(locale45);
        java.lang.String str49 = locale43.getDisplayName();
        java.lang.String str50 = locale41.getDisplayName(locale43);
        java.util.Locale locale51 = locale43.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = property20.setCopy("2019-02-01T09:53:08.571Z", locale43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2019-02-01T09:53:08.571Z\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-292275054) + "'", int34 == (-292275054));
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "German" + "'", str50, "German");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        int int5 = property4.getMinimumValueOverall();
        org.joda.time.LocalTime localTime7 = property4.addWrapFieldToCopy(35419);
        org.joda.time.LocalTime localTime9 = property4.addCopy(35409);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = dateTime7.plusHours(11);
        org.joda.time.DateTime.Property property20 = dateTime7.yearOfEra();
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = property20.getAsShortText(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.lang.String str29 = locale24.getDisplayCountry(locale26);
        java.lang.String str30 = locale24.getDisplayName();
        java.lang.String str31 = locale24.getDisplayScript();
        java.lang.String str32 = locale21.getDisplayScript(locale24);
        java.lang.String str33 = locale21.toLanguageTag();
        java.util.Locale locale34 = locale21.stripExtensions();
        java.lang.String str35 = locale34.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "10" + "'", str22, "10");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japan" + "'", str23, "Japan");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ja-JP" + "'", str33, "ja-JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds(2);
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours((-27409550));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(3);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime13.getFieldType(35510187);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35510187");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.DateTimeField dateTimeField11 = null;
        mutableDateTime1.setRounding(dateTimeField11);
        mutableDateTime1.setMillis((long) 'x');
        org.joda.time.ReadableInstant readableInstant15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = mutableDateTime1.compareTo(readableInstant15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (short) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.DateTime.Property property9 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        java.util.Locale locale13 = new java.util.Locale("13.11.1900 23:01:00");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property9.setCopy("2022-02-28T09:51:20.913Z", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-28T09:51:20.913Z\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals(locale13.toString(), "13.11.1900 23:01:00");
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        java.util.Date date6 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate localDate11 = localDate7.withEra(0);
        org.joda.time.LocalDate localDate13 = localDate11.plusMonths(11);
        java.util.Date date14 = localDate13.toDate();
        org.joda.time.LocalDate.Property property15 = localDate13.centuryOfEra();
        org.joda.time.Chronology chronology16 = localDate13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(24341L, chronology16);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology16.getDateTimeMillis(0, 50400000, 526, (int) (byte) 1, 903, (-31964), 35488);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 903 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfCeiling();
        mutableDateTime18.addHours(35411);
        int int21 = mutableDateTime18.getMonthOfYear();
        mutableDateTime18.addMonths(0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfEra(35434);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = localDateTime2.toString("2022-02-28T09:52:29.980Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = localTime1.withSecondOfMinute((int) ' ');
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.getLocalTime();
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfSecond(17);
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(9);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) (byte) 10);
        boolean boolean15 = dateTime14.isEqualNow();
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.withPeriodAdded(readablePeriod20, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime17.getZone();
        long long26 = dateTimeZone23.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime27 = dateTime14.toDateTime(dateTimeZone23);
        org.joda.time.LocalTime localTime28 = dateTime14.toLocalTime();
        int int29 = localTime28.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str31 = dateTimeFieldType30.getName();
        boolean boolean32 = localTime28.isSupported(dateTimeFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property33 = localTime10.property(dateTimeFieldType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 11L + "'", long26 == 11L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "yearOfCentury" + "'", str31, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        boolean boolean7 = dateTimeFormatter5.isParser();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.MIDNIGHT;
        int int11 = localTime9.compareTo((org.joda.time.ReadablePartial) localTime10);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localTime9.getFieldTypes();
        org.joda.time.Chronology chronology14 = localTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter5.withChronology(chronology14);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.MIDNIGHT;
        int int20 = localTime18.compareTo((org.joda.time.ReadablePartial) localTime19);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime22.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        org.joda.time.DateTime dateTime28 = localTime19.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology29 = dateTime22.getChronology();
        java.lang.String str30 = chronology29.toString();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.centuryOfEra();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(chronology29);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.weekOfWeekyear();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter5.withChronology(chronology29);
        org.joda.time.Chronology chronology37 = dateTimeFormatter36.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.parse("2022-02-11T00:00:00.016Z", dateTimeFormatter36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str30, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isParser();
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime8.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getScript();
        java.lang.String str22 = dateTimeZone17.getName(1646041809840L, locale19);
        java.util.Calendar calendar23 = dateTime8.toCalendar(locale19);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.lang.String str29 = locale24.getDisplayCountry(locale26);
        java.lang.String str30 = locale19.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter4.withLocale(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withDefaultYear(35467);
        java.lang.Appendable appendable34 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime36.setWeekyear(3);
        java.lang.Object obj39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(obj39);
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfMonth();
        org.joda.time.DateTime dateTime42 = property41.withMaximumValue();
        mutableDateTime36.setMillis((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime36.toMutableDateTime(dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter31.printTo(appendable34, (org.joda.time.ReadableInstant) mutableDateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.232" + "'", str22, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644573196119,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=16,MILLISECOND=119,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Germany" + "'", str30, "Germany");
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.LocalDate localDate14 = property11.withMaximumValue();
        int int15 = localDate14.getWeekOfWeekyear();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 46 + "'", int15 == 46);
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime5 = property4.getLocalTime();
        org.joda.time.LocalTime localTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property4.addWrapFieldToCopy(86399999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = property4.setCopy("2022-02-11T09:50:23.849Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:50:23.849Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime5 = dateTime2.withField(dateTimeFieldType3, (int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded(readableDuration6, (int) (byte) 10);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.MIDNIGHT;
        int int12 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime11);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.withPeriodAdded(readablePeriod17, (int) (byte) 10);
        org.joda.time.DateTime dateTime20 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property21 = dateTime20.weekOfWeekyear();
        org.joda.time.DateTime dateTime23 = property21.addWrapFieldToCopy(10);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        boolean boolean25 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime27 = dateTime8.minusDays(70);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMillis(46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime29.withMillisOfDay((-27409553));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27409553 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        int int3 = property2.get();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.MIDNIGHT;
        int int7 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime6);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.withPeriodAdded(readablePeriod12, (int) (byte) 10);
        org.joda.time.DateTime dateTime15 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property16 = dateTime15.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = property16.addWrapFieldToCopy(10);
        int int19 = property2.compareTo((org.joda.time.ReadableInstant) dateTime18);
        java.lang.String str20 = property2.getAsText();
        org.joda.time.DurationField durationField21 = property2.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "11" + "'", str20, "11");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguage("Japanese");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder1.setExtension('4', "2033-11-28T09:52:36.576Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        org.joda.time.LocalDate localDate16 = localDate6.withYear(23);
        org.joda.time.Chronology chronology17 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property18 = localDate6.dayOfYear();
        org.joda.time.LocalDate localDate20 = localDate6.plusMonths(35440);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDate20.get(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(0);
        int int6 = localDateTime5.getYearOfEra();
        int int7 = localDateTime5.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDayOfMonth(232);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 232 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime9.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime9.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.property(dateTimeFieldType14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.property(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = property16.addWrapFieldToCopy(45);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("13.11.1900 23:01:00");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = property16.setCopy("2022-02-28T09:52:50.216Z", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-28T09:52:50.216Z\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfWeek();
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime7.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readablePeriod13);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime14.millisOfDay();
        int int17 = property16.getMaximumValue();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 593 + "'", int10 == 593);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 86399999 + "'", int17 == 86399999);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime9.setWeekyear(3);
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeField dateTimeField17 = null;
        mutableDateTime9.setRounding(dateTimeField17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime20.setWeekyear(3);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone30);
        mutableDateTime9.setZone(dateTimeZone30);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = dateTimeZone30.getShortName((long) 3, locale34);
        long long37 = dateTimeZone30.nextTransition((long) 50);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = dateTimeZone30.getOffset(readableInstant39);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter7.withZone(dateTimeZone30);
        java.lang.Integer int43 = dateTimeFormatter42.getPivotYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 50L + "'", long37 == 50L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(int43);
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("KR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"KR\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate6.withPeriodAdded(readablePeriod13, 100);
        org.joda.time.LocalDate.Property property16 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property17 = localDate6.era();
        java.lang.String str18 = localDate6.toString();
        org.joda.time.LocalDate.Property property19 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate21 = localDate6.minusMonths(377);
        org.joda.time.LocalDate localDate23 = localDate6.minusMonths(61200000);
        org.joda.time.Chronology chronology24 = localDate6.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localDate6.getValue(35596);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35596");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1997-11-13" + "'", str18, "1997-11-13");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        boolean boolean4 = dateTime3.isEqualNow();
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        long long15 = dateTimeZone12.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(dateTimeZone12);
        org.joda.time.LocalTime localTime17 = dateTime3.toLocalTime();
        org.joda.time.DateTime dateTime19 = dateTime3.plus((long) (byte) 1);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        int int23 = localTime21.compareTo((org.joda.time.ReadablePartial) localTime22);
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.withPeriodAdded(readablePeriod28, (int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localTime22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(97);
        boolean boolean36 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property38 = dateTime3.property(dateTimeFieldType37);
        org.joda.time.DateTime.Property property39 = dateTime3.centuryOfEra();
        int int40 = dateTime3.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 11L + "'", long15 == 11L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime5 = dateTime2.withField(dateTimeFieldType3, (int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime5.toGregorianCalendar();
        java.time.Instant instant7 = gregorianCalendar6.toInstant();
        int int8 = gregorianCalendar6.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = gregorianCalendar6.getActualMinimum(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(11);
        java.util.Date date13 = localDate12.toDate();
        org.joda.time.LocalDate localDate15 = localDate12.minusWeeks((int) 'a');
        org.joda.time.LocalDate localDate17 = localDate12.withCenturyOfEra(35414);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime20.setWeekyear(3);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone30);
        java.util.TimeZone timeZone32 = dateTimeZone30.toTimeZone();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(10L, dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean36 = localDate34.isSupported(dateTimeFieldType35);
        boolean boolean37 = localDate17.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property38 = localDate17.year();
        java.lang.String str39 = localDate17.toString();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-3541496-10-13" + "'", str39, "-3541496-10-13");
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology15.weekyears();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology15.add(readablePeriod19, (-72083542597019000L), (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField23 = chronology15.yearOfEra();
        long long27 = chronology15.add((long) (short) -1, (-79758000L), (-870617750));
        java.util.Date date33 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.fromDateFields(date33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean36 = localDate34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDate localDate38 = localDate34.withEra(0);
        org.joda.time.LocalDate localDate40 = localDate38.plusMonths(11);
        java.util.Date date41 = localDate40.toDate();
        org.joda.time.LocalDate localDate43 = localDate40.minusWeeks((int) 'a');
        org.joda.time.LocalDate localDate45 = localDate40.minusWeeks(17);
        java.util.Date date46 = localDate40.toDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        int int50 = dateTimeFormatter49.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser52 = dateTimeFormatter51.getParser();
        java.lang.Integer int53 = dateTimeFormatter51.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter51.withDefaultYear(35478696);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime57.setWeekyear(3);
        java.lang.Object obj60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(obj60);
        org.joda.time.DateTime.Property property62 = dateTime61.dayOfMonth();
        org.joda.time.DateTime dateTime63 = property62.withMaximumValue();
        mutableDateTime57.setMillis((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime63.minusYears((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay67 = dateTime63.toYearMonthDay();
        org.joda.time.DateTime.Property property68 = dateTime63.dayOfMonth();
        org.joda.time.DateTime dateTime69 = property68.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime69.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter55.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = localDate40.toDateTimeAtStartOfDay(dateTimeZone70);
        org.joda.time.Chronology chronology73 = chronology15.withZone(dateTimeZone70);
        java.lang.String str75 = dateTimeZone70.getNameKey((long) 251);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-72083542597019000L) + "'", long22 == (-72083542597019000L));
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 69438730504499999L + "'", long27 == 69438730504499999L);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2000 + "'", int50 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNull(dateTimeParser52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.MIDNIGHT;
        int int5 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime4);
        java.lang.Object obj6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.withPeriodAdded(readablePeriod10, (int) (byte) 10);
        org.joda.time.DateTime dateTime13 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology14 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 35418, chronology14);
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DurationField durationField20 = chronology18.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology18.getDateTimeMillis(35452018, 1722, 35491, 48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1722 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(12);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.era();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDurationAdded(readableDuration7, 40);
        java.lang.Class<?> wildcardClass10 = localDateTime9.getClass();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        java.util.Locale locale0 = java.util.Locale.US;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime2.setWeekyear(3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfMonth();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeField dateTimeField10 = null;
        mutableDateTime2.setRounding(dateTimeField10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime2.add(readableDuration12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.era();
        java.lang.String str15 = property14.getName();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        int int18 = property14.getMaximumTextLength(locale17);
        java.lang.String str19 = locale17.toLanguageTag();
        java.lang.String str20 = locale17.getDisplayScript();
        boolean boolean21 = locale0.equals((java.lang.Object) locale17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "era" + "'", str15, "era");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-CN" + "'", str19, "zh-CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        calendar15.set(5, (-292275054), 0, 1, (int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime23.setWeekyear(3);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.withPeriodAdded(readablePeriod30, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime27.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone33.toTimeZone();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone35, locale36);
        calendar15.setTimeZone(timeZone35);
        long long39 = calendar15.getTimeInMillis();
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.getDefault(category42);
        java.util.Locale locale45 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(obj46);
        org.joda.time.LocalDateTime localDateTime48 = dateTime47.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withDurationAdded(readableDuration49, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.minusMonths(0);
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.minusHours(0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.minusMinutes((int) (byte) 10);
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = localDateTime53.toString("10", locale60);
        java.lang.String str62 = locale45.getDisplayName(locale60);
        java.lang.String str63 = locale43.getDisplayName(locale45);
        java.lang.Object obj64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(obj64);
        org.joda.time.DateTime dateTime67 = dateTime65.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.DateTime dateTime70 = dateTime65.withPeriodAdded(readablePeriod68, (int) (byte) 10);
        org.joda.time.DateTime dateTime72 = dateTime65.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale76 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        java.lang.String str78 = locale76.getScript();
        java.lang.String str79 = dateTimeZone74.getName(1646041809840L, locale76);
        java.util.Calendar calendar80 = dateTime65.toCalendar(locale76);
        java.util.Locale locale81 = java.util.Locale.US;
        java.lang.String str82 = locale76.getDisplayLanguage(locale81);
        java.lang.String str83 = locale45.getDisplayCountry(locale76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = calendar15.getDisplayName(35546, 4, locale76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-768686946787183213,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=24356251,MONTH=5,WEEK_OF_YEAR=27,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=181,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=40,SECOND=16,MILLISECOND=787,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644573196787,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=16,MILLISECOND=787,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-768686946787183213L) + "'", long39 == (-768686946787183213L));
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals(locale45.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "10" + "'", str61, "10");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "09:50:02.357" + "'", str62, "09:50:02.357");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English (United States)" + "'", str63, "English (United States)");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.232" + "'", str79, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1644573196787,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=16,MILLISECOND=787,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "German" + "'", str82, "German");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfHalfday();
        long long19 = dateTimeField17.roundCeiling((long) 32772);
        java.lang.String str20 = dateTimeField17.getName();
        int int22 = dateTimeField17.getMinimumValue(0L);
        int int24 = dateTimeField17.get((long) 3);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.LocalDateTime localDateTime29 = dateTime28.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDurationAdded(readableDuration30, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.minusMonths(0);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusHours(0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.era();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.lang.String str43 = locale42.getDisplayVariant();
        java.lang.String str44 = locale42.getCountry();
        java.lang.String str45 = localDateTime39.toString("0", locale42);
        // The following exception was thrown during execution in test generation
        try {
            long long46 = dateTimeField17.set(1644573181164L, "", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3600000L + "'", long19 == 3600000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfHalfday" + "'", str20, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CN" + "'", str44, "CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronolgy();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime8.setWeekyear(3);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeField dateTimeField16 = null;
        mutableDateTime8.setRounding(dateTimeField16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime19.setWeekyear(3);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime23.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone29);
        mutableDateTime8.setZone(dateTimeZone29);
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = dateTimeZone29.getShortName((long) 3, locale33);
        java.lang.String str36 = dateTimeZone29.getName(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter2.withZone(dateTimeZone29);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser40 = dateTimeFormatter2.getParser();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNull(dateTimeParser40);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfCeiling();
        mutableDateTime18.addHours(35411);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.secondOfDay();
        mutableDateTime18.addMinutes(275);
        int int24 = mutableDateTime18.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 935 + "'", int24 == 935);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusMillis((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(50);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 35414);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.MIDNIGHT;
        int int5 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime4);
        java.lang.Object obj6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.withPeriodAdded(readablePeriod10, (int) (byte) 10);
        org.joda.time.DateTime dateTime13 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology14 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.clockhourOfDay();
        long long20 = dateTimeField18.roundHalfCeiling(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField18.getType();
        org.joda.time.LocalTime.Property property22 = localTime1.property(dateTimeFieldType21);
        org.joda.time.LocalTime localTime24 = localTime1.plusHours(1994);
        org.joda.time.LocalTime.Property property25 = localTime1.hourOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds(2);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withEra(35596);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35596 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.eras();
        boolean boolean2 = localDateTime0.isSupported(durationFieldType1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withTime(32972065, 1997, 30, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32972065 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withEra(1);
        org.joda.time.LocalDate localDate18 = localDate14.minusYears(12);
        org.joda.time.LocalDate localDate20 = localDate18.plusYears((int) (short) 0);
        org.joda.time.LocalDate localDate22 = localDate18.minusWeeks(0);
        int int23 = localDate18.getDayOfWeek();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime(dateTimeZone9);
        mutableDateTime1.setMinuteOfDay((int) (short) 100);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.MIDNIGHT;
        int int16 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime15);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.withPeriodAdded(readablePeriod21, (int) (byte) 10);
        org.joda.time.DateTime dateTime24 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology25 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfDay();
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.plus(readablePeriod36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.plus(readableDuration38);
        java.util.Date date45 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.fromDateFields(date45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean48 = localDate46.isSupported(dateTimeFieldType47);
        boolean boolean49 = dateTime39.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime51 = dateTime39.plusHours(11);
        org.joda.time.DateTime.Property property52 = dateTime51.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        int int54 = dateTime51.get(dateTimeFieldType53);
        org.joda.time.DateTime.Property property55 = dateTime51.weekOfWeekyear();
        org.joda.time.DateTime dateTime57 = property55.addToCopy((long) 35408);
        java.lang.Object obj58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(obj58);
        org.joda.time.DateTime dateTime61 = dateTime59.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime64 = dateTime59.withPeriodAdded(readablePeriod62, (int) (byte) 10);
        org.joda.time.DateTime dateTime66 = dateTime59.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.lang.String str72 = locale70.getScript();
        java.lang.String str73 = dateTimeZone68.getName(1646041809840L, locale70);
        java.util.Calendar calendar74 = dateTime59.toCalendar(locale70);
        java.util.Calendar calendar75 = dateTime57.toCalendar(locale70);
        // The following exception was thrown during execution in test generation
        try {
            long long76 = dateTimeField29.set(1644573094003L, "2022-02-28T09:50:32.140Z", locale70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-28T09:50:32.140Z\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.232" + "'", str73, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1644573196981,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=16,MILLISECOND=981,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=-40433224003019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=688,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=261,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=53,SECOND=16,MILLISECOND=981,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusMillis((int) (short) 1);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.withField(dateTimeFieldType12, 15);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime17 = dateTime14.withFieldAdded(durationFieldType15, 35408);
        org.joda.time.DateTime dateTime18 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.withSecondOfMinute(23);
        org.joda.time.DateTime dateTime22 = dateTime17.plus((long) 35408);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime22.withDayOfMonth(305);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 305 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        long long15 = dateTimeField13.roundFloor(0L);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime19.setWeekyear(3);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        mutableDateTime19.setMillis((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeField dateTimeField27 = null;
        mutableDateTime19.setRounding(dateTimeField27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime19.add(readableDuration29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.era();
        java.lang.String str32 = property31.getName();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        long long36 = dateTimeField33.addWrapField((long) 10, (int) (short) -1);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.MIDNIGHT;
        int int40 = localTime38.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.LocalTime.Property property41 = localTime38.minuteOfHour();
        org.joda.time.LocalTime localTime42 = property41.getLocalTime();
        org.joda.time.LocalTime localTime43 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime44 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime46 = property41.addCopy(15);
        int[] intArray53 = new int[] { (byte) 1, 11, (short) 100, (-1), (short) 100, 4 };
        int int54 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localTime46, intArray53);
        int int55 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime17, intArray53);
        org.joda.time.DateTime dateTime56 = localTime17.toDateTimeToday();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime58.setWeekyear(3);
        java.lang.Object obj61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(obj61);
        org.joda.time.DateTime dateTime64 = dateTime62.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime67 = dateTime62.withPeriodAdded(readablePeriod65, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime62.getZone();
        mutableDateTime58.setZoneRetainFields(dateTimeZone68);
        java.util.TimeZone timeZone70 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTime dateTime71 = dateTime56.toDateTime(dateTimeZone68);
        long long73 = dateTimeZone68.convertUTCToLocal((long) 365);
        long long76 = dateTimeZone68.convertLocalToUTC(3380941940000L, false);
        java.lang.String str77 = dateTimeZone68.getID();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "era" + "'", str32, "era");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-124334351999990L) + "'", long36 == (-124334351999990L));
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 11, 100, -1, 100, 4]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 86399 + "'", int55 == 86399);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 365L + "'", long73 == 365L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 3380941940000L + "'", long76 == 3380941940000L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Etc/UTC" + "'", str77, "Etc/UTC");
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4);
        mutableDateTime1.setSecondOfDay(4);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime1.add(readableDuration8, (int) '4');
        boolean boolean12 = mutableDateTime1.isBefore((long) 6);
        int int13 = mutableDateTime1.getRoundingMode();
        mutableDateTime1.addHours(1986);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.lang.Object obj3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(obj3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readablePeriod7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.plus(readableDuration9);
        java.util.Date date16 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.fromDateFields(date16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean19 = localDate17.isSupported(dateTimeFieldType18);
        boolean boolean20 = dateTime10.isSupported(dateTimeFieldType18);
        org.joda.time.DateTime dateTime22 = dateTime10.plusHours(11);
        org.joda.time.DateTime.Property property23 = dateTime10.yearOfEra();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = property23.getAsText(locale24);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime27.setWeekyear(3);
        java.lang.Object obj30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfMonth();
        org.joda.time.DateTime dateTime33 = property32.withMaximumValue();
        mutableDateTime27.setMillis((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeField dateTimeField35 = null;
        mutableDateTime27.setRounding(dateTimeField35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime27.add(readableDuration37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime27.era();
        java.lang.String str40 = property39.getName();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        int int43 = property39.getMaximumTextLength(locale42);
        java.lang.String str44 = locale24.getDisplayName(locale42);
        java.lang.String str45 = locale42.getDisplayName();
        java.util.Locale.Builder builder46 = builder1.setLocale(locale42);
        java.util.Locale locale47 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder49 = builder1.setRegion("25");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 25 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10" + "'", str25, "10");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "era" + "'", str40, "era");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u6cd5\u6587" + "'", str44, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (China)" + "'", str45, "Chinese (China)");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.plusDays(2122);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.eras();
        boolean boolean12 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withYearOfEra(1997);
        boolean boolean15 = localDateTime0.equals((java.lang.Object) 1997);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDateTime0.getValue(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 14");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 97);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(61200000);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusWeeks(377);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMillis(2922789);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusWeeks(35539);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear(31915440);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTimeFormatter8.parseDateTime("2022-02-28T09:52:32.659Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(4, (int) (byte) 100, (int) (short) 0);
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Calendar.Builder builder8 = builder6.setLenient(false);
        java.util.Calendar.Builder builder10 = builder6.setLenient(false);
        java.util.Date date16 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int17 = date16.getDate();
        java.util.Date date23 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        boolean boolean24 = date16.before(date23);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromDateFields(date16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder26 = builder6.setInstant(date16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Dec 03 04:01:00 UTC 1909");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        int int13 = localDate6.getWeekyear();
        org.joda.time.LocalDate.Property property14 = localDate6.dayOfMonth();
        org.joda.time.LocalDate localDate15 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfEra();
        org.joda.time.LocalDate localDate17 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1997 + "'", int13 == 1997);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.DateTimeField dateTimeField11 = null;
        mutableDateTime1.setRounding(dateTimeField11);
        int int13 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.setTime((long) 999);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(35596);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35596 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = property1.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime4 = property1.addWrapFieldToCopy(7);
        org.joda.time.LocalDateTime localDateTime5 = property1.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(35519353, 35548, (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35519353 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((int) (byte) 1, 0, 74, 35496241, 10299894);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35496241 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTime.Property property15 = dateTime14.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withPeriodAdded(readablePeriod16, 97);
        org.joda.time.DateTime.Property property19 = dateTime14.weekyear();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(232, 31984319, 57, 42, 0, (-52), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime8 = dateTimeFormatter2.parseMutableDateTime("2022-02-28T09:50:18.055Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        int int10 = mutableDateTime1.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        int int13 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setWeekyear(9);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.era();
        java.lang.String str17 = property16.getAsText();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "n. Chr." + "'", str17, "n. Chr.");
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) -1);
        mutableDateTime1.addDays(86399);
        boolean boolean19 = mutableDateTime1.isEqual(1646012427837L);
        mutableDateTime1.setMillisOfDay(613);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(38, 6018575, 35478916);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6018575 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int1 = localTime0.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime.Property property3 = localTime0.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property5.addCopy((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMonthOfYear(6);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localTime7.compareTo((org.joda.time.ReadablePartial) localDateTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        calendar15.set(5, (-292275054), 0, 1, (int) (byte) 100);
        java.util.TimeZone timeZone22 = calendar15.getTimeZone();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale26.getDisplayCountry(locale28);
        java.lang.String str32 = locale26.getDisplayName();
        java.lang.String str33 = locale24.getDisplayName(locale26);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.lang.Object obj35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readablePeriod39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.plus(readableDuration41);
        java.util.Date date48 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.fromDateFields(date48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean51 = localDate49.isSupported(dateTimeFieldType50);
        boolean boolean52 = dateTime42.isSupported(dateTimeFieldType50);
        org.joda.time.DateTime dateTime54 = dateTime42.plusHours(11);
        org.joda.time.DateTime.Property property55 = dateTime42.yearOfEra();
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.lang.String str57 = property55.getAsShortText(locale56);
        java.util.Locale.setDefault(locale56);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone22, locale56);
        // The following exception was thrown during execution in test generation
        try {
            calendar59.clear(366);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 366");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=-292275054,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=1,MINUTE=100,SECOND=17,MILLISECOND=706,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644573197706,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=17,MILLISECOND=706,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "German" + "'", str33, "German");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573197707,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=17,MILLISECOND=707,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10" + "'", str57, "10");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1644573197707,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=17,MILLISECOND=707,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int6 = date5.getYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis((-27409550));
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfSecond(21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localDateTime11.toString("java.io.IOException: java.io.IOException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(4, (int) (byte) 100, (int) (short) 0);
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(21, 0, 35435247);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(19, (int) 'u', 590);
        java.util.Calendar.Builder builder16 = builder8.setTimeOfDay(35428, 2122, 50);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar17 = builder16.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 590");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMonths((int) (byte) -1);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        int int6 = localDateTime4.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withWeekOfWeekyear(31915440);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31915440 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        long long15 = dateTimeField13.roundFloor(0L);
        long long17 = dateTimeField13.roundCeiling((long) 617);
        boolean boolean18 = dateTimeField13.isSupported();
        long long21 = dateTimeField13.add((long) 377, (long) 35442);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = dateTimeField13.getDifference((long) 292278994, 3380940000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -3380647721");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1000L + "'", long17 == 1000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35442377L + "'", long21 == 35442377L);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        int int10 = mutableDateTime1.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        int int13 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setWeekyear(9);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = property16.add((-27423360));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = dateTime7.plusHours(11);
        org.joda.time.DateTime.Property property20 = dateTime19.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = dateTime19.get(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = property23.addToCopy((long) 35408);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.withPeriodAdded(readablePeriod30, (int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime27.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale38.getScript();
        java.lang.String str41 = dateTimeZone36.getName(1646041809840L, locale38);
        java.util.Calendar calendar42 = dateTime27.toCalendar(locale38);
        java.util.Calendar calendar43 = dateTime25.toCalendar(locale38);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime45.setWeekyear(3);
        java.lang.Object obj48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(obj48);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime54 = dateTime49.withPeriodAdded(readablePeriod52, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime49.getZone();
        mutableDateTime45.setZoneRetainFields(dateTimeZone55);
        java.lang.String str58 = dateTimeZone55.getNameKey(1646041808949L);
        boolean boolean59 = dateTimeZone55.isFixed();
        org.joda.time.DateTime dateTime60 = dateTime25.withZone(dateTimeZone55);
        int int61 = dateTime25.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.232" + "'", str41, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644573197970,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=17,MILLISECOND=970,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-40433224002031,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=688,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=261,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=53,SECOND=17,MILLISECOND=969,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 75197969 + "'", int61 == 75197969);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime3 = property1.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime4 = property1.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.monthOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone16);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, (long) 35408);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) (byte) 10);
        boolean boolean25 = dateTime24.isEqualNow();
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.withPeriodAdded(readablePeriod30, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime27.getZone();
        long long36 = dateTimeZone33.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime37 = dateTime24.toDateTime(dateTimeZone33);
        org.joda.time.LocalTime localTime38 = dateTime24.toLocalTime();
        org.joda.time.DateTime dateTime40 = dateTime24.plus((long) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime42.setWeekyear(3);
        java.lang.Object obj45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(obj45);
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfMonth();
        org.joda.time.DateTime dateTime48 = property47.withMaximumValue();
        mutableDateTime42.setMillis((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeField dateTimeField50 = null;
        mutableDateTime42.setRounding(dateTimeField50);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime53.setWeekyear(3);
        java.lang.Object obj56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(obj56);
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime62 = dateTime57.withPeriodAdded(readablePeriod60, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime57.getZone();
        mutableDateTime53.setZoneRetainFields(dateTimeZone63);
        mutableDateTime42.setZone(dateTimeZone63);
        mutableDateTime42.addWeeks((int) (byte) -1);
        boolean boolean68 = dateTime40.isEqual((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTime dateTime70 = dateTime40.plusDays((int) (byte) 100);
        int int71 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property72 = dateTime20.weekyear();
        org.joda.time.DateTime dateTime73 = property72.withMinimumValue();
        org.joda.time.DateTime.Property property74 = dateTime73.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime76 = property74.setCopy("15301");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 15301 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35408L + "'", long19 == 35408L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 11L + "'", long36 == 11L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("DEU");
        java.util.Locale.Builder builder5 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setVariant("2022-02-11T09:50:52.570Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:50:52.570Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.MIDNIGHT;
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTime dateTime12 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology13 = dateTime6.getChronology();
        java.lang.String str14 = chronology13.toString();
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        long long25 = dateTimeZone22.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.Chronology chronology27 = chronology13.withZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime29.setWeekyear(3);
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime33.withPeriodAdded(readablePeriod36, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime33.getZone();
        mutableDateTime29.setZoneRetainFields(dateTimeZone39);
        java.lang.String str42 = dateTimeZone39.getNameKey(1646041808949L);
        boolean boolean43 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology44 = chronology27.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) '4', dateTimeZone46);
        int int50 = dateTimeZone46.getOffsetFromLocal((long) 32769);
        org.joda.time.Chronology chronology51 = chronology27.withZone(dateTimeZone46);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromMillisOfDay(35442377L, chronology51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.eras();
        boolean boolean55 = localDateTime53.isSupported(durationFieldType54);
        java.lang.String str56 = durationFieldType54.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime58 = localTime52.withFieldAdded(durationFieldType54, 35577430);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'eras' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str14, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 11L + "'", long25 == 11L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "eras" + "'", str56, "eras");
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime2.setWeekyear(3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime17.setWeekyear(3);
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        mutableDateTime17.setMillis((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeField dateTimeField25 = null;
        mutableDateTime17.setRounding(dateTimeField25);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime28.setWeekyear(3);
        java.lang.Object obj31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime32.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime32.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone38);
        mutableDateTime17.setZone(dateTimeZone38);
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.lang.String str43 = dateTimeZone38.getShortName((long) 3, locale42);
        long long45 = dateTimeZone12.getMillisKeepLocal(dateTimeZone38, 1L);
        boolean boolean47 = dateTimeZone12.isStandardOffset((long) 232);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 617, dateTimeZone12);
        org.joda.time.Interval interval49 = localDate48.toInterval();
        org.joda.time.LocalDate localDate51 = localDate48.plusDays(1970);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDate localDate53 = localDate48.plus(readablePeriod52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField55 = localDate48.getField(233);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 233");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4);
        mutableDateTime1.setSecondOfDay(4);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime1.add(readableDuration8, (int) '4');
        boolean boolean12 = mutableDateTime1.isBefore((long) 6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) (byte) 10);
        boolean boolean17 = dateTime16.isEqualNow();
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.withPeriodAdded(readablePeriod22, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime19.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime29 = dateTime16.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = dateTime16.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.MIDNIGHT;
        int int35 = localTime33.compareTo((org.joda.time.ReadablePartial) localTime34);
        java.lang.Object obj36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(obj36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime37.withPeriodAdded(readablePeriod40, (int) (byte) 10);
        org.joda.time.DateTime dateTime43 = localTime34.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology44 = dateTime37.getChronology();
        boolean boolean45 = dateTimeFieldType31.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.era();
        int int47 = dateTime30.get(dateTimeField46);
        boolean boolean48 = dateTimeField46.isSupported();
        java.lang.String str49 = dateTimeField46.getName();
        mutableDateTime1.setRounding(dateTimeField46);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime1.minuteOfDay();
        mutableDateTime1.setSecondOfDay(74);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 11L + "'", long28 == 11L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "era" + "'", str49, "era");
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(70, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-28T09:50:54.558Z");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.String str3 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.io.IOException: java.io.IOException: 2022-02-28T09:50:54.558Z" + "'", str3, "java.io.IOException: java.io.IOException: 2022-02-28T09:50:54.558Z");
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.MIDNIGHT;
        int int4 = localTime3.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime.Property property6 = localTime3.property(dateTimeFieldType5);
        org.joda.time.LocalTime localTime7 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property6.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy(97);
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime13.setWeekyear(3);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime19 = property18.withMaximumValue();
        mutableDateTime13.setMillis((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeField dateTimeField21 = null;
        mutableDateTime13.setRounding(dateTimeField21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime13.add(readableDuration23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime13.era();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime13.millisOfDay();
        org.joda.time.Chronology chronology27 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology27);
        boolean boolean32 = localTime10.equals((java.lang.Object) chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(5, 35496, 4, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35496 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, 2);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime12.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMonths(0);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withYearOfEra(19);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, 8);
        int int29 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime10.withCenturyOfEra(35452018);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35452018 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int6 = date5.getYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) (short) 10);
        int int10 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.era();
        int int13 = localDateTime11.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMonths(14);
        int int18 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.plusMillis(1997);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.plusYears(57);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime8.setWeekyear(3);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime12.getZone();
        mutableDateTime8.setZoneRetainFields(dateTimeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone18.toTimeZone();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime23.setWeekyear(3);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime29 = property28.withMaximumValue();
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeField dateTimeField31 = null;
        mutableDateTime23.setRounding(dateTimeField31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime34.setWeekyear(3);
        java.lang.Object obj37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime43 = dateTime38.withPeriodAdded(readablePeriod41, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime38.getZone();
        mutableDateTime34.setZoneRetainFields(dateTimeZone44);
        mutableDateTime23.setZone(dateTimeZone44);
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.lang.String str49 = dateTimeZone44.getShortName((long) 3, locale48);
        long long51 = dateTimeZone18.getMillisKeepLocal(dateTimeZone44, 1L);
        int int53 = dateTimeZone18.getOffsetFromLocal(1646041808949L);
        java.lang.String str55 = dateTimeZone18.getName(1644573009070L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(450, 719, 32972065, 1986, 35582163, 23, 35488, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1986 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        java.io.IOException iOException3 = new java.io.IOException("hi!");
        java.io.IOException iOException4 = new java.io.IOException("10", (java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException("2022-02-11T09:52:16.714", (java.lang.Throwable) iOException3);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(50, 66, 365, 35530, 61200000, 54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35530 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime2.setWeekyear(3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(10L, dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(97);
        java.lang.String str20 = dateTime17.toString();
        org.joda.time.DateTime dateTime22 = dateTime17.plusMillis(35468);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime24.setWeekyear(3);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime28.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime28.getZone();
        mutableDateTime24.setZoneRetainFields(dateTimeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone34.toTimeZone();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime39.setWeekyear(3);
        java.lang.Object obj42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(obj42);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfMonth();
        org.joda.time.DateTime dateTime45 = property44.withMaximumValue();
        mutableDateTime39.setMillis((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeField dateTimeField47 = null;
        mutableDateTime39.setRounding(dateTimeField47);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime50.setWeekyear(3);
        java.lang.Object obj53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(obj53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime59 = dateTime54.withPeriodAdded(readablePeriod57, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime54.getZone();
        mutableDateTime50.setZoneRetainFields(dateTimeZone60);
        mutableDateTime39.setZone(dateTimeZone60);
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.lang.String str65 = dateTimeZone60.getShortName((long) 3, locale64);
        long long67 = dateTimeZone34.getMillisKeepLocal(dateTimeZone60, 1L);
        boolean boolean69 = dateTimeZone34.isStandardOffset((long) 232);
        org.joda.time.DateTime dateTime70 = dateTime17.toDateTime(dateTimeZone34);
        int int71 = dateTime17.getYear();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:53:18.771Z" + "'", str20, "2022-02-11T09:53:18.771Z");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusSeconds((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localDateTime2.isSupported(dateTimeFieldType6);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime9.setWeekyear(3);
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeField dateTimeField17 = null;
        mutableDateTime9.setRounding(dateTimeField17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime9.add(readableDuration19);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.plus(readablePeriod25);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (short) 1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfMonth();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime32 = dateTime28.withHourOfDay(21);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime34.setWeekyear(3);
        java.lang.Object obj37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        mutableDateTime34.setMillis((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeField dateTimeField42 = null;
        mutableDateTime34.setRounding(dateTimeField42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime34.add(readableDuration44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime34.add(readableDuration46, (int) (byte) -1);
        mutableDateTime34.addDays(86399);
        java.util.Date date56 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.fromDateFields(date56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean59 = localDate57.isSupported(dateTimeFieldType58);
        org.joda.time.LocalDate localDate61 = localDate57.withEra(0);
        org.joda.time.LocalDate localDate63 = localDate61.plusMonths(11);
        org.joda.time.LocalDate localDate65 = localDate61.withWeekyear(10);
        org.joda.time.LocalDate.Property property66 = localDate61.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property66.getFieldType();
        java.lang.String str68 = dateTimeFieldType67.toString();
        java.lang.String str69 = dateTimeFieldType67.toString();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime34.property(dateTimeFieldType67);
        boolean boolean71 = dateTime32.isSupported(dateTimeFieldType67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = localDateTime2.withField(dateTimeFieldType67, 35568524);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35568524 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "yearOfCentury" + "'", str68, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "yearOfCentury" + "'", str69, "yearOfCentury");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        int int13 = property11.getMinimumValueOverall();
        org.joda.time.LocalDate localDate14 = property11.withMinimumValue();
        org.joda.time.LocalDate localDate16 = property11.addWrapFieldToCopy(992);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguage("Japanese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setExtension('a', "09:52:46.190");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 09:52:46.190 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0, 1, 4, 2, 5, 0, 23);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        long long11 = dateTimeZone8.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime13.setWeekyear(3);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.withPeriodAdded(readablePeriod20, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime17.getZone();
        mutableDateTime13.setZoneRetainFields(dateTimeZone23);
        long long26 = dateTimeZone8.getMillisKeepLocal(dateTimeZone23, (long) 35408);
        java.lang.String str28 = dateTimeZone8.getNameKey((long) 22);
        org.joda.time.DateTime dateTime29 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 35408L + "'", long26 == 35408L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusMillis((int) (short) 1);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.withField(dateTimeFieldType12, 15);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime17 = dateTime14.withFieldAdded(durationFieldType15, 35408);
        org.joda.time.DateTime dateTime18 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 365);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((long) 15);
        org.joda.time.DateTime.Property property24 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime27 = property24.addToCopy((long) 23);
        int int28 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.plusSeconds(0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(10L, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        java.lang.String str4 = property3.getName();
        org.joda.time.LocalDate localDate6 = property3.addWrapFieldToCopy(30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = localDate6.toString("2022-02-11T09:50:45.843Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "monthOfYear" + "'", str4, "monthOfYear");
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        java.util.Locale locale3 = new java.util.Locale("hi!", "", "");
        java.lang.String str4 = locale3.toLanguageTag();
        java.lang.String str5 = locale3.getDisplayName();
        java.lang.String str6 = locale3.getDisplayName();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(11);
        org.joda.time.LocalDate localDate14 = localDate10.withWeekyear(10);
        org.joda.time.LocalDate.Property property15 = localDate10.yearOfCentury();
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) (byte) 10);
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) (byte) 10);
        boolean boolean24 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(10L, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime19.withFields((org.joda.time.ReadablePartial) localDate27);
        int int29 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate31 = localDate27.withWeekyear(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDate27.getFieldType((int) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate27.plusYears(249);
        int int36 = localDate35.getCenturyOfEra();
        org.joda.time.LocalDate.Property property37 = localDate35.year();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.property(dateTimeFieldType16);
        mutableDateTime1.setSecondOfDay(23);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime1.add(readablePeriod20, 2023);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((-870617750), 992, 31984319, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -870617750 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime1.getZone();
        long long10 = dateTimeZone7.convertLocalToUTC((long) 11, true);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays(50400000);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withCenturyOfEra(317);
        int int16 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.plusWeeks(35423);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 11L + "'", long10 == 11L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.era();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = chronology12.get(readablePeriod16, (long) 35484, 1590408238032000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str14, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime1.getZone();
        long long10 = dateTimeZone7.convertLocalToUTC((long) 11, true);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        java.lang.String str13 = dateTimeZone7.getName((-72064071665819000L));
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 11L + "'", long10 == 11L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = dateTime7.plusHours(11);
        org.joda.time.DateTime.Property property20 = dateTime7.yearOfEra();
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = property20.getAsText(locale21);
        org.joda.time.DateTime dateTime23 = property20.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = property20.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime27 = property20.addToCopy(0L);
        int int28 = dateTime27.getMillisOfSecond();
        long long29 = dateTime27.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "10" + "'", str22, "10");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 584 + "'", int28 == 584);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-61848022000416L) + "'", long29 == (-61848022000416L));
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.property(dateTimeFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime1.add(readablePeriod8, 11);
        long long11 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = property12.add(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278996 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-62072438400001L) + "'", long11 == (-62072438400001L));
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean8 = localDateTime0.isSupported(dateTimeFieldType7);
        java.lang.String str9 = dateTimeFieldType7.getName();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "halfdayOfDay" + "'", str9, "halfdayOfDay");
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 35412);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime4.setWeekyear(3);
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime8.getZone();
        mutableDateTime4.setZoneRetainFields(dateTimeZone14);
        java.util.TimeZone timeZone16 = dateTimeZone14.toTimeZone();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16, locale17);
        java.lang.String str19 = locale17.toLanguageTag();
        java.util.Calendar.Builder builder20 = builder0.setLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder20.setCalendarType("09:52:41.933");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 09:52:41.933");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644573199637,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=19,MILLISECOND=637,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.DurationField durationField16 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfMonth();
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) (byte) 10);
        boolean boolean22 = dateTime21.isEqualNow();
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        long long33 = dateTimeZone30.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime34 = dateTime21.toDateTime(dateTimeZone30);
        org.joda.time.LocalTime localTime35 = dateTime21.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime21.getZone();
        org.joda.time.Chronology chronology37 = chronology12.withZone(dateTimeZone36);
        java.lang.String str38 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology12.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(chronology40);
        org.joda.time.LocalTime localTime43 = localTime41.withSecondOfMinute((int) (short) 1);
        java.lang.String str44 = localTime41.toString();
        org.joda.time.LocalTime localTime46 = localTime41.withMinuteOfHour(15);
        org.joda.time.LocalTime localTime48 = localTime46.plusMillis(590);
        org.joda.time.LocalTime.Property property49 = localTime48.secondOfMinute();
        int int50 = localTime48.getHourOfDay();
        int int51 = localTime48.getMillisOfSecond();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.MIDNIGHT;
        int int56 = localTime54.compareTo((org.joda.time.ReadablePartial) localTime55);
        org.joda.time.LocalTime.Property property57 = localTime54.minuteOfHour();
        org.joda.time.LocalTime localTime58 = property57.getLocalTime();
        org.joda.time.LocalTime localTime59 = property57.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime60 = property57.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime62 = property57.addCopy(15);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.lang.String str65 = locale64.getDisplayScript();
        org.joda.time.LocalTime localTime66 = property57.setCopy("10", locale64);
        org.joda.time.LocalTime localTime67 = property57.getLocalTime();
        org.joda.time.LocalTime localTime68 = org.joda.time.LocalTime.MIDNIGHT;
        int int70 = localTime68.getValue(0);
        org.joda.time.LocalTime.Property property71 = localTime68.millisOfDay();
        org.joda.time.LocalTime localTime72 = property71.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField73 = property71.getField();
        long long75 = dateTimeField73.roundHalfCeiling(1646041871208L);
        boolean boolean76 = localTime67.equals((java.lang.Object) long75);
        int[] intArray77 = localTime67.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField39.set((org.joda.time.ReadablePartial) localTime48, 35468, intArray77, 2122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2122 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 11L + "'", long33 == 11L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str38, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "09:53:19.650" + "'", str44, "09:53:19.650");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 240 + "'", int51 == 240);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1646041871208L + "'", long75 == 1646041871208L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 10]");
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4);
        org.joda.time.Instant instant6 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime9.setWeekyear(3);
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.minusYears((int) (short) 1);
        long long19 = dateTime15.getMillis();
        java.util.Date date20 = dateTime15.toDate();
        boolean boolean21 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime1.addSeconds(7);
        java.lang.String str25 = mutableDateTime1.toString("97");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1646041999713L + "'", long19 == 1646041999713L);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 28 09:53:19 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "97" + "'", str25, "97");
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.MIDNIGHT;
        int int5 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime4);
        java.lang.Object obj6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.withPeriodAdded(readablePeriod10, (int) (byte) 10);
        org.joda.time.DateTime dateTime13 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology14 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 35418, chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.yearOfCentury();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime22.setWeekyear(3);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        mutableDateTime22.setMillis((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeField dateTimeField30 = null;
        mutableDateTime22.setRounding(dateTimeField30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime22.add(readableDuration32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime22.era();
        java.lang.String str35 = property34.getName();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        long long39 = dateTimeField36.addWrapField((long) 10, (int) (short) -1);
        java.util.Locale locale40 = java.util.Locale.US;
        java.lang.String str41 = locale40.toLanguageTag();
        int int42 = dateTimeField36.getMaximumShortTextLength(locale40);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        java.lang.String str48 = locale43.getDisplayCountry(locale45);
        java.util.Set<java.lang.String> strSet49 = locale43.getUnicodeLocaleKeys();
        java.lang.String str50 = locale40.getDisplayCountry(locale43);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getDisplayLanguage();
        java.lang.String str53 = locale40.getDisplayCountry(locale51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.minuteOfDay();
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.util.Calendar calendar58 = dateTime54.toCalendar(locale56);
        java.lang.String str59 = locale56.getISO3Country();
        java.lang.String str60 = locale51.getDisplayScript(locale56);
        java.lang.String str61 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localTime19, (-292275054), locale51);
        java.lang.Object obj62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(obj62);
        org.joda.time.LocalDateTime localDateTime64 = dateTime63.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYear(50);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.withPeriodAdded(readablePeriod70, 97);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime66.withDayOfYear((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = localTime19.isBefore((org.joda.time.ReadablePartial) localDateTime74);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "era" + "'", str35, "era");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-124334351999990L) + "'", long39 == (-124334351999990L));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en-US" + "'", str41, "en-US");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "United States" + "'", str50, "United States");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "German" + "'", str52, "German");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Vereinigte Staaten von Amerika" + "'", str53, "Vereinigte Staaten von Amerika");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1644573199801,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=19,MILLISECOND=801,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DEU" + "'", str59, "DEU");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-292275054" + "'", str61, "-292275054");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime12.minusYears((int) (short) 1);
        long long16 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTime();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        int int21 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime20);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.DateTime dateTime29 = localTime20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology30 = dateTime23.getChronology();
        java.lang.String str31 = chronology30.toString();
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime33.withPeriodAdded(readablePeriod36, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime33.getZone();
        long long42 = dateTimeZone39.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.Chronology chronology44 = chronology30.withZone(dateTimeZone39);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((java.lang.Object) dateTime12, dateTimeZone39);
        int int47 = dateTimeZone39.getOffsetFromLocal((long) 35412);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = dateTimeZone39.getShortName(1646041805419L, locale49);
        boolean boolean51 = dateTimeZone39.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withZone(dateTimeZone39);
        java.io.Writer writer53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.minuteOfDay();
        long long56 = property55.remainder();
        org.joda.time.DateTime dateTime57 = property55.withMinimumValue();
        int int58 = dateTime57.getDayOfWeek();
        org.joda.time.DateTime dateTime60 = dateTime57.minusWeeks(4);
        org.joda.time.DateTime dateTime61 = dateTime60.withTimeAtStartOfDay();
        java.lang.Object obj62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(obj62);
        org.joda.time.DateTime dateTime65 = dateTime63.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.plus(readablePeriod66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.plus(readableDuration68);
        java.util.Date date75 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.fromDateFields(date75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean78 = localDate76.isSupported(dateTimeFieldType77);
        boolean boolean79 = dateTime69.isSupported(dateTimeFieldType77);
        org.joda.time.DateTime dateTime81 = dateTime69.plusHours(11);
        org.joda.time.DateTime.Property property82 = dateTime81.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.year();
        int int84 = dateTime81.get(dateTimeFieldType83);
        int int85 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime81);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer53, (org.joda.time.ReadableInstant) dateTime60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1646041999832L + "'", long16 == 1646041999832L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str31, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 11L + "'", long42 == 11L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 19832L + "'", long56 == 19832L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(10L, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra(2020);
        org.joda.time.LocalDate.Property property6 = localDate5.era();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime1.add(readableDuration14);
        java.lang.String str16 = mutableDateTime1.toString();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime1.add(readablePeriod17);
        mutableDateTime1.setMillisOfSecond(14);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime24.setWeekyear(3);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime28.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime28.getZone();
        mutableDateTime24.setZoneRetainFields(dateTimeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone34.toTimeZone();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(10L, dateTimeZone34);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone34);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime39.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime39.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-28T09:53:19.909Z" + "'", str16, "2022-02-28T09:53:19.909Z");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = mutableDateTime1.toString(dateTimeFormatter13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        int int19 = localTime17.compareTo((org.joda.time.ReadablePartial) localTime18);
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        org.joda.time.DateTime dateTime27 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology28 = dateTime21.getChronology();
        boolean boolean29 = dateTimeFieldType15.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.era();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.yearOfCentury();
        java.lang.String str33 = dateTimeField31.getAsText((long) 20);
        int int34 = mutableDateTime1.get(dateTimeField31);
        mutableDateTime1.setMinuteOfDay(99);
        mutableDateTime1.addMinutes(2922789);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0003-01-01T23:59:59.999Z" + "'", str14, "0003-01-01T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "70" + "'", str33, "70");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        java.lang.String str18 = dateTimeField16.getAsShortText(1646041838680L);
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet21 = locale19.getExtensionKeys();
        int int22 = dateTimeField16.getMaximumTextLength(locale19);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "22" + "'", str18, "22");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese" + "'", str20, "Chinese");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-28T09:50:50.126Z");
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(57, 680, 6018575);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 680 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(35505, 31828525, 8, (-1995), 100, 35582437, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1995 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime5 = property4.getLocalTime();
        org.joda.time.LocalTime localTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.addNoWrapToCopy(4);
        org.joda.time.LocalTime localTime11 = property4.addCopy(999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = localTime11.withMillisOfSecond(31966475);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31966475 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        java.util.Date date5 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int6 = date5.getDate();
        java.time.Instant instant7 = date5.toInstant();
        java.lang.String str8 = date5.toLocaleString();
        int int9 = date5.getTimezoneOffset();
        java.util.Date date11 = new java.util.Date((long) 46);
        boolean boolean12 = date5.before(date11);
        java.lang.String str13 = date5.toString();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Dec 03 04:01:00 UTC 1909");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dec 3, 1909 4:01:00 AM" + "'", str8, "Dec 3, 1909 4:01:00 AM");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Fri Dec 03 04:01:00 UTC 1909" + "'", str13, "Fri Dec 03 04:01:00 UTC 1909");
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        mutableDateTime1.add(readablePeriod2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime1.add(readableDuration5);
        java.lang.String str7 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-11T09:53:20.131Z" + "'", str7, "2022-02-11T09:53:20.131Z");
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.DurationField durationField15 = chronology12.months();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.millisOfDay();
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.LocalDateTime localDateTime20 = dateTime19.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDurationAdded(readableDuration21, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.era();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.eras();
        boolean boolean32 = localDateTime30.isSupported(durationFieldType31);
        boolean boolean33 = localDateTime28.isSupported(durationFieldType31);
        boolean boolean34 = localDateTime27.isSupported(durationFieldType31);
        int int35 = localDateTime27.getYear();
        int int36 = localDateTime27.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withWeekyear(2);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.minusSeconds(364);
        int[] intArray42 = null;
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet46 = locale44.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray47 = dateTimeField17.set((org.joda.time.ReadablePartial) localDateTime27, 35513770, intArray42, "09:50:15.636", locale44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"09:50:15.636\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str16, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32000167 + "'", int36 == 32000167);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese" + "'", str45, "Chinese");
        org.junit.Assert.assertNotNull(charSet46);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35595757, 1902);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 1902");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setExtension('a', "UTC");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setUnicodeLocaleKeyword("2022-02-28T09:53:04.168Z", "2022-02-28T09:52:15.646Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-28T09:53:04.168Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("2022-02-28T09:50:25.291Z", throwable1);
        java.lang.String str3 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.io.IOException: 2022-02-28T09:50:25.291Z" + "'", str3, "java.io.IOException: 2022-02-28T09:50:25.291Z");
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        org.joda.time.LocalDate localDate17 = property13.addToCopy(35522);
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withYearOfEra(19);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.withMillisOfDay(16);
        int int17 = localDateTime16.getMinuteOfHour();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime16.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks(35419);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime23.setWeekyear(3);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime29 = property28.withMaximumValue();
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property31 = dateTime29.dayOfWeek();
        int int32 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime29.withDurationAdded(readableDuration33, 710);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone16);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, (long) 35408);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime21.addWeeks(19);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.era();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime21);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.hourOfDay();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime21.add(readableDuration27);
        int int29 = mutableDateTime21.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime31.setWeekyear(3);
        java.lang.Object obj34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(obj34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.DateTime dateTime37 = property36.withMaximumValue();
        mutableDateTime31.setMillis((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeField dateTimeField39 = null;
        mutableDateTime31.setRounding(dateTimeField39);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime42.setWeekyear(3);
        java.lang.Object obj45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(obj45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime51 = dateTime46.withPeriodAdded(readablePeriod49, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime46.getZone();
        mutableDateTime42.setZoneRetainFields(dateTimeZone52);
        mutableDateTime31.setZone(dateTimeZone52);
        java.lang.Object obj56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(obj56);
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.plus(readablePeriod60);
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfYear((int) (short) 1);
        org.joda.time.DateTime.Property property64 = dateTime63.dayOfMonth();
        org.joda.time.DateTime dateTime66 = property64.addWrapFieldToCopy(2022);
        org.joda.time.DateTime dateTime67 = property64.getDateTime();
        java.util.Locale locale68 = java.util.Locale.ITALY;
        java.lang.String str69 = property64.getAsText(locale68);
        java.lang.String str70 = dateTimeZone52.getShortName((long) 232, locale68);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withMinuteOfHour(9);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withFieldAdded(durationFieldType74, (int) (short) 10);
        java.lang.String str77 = durationFieldType74.getName();
        mutableDateTime21.add(durationFieldType74, 2010);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35408L + "'", long19 == 35408L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "months" + "'", str77, "months");
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        java.util.Date date5 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int6 = date5.getDate();
        java.time.Instant instant7 = date5.toInstant();
        java.lang.String str8 = date5.toLocaleString();
        date5.setYear((int) '#');
        java.util.Date date16 = new java.util.Date(232, 16, (-1), 1970, 22);
        boolean boolean17 = date5.before(date16);
        int int18 = date16.getDate();
        org.junit.Assert.assertEquals(date5.toString(), "Tue Dec 03 04:01:00 UTC 1935");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dec 3, 1909 4:01:00 AM" + "'", str8, "Dec 3, 1909 4:01:00 AM");
        org.junit.Assert.assertEquals(date16.toString(), "Mon Jul 20 02:22:00 UTC 2133");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        int[] intArray5 = localDateTime4.getValues();
        int int6 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusYears(58);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[2021, 5, 11, 35600458]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2021 + "'", int6 == 2021);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime2.setWeekyear(3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(10L, dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfCentury();
        org.joda.time.DateTime.Property property19 = dateTime17.millisOfSecond();
        org.joda.time.DateTime dateTime20 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = chronology21.get(readablePeriod23, 1644573065318L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = dateTime7.plusHours(11);
        org.joda.time.DateTime.Property property20 = dateTime7.era();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(32972563);
        org.joda.time.DateTime dateTime23 = property20.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight24 = dateTime23.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.hourOfDay();
        int int18 = mutableDateTime1.getRoundingMode();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = mutableDateTime1.isSupported(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.MIDNIGHT;
        int int10 = localTime8.compareTo((org.joda.time.ReadablePartial) localTime9);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.DateTime dateTime18 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology19 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfDay();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfMonth();
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) (byte) 10);
        boolean boolean29 = dateTime28.isEqualNow();
        java.lang.Object obj30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime31.getZone();
        long long40 = dateTimeZone37.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime41 = dateTime28.toDateTime(dateTimeZone37);
        org.joda.time.LocalTime localTime42 = dateTime28.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime28.getZone();
        org.joda.time.Chronology chronology44 = chronology19.withZone(dateTimeZone43);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.MIDNIGHT;
        int int49 = localTime47.compareTo((org.joda.time.ReadablePartial) localTime48);
        java.lang.Object obj50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(obj50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime56 = dateTime51.withPeriodAdded(readablePeriod54, (int) (byte) 10);
        org.joda.time.DateTime dateTime57 = localTime48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Chronology chronology58 = dateTime51.getChronology();
        java.lang.String str59 = chronology58.toString();
        org.joda.time.DurationField durationField60 = chronology58.months();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.secondOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.secondOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology58.yearOfCentury();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(1644573058687L, chronology58);
        int[] intArray66 = chronology44.get((org.joda.time.ReadablePartial) localTime64, 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(39, 925, 35448, 35447363, 35412, 35546, 48, chronology44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35447363 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 11L + "'", long40 == 11L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str59, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0]");
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        java.util.Locale locale16 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMonths(0);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.minusMinutes((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = localDateTime24.toString("10", locale31);
        java.lang.String str33 = locale16.getDisplayName(locale31);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str35 = locale16.toLanguageTag();
        java.lang.String str37 = locale16.getExtension('u');
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale16.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10" + "'", str32, "10");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "09:50:02.357" + "'", str33, "09:50:02.357");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573200609,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=20,MILLISECOND=609,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.MIDNIGHT;
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTime dateTime12 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology13 = dateTime6.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(11L, chronology13);
        org.joda.time.LocalTime localTime17 = localTime15.plusMillis(317);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localTime15.getValue(10295379);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10295379");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1994);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.property(dateTimeFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime1.add(readablePeriod8, 11);
        mutableDateTime1.setMillis((long) 50);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfDay(68553903);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68553903 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35456, 607);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 607");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 35412);
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("09:50:19.500");
        java.util.Calendar.Builder builder5 = builder2.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder10 = builder5.setTimeOfDay((int) (byte) 1, 1970, 2000, 35587467);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        mutableDateTime1.setSecondOfMinute((int) ' ');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        long long19 = dateTimeZone16.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime21.setWeekyear(3);
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.withPeriodAdded(readablePeriod28, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime25.getZone();
        mutableDateTime21.setZoneRetainFields(dateTimeZone31);
        long long34 = dateTimeZone16.getMillisKeepLocal(dateTimeZone31, (long) 35408);
        java.lang.String str36 = dateTimeZone16.getNameKey((long) 22);
        mutableDateTime1.setZone(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime39 = mutableDateTime1.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMillisOfDay((-27409551));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27409551 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35408L + "'", long34 == 35408L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        java.util.Date date5 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int6 = date5.getDate();
        int int7 = date5.getTimezoneOffset();
        java.lang.String str8 = date5.toLocaleString();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromDateFields(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Dec 03 04:01:00 UTC 1909");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dec 3, 1909 4:01:00 AM" + "'", str8, "Dec 3, 1909 4:01:00 AM");
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.lang.Object obj6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime9 = property8.withMaximumValue();
        java.lang.Object obj10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime11.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getScript();
        java.lang.String str25 = dateTimeZone20.getName(1646041809840L, locale22);
        java.util.Calendar calendar26 = dateTime11.toCalendar(locale22);
        int int27 = property8.getMaximumTextLength(locale22);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime29.setWeekyear(3);
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        mutableDateTime29.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeField dateTimeField37 = null;
        mutableDateTime29.setRounding(dateTimeField37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime29.add(readableDuration39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime29.era();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime29.millisOfDay();
        org.joda.time.Chronology chronology43 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField48 = chronology43.weekOfWeekyear();
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = dateTimeField48.getAsShortText(1646006400000L, locale50);
        java.lang.String str52 = locale22.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter2.withLocale(locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter53.withPivotYear((java.lang.Integer) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter53.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = dateTimeFormatter53.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter53.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = dateTimeFormatter53.parseDateTime("0010-02-11T20:50:47.289Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.232" + "'", str25, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573200839,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=20,MILLISECOND=839,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9" + "'", str51, "9");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "German" + "'", str52, "German");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(dateTimePrinter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDate6.toString(dateTimeFormatter15);
        int int17 = localDate6.size();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1997-11-13" + "'", str16, "1997-11-13");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.weekOfWeekyear();
        int int19 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime21.setWeekyear(3);
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime27 = property26.withMaximumValue();
        mutableDateTime21.setMillis((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeField dateTimeField29 = null;
        mutableDateTime21.setRounding(dateTimeField29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime21.add(readableDuration31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime21.era();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime21.millisOfDay();
        org.joda.time.Chronology chronology35 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfHalfday();
        long long39 = dateTimeField37.roundHalfCeiling((long) (-27409550));
        long long41 = dateTimeField37.roundCeiling(1000L);
        java.util.Locale locale42 = null;
        int int43 = dateTimeField37.getMaximumTextLength(locale42);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime45.setWeekyear(3);
        java.lang.Object obj48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(obj48);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfMonth();
        org.joda.time.DateTime dateTime51 = property50.withMaximumValue();
        mutableDateTime45.setMillis((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeField dateTimeField53 = null;
        mutableDateTime45.setRounding(dateTimeField53);
        org.joda.time.DateTimeField dateTimeField55 = null;
        mutableDateTime45.setRounding(dateTimeField55);
        boolean boolean57 = mutableDateTime45.isEqualNow();
        org.joda.time.Chronology chronology58 = mutableDateTime45.getChronology();
        java.util.Date date64 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int65 = date64.getDate();
        java.util.Date date71 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        boolean boolean72 = date64.before(date71);
        org.joda.time.LocalTime localTime73 = org.joda.time.LocalTime.fromDateFields(date64);
        org.joda.time.LocalTime localTime75 = localTime73.withMillisOfDay(16);
        org.joda.time.LocalTime localTime77 = localTime75.minusMinutes(2922789);
        org.joda.time.LocalTime.Property property78 = localTime75.secondOfMinute();
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.MIDNIGHT;
        int int80 = localTime79.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime.Property property82 = localTime79.property(dateTimeFieldType81);
        org.joda.time.LocalTime localTime83 = property82.withMinimumValue();
        org.joda.time.LocalTime localTime85 = property82.addNoWrapToCopy((int) (byte) 1);
        org.joda.time.LocalTime localTime87 = localTime85.plusSeconds(22);
        int int88 = localTime85.size();
        int[] intArray89 = localTime85.getValues();
        chronology58.validate((org.joda.time.ReadablePartial) localTime75, intArray89);
        java.util.Locale locale91 = java.util.Locale.GERMAN;
        java.lang.String str92 = locale91.getDisplayLanguage();
        java.lang.String str93 = dateTimeField37.getAsShortText((org.joda.time.ReadablePartial) localTime75, locale91);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField37, 35444867);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 35444867");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-28800000L) + "'", long39 == (-28800000L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3600000L + "'", long41 == 3600000L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertEquals(date64.toString(), "Fri Dec 03 04:01:00 UTC 1909");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "German" + "'", str92, "German");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "12" + "'", str93, "12");
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfMonth();
        int int12 = property11.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = property11.setCopy("Property[clockhourOfHalfday]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[clockhourOfHalfday]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4);
        mutableDateTime1.addMillis((int) (short) 10);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekOfWeekyear();
        mutableDateTime1.addHours(0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime12.setWeekyear(3);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setZone(dateTimeZone22);
        mutableDateTime1.addWeeks((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.millisOfDay();
        mutableDateTime1.setDate((long) 8);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime1.hourOfDay();
        java.util.Date date36 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.fromDateFields(date36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean39 = localDate37.isSupported(dateTimeFieldType38);
        org.joda.time.LocalDate localDate41 = localDate37.withEra(0);
        org.joda.time.LocalDate localDate43 = localDate41.plusMonths(11);
        org.joda.time.LocalDate localDate45 = localDate41.withWeekyear(10);
        org.joda.time.LocalDate.Property property46 = localDate41.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property46.getFieldType();
        int int48 = mutableDateTime1.get(dateTimeFieldType47);
        mutableDateTime1.setYear(6018575);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 70 + "'", int48 == 70);
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("0010-11-13", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        long long15 = dateTimeField13.roundFloor(0L);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime19.setWeekyear(3);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        mutableDateTime19.setMillis((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeField dateTimeField27 = null;
        mutableDateTime19.setRounding(dateTimeField27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime19.add(readableDuration29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.era();
        java.lang.String str32 = property31.getName();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        long long36 = dateTimeField33.addWrapField((long) 10, (int) (short) -1);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.MIDNIGHT;
        int int40 = localTime38.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.LocalTime.Property property41 = localTime38.minuteOfHour();
        org.joda.time.LocalTime localTime42 = property41.getLocalTime();
        org.joda.time.LocalTime localTime43 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime44 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime46 = property41.addCopy(15);
        int[] intArray53 = new int[] { (byte) 1, 11, (short) 100, (-1), (short) 100, 4 };
        int int54 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localTime46, intArray53);
        int int55 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime17, intArray53);
        org.joda.time.DateTime dateTime56 = localTime17.toDateTimeToday();
        org.joda.time.LocalTime.Property property57 = localTime17.secondOfMinute();
        java.lang.Object obj58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(obj58);
        org.joda.time.DateTime dateTime61 = dateTime59.withYearOfEra((int) (byte) 10);
        boolean boolean62 = dateTime61.isEqualNow();
        java.lang.Object obj63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(obj63);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime69 = dateTime64.withPeriodAdded(readablePeriod67, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime64.getZone();
        long long73 = dateTimeZone70.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime74 = dateTime61.toDateTime(dateTimeZone70);
        org.joda.time.LocalTime localTime75 = dateTime61.toLocalTime();
        org.joda.time.DateTime dateTime77 = dateTime61.plus((long) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime81 = org.joda.time.LocalTime.MIDNIGHT;
        int int82 = localTime80.compareTo((org.joda.time.ReadablePartial) localTime81);
        java.lang.Object obj83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(obj83);
        org.joda.time.DateTime dateTime86 = dateTime84.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.DateTime dateTime89 = dateTime84.withPeriodAdded(readablePeriod87, (int) (byte) 10);
        org.joda.time.DateTime dateTime90 = localTime81.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Chronology chronology91 = dateTime84.getChronology();
        boolean boolean92 = dateTimeFieldType78.isSupported(chronology91);
        int int93 = dateTime77.get(dateTimeFieldType78);
        int int94 = localTime17.indexOf(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "era" + "'", str32, "era");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-124334351999990L) + "'", long36 == (-124334351999990L));
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 11, 100, -1, 100, 4]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 86399 + "'", int55 == 86399);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 11L + "'", long73 == 11L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 593 + "'", int93 == 593);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        int int18 = dateTime7.getEra();
        int int19 = dateTime7.getMillisOfDay();
        org.joda.time.DateTime.Property property20 = dateTime7.secondOfMinute();
        org.joda.time.DateTime dateTime21 = property20.roundHalfEvenCopy();
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(2022);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime27.setWeekyear(3);
        java.lang.Object obj30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfMonth();
        org.joda.time.DateTime dateTime33 = property32.withMaximumValue();
        mutableDateTime27.setMillis((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeField dateTimeField35 = null;
        mutableDateTime27.setRounding(dateTimeField35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime27.add(readableDuration37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime27.era();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime27.add(readableDuration40);
        java.lang.String str42 = mutableDateTime27.toString();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.MIDNIGHT;
        int int46 = localTime44.compareTo((org.joda.time.ReadablePartial) localTime45);
        java.lang.Object obj47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(obj47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime53 = dateTime48.withPeriodAdded(readablePeriod51, (int) (byte) 10);
        org.joda.time.DateTime dateTime54 = localTime45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology55 = dateTime48.getChronology();
        java.lang.String str56 = chronology55.toString();
        java.lang.Object obj57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(obj57);
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime63 = dateTime58.withPeriodAdded(readablePeriod61, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime58.getZone();
        long long67 = dateTimeZone64.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.Chronology chronology69 = chronology55.withZone(dateTimeZone64);
        mutableDateTime27.setChronology(chronology55);
        org.joda.time.DurationField durationField71 = chronology55.years();
        org.joda.time.DateTimeField dateTimeField72 = chronology55.secondOfMinute();
        org.joda.time.DateTime dateTime73 = dateTime25.toDateTime(chronology55);
        org.joda.time.DurationField durationField74 = chronology55.minutes();
        long long79 = chronology55.getDateTimeMillis(50400000, 10, (int) (byte) 10, 7);
        org.joda.time.DateTimeField dateTimeField80 = chronology55.clockhourOfDay();
        org.joda.time.LocalTime localTime81 = org.joda.time.LocalTime.now(chronology55);
        org.joda.time.DurationField durationField82 = chronology55.centuries();
        org.joda.time.DateTimeField dateTimeField83 = chronology55.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((java.lang.Object) property20, chronology55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35601116 + "'", int19 == 35601116);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-28T09:53:21.116Z" + "'", str42, "2022-02-28T09:53:21.116Z");
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str56, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 11L + "'", long67 == 11L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1590408238032000007L + "'", long79 == 1590408238032000007L);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int6 = date5.getYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date5);
        int int8 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.LocalDateTime localDateTime14 = property11.setCopy(59);
        org.joda.time.LocalDateTime localDateTime15 = property11.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDateTime15.get(dateTimeFieldType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(600000, 6018575, 1970, 0, 637, 35519353);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 637 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(11);
        java.util.Date date13 = localDate12.toDate();
        java.lang.String str14 = localDate12.toString();
        org.joda.time.LocalDate localDate16 = localDate12.minusWeeks((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate12.minus(readablePeriod17);
        org.joda.time.LocalDate localDate20 = localDate18.plusDays(53);
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear(32769);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfCentury(66);
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfDay();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1996-10-13" + "'", str14, "-1996-10-13");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime17 = property13.addWrapField(922);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime17.add(readableDuration20, 53);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.MIDNIGHT;
        int int26 = localTime24.compareTo((org.joda.time.ReadablePartial) localTime25);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime28.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        org.joda.time.DateTime dateTime34 = localTime25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology35 = dateTime28.getChronology();
        java.lang.String str36 = chronology35.toString();
        java.lang.Object obj37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime43 = dateTime38.withPeriodAdded(readablePeriod41, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime38.getZone();
        long long47 = dateTimeZone44.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.Chronology chronology49 = chronology35.withZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime51.setWeekyear(3);
        java.lang.Object obj54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(obj54);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.DateTime dateTime60 = dateTime55.withPeriodAdded(readablePeriod58, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime55.getZone();
        mutableDateTime51.setZoneRetainFields(dateTimeZone61);
        java.lang.String str64 = dateTimeZone61.getNameKey(1646041808949L);
        boolean boolean65 = dateTimeZone61.isFixed();
        org.joda.time.Chronology chronology66 = chronology49.withZone(dateTimeZone61);
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.now(chronology66);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(chronology66);
        org.joda.time.DurationField durationField69 = chronology66.centuries();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.secondOfMinute();
        int int72 = mutableDateTime17.get(dateTimeField71);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str36, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 11L + "'", long47 == 11L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        int int4 = dateTime3.getHourOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays((int) '#');
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths(35414);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(15, 5, 1986, 45, 62, 35, 31984319);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 1);
        boolean boolean9 = dateTime6.isAfterNow();
        int int10 = dateTime6.getSecondOfDay();
        org.joda.time.DateTime.Property property11 = dateTime6.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime6.withDurationAdded(readableDuration12, (-41197534));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35601 + "'", int10 == 35601);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getVariant();
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.lang.String str7 = locale3.getDisplayCountry(locale5);
        java.lang.String str8 = locale0.getDisplayName(locale3);
        java.lang.String str9 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u56fd" + "'", str7, "\u4e2d\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str8, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Taiwan" + "'", str9, "Taiwan");
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        org.joda.time.DateMidnight dateMidnight23 = localDate6.toDateMidnight(dateTimeZone22);
        java.util.Date date29 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean32 = localDate30.isSupported(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = localDate30.withEra(0);
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths(11);
        org.joda.time.LocalDate localDate38 = localDate34.withWeekyear(10);
        org.joda.time.LocalDate.Property property39 = localDate34.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        int int41 = localDate6.indexOf(dateTimeFieldType40);
        java.util.Date date42 = localDate6.toDate();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime44.setWeekyear(3);
        java.lang.Object obj47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(obj47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime53 = dateTime48.withPeriodAdded(readablePeriod51, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime48.getZone();
        mutableDateTime44.setZoneRetainFields(dateTimeZone54);
        java.util.TimeZone timeZone56 = dateTimeZone54.toTimeZone();
        java.util.TimeZone timeZone57 = dateTimeZone54.toTimeZone();
        org.joda.time.DateMidnight dateMidnight58 = localDate6.toDateMidnight(dateTimeZone54);
        int int59 = dateMidnight58.getWeekyear();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Nov 13 00:00:00 UTC 1997");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1997 + "'", int59 == 1997);
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        long long15 = dateTimeField13.roundFloor(0L);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime19.setWeekyear(3);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        mutableDateTime19.setMillis((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeField dateTimeField27 = null;
        mutableDateTime19.setRounding(dateTimeField27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime19.add(readableDuration29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.era();
        java.lang.String str32 = property31.getName();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        long long36 = dateTimeField33.addWrapField((long) 10, (int) (short) -1);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.MIDNIGHT;
        int int40 = localTime38.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.LocalTime.Property property41 = localTime38.minuteOfHour();
        org.joda.time.LocalTime localTime42 = property41.getLocalTime();
        org.joda.time.LocalTime localTime43 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime44 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime46 = property41.addCopy(15);
        int[] intArray53 = new int[] { (byte) 1, 11, (short) 100, (-1), (short) 100, 4 };
        int int54 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localTime46, intArray53);
        int int55 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime17, intArray53);
        org.joda.time.DateTime dateTime56 = localTime17.toDateTimeToday();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime58.setWeekyear(3);
        java.lang.Object obj61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(obj61);
        org.joda.time.DateTime dateTime64 = dateTime62.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime67 = dateTime62.withPeriodAdded(readablePeriod65, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime62.getZone();
        mutableDateTime58.setZoneRetainFields(dateTimeZone68);
        java.util.TimeZone timeZone70 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTime dateTime71 = dateTime56.toDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = dateTime56.withMillis(52L);
        org.joda.time.DateTime dateTime75 = dateTime73.withMillisOfDay(232);
        org.joda.time.ReadablePartial readablePartial76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.withFields(readablePartial76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime79 = dateTime77.plus(readablePeriod78);
        org.joda.time.DateTime dateTime80 = dateTime79.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property81 = dateTime79.era();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "era" + "'", str32, "era");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-124334351999990L) + "'", long36 == (-124334351999990L));
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 11, 100, -1, 100, 4]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 86399 + "'", int55 == 86399);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime5 = property4.getLocalTime();
        org.joda.time.LocalTime localTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property4.addNoWrapToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime9 = property4.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        long long12 = dateTimeField10.remainder(5443200000L);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale15.getDisplayCountry(locale17);
        java.lang.String str21 = locale15.getDisplayName();
        java.lang.String str22 = locale14.getDisplayLanguage(locale15);
        java.lang.String str23 = locale15.getDisplayVariant();
        java.lang.String str24 = dateTimeField10.getAsText(697, locale15);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.LocalDateTime localDateTime27 = dateTime26.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withDurationAdded(readableDuration28, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, 2);
        java.lang.Object obj36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(obj36);
        org.joda.time.LocalDateTime localDateTime38 = dateTime37.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withDurationAdded(readableDuration39, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.minusMonths(0);
        org.joda.time.DateTime dateTime44 = localDateTime43.toDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusHours(0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime43.withYearOfEra(19);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withPeriodAdded(readablePeriod51, 8);
        int int54 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusMillis(2019);
        org.joda.time.Chronology chronology57 = localDateTime53.getChronology();
        java.lang.Object obj58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(obj58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.plus(readableDuration60);
        int int62 = dateTime61.getHourOfDay();
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime();
        org.joda.time.DateTime dateTime65 = dateTime63.withCenturyOfEra(17);
        org.joda.time.DateTime dateTime67 = dateTime65.minusSeconds(7);
        org.joda.time.DateTime dateTime68 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime53.dayOfWeek();
        java.util.Date date76 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate77 = org.joda.time.LocalDate.fromDateFields(date76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean79 = localDate77.isSupported(dateTimeFieldType78);
        org.joda.time.LocalDate localDate81 = localDate77.withEra(0);
        org.joda.time.LocalDate localDate83 = localDate81.plusMonths(11);
        java.util.Date date84 = localDate83.toDate();
        org.joda.time.LocalDate.Property property85 = localDate83.dayOfMonth();
        org.joda.time.LocalDate.Property property86 = localDate83.dayOfMonth();
        int[] intArray87 = localDate83.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = dateTimeField10.addWrapPartial((org.joda.time.ReadablePartial) localDateTime53, 35473, intArray87, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35473");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Japanese" + "'", str22, "Japanese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "697" + "'", str24, "697");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1996, 10, 13]");
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(35452018);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears(607);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDate13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology15.getDateTimeMillis(24, 35577430, 275, 68460865);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35577430 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        calendar15.set(5, (-292275054), 0, 1, (int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime23.setWeekyear(3);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.withPeriodAdded(readablePeriod30, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime27.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone33.toTimeZone();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone35, locale36);
        calendar15.setTimeZone(timeZone35);
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone35, locale39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.fromCalendarFields(calendar40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate((-27409552), 35512, 317);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35512 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=-292275054,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=1,MINUTE=100,SECOND=21,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644573201651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=21,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644573201651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=21,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone16);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, (long) 35408);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.set(23);
        org.joda.time.MutableDateTime mutableDateTime26 = property22.add(6018575);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        mutableDateTime26.setDayOfYear((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime26.setMillisOfSecond((-1890));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1890 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35408L + "'", long19 == 35408L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.io.IOException iOException4 = new java.io.IOException("2022-02-28T09:50:38.068Z");
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        java.io.IOException iOException7 = new java.io.IOException();
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException10 = new java.io.IOException("DateTimeField[yearOfCentury]", (java.lang.Throwable) iOException9);
        iOException4.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException12 = new java.io.IOException("99076-10-30 0:00:00", (java.lang.Throwable) iOException4);
        boolean boolean13 = localDateTime1.equals((java.lang.Object) "99076-10-30 0:00:00");
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy(10);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime.Property property16 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime17 = property16.withMaximumValue();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 35467);
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone16);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, (long) 35408);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime21.addWeeks(19);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime21.add(readablePeriod24, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime21.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property27.addWrapField(82860000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35408L + "'", long19 == 35408L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        java.lang.String str16 = localDate6.toString("\u4e2d\u56fd");
        int int17 = localDate6.getYear();
        org.joda.time.LocalDate.Property property18 = localDate6.era();
        org.joda.time.LocalDate localDate19 = property18.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        int int23 = localTime21.compareTo((org.joda.time.ReadablePartial) localTime22);
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.withPeriodAdded(readablePeriod28, (int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localTime22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        int int32 = localTime22.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = localDate19.isEqual((org.joda.time.ReadablePartial) localTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u56fd" + "'", str16, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1997 + "'", int17 == 1997);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.withField(dateTimeFieldType3, 15);
        int int6 = dateTime5.getWeekyear();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.MIDNIGHT;
        int int10 = localTime8.compareTo((org.joda.time.ReadablePartial) localTime9);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.DateTime dateTime18 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology19 = dateTime12.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DurationField durationField21 = chronology19.months();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime5.toMutableDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.weekOfWeekyear();
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.LocalDateTime localDateTime26 = dateTime25.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withDurationAdded(readableDuration27, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.minusMonths(0);
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds(2);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withDurationAdded(readableDuration35, 3);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime40.setWeekyear(3);
        java.lang.Object obj43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(obj43);
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfMonth();
        org.joda.time.DateTime dateTime46 = property45.withMaximumValue();
        mutableDateTime40.setMillis((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeField dateTimeField48 = null;
        mutableDateTime40.setRounding(dateTimeField48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime40.add(readableDuration50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime40.era();
        java.lang.String str53 = property52.getName();
        org.joda.time.DateTimeField dateTimeField54 = property52.getField();
        long long57 = dateTimeField54.addWrapField((long) 10, (int) (short) -1);
        java.util.Locale locale58 = java.util.Locale.US;
        java.lang.String str59 = locale58.toLanguageTag();
        int int60 = dateTimeField54.getMaximumShortTextLength(locale58);
        java.util.Date date66 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int67 = date66.getYear();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.fromDateFields(date66);
        int int69 = localDateTime68.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.plusMinutes(0);
        int[] intArray76 = new int[] { 232, 35417252, 52 };
        int[] intArray78 = dateTimeField54.add((org.joda.time.ReadablePartial) localDateTime71, 11, intArray76, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField23.set((org.joda.time.ReadablePartial) localDateTime37, 35495, intArray78, 6066);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6066 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str20, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "era" + "'", str53, "era");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-124334351999990L) + "'", long57 == (-124334351999990L));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "en-US" + "'", str59, "en-US");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 11 + "'", int69 == 11);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[232, 35417252, 52]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[232, 35417252, 52]");
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T09:51:32.497Z");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        calendar15.roll(1, true);
        java.lang.String str20 = calendar15.getCalendarType();
        int int21 = calendar15.getMinimalDaysInFirstWeek();
        int int22 = calendar15.getFirstDayOfWeek();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale25.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = calendar15.getDisplayName(55320010, 35425, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=21,MILLISECOND=881,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Chinese" + "'", str26, "Chinese");
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-28T09:53:09.971Z");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        java.lang.StringBuffer stringBuffer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer7, (long) 35595757);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(locale6);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime1.getZone();
        long long10 = dateTimeZone7.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime15 = localTime13.withSecondOfMinute((int) ' ');
        org.joda.time.LocalTime.Property property16 = localTime13.minuteOfHour();
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) (byte) 10);
        boolean boolean21 = dateTime20.isEqualNow();
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime23.getZone();
        long long32 = dateTimeZone29.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime33 = dateTime20.toDateTime(dateTimeZone29);
        org.joda.time.LocalTime localTime34 = dateTime20.toLocalTime();
        org.joda.time.DateTime dateTime36 = dateTime20.plus((long) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.MIDNIGHT;
        int int41 = localTime39.compareTo((org.joda.time.ReadablePartial) localTime40);
        java.lang.Object obj42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(obj42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime48 = dateTime43.withPeriodAdded(readablePeriod46, (int) (byte) 10);
        org.joda.time.DateTime dateTime49 = localTime40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology50 = dateTime43.getChronology();
        boolean boolean51 = dateTimeFieldType37.isSupported(chronology50);
        int int52 = dateTime36.get(dateTimeFieldType37);
        int int53 = localTime13.get(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType37.getDurationType();
        org.joda.time.DateTime.Property property55 = dateTime11.property(dateTimeFieldType37);
        org.joda.time.DateTime dateTime57 = dateTime11.withMillis(1646041881534L);
        org.joda.time.DateTime dateTime59 = dateTime11.plusDays(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = dateTime11.withYearOfCentury(35495);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35495 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 11L + "'", long10 == 11L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 11L + "'", long32 == 11L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 593 + "'", int52 == 593);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = localDateTime4.isSupported(dateTimeFieldType6);
        int int8 = localDateTime4.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withHourOfDay(35596540);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35596540 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        int int6 = localTime4.compareTo((org.joda.time.ReadablePartial) localTime5);
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.DateTime dateTime14 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology15 = dateTime8.getChronology();
        java.lang.String str16 = chronology15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType2.getField(chronology15);
        org.joda.time.DurationField durationField19 = chronology15.eras();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.era();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(1122569116411979000L, chronology15);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(1646041906449L, chronology15);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str16, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        java.util.Date date5 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int6 = date5.getDate();
        java.time.Instant instant7 = date5.toInstant();
        java.util.Date date8 = java.util.Date.from(instant7);
        java.util.Date date9 = java.util.Date.from(instant7);
        date9.setMonth(31940670);
        java.lang.String str12 = date9.toString();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Dec 03 04:01:00 UTC 1909");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Dec 03 04:01:00 UTC 1909");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jul 03 04:01:00 UTC 2663631");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Thu Jul 03 04:01:00 UTC 2663631" + "'", str12, "Thu Jul 03 04:01:00 UTC 2663631");
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        java.util.Date date6 = new java.util.Date(8, 3, 50400000, (int) ' ', 14, 19);
        int int7 = date6.getYear();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.MIDNIGHT;
        int int11 = localTime9.compareTo((org.joda.time.ReadablePartial) localTime10);
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        org.joda.time.DateTime dateTime19 = localTime10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        int int24 = dateTime22.getYearOfCentury();
        org.joda.time.TimeOfDay timeOfDay25 = dateTime22.toTimeOfDay();
        org.joda.time.DateTime dateTime27 = dateTime22.minusYears(21);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime29.setWeekyear(3);
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        mutableDateTime29.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeField dateTimeField37 = null;
        mutableDateTime29.setRounding(dateTimeField37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime29.add(readableDuration39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime29.era();
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime29.add(readableDuration42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime29.year();
        boolean boolean45 = mutableDateTime29.isBeforeNow();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime29.millisOfSecond();
        int int47 = dateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime29);
        boolean boolean48 = date6.equals((java.lang.Object) int47);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 05 08:14:19 UTC 139898");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 137998 + "'", int7 == 137998);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 35412);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime4.setWeekyear(3);
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime8.getZone();
        mutableDateTime4.setZoneRetainFields(dateTimeZone14);
        java.util.TimeZone timeZone16 = dateTimeZone14.toTimeZone();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16, locale17);
        java.lang.String str19 = locale17.toLanguageTag();
        java.util.Calendar.Builder builder20 = builder0.setLocale(locale17);
        java.util.Calendar.Builder builder22 = builder0.setLenient(true);
        java.util.Date date28 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int29 = date28.getDate();
        java.time.Instant instant30 = date28.toInstant();
        date28.setYear((-870617750));
        long long33 = date28.getTime();
        int int34 = date28.getDay();
        java.util.Calendar.Builder builder35 = builder22.setInstant(date28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder38 = builder35.setWeekDefinition(35449, 35526);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644573202117,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=22,MILLISECOND=117,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 04 18:26:51 UTC 286073804");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-9027864812554388384L) + "'", long33 == (-9027864812554388384L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime11.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime11.add(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.property(dateTimeFieldType16);
        boolean boolean18 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime11);
        mutableDateTime11.addYears(50);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.DateTime dateTime1 = localTime0.toDateTimeToday();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        int int6 = localTime4.compareTo((org.joda.time.ReadablePartial) localTime5);
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.DateTime dateTime14 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology15 = dateTime8.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.months();
        boolean boolean17 = dateTimeFieldType2.isSupported(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime1.toDateTime(chronology15);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        int int20 = dateTime18.getMillisOfDay();
        int int21 = dateTime18.getDayOfWeek();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35602216 + "'", int20 == 35602216);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int2 = localTime0.getValue(0);
        org.joda.time.LocalTime.Property property3 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime7 = localTime4.withPeriodAdded(readablePeriod5, 24);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        int int5 = localDateTime0.getSecondOfMinute();
        int int6 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusHours(625);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withDayOfWeek(12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) '4', dateTimeZone7);
        int int11 = dateTimeZone7.getOffsetFromLocal((long) 32769);
        org.joda.time.DateTime dateTime12 = dateTime3.withZone(dateTimeZone7);
        int int14 = dateTimeZone7.getOffset((long) 22);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusSeconds(35475);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfCeiling();
        mutableDateTime18.addHours(35411);
        int int21 = mutableDateTime18.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.minuteOfHour();
        int int23 = property22.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime5 = property4.getLocalTime();
        org.joda.time.LocalTime localTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.addCopy(15);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(8);
        int int12 = localTime9.getSecondOfMinute();
        org.joda.time.LocalTime localTime14 = localTime9.plusHours(35526);
        int int15 = localTime9.size();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.era();
        int int18 = localDateTime16.getWeekOfWeekyear();
        int int19 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusSeconds((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.withPeriodAdded(readablePeriod22, 365);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean26 = localDateTime16.isSupported(dateTimeFieldType25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime28 = localTime9.withField(dateTimeFieldType25, 209);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 209 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeZone dateTimeZone20 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.secondOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(10L, chronology23);
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        org.joda.time.LocalDate localDate27 = localDate24.minusMonths(22);
        org.joda.time.LocalDate localDate29 = localDate24.withYearOfCentury(13);
        org.joda.time.LocalDate localDate31 = localDate24.plusWeeks(2019);
        org.joda.time.LocalDate localDate33 = localDate31.withMonthOfYear(1);
        int int34 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDate33);
        long long36 = dateTimeField21.remainder(0L);
        int int37 = dateTimeField21.getMaximumValue();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 86399 + "'", int34 == 86399);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 86399 + "'", int37 == 86399);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear(50400000);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withField(dateTimeFieldType19, 35468);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35468 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573202411,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=22,MILLISECOND=411,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime12.minusYears((int) (short) 1);
        long long16 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTime();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        int int21 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime20);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.DateTime dateTime29 = localTime20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology30 = dateTime23.getChronology();
        java.lang.String str31 = chronology30.toString();
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime33.withPeriodAdded(readablePeriod36, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime33.getZone();
        long long42 = dateTimeZone39.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.Chronology chronology44 = chronology30.withZone(dateTimeZone39);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((java.lang.Object) dateTime12, dateTimeZone39);
        int int47 = dateTimeZone39.getOffsetFromLocal((long) 35412);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = dateTimeZone39.getShortName(1646041805419L, locale49);
        boolean boolean51 = dateTimeZone39.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withZone(dateTimeZone39);
        java.io.Writer writer53 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime55.setWeekyear(3);
        java.lang.Object obj58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(obj58);
        org.joda.time.DateTime dateTime61 = dateTime59.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime64 = dateTime59.withPeriodAdded(readablePeriod62, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime59.getZone();
        mutableDateTime55.setZoneRetainFields(dateTimeZone65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime55.add(readableDuration67, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime55.property(dateTimeFieldType70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime55.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter52.printTo(writer53, (org.joda.time.ReadableInstant) mutableDateTime55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1646042002423L + "'", long16 == 1646042002423L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str31, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 11L + "'", long42 == 11L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 97);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(61200000);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.year();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = localDateTime3.getValue(86399);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 86399");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1644573157698L);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (short) 1);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        java.util.Date date21 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromDateFields(date21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean24 = localDate22.isSupported(dateTimeFieldType23);
        boolean boolean25 = dateTime15.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime27 = dateTime15.plusHours(11);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withChronology(chronology28);
        org.joda.time.DateTime.Property property30 = dateTime27.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime27.minusMillis(13);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear(2122);
        int int35 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property36 = dateTime34.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear(31915440);
        org.joda.time.Chronology chronology9 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter4.withPivotYear(38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withDefaultYear(35442);
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (short) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = dateTimeFormatter11.print((org.joda.time.ReadableInstant) dateTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = localTime1.withSecondOfMinute((int) ' ');
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.getLocalTime();
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfSecond(17);
        org.joda.time.LocalTime localTime10 = localTime6.withMillisOfDay(35446997);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = localTime10.withMinuteOfHour(35446997);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35446997 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime12.setWeekyear(3);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setZone(dateTimeZone22);
        mutableDateTime1.addWeeks((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.millisOfDay();
        int int28 = mutableDateTime1.getHourOfDay();
        int int29 = mutableDateTime1.getDayOfWeek();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Calendar calendar31 = mutableDateTime1.toCalendar(locale30);
        calendar31.clear();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime1.getZone();
        long long10 = dateTimeZone7.convertLocalToUTC((long) 11, true);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays(50400000);
        java.util.Date date19 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int20 = date19.getYear();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromDateFields(date19);
        int int22 = localDateTime21.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusMonths(590);
        int int25 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withYearOfCentury(992);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 992 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 11L + "'", long10 == 11L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = dateTime7.plusHours(11);
        org.joda.time.DateTime.Property property20 = dateTime7.era();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(32972563);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale27 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj28);
        org.joda.time.LocalDateTime localDateTime30 = dateTime29.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withDurationAdded(readableDuration31, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.minusMonths(0);
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusHours(0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minusMinutes((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = localDateTime35.toString("10", locale42);
        java.lang.String str44 = locale27.getDisplayName(locale42);
        java.lang.String str45 = locale25.getDisplayName(locale27);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayName();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale46);
        java.lang.String str49 = locale25.getDisplayScript(locale46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = property20.setCopy("2022-02-28T09:50:54.472Z", locale46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-28T09:50:54.472Z\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals(locale27.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "10" + "'", str43, "10");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "09:50:02.357" + "'", str44, "09:50:02.357");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English (United States)" + "'", str45, "English (United States)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573202806,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=22,MILLISECOND=806,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusSeconds(35408);
        int int19 = localDateTime16.size();
        int int20 = localDateTime16.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573202824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=22,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35602824 + "'", int20 == 35602824);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        calendar15.set(5, (-292275054), 0, 1, (int) (byte) 100);
        java.util.TimeZone timeZone22 = calendar15.getTimeZone();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromCalendarFields(calendar15);
        calendar15.setLenient(false);
        int int26 = calendar15.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-768686946787177072,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=24356251,MONTH=5,WEEK_OF_YEAR=27,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=181,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=40,SECOND=22,MILLISECOND=928,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) 'a');
        int int14 = dateTime13.getCenturyOfEra();
        int int15 = dateTime13.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property11.setCopy(1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(6);
        int int17 = localDate14.getEra();
        int int18 = localDate14.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate14.year();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4);
        mutableDateTime1.setSecondOfDay(4);
        mutableDateTime1.setMillisOfDay(590);
        java.lang.Object obj10 = mutableDateTime1.clone();
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime12.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMonths(0);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withYearOfEra(19);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, 8);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMillis(35411);
        int int31 = localDateTime28.getYear();
        boolean boolean32 = mutableDateTime1.equals((java.lang.Object) int31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime1.weekyear();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayScript();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.lang.String str41 = locale36.getDisplayCountry(locale38);
        java.lang.String str42 = locale36.getDisplayName();
        java.lang.String str43 = locale34.getDisplayName(locale36);
        java.util.Locale locale44 = locale36.stripExtensions();
        int int45 = property33.getMaximumShortTextLength(locale36);
        java.lang.String str46 = property33.getAsString();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "0003-01-01T00:00:00.590Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "0003-01-01T00:00:00.590Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "0003-01-01T00:00:00.590Z");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "German" + "'", str43, "German");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "3" + "'", str46, "3");
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        int int10 = mutableDateTime1.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        mutableDateTime1.addMonths(0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 35412, dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.minuteOfDay();
        boolean boolean22 = mutableDateTime19.isAfter((-768686946787158160L));
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime2.setWeekyear(3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(10L, dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        long long20 = dateTimeZone18.previousTransition(1644573012275L);
        int int22 = dateTimeZone18.getOffsetFromLocal((long) 99);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644573012275L + "'", long20 == 1644573012275L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(4, (int) (byte) 100, (int) (short) 0);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder7 = builder4.setLocale(locale5);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale11 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.LocalDateTime localDateTime14 = dateTime13.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDurationAdded(readableDuration15, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusMonths(0);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusHours(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMinutes((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = localDateTime19.toString("10", locale26);
        java.lang.String str28 = locale11.getDisplayName(locale26);
        java.lang.String str29 = locale9.getDisplayName(locale11);
        java.util.Calendar.Builder builder30 = builder4.setLocale(locale9);
        java.lang.String str31 = locale9.getDisplayName();
        java.util.Set<java.lang.String> strSet32 = locale9.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals(locale11.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "09:50:02.357" + "'", str28, "09:50:02.357");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (United States)" + "'", str29, "English (United States)");
        org.junit.Assert.assertNotNull(builder30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English (United States)" + "'", str31, "English (United States)");
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Collection<java.lang.String> strCollection22 = null;
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "10", "java.io.IOException: hi!", "10", "-1997-11-13T09:50:03.940Z", "-1997-11-13T09:50:03.940Z" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList38, filteringMode40);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection22, filteringMode40);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection22, filteringMode43);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode40.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode43.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList44);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(292278993, 287);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int6 = date5.getYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date5);
        int int8 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        int int11 = property9.getMinimumValue();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        long long15 = dateTimeField13.roundFloor(0L);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime19.setWeekyear(3);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        mutableDateTime19.setMillis((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeField dateTimeField27 = null;
        mutableDateTime19.setRounding(dateTimeField27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime19.add(readableDuration29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.era();
        java.lang.String str32 = property31.getName();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        long long36 = dateTimeField33.addWrapField((long) 10, (int) (short) -1);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.MIDNIGHT;
        int int40 = localTime38.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.LocalTime.Property property41 = localTime38.minuteOfHour();
        org.joda.time.LocalTime localTime42 = property41.getLocalTime();
        org.joda.time.LocalTime localTime43 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime44 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime46 = property41.addCopy(15);
        int[] intArray53 = new int[] { (byte) 1, 11, (short) 100, (-1), (short) 100, 4 };
        int int54 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localTime46, intArray53);
        int int55 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime17, intArray53);
        int int56 = localTime17.getHourOfDay();
        org.joda.time.DateTimeField[] dateTimeFieldArray57 = localTime17.getFields();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "era" + "'", str32, "era");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-124334351999990L) + "'", long36 == (-124334351999990L));
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 11, 100, -1, 100, 4]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 86399 + "'", int55 == 86399);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray57);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 35412);
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("09:50:19.500");
        java.util.Calendar.Builder builder5 = builder2.setLocale(locale4);
        java.util.Calendar.Builder builder9 = builder5.setWeekDate(0, 100, 1997);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder12 = builder9.set(35505, 86399);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = localTime1.withSecondOfMinute((int) ' ');
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.getLocalTime();
        org.joda.time.LocalTime.Property property7 = localTime6.secondOfMinute();
        java.util.Locale locale12 = new java.util.Locale("hi!", "", "");
        java.lang.String str13 = locale12.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = property7.setCopy("2022-02-28T09:53:07.397Z", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-28T09:53:07.397Z\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.add((long) 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        int int23 = localTime21.compareTo((org.joda.time.ReadablePartial) localTime22);
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.withPeriodAdded(readablePeriod28, (int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localTime22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology32 = dateTime25.getChronology();
        boolean boolean33 = dateTimeFieldType19.isSupported(chronology32);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(chronology32);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology32);
        mutableDateTime1.setChronology(chronology32);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(35417252, 1439, 35459607, 137998, 72, 35, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 137998 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfWeek();
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime7.minusYears(0);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime12.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 593 + "'", int10 == 593);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime5 = dateTime2.withField(dateTimeFieldType3, (int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded(readableDuration6, (int) (byte) 10);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.MIDNIGHT;
        int int12 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime11);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.withPeriodAdded(readablePeriod17, (int) (byte) 10);
        org.joda.time.DateTime dateTime20 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property21 = dateTime20.weekOfWeekyear();
        org.joda.time.DateTime dateTime23 = property21.addWrapFieldToCopy(10);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        boolean boolean25 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property26 = dateTime8.minuteOfDay();
        org.joda.time.DateTime.Property property27 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime29 = dateTime8.withMinuteOfHour(21);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.MIDNIGHT;
        int int33 = localTime31.compareTo((org.joda.time.ReadablePartial) localTime32);
        java.lang.Object obj34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(obj34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        org.joda.time.DateTime dateTime41 = localTime32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property42 = dateTime41.weekOfWeekyear();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        int int46 = dateTime44.getYearOfCentury();
        org.joda.time.DateTime dateTime48 = dateTime44.plus((long) (short) 10);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime52.setWeekyear(3);
        java.lang.Object obj55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj55);
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfMonth();
        org.joda.time.DateTime dateTime58 = property57.withMaximumValue();
        mutableDateTime52.setMillis((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeField dateTimeField60 = null;
        mutableDateTime52.setRounding(dateTimeField60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        mutableDateTime52.add(readableDuration62);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime52.era();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime52.millisOfDay();
        org.joda.time.Chronology chronology66 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.clockhourOfHalfday();
        org.joda.time.DurationField durationField69 = chronology66.weekyears();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        long long73 = chronology66.add(readablePeriod70, (-72083542597019000L), (int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        long long77 = chronology66.add(readablePeriod74, (long) '4', 50400000);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(1646041841840L, chronology66);
        boolean boolean79 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime81 = dateTime48.minusYears(35496);
        org.joda.time.DateTime dateTime82 = dateTime48.toDateTime();
        boolean boolean83 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-04-22T00:00:00.010Z" + "'", str49, "2022-04-22T00:00:00.010Z");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-72083542597019000L) + "'", long73 == (-72083542597019000L));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(0, 1, 4, 2, 5, 0, 23);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        long long18 = dateTimeZone15.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime20.setWeekyear(3);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone30);
        long long33 = dateTimeZone15.getMillisKeepLocal(dateTimeZone30, (long) 35408);
        java.lang.String str35 = dateTimeZone15.getNameKey((long) 22);
        org.joda.time.DateTime dateTime36 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.MIDNIGHT;
        int int40 = localTime38.compareTo((org.joda.time.ReadablePartial) localTime39);
        java.lang.Object obj41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(obj41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime47 = dateTime42.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        org.joda.time.DateTime dateTime48 = localTime39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology49 = dateTime42.getChronology();
        java.lang.String str50 = chronology49.toString();
        org.joda.time.DateTime dateTime51 = dateTime36.withChronology(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(275, (int) (short) 10, 35417252, 600000, 31965441, 74, 14, chronology49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 600000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35408L + "'", long33 == 35408L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str50, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        int int10 = mutableDateTime1.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.era();
        int int15 = localDateTime13.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMonths(14);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean21 = localDateTime13.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime1.isSupported(dateTimeFieldType20);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.copy();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.months();
        mutableDateTime23.add(durationFieldType24, 925);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.setDayOfWeek(903);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 903 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withEra(1);
        org.joda.time.LocalDate localDate18 = localDate14.minusYears(12);
        org.joda.time.LocalDate localDate20 = localDate18.plusYears((int) (short) 0);
        org.joda.time.LocalDate localDate22 = localDate18.minusWeeks(0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.joda.time.LocalDate.Property property25 = localDate22.year();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.days();
        boolean boolean27 = localDate22.isSupported(durationFieldType26);
        java.util.Date date28 = localDate22.toDate();
        int int29 = date28.getSeconds();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 UTC 1986");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.withField(dateTimeFieldType3, 15);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime8 = dateTime5.withFieldAdded(durationFieldType6, 35408);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) 35418);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime8.withMinuteOfHour(35418);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35418 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime12.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMonths(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekOfWeekyear();
        boolean boolean20 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withYear(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withMonthOfYear(35530860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35530860 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setMinimalDaysInFirstWeek((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.MIDNIGHT;
        int int7 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime6);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.withPeriodAdded(readablePeriod12, (int) (byte) 10);
        org.joda.time.DateTime dateTime15 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology16 = dateTime9.getChronology();
        boolean boolean17 = dateTimeFieldType3.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.era();
        org.joda.time.DurationField durationField19 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology16.seconds();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) calendar0, chronology16);
        int int23 = mutableDateTime22.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.dayOfMonth();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573203868,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=23,MILLISECOND=868,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(35474169, 72, 35565, 35533, 35587467);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35533 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        boolean boolean8 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(10L, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime3.withFields((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(6);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readablePeriod19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readableDuration21);
        java.util.Date date28 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean31 = localDate29.isSupported(dateTimeFieldType30);
        boolean boolean32 = dateTime22.isSupported(dateTimeFieldType30);
        int int33 = dateTime22.getEra();
        int int34 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property35 = dateTime22.secondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime22.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime5 = dateTime2.withField(dateTimeFieldType3, (int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths(591);
        org.joda.time.DateTime.Property property10 = dateTime7.weekyear();
        java.lang.String str11 = property10.getAsText();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970" + "'", str11, "1970");
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime12 = dateTime9.withField(dateTimeFieldType10, (int) (byte) 10);
        int int13 = localDateTime0.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime0.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime0.withMillisOfSecond(35582);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35582 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(11);
        org.joda.time.LocalDate localDate14 = localDate10.withWeekyear(10);
        org.joda.time.LocalDate.Property property15 = localDate10.yearOfCentury();
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) (byte) 10);
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) (byte) 10);
        boolean boolean24 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(10L, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime19.withFields((org.joda.time.ReadablePartial) localDate27);
        int int29 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate31 = localDate27.withWeekyear(2);
        org.joda.time.Interval interval32 = localDate31.toInterval();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.era();
        int int35 = localDateTime33.getWeekOfWeekyear();
        int int36 = localDateTime33.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.minusSeconds((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime33.withPeriodAdded(readablePeriod39, 365);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean43 = localDateTime33.isSupported(dateTimeFieldType42);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = localDate31.get(dateTimeFieldType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime12.setWeekyear(3);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setZone(dateTimeZone22);
        mutableDateTime1.addWeeks((int) (byte) -1);
        mutableDateTime1.setSecondOfDay(2);
        int int29 = mutableDateTime1.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime1.weekOfWeekyear();
        int int31 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime1.yearOfEra();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 21 + "'", int31 == 21);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(1644573600000L, dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime9.setWeekyear(3);
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeField dateTimeField17 = null;
        mutableDateTime9.setRounding(dateTimeField17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime20.setWeekyear(3);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone30);
        mutableDateTime9.setZone(dateTimeZone30);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = dateTimeZone30.getShortName((long) 3, locale34);
        java.lang.String str36 = locale34.getDisplayName();
        java.lang.String str37 = dateTimeZone5.getShortName((-124334351999990L), locale34);
        java.util.Locale.Builder builder38 = builder1.setLocale(locale34);
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale.Builder builder41 = builder38.setLanguage("");
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder41.setLanguageTag("java.util.GregorianCalendar[time=1644573085619,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=25,MILLISECOND=619,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: java.util.GregorianCalendar[time=1644573085619,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=25,MILLISECOND=619,ZONE_OFFSET=0,DST_OFFSET=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japanese (Japan)" + "'", str36, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.232" + "'", str37, "+00:00:00.232");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.withField(dateTimeFieldType3, 15);
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTimeISO();
        long long7 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime1.minusWeeks(35584);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644573204287L + "'", long7 == 1644573204287L);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1646012418575L);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.DateTime dateTime4 = property3.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime5 = property3.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 35414);
        int int2 = dateTime1.getYearOfEra();
        org.joda.time.Instant instant3 = dateTime1.toInstant();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(instant3);
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(10L, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate5 = localDate2.minusMonths(22);
        int int6 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate8 = localDate2.withYear((-1));
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear(50);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.minuteOfHour();
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) (byte) 10);
        boolean boolean22 = dateTime21.isEqualNow();
        java.util.GregorianCalendar gregorianCalendar23 = dateTime21.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime25.setWeekyear(3);
        java.lang.Object obj28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime29.getZone();
        mutableDateTime25.setZoneRetainFields(dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime25.add(readableDuration37, (int) (byte) 10);
        org.joda.time.DateTime dateTime40 = mutableDateTime25.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        boolean boolean43 = gregorianCalendar23.before((java.lang.Object) dateTime42);
        org.joda.time.DateTime dateTime44 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean46 = dateTime42.isSupported(dateTimeFieldType45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = localDate8.withField(dateTimeFieldType45, (-31964));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -31964 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar23);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withYearOfEra(19);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 8);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMillis(35411);
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYear((int) (short) 0);
        int int27 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime29.setWeekyear(3);
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime33.withPeriodAdded(readablePeriod36, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime33.getZone();
        mutableDateTime29.setZoneRetainFields(dateTimeZone39);
        java.util.TimeZone timeZone41 = dateTimeZone39.toTimeZone();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone41, locale42);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromCalendarFields(calendar43);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.fromCalendarFields(calendar43);
        calendar43.clear();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.fromCalendarFields(calendar43);
        boolean boolean48 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withWeekyear(35443833);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusSeconds(21);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.dayOfMonth();
        int int55 = localDateTime50.size();
        org.joda.time.LocalDateTime.Property property56 = localDateTime50.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35443833 + "'", int51 == 35443833);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        int int13 = localDate12.getWeekyear();
        org.joda.time.LocalDate.Property property14 = localDate12.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        boolean boolean16 = localDate12.isSupported(durationFieldType15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime18.setWeekyear(3);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeField dateTimeField26 = null;
        mutableDateTime18.setRounding(dateTimeField26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime18.add(readableDuration28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime18.era();
        java.util.Date date36 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.fromDateFields(date36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean39 = localDate37.isSupported(dateTimeFieldType38);
        org.joda.time.LocalDate localDate41 = localDate37.withEra(0);
        org.joda.time.LocalDate localDate43 = localDate41.plusMonths(11);
        org.joda.time.LocalDate localDate45 = localDate41.withWeekyear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean47 = localDate45.isSupported(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType46.getDurationType();
        mutableDateTime18.add(durationFieldType48, 999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate52 = localDate12.withFieldAdded(durationFieldType48, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1997 + "'", int13 == 1997);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationFieldType48);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property11.setCopy(1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(6);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfEra();
        org.joda.time.LocalDate localDate18 = property17.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate19 = property17.roundHalfCeilingCopy();
        int int20 = localDate19.getDayOfYear();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((-1154632437986000L), chronology1);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(4, (int) (byte) 100, (int) (short) 0);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder7 = builder4.setLocale(locale5);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale11 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.LocalDateTime localDateTime14 = dateTime13.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDurationAdded(readableDuration15, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusMonths(0);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusHours(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMinutes((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = localDateTime19.toString("10", locale26);
        java.lang.String str28 = locale11.getDisplayName(locale26);
        java.lang.String str29 = locale9.getDisplayName(locale11);
        java.util.Calendar.Builder builder30 = builder4.setLocale(locale9);
        java.util.Calendar.Builder builder34 = builder4.setDate(42, 209, 98);
        java.util.Calendar.Builder builder38 = builder4.setWeekDate(97, 2122, 35489);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder41 = builder38.setWeekDefinition(50400000, 35568);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals(locale11.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "09:50:02.357" + "'", str28, "09:50:02.357");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (United States)" + "'", str29, "English (United States)");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int6 = date5.getYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis((-27409550));
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusSeconds(11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds((-27409550));
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekOfWeekyear();
        java.lang.String str17 = property16.getAsShortText();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "39" + "'", str17, "39");
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime1.add(readableDuration14);
        java.lang.String str16 = mutableDateTime1.toString();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime1.add(readablePeriod17);
        mutableDateTime1.setMillisOfSecond(14);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        java.util.Date date29 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean32 = localDate30.isSupported(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = localDate30.withEra(0);
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths(11);
        org.joda.time.LocalDate.Property property37 = localDate36.weekyear();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime40.setWeekyear(3);
        java.lang.Object obj43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(obj43);
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfMonth();
        org.joda.time.DateTime dateTime46 = property45.withMaximumValue();
        mutableDateTime40.setMillis((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeField dateTimeField48 = null;
        mutableDateTime40.setRounding(dateTimeField48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime40.add(readableDuration50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime40.era();
        java.lang.String str53 = property52.getName();
        org.joda.time.DateTimeField dateTimeField54 = property52.getField();
        long long57 = dateTimeField54.addWrapField((long) 10, (int) (short) -1);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.MIDNIGHT;
        int int61 = localTime59.compareTo((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.LocalTime.Property property62 = localTime59.minuteOfHour();
        org.joda.time.LocalTime localTime63 = property62.getLocalTime();
        org.joda.time.LocalTime localTime64 = property62.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime65 = property62.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime67 = property62.addCopy(15);
        int[] intArray74 = new int[] { (byte) 1, 11, (short) 100, (-1), (short) 100, 4 };
        int int75 = dateTimeField54.getMinimumValue((org.joda.time.ReadablePartial) localTime67, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray77 = dateTimeField23.addWrapPartial((org.joda.time.ReadablePartial) localDate36, 19, intArray74, 35525406);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-28T09:53:24.605Z" + "'", str16, "2022-02-28T09:53:24.605Z");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "era" + "'", str53, "era");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-124334351999990L) + "'", long57 == (-124334351999990L));
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 11, 100, -1, 100, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(2022);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime10.setWeekyear(3);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfMonth();
        org.joda.time.DateTime dateTime16 = property15.withMaximumValue();
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeField dateTimeField18 = null;
        mutableDateTime10.setRounding(dateTimeField18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime10.add(readableDuration20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime10.era();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime10.add(readableDuration23);
        java.lang.String str25 = mutableDateTime10.toString();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.MIDNIGHT;
        int int29 = localTime27.compareTo((org.joda.time.ReadablePartial) localTime28);
        java.lang.Object obj30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.DateTime dateTime37 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology38 = dateTime31.getChronology();
        java.lang.String str39 = chronology38.toString();
        java.lang.Object obj40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(obj40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime46 = dateTime41.withPeriodAdded(readablePeriod44, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime41.getZone();
        long long50 = dateTimeZone47.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.Chronology chronology52 = chronology38.withZone(dateTimeZone47);
        mutableDateTime10.setChronology(chronology38);
        org.joda.time.DurationField durationField54 = chronology38.years();
        org.joda.time.DateTimeField dateTimeField55 = chronology38.secondOfMinute();
        org.joda.time.DateTime dateTime56 = dateTime8.toDateTime(chronology38);
        org.joda.time.DurationField durationField57 = chronology38.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(1970, 2019, 35443, 1969, 35496110, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-28T09:53:24.670Z" + "'", str25, "2022-02-28T09:53:24.670Z");
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str39, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 11L + "'", long50 == 11L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        int int5 = dateTimeFormatter4.getDefaultYear();
        java.lang.Integer int6 = dateTimeFormatter4.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter4.getZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(35548, 35462, 35471912, 35585556, 0, 343, 35474169);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35585556 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:51:21.686Z");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("13.11.1900 23:01:00");
        java.util.Calendar calendar4 = mutableDateTime1.toCalendar(locale3);
        calendar4.setTimeInMillis((long) 10295379);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar4.getActualMaximum((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=10295379,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=51,SECOND=35,MILLISECOND=379,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        java.lang.Object obj3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(obj3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(2022);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime8.setWeekyear(3);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeField dateTimeField16 = null;
        mutableDateTime8.setRounding(dateTimeField16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime8.add(readableDuration18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime8.era();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime8.add(readableDuration21);
        java.lang.String str23 = mutableDateTime8.toString();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.MIDNIGHT;
        int int27 = localTime25.compareTo((org.joda.time.ReadablePartial) localTime26);
        java.lang.Object obj28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        org.joda.time.DateTime dateTime35 = localTime26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology36 = dateTime29.getChronology();
        java.lang.String str37 = chronology36.toString();
        java.lang.Object obj38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime44 = dateTime39.withPeriodAdded(readablePeriod42, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime39.getZone();
        long long48 = dateTimeZone45.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.Chronology chronology50 = chronology36.withZone(dateTimeZone45);
        mutableDateTime8.setChronology(chronology36);
        org.joda.time.DurationField durationField52 = chronology36.years();
        org.joda.time.DateTimeField dateTimeField53 = chronology36.secondOfMinute();
        org.joda.time.DateTime dateTime54 = dateTime6.toDateTime(chronology36);
        org.joda.time.DurationField durationField55 = chronology36.minutes();
        long long60 = chronology36.getDateTimeMillis(50400000, 10, (int) (byte) 10, 7);
        org.joda.time.DateTimeField dateTimeField61 = chronology36.dayOfWeek();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(35478696, 24, (-41197534), chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-28T09:53:24.807Z" + "'", str23, "2022-02-28T09:53:24.807Z");
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str37, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 11L + "'", long48 == 11L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1590408238032000007L + "'", long60 == 1590408238032000007L);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfCentury();
        long long14 = property13.remainder();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = property13.getAsText(locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = property13.setCopy(35440);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35440 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 27302400000L + "'", long14 == 27302400000L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "97" + "'", str16, "97");
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        calendar15.set(5, (-292275054), 0, 1, (int) (byte) 100);
        java.util.TimeZone timeZone22 = calendar15.getTimeZone();
        boolean boolean23 = calendar15.isWeekDateSupported();
        java.time.Instant instant24 = calendar15.toInstant();
        java.util.Date date25 = java.util.Date.from(instant24);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-768686946787175112,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=24356251,MONTH=5,WEEK_OF_YEAR=27,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=181,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=40,SECOND=24,MILLISECOND=888,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Sun Jun 30 02:40:24 UTC 24356251");
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setMinimalDaysInFirstWeek((int) (short) 1);
        boolean boolean4 = calendar0.isSet(0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573204908,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=24,MILLISECOND=908,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.MIDNIGHT;
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTime dateTime12 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology13 = dateTime6.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(11L, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyear();
        long long18 = dateTimeField16.roundHalfCeiling((long) 232);
        boolean boolean20 = dateTimeField16.isLeap((long) (short) 1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-259200000L) + "'", long18 == (-259200000L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((int) (byte) 10);
        java.util.Date date18 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int19 = date18.getYear();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.fromDateFields(date18);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMillis((-27409550));
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = localDateTime24.get(dateTimeFieldType27);
        int int29 = localDateTime7.get(dateTimeFieldType27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime7.withCenturyOfEra(31966475);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31966475 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date6 = new java.util.Date(12, (int) (byte) 10, (int) (short) 0, 0, (int) (short) -1);
        calendar0.setTime(date6);
        int int8 = calendar0.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar0.getMinimum(35476);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35476");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1804118460000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=304,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 30 23:59:00 UTC 1912");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = dateTimeZone10.getName(1646041809840L, locale12);
        java.util.Calendar calendar16 = dateTime1.toCalendar(locale12);
        // The following exception was thrown during execution in test generation
        try {
            calendar16.roll((-27409551), 35512);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.232" + "'", str15, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644573205104,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=25,MILLISECOND=104,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1646012418575L);
        int int2 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime localTime4 = localTime1.withMillisOfSecond(116);
        java.util.Date date10 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate localDate15 = localDate11.withEra(0);
        org.joda.time.LocalDate localDate17 = localDate11.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property18 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate21 = localDate19.withEra(1);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = durationFieldType22.isSupported(chronology23);
        java.lang.String str25 = durationFieldType22.toString();
        boolean boolean26 = localDate21.isSupported(durationFieldType22);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(100L);
        int int29 = localDate21.compareTo((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localDate28.getFieldTypes();
        org.joda.time.LocalDate localDate32 = localDate28.plusDays(51);
        java.lang.Object obj33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(obj33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readablePeriod37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.plus(readableDuration39);
        java.util.Date date46 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.fromDateFields(date46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean49 = localDate47.isSupported(dateTimeFieldType48);
        boolean boolean50 = dateTime40.isSupported(dateTimeFieldType48);
        org.joda.time.DateTime dateTime52 = dateTime40.plusHours(11);
        org.joda.time.DateTime.Property property53 = dateTime52.centuryOfEra();
        java.util.Date date59 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate60 = org.joda.time.LocalDate.fromDateFields(date59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean62 = localDate60.isSupported(dateTimeFieldType61);
        org.joda.time.LocalDate localDate64 = localDate60.withEra(0);
        org.joda.time.LocalDate.Property property65 = localDate64.year();
        org.joda.time.LocalDate localDate66 = property65.withMaximumValue();
        int int67 = property65.getMinimumValueOverall();
        org.joda.time.LocalDate localDate68 = property65.withMinimumValue();
        int int69 = property53.compareTo((org.joda.time.ReadablePartial) localDate68);
        int int70 = localDate28.compareTo((org.joda.time.ReadablePartial) localDate68);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = localTime1.compareTo((org.joda.time.ReadablePartial) localDate68);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6018575 + "'", int2 == 6018575);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "eras" + "'", str25, "eras");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-292275054) + "'", int67 == (-292275054));
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes(2022);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime5.setWeekyear(3);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeField dateTimeField13 = null;
        mutableDateTime5.setRounding(dateTimeField13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime5.add(readableDuration15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime5.era();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime5.add(readableDuration18);
        java.lang.String str20 = mutableDateTime5.toString();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.MIDNIGHT;
        int int24 = localTime22.compareTo((org.joda.time.ReadablePartial) localTime23);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.withPeriodAdded(readablePeriod29, (int) (byte) 10);
        org.joda.time.DateTime dateTime32 = localTime23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology33 = dateTime26.getChronology();
        java.lang.String str34 = chronology33.toString();
        java.lang.Object obj35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime36.getZone();
        long long45 = dateTimeZone42.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.Chronology chronology47 = chronology33.withZone(dateTimeZone42);
        mutableDateTime5.setChronology(chronology33);
        org.joda.time.DurationField durationField49 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField50 = chronology33.secondOfMinute();
        org.joda.time.DateTime dateTime51 = dateTime3.toDateTime(chronology33);
        org.joda.time.DurationField durationField52 = chronology33.minutes();
        long long57 = chronology33.getDateTimeMillis(50400000, 10, (int) (byte) 10, 7);
        org.joda.time.DateTimeField dateTimeField58 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology33.halfdayOfDay();
        int int61 = dateTimeField59.getMaximumValue(30939794112000L);
        java.lang.Object obj62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(obj62);
        org.joda.time.LocalDateTime localDateTime64 = dateTime63.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusHours(999);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.year();
        java.util.Date date74 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate75 = org.joda.time.LocalDate.fromDateFields(date74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean77 = localDate75.isSupported(dateTimeFieldType76);
        org.joda.time.LocalDate localDate79 = localDate75.withEra(0);
        org.joda.time.LocalDate localDate81 = localDate79.plusMonths(11);
        java.util.Date date82 = localDate81.toDate();
        org.joda.time.LocalDate localDate84 = localDate81.minusWeeks((int) 'a');
        int int85 = localDate81.getYearOfEra();
        int[] intArray86 = localDate81.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = dateTimeField59.set((org.joda.time.ReadablePartial) localDateTime66, 2019, intArray86, 35513770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35513770 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-28T09:53:25.157Z" + "'", str20, "2022-02-28T09:53:25.157Z");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str34, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 11L + "'", long45 == 11L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1590408238032000007L + "'", long57 == 1590408238032000007L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1997 + "'", int85 == 1997);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1996, 10, 13]");
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTime.Property property15 = dateTime14.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withPeriodAdded(readablePeriod16, 97);
        org.joda.time.DateTime.Property property19 = dateTime14.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime14.withDate(6018575, 82860000, 32972065);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82860000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(4, (int) (byte) 100, (int) (short) 0);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder7 = builder4.setLocale(locale5);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale11 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.LocalDateTime localDateTime14 = dateTime13.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDurationAdded(readableDuration15, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusMonths(0);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusHours(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMinutes((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = localDateTime19.toString("10", locale26);
        java.lang.String str28 = locale11.getDisplayName(locale26);
        java.lang.String str29 = locale9.getDisplayName(locale11);
        java.util.Calendar.Builder builder30 = builder4.setLocale(locale9);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime32.setWeekyear(3);
        java.lang.Object obj35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime36.getZone();
        mutableDateTime32.setZoneRetainFields(dateTimeZone42);
        java.util.TimeZone timeZone44 = dateTimeZone42.toTimeZone();
        java.util.TimeZone timeZone45 = dateTimeZone42.toTimeZone();
        java.util.Locale locale47 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(obj48);
        org.joda.time.LocalDateTime localDateTime50 = dateTime49.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withDurationAdded(readableDuration51, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.minusMonths(0);
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusHours(0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.minusMinutes((int) (byte) 10);
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = localDateTime55.toString("10", locale62);
        java.lang.String str64 = locale47.getDisplayName(locale62);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone45, locale47);
        java.util.Calendar.Builder builder66 = builder30.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder68 = builder30.setLenient(false);
        int[] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder70 = builder68.setFields(intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale11.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "09:50:02.357" + "'", str28, "09:50:02.357");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (Taiwan)" + "'", str29, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertEquals(locale47.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "10" + "'", str63, "10");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "09:50:02.357" + "'", str64, "09:50:02.357");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644573205214,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=25,MILLISECOND=214,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        int int6 = localTime4.compareTo((org.joda.time.ReadablePartial) localTime5);
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.DateTime dateTime14 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology15 = dateTime8.getChronology();
        boolean boolean16 = dateTimeFieldType2.isSupported(chronology15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = chronology15.withUTC();
        org.joda.time.DateTime dateTime20 = dateTime1.withChronology(chronology15);
        java.lang.String str22 = dateTime1.toString("09:50:14.993");
        org.joda.time.DateTime dateTime24 = dateTime1.minusYears(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "09:50:14.993" + "'", str22, "09:50:14.993");
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        java.util.Locale locale16 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMonths(0);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.minusMinutes((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = localDateTime24.toString("10", locale31);
        java.lang.String str33 = locale16.getDisplayName(locale31);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar34.clear();
        calendar34.clear();
        int int38 = calendar34.get(3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertEquals(locale16.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10" + "'", str32, "10");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "09:50:02.357" + "'", str33, "09:50:02.357");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.minuteOfDay();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Calendar calendar4 = dateTime0.toCalendar(locale2);
        java.util.Date date10 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate localDate15 = localDate11.withEra(0);
        org.joda.time.LocalDate localDate17 = localDate11.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property18 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate21 = localDate19.withEra(1);
        org.joda.time.LocalDate localDate23 = localDate19.minusYears(12);
        java.util.Date date29 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean32 = localDate30.isSupported(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = localDate30.withEra(0);
        org.joda.time.DateTime dateTime35 = localDate34.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.Interval interval38 = localDate34.toInterval(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        long long42 = dateTimeZone39.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime44.setWeekyear(3);
        java.lang.Object obj47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(obj47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime53 = dateTime48.withPeriodAdded(readablePeriod51, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime48.getZone();
        mutableDateTime44.setZoneRetainFields(dateTimeZone54);
        long long57 = dateTimeZone39.getMillisKeepLocal(dateTimeZone54, (long) 35408);
        java.lang.String str59 = dateTimeZone54.getShortName((long) (byte) 0);
        org.joda.time.DateTime dateTime60 = localDate34.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight61 = localDate19.toDateMidnight(dateTimeZone54);
        int int62 = localDate19.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean64 = localDate19.isSupported(dateTimeFieldType63);
        org.joda.time.DateTime.Property property65 = dateTime0.property(dateTimeFieldType63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = property65.setCopy(35471912);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35471912 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644573205376,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=25,MILLISECOND=376,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date10.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 35408L + "'", long57 == 35408L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        java.lang.String str13 = chronology12.toString();
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.dayOfMonth();
        int int18 = dateTimeField16.getMaximumValue((long) '4');
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str13, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str14, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.plusHours(23);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime4.plus(readablePeriod5);
        org.joda.time.LocalTime.Property property7 = localTime4.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0f);
        java.util.Date date15 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromDateFields(date15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = localDate16.withEra(0);
        org.joda.time.LocalDate.Property property21 = localDate20.year();
        org.joda.time.LocalDate localDate22 = property21.withMaximumValue();
        int int23 = property21.getMinimumValueOverall();
        org.joda.time.LocalDate localDate24 = property21.getLocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfWeek();
        org.joda.time.LocalDate localDate27 = property25.addToCopy(35476);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = property7.compareTo((org.joda.time.ReadablePartial) localDate27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-292275054) + "'", int23 == (-292275054));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime17 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.yearOfEra();
        boolean boolean20 = mutableDateTime17.isAfter((-1948L));
        mutableDateTime17.setSecondOfDay(26);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) 10);
        org.joda.time.DateTime dateTime16 = mutableDateTime1.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        int int18 = dateTime16.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime20.setWeekyear(3);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        org.joda.time.DateTime dateTime26 = property25.withMaximumValue();
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.minusYears((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime26.toYearMonthDay();
        org.joda.time.DateTime.Property property31 = dateTime26.dayOfMonth();
        org.joda.time.DateTime dateTime32 = property31.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime32.getZone();
        org.joda.time.DateTime dateTime34 = dateTime16.withZoneRetainFields(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.getShortName((long) 6);
        long long40 = dateTimeZone33.convertLocalToUTC((-61848022015415L), false, (long) 35471867);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86399 + "'", int18 == 86399);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-61848022015415L) + "'", long40 == (-61848022015415L));
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.set(6);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.MIDNIGHT;
        int int16 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime15);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.withPeriodAdded(readablePeriod21, (int) (byte) 10);
        org.joda.time.DateTime dateTime24 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology25 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DurationField durationField28 = chronology25.months();
        java.lang.String str29 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.yearOfCentury();
        mutableDateTime12.setChronology(chronology25);
        mutableDateTime12.addDays(86399999);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str29, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology15.weekyears();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology15.add(readablePeriod19, (-72083542597019000L), (int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology15.add(readablePeriod23, (long) '4', 50400000);
        org.joda.time.DurationField durationField27 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField28 = chronology15.millisOfDay();
        java.lang.Object obj29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj29);
        org.joda.time.LocalDateTime localDateTime31 = dateTime30.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear(50);
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.getDefault(category38);
        java.util.Locale locale40 = java.util.Locale.getDefault(category38);
        java.util.Locale locale41 = java.util.Locale.getDefault(category38);
        java.lang.String str42 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime33, (int) (byte) -1, locale41);
        java.lang.String str43 = locale41.getDisplayLanguage();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-72083542597019000L) + "'", long22 == (-72083542597019000L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587" + "'", str43, "\u4e2d\u6587");
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds(2);
        int int11 = localDateTime10.getDayOfWeek();
        java.lang.String str12 = localDateTime10.toString();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withPeriodAdded(readablePeriod15, 9);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:53:27.559" + "'", str12, "2022-02-11T09:53:27.559");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) 10);
        int int16 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime18.setWeekyear(3);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeField dateTimeField26 = null;
        mutableDateTime18.setRounding(dateTimeField26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime18.add(readableDuration28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime18.era();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime18.add(readableDuration31);
        java.lang.String str33 = mutableDateTime18.toString();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.MIDNIGHT;
        int int37 = localTime35.compareTo((org.joda.time.ReadablePartial) localTime36);
        java.lang.Object obj38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime44 = dateTime39.withPeriodAdded(readablePeriod42, (int) (byte) 10);
        org.joda.time.DateTime dateTime45 = localTime36.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology46 = dateTime39.getChronology();
        java.lang.String str47 = chronology46.toString();
        java.lang.Object obj48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(obj48);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime54 = dateTime49.withPeriodAdded(readablePeriod52, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime49.getZone();
        long long58 = dateTimeZone55.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.Chronology chronology60 = chronology46.withZone(dateTimeZone55);
        mutableDateTime18.setChronology(chronology46);
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime63.setWeekyear(3);
        java.lang.Object obj66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(obj66);
        org.joda.time.DateTime.Property property68 = dateTime67.dayOfMonth();
        org.joda.time.DateTime dateTime69 = property68.withMaximumValue();
        mutableDateTime63.setMillis((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeField dateTimeField71 = null;
        mutableDateTime63.setRounding(dateTimeField71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        mutableDateTime63.add(readableDuration73);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime63.era();
        java.lang.String str76 = property75.getName();
        org.joda.time.DateTimeField dateTimeField77 = property75.getField();
        long long80 = dateTimeField77.addWrapField((long) 10, (int) (short) -1);
        mutableDateTime18.setRounding(dateTimeField77);
        java.lang.String str82 = mutableDateTime18.toString();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime18.year();
        boolean boolean84 = mutableDateTime1.equals((java.lang.Object) property83);
        mutableDateTime1.addWeeks(35443);
        mutableDateTime1.add((long) 364);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(359);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 359 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-28T09:53:25.570Z" + "'", str33, "2022-02-28T09:53:25.570Z");
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str47, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 11L + "'", long58 == 11L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "era" + "'", str76, "era");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-124334351999990L) + "'", long80 == (-124334351999990L));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str82, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        int int3 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.centuryOfEra();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        java.util.Date date18 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean21 = localDate19.isSupported(dateTimeFieldType20);
        boolean boolean22 = dateTime12.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime dateTime24 = dateTime12.plusHours(11);
        org.joda.time.DateTime.Property property25 = dateTime12.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = property25.getAsShortText(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.String str34 = locale29.getDisplayCountry(locale31);
        java.lang.String str35 = locale29.getDisplayName();
        java.lang.String str36 = locale29.getDisplayScript();
        java.lang.String str37 = locale26.getDisplayScript(locale29);
        java.lang.String str38 = locale29.getISO3Language();
        java.util.Locale.Builder builder39 = builder2.setLocale(locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder39.setUnicodeLocaleKeyword("2022-02-11T09:51:52.383Z", "2022-02-11T09:52:28.499Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:51:52.383Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c" + "'", str28, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronology();
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime12.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = dateTimeZone21.getName(1646041809840L, locale23);
        java.util.Calendar calendar27 = dateTime12.toCalendar(locale23);
        int int28 = property9.getMaximumTextLength(locale23);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime30.setWeekyear(3);
        java.lang.Object obj33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(obj33);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        org.joda.time.DateTime dateTime36 = property35.withMaximumValue();
        mutableDateTime30.setMillis((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeField dateTimeField38 = null;
        mutableDateTime30.setRounding(dateTimeField38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime30.add(readableDuration40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime30.era();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime30.millisOfDay();
        org.joda.time.Chronology chronology44 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.weekOfWeekyear();
        java.util.Locale locale51 = java.util.Locale.UK;
        java.lang.String str52 = dateTimeField49.getAsShortText(1646006400000L, locale51);
        java.lang.String str53 = locale23.getDisplayLanguage(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter3.withLocale(locale23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withPivotYear((java.lang.Integer) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter54.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.parse("13-nov-1997 23.01.00", dateTimeFormatter54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.232" + "'", str26, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573205809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=25,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "9" + "'", str52, "9");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "German" + "'", str53, "German");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        calendar15.set(5, (-292275054), 0, 1, (int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime23.setWeekyear(3);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.withPeriodAdded(readablePeriod30, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime27.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone33.toTimeZone();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone35, locale36);
        calendar15.setTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long42 = dateTimeZone39.adjustOffset((long) 45, true);
        java.lang.String str44 = dateTimeZone39.getName((long) (-2021));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=-292275054,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=1,MINUTE=100,SECOND=25,MILLISECOND=863,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644573205863,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=25,MILLISECOND=863,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 45L + "'", long42 == 45L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        java.lang.String str13 = chronology12.toString();
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime15.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.Chronology chronology26 = chronology12.withZone(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime28.setWeekyear(3);
        java.lang.Object obj31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime32.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime32.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone38);
        java.lang.String str41 = dateTimeZone38.getNameKey(1646041808949L);
        boolean boolean42 = dateTimeZone38.isFixed();
        org.joda.time.Chronology chronology43 = chronology26.withZone(dateTimeZone38);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.secondOfDay();
        java.lang.Object obj48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(obj48);
        org.joda.time.LocalDateTime localDateTime50 = dateTime49.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime54 = property53.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime55 = property53.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.MIDNIGHT;
        int int60 = localTime58.compareTo((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.LocalTime.Property property61 = localTime58.minuteOfHour();
        org.joda.time.LocalTime localTime62 = property61.getLocalTime();
        org.joda.time.LocalTime localTime63 = property61.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime64 = property61.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime66 = property61.addCopy(15);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale68.getDisplayScript();
        org.joda.time.LocalTime localTime70 = property61.setCopy("10", locale68);
        org.joda.time.LocalTime localTime71 = property61.getLocalTime();
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.MIDNIGHT;
        int int74 = localTime72.getValue(0);
        org.joda.time.LocalTime.Property property75 = localTime72.millisOfDay();
        org.joda.time.LocalTime localTime76 = property75.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField77 = property75.getField();
        long long79 = dateTimeField77.roundHalfCeiling(1646041871208L);
        boolean boolean80 = localTime71.equals((java.lang.Object) long79);
        int[] intArray81 = localTime71.getValues();
        java.util.Locale locale84 = new java.util.Locale("09:50:02.357");
        java.lang.String str85 = locale84.getDisplayCountry();
        java.lang.String str86 = locale84.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField47.set((org.joda.time.ReadablePartial) localDateTime55, 617, intArray81, "09:51:59.760", locale84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"09:51:59.760\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str13, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 11L + "'", long24 == 11L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1646041871208L + "'", long79 == 1646041871208L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 10]");
        org.junit.Assert.assertEquals(locale84.toString(), "09:50:02.357");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            calendar2.roll(68460865, 31858915);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573205940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=25,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) '4', dateTimeZone1);
        mutableDateTime3.addDays(35452018);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        int int15 = localDate6.size();
        int int16 = localDate6.size();
        org.joda.time.LocalDate.Property property17 = localDate6.era();
        int int18 = localDate6.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate6.withPeriodAdded(readablePeriod19, 823);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 46 + "'", int18 == 46);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear(31915440);
        org.joda.time.Chronology chronology9 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter4.withPivotYear(38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTimeFormatter4.parseDateTime("zh");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        int int15 = property13.getMinimumValue();
        java.util.Locale locale20 = new java.util.Locale("09:50:02.357", "", "09:50:02.357");
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale21.getDisplayVariant();
        java.lang.String str23 = locale21.getCountry();
        java.lang.String str24 = locale20.getDisplayVariant(locale21);
        java.lang.String str25 = locale21.getDisplayCountry();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = property13.setCopy("13 Nov 1997 23:01:00 GMT", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"13 Nov 1997 23:01:00 GMT\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "09:50:02.357__09:50:02.357");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CN" + "'", str23, "CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "09:50:02.357" + "'", str24, "09:50:02.357");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u570b" + "'", str25, "\u4e2d\u570b");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573206147,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=26,MILLISECOND=147,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime12.setWeekyear(3);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setZone(dateTimeZone22);
        mutableDateTime1.addWeeks((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.millisOfDay();
        java.lang.String str28 = mutableDateTime1.toString();
        mutableDateTime1.add(24341L);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime32.setWeekyear(3);
        java.lang.Object obj35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfMonth();
        org.joda.time.DateTime dateTime38 = property37.withMaximumValue();
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeField dateTimeField40 = null;
        mutableDateTime32.setRounding(dateTimeField40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime32.add(readableDuration42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime32.era();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime32.millisOfDay();
        org.joda.time.Chronology chronology46 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.millisOfSecond();
        mutableDateTime1.setChronology(chronology46);
        org.joda.time.DurationField durationField51 = chronology46.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology46.monthOfYear();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = dateTimeField52.getAsShortText(35484, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35484");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-21T09:53:26.160Z" + "'", str28, "2022-02-21T09:53:26.160Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.withPeriodAdded(readablePeriod4, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime1.getZone();
        long long10 = dateTimeZone7.convertLocalToUTC((long) 11, true);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays(50400000);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withCenturyOfEra(317);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(1L);
        boolean boolean20 = property16.equals((java.lang.Object) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField23 = localDateTime19.getField(823);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 823");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 11L + "'", long10 == 11L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("gregory");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        int int8 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.Chronology chronology10 = dateTimeFormatter7.getChronology();
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime16.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = dateTimeZone25.getName(1646041809840L, locale27);
        java.util.Calendar calendar31 = dateTime16.toCalendar(locale27);
        int int32 = property13.getMaximumTextLength(locale27);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime34.setWeekyear(3);
        java.lang.Object obj37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        mutableDateTime34.setMillis((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeField dateTimeField42 = null;
        mutableDateTime34.setRounding(dateTimeField42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime34.add(readableDuration44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime34.era();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime34.millisOfDay();
        org.joda.time.Chronology chronology48 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.millisOfSecond();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.weekOfWeekyear();
        java.util.Locale locale55 = java.util.Locale.UK;
        java.lang.String str56 = dateTimeField53.getAsShortText(1646006400000L, locale55);
        java.lang.String str57 = locale27.getDisplayLanguage(locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter7.withLocale(locale27);
        java.util.Locale locale59 = dateTimeFormatter58.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter58.withPivotYear((java.lang.Integer) 61200000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter58.withPivotYear(137998);
        boolean boolean64 = languageRange1.equals((java.lang.Object) 137998);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.232" + "'", str30, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644573206312,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=26,MILLISECOND=312,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "9" + "'", str56, "9");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "German" + "'", str57, "German");
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime12.setWeekyear(3);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setZone(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfEven();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(42);
        int int31 = localDateTime28.getDayOfWeek();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone16);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, (long) 35408);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime21.addWeeks(19);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime21.add(readablePeriod24, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime28.setWeekyear(3);
        java.lang.Object obj31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj31);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime34 = property33.withMaximumValue();
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeField dateTimeField36 = null;
        mutableDateTime28.setRounding(dateTimeField36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime28.add(readableDuration38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime28.add(readableDuration40, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime28.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.set((int) (byte) 10);
        boolean boolean46 = mutableDateTime21.isAfter((org.joda.time.ReadableInstant) mutableDateTime45);
        int int47 = mutableDateTime45.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35408L + "'", long19 == 35408L);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) '4', dateTimeZone1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property11.setCopy(1);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfMonth();
        org.joda.time.LocalDate localDate16 = property15.roundHalfCeilingCopy();
        int int17 = property15.getMaximumValue();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime2.setWeekyear(3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(1646041809840L, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime18.setWeekyear(3);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime18.minuteOfHour();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime18.dayOfMonth();
        mutableDateTime18.setMonthOfYear(8);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime16.add(readableDuration31, 1997);
        java.lang.Object obj34 = mutableDateTime16.clone();
        java.util.Date date40 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.fromDateFields(date40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean43 = localDate41.isSupported(dateTimeFieldType42);
        org.joda.time.LocalDate localDate45 = localDate41.withEra(0);
        org.joda.time.LocalDate.Property property46 = localDate45.year();
        org.joda.time.LocalDate localDate47 = property46.withMaximumValue();
        int int48 = property46.getMinimumValueOverall();
        org.joda.time.LocalDate localDate50 = property46.addWrapFieldToCopy(42);
        org.joda.time.LocalDate.Property property51 = localDate50.dayOfYear();
        org.joda.time.LocalDate.Property property52 = localDate50.dayOfMonth();
        boolean boolean53 = mutableDateTime16.equals((java.lang.Object) property52);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setDayOfWeek(68460865);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68460865 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "2022-08-28T09:50:09.840Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "2022-08-28T09:50:09.840Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "2022-08-28T09:50:09.840Z");
        org.junit.Assert.assertEquals(date40.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-292275054) + "'", int48 == (-292275054));
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int1 = localTime0.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime.Property property3 = localTime0.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime5 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalTime localTime9 = localTime7.plusSeconds(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property11 = localTime7.property(dateTimeFieldType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        java.util.Date date6 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate localDate11 = localDate7.withEra(0);
        org.joda.time.LocalDate localDate13 = localDate7.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property14 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate17 = localDate15.withEra(1);
        org.joda.time.LocalDate localDate19 = localDate15.minusYears(12);
        java.util.Date date25 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean28 = localDate26.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDate localDate30 = localDate26.withEra(0);
        org.joda.time.DateTime dateTime31 = localDate30.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.Interval interval34 = localDate30.toInterval(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        long long38 = dateTimeZone35.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime40.setWeekyear(3);
        java.lang.Object obj43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(obj43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime44.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime44.getZone();
        mutableDateTime40.setZoneRetainFields(dateTimeZone50);
        long long53 = dateTimeZone35.getMillisKeepLocal(dateTimeZone50, (long) 35408);
        java.lang.String str55 = dateTimeZone50.getShortName((long) (byte) 0);
        org.joda.time.DateTime dateTime56 = localDate30.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight57 = localDate15.toDateMidnight(dateTimeZone50);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(1644573021143L, dateTimeZone50);
        long long61 = dateTimeZone50.convertLocalToUTC((long) 35555, false);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35408L + "'", long53 == 35408L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 35555L + "'", long61 == 35555L);
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(2019, (-292275055), 48, 365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2019 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.MIDNIGHT;
        int int5 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime4);
        java.lang.Object obj6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.withPeriodAdded(readablePeriod10, (int) (byte) 10);
        org.joda.time.DateTime dateTime13 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int17 = dateTime15.get(dateTimeFieldType16);
        boolean boolean18 = dateTime1.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime1.getZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate12.withDayOfWeek(68460865);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68460865 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime12.setWeekyear(3);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setZone(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.secondOfDay();
        int int26 = property25.get();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime29.setWeekyear(3);
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        mutableDateTime29.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeField dateTimeField37 = null;
        mutableDateTime29.setRounding(dateTimeField37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime29.add(readableDuration39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime29.era();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime29.millisOfDay();
        org.joda.time.Chronology chronology43 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        java.lang.String str46 = dateTimeField44.getAsShortText(0L);
        int int47 = mutableDateTime27.get(dateTimeField44);
        org.joda.time.Instant instant48 = mutableDateTime27.toInstant();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35606 + "'", int26 == 35606);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "70" + "'", str46, "70");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertNotNull(instant48);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.DateTime dateTime4 = dateTime1.plusDays(11);
        org.joda.time.DateTime.Property property5 = dateTime4.era();
        org.joda.time.DateTime dateTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = property5.roundFloorCopy();
        long long8 = property5.remainder();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 63781120406735L + "'", long8 == 63781120406735L);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime5 = property4.getLocalTime();
        org.joda.time.LocalTime localTime7 = property4.addCopy((long) 1);
        org.joda.time.LocalTime localTime8 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property4.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        org.joda.time.LocalDate localDate16 = localDate6.withYear(23);
        org.joda.time.Chronology chronology17 = localDate6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.DurationField durationField19 = chronology17.weeks();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = chronology12.getDateTimeMillis(1646041850727L, 62, 35595757, 32972065, 607);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds(2);
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours((-27409550));
        int int14 = localDateTime13.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 13 + "'", int14 == 13);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = dateTime7.plusHours(11);
        org.joda.time.DateTime.Property property20 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime22 = dateTime7.withYearOfEra(2);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfDay(35411);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.withPeriodAdded(readablePeriod29, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime26.getZone();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime22.toMutableDateTime(dateTimeZone32);
        int int34 = mutableDateTime33.getRoundingMode();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime33.add(readableDuration35);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setExtension('a', "");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguageTag("09:51:20.758");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 09:51:20.758 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime10 = dateTime7.minusYears((int) (short) 1);
        long long11 = dateTime7.getMillis();
        java.util.Date date12 = dateTime7.toDate();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime18 = dateTime15.withField(dateTimeFieldType16, (int) (byte) 10);
        boolean boolean19 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime18.withMillisOfDay((int) (byte) 100);
        org.joda.time.DateTime.Property property22 = dateTime18.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime18.withTime(31991081, 35601, 72, 35425);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31991081 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1646042006983L + "'", long11 == 1646042006983L);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 28 09:53:26 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        int int17 = calendar15.getLeastMaximum(15);
        java.util.Date date23 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        date23.setYear((int) (short) 0);
        int int27 = date23.getHours();
        int int28 = date23.getHours();
        calendar15.setTime(date23);
        calendar15.add(0, (-27409550));
        java.lang.String str33 = calendar15.getCalendarType();
        java.util.Date date39 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.fromDateFields(date39);
        date39.setYear((int) (short) 0);
        int int43 = date39.getHours();
        int int44 = date39.getHours();
        java.time.Instant instant45 = date39.toInstant();
        int int46 = date39.getTimezoneOffset();
        calendar15.setTime(date39);
        calendar15.setTimeInMillis((long) (short) 100);
        calendar15.set(0, (int) (short) 0);
        java.lang.String str53 = calendar15.toString();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50400000 + "'", int17 == 50400000);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "gregory" + "'", str33, "gregory");
        org.junit.Assert.assertEquals(date39.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 23 + "'", int43 == 23);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 23 + "'", int44 == 23);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str53, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("1970-01-01T00:00:35.414Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(35418, 145, 34833000, 35411, 31961678, 35492, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35411 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plus(readableDuration7);
        int int9 = localDateTime0.getMinuteOfHour();
        org.joda.time.Chronology chronology10 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((-1955));
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean17 = localTime15.isSupported(dateTimeFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withField(dateTimeFieldType16, 637);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 637 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1986, (-105033), 35540, 53, 35511);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundFloor();
        int int11 = mutableDateTime10.getRoundingMode();
        mutableDateTime10.addSeconds(1902);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setDate(96, 35530754, 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35530754 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int1 = localTime0.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime.Property property3 = localTime0.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime5 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property3.addWrapFieldToCopy(97);
        org.joda.time.LocalTime localTime8 = property3.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localTime8.getValue(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isParser();
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime8.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getScript();
        java.lang.String str22 = dateTimeZone17.getName(1646041809840L, locale19);
        java.util.Calendar calendar23 = dateTime8.toCalendar(locale19);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.lang.String str29 = locale24.getDisplayCountry(locale26);
        java.lang.String str30 = locale19.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter4.withLocale(locale24);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeFormatter31.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime34.setWeekyear(3);
        java.lang.Object obj37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        mutableDateTime34.setMillis((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeField dateTimeField42 = null;
        mutableDateTime34.setRounding(dateTimeField42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime34.add(readableDuration44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime34.era();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime34.add(readableDuration47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime34.year();
        boolean boolean50 = mutableDateTime34.isBeforeNow();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime34.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = dateTimeFormatter31.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime34, "2022-02-28T09:51:46.705Z", 59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.232" + "'", str22, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644573207252,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=27,MILLISECOND=252,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Germany" + "'", str30, "Germany");
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime1.copy();
        int int13 = mutableDateTime12.getYearOfCentury();
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.plus(readableDuration20);
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime12.add(readablePeriod23);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime3 = property1.roundHalfFloorCopy();
        java.lang.String str4 = property1.getAsShortText();
        org.joda.time.LocalDateTime localDateTime5 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(14);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(35423);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u897f\u5143" + "'", str4, "\u897f\u5143");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfYear((int) (short) 1);
        int int8 = localDateTime7.getEra();
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = localDateTime7.isBefore(readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        int int17 = calendar15.getLeastMaximum(15);
        java.util.Date date23 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        date23.setYear((int) (short) 0);
        int int27 = date23.getHours();
        int int28 = date23.getHours();
        calendar15.setTime(date23);
        calendar15.add(0, (-27409550));
        java.lang.String str33 = calendar15.getCalendarType();
        int int34 = calendar15.getMinimalDaysInFirstWeek();
        calendar15.setFirstDayOfWeek((int) 'x');
        java.util.Date date42 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int43 = date42.getDate();
        int int44 = date42.getMonth();
        date42.setMinutes(999);
        calendar15.setTime(date42);
        java.lang.String str48 = date42.toLocaleString();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1895887260000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=120,minimalDaysInFirstWeek=1,ERA=1,YEAR=1909,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=337,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=39,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50400000 + "'", int17 == 50400000);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "gregory" + "'", str33, "gregory");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Dec 03 20:39:00 UTC 1909");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 11 + "'", int44 == 11);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u4e0b\u5348 08:39:00" + "'", str48, "\u4e0b\u5348 08:39:00");
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(1644573600000L, dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime9.setWeekyear(3);
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeField dateTimeField17 = null;
        mutableDateTime9.setRounding(dateTimeField17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime20.setWeekyear(3);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone30);
        mutableDateTime9.setZone(dateTimeZone30);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = dateTimeZone30.getShortName((long) 3, locale34);
        java.lang.String str36 = locale34.getDisplayName();
        java.lang.String str37 = dateTimeZone5.getShortName((-124334351999990L), locale34);
        java.util.Locale.Builder builder38 = builder1.setLocale(locale34);
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale.Builder builder41 = builder38.setLanguage("");
        java.util.Locale.Builder builder42 = builder38.clearExtensions();
        java.util.Locale.Builder builder43 = builder38.clearExtensions();
        java.util.Locale.Builder builder45 = builder43.setLanguageTag("weeks");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder47 = builder45.setRegion("+00:00:32.770");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: +00:00:32.770 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str36, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.232" + "'", str37, "+00:00:00.232");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(35425, 12, 97, 1998, 35524);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1998 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime12.setWeekyear(3);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime18 = property17.withMaximumValue();
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeField dateTimeField20 = null;
        mutableDateTime12.setRounding(dateTimeField20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime12.add(readableDuration22);
        mutableDateTime12.setSecondOfMinute((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime12.setZoneRetainFields(dateTimeZone26);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(dateTimeZone26);
        mutableDateTime1.setZone(dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime1.add(readableDuration30, 1902);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int6 = date5.getYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date5);
        date5.setHours((int) (byte) 100);
        java.lang.String str10 = date5.toLocaleString();
        org.junit.Assert.assertEquals(date5.toString(), "Mon Nov 17 04:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e0a\u5348 04:01:00" + "'", str10, "\u4e0a\u5348 04:01:00");
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (short) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property8.addWrapFieldToCopy(2022);
        org.joda.time.DateTime dateTime12 = dateTime10.plusWeeks(0);
        org.joda.time.DateTime.Property property13 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addWrapFieldToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        long long20 = dateTimeZone17.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime22.setWeekyear(3);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.withPeriodAdded(readablePeriod29, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime26.getZone();
        mutableDateTime22.setZoneRetainFields(dateTimeZone32);
        long long35 = dateTimeZone17.getMillisKeepLocal(dateTimeZone32, (long) 35408);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 4, dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime37.addWeeks(19);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.era();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime37);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.set((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45, (int) (byte) -1);
        int int48 = property13.compareTo((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime.Property property50 = mutableDateTime44.property(dateTimeFieldType49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35408L + "'", long35 == 35408L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime2.setWeekyear(3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(10L, dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(97);
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        int int13 = localDate12.getWeekyear();
        org.joda.time.LocalDate.Property property14 = localDate12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate12.plus(readablePeriod15);
        org.joda.time.LocalDate.Property property17 = localDate16.centuryOfEra();
        java.util.Date date23 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean26 = localDate24.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDate localDate28 = localDate24.withEra(0);
        org.joda.time.LocalDate localDate30 = localDate28.plusMonths(11);
        java.util.Date date31 = localDate30.toDate();
        java.lang.String str32 = localDate30.toString();
        org.joda.time.LocalDate localDate34 = localDate30.minusWeeks((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate36 = localDate30.minus(readablePeriod35);
        java.util.Date date42 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.fromDateFields(date42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean45 = localDate43.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDate localDate47 = localDate43.withEra(0);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths(11);
        org.joda.time.LocalDate localDate51 = localDate47.withWeekyear(10);
        org.joda.time.LocalDate.Property property52 = localDate47.yearOfCentury();
        java.lang.Object obj53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(obj53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfEra((int) (byte) 10);
        java.lang.Object obj57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(obj57);
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfEra((int) (byte) 10);
        boolean boolean61 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(10L, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime56.withFields((org.joda.time.ReadablePartial) localDate64);
        int int66 = localDate47.compareTo((org.joda.time.ReadablePartial) localDate64);
        org.joda.time.LocalDate localDate68 = localDate64.withWeekyear(2);
        int int69 = localDate36.compareTo((org.joda.time.ReadablePartial) localDate64);
        int int70 = localDate16.compareTo((org.joda.time.ReadablePartial) localDate36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = localDate16.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1997 + "'", int13 == 1997);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1996-10-13" + "'", str32, "-1996-10-13");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusWeeks(6);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeField dateTimeField14 = null;
        mutableDateTime6.setRounding(dateTimeField14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime6.add(readableDuration16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime6.era();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime6.millisOfDay();
        org.joda.time.Chronology chronology20 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        boolean boolean23 = localDateTime0.equals((java.lang.Object) dateTimeField22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime0.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMillis(32772);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.era();
        int int32 = localDateTime30.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMonths(14);
        org.joda.time.LocalDateTime.Property property37 = localDateTime30.secondOfMinute();
        int int38 = localDateTime30.getDayOfMonth();
        int int39 = property28.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        java.util.Locale locale2 = new java.util.Locale("2022-02-28T09:52:54.969Z", "2022-02-28T09:53:17.528Z");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-28t09:52:54.969z_2022-02-28T09:53:17.528Z");
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        java.lang.Object obj3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(obj3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(1);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks(97);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        java.lang.String str12 = dateTime8.toString();
        org.joda.time.DateTime.Property property13 = dateTime8.weekyear();
        boolean boolean14 = dateTime2.equals((java.lang.Object) property13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime2.getZone();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T01:53:27.844Z" + "'", str12, "2022-02-11T01:53:27.844Z");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(4, (int) (byte) 100, (int) (short) 0);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder7 = builder4.setLocale(locale5);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale11 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.LocalDateTime localDateTime14 = dateTime13.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDurationAdded(readableDuration15, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusMonths(0);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusHours(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMinutes((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = localDateTime19.toString("10", locale26);
        java.lang.String str28 = locale11.getDisplayName(locale26);
        java.lang.String str29 = locale9.getDisplayName(locale11);
        java.util.Calendar.Builder builder30 = builder4.setLocale(locale9);
        java.util.Calendar.Builder builder34 = builder4.setTimeOfDay(44, 637, 1956);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder36 = builder34.setCalendarType("37");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 37");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale11.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "09:50:02.357" + "'", str28, "09:50:02.357");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (Taiwan)" + "'", str29, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, 2);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime12.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMonths(0);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withYearOfEra(19);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, 8);
        int int29 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMillis(2019);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusDays(50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime28.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.LocalTime.Property property22 = localTime21.secondOfMinute();
        org.joda.time.LocalTime localTime23 = property22.getLocalTime();
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.plus(readablePeriod29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.plus(readableDuration31);
        java.util.Date date38 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromDateFields(date38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean41 = localDate39.isSupported(dateTimeFieldType40);
        boolean boolean42 = dateTime32.isSupported(dateTimeFieldType40);
        org.joda.time.DateTime dateTime44 = dateTime32.plusHours(11);
        org.joda.time.DateTime.Property property45 = dateTime32.yearOfEra();
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.lang.String str47 = property45.getAsShortText(locale46);
        java.lang.String str48 = locale46.getDisplayCountry();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale51.getDisplayCountry(locale52);
        java.lang.String str54 = locale49.getDisplayCountry(locale51);
        java.lang.String str55 = locale49.getDisplayName();
        java.lang.String str56 = locale49.getDisplayScript();
        java.lang.String str57 = locale46.getDisplayScript(locale49);
        java.lang.String str58 = locale46.toLanguageTag();
        java.util.Locale locale59 = locale46.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime60 = property22.setCopy("2022-02-28T09:51:08.352Z", locale46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-28T09:51:08.352Z\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "10" + "'", str47, "10");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u65e5\u672c" + "'", str48, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ja-JP" + "'", str58, "ja-JP");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setRegion("en-US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: en-US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(722, 50400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 50400000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(116, 1120, 43, 35505, 35435247, 364, 35585, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35505 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("it-IT", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.lang.String str10 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet20);
        java.lang.String str22 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Collection<java.lang.String> strCollection26 = null;
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList32);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "10", "java.io.IOException: hi!", "10", "-1997-11-13T09:50:03.940Z", "-1997-11-13T09:50:03.940Z" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList42, filteringMode44);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strCollection26, filteringMode44);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strCollection26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = java.util.Locale.lookupTag(languageRangeList2, strCollection26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode44.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int6 = date5.getYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date5);
        int int8 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property9.setCopy(10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addToCopy(0);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) (short) 1);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale8.getDisplayCountry(locale10);
        java.lang.String str14 = locale8.getDisplayName();
        java.lang.String str15 = locale7.getDisplayLanguage(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withDefaultYear(145);
        java.lang.Appendable appendable20 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("2022-02-28T09:50:27.482Z");
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 35414);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withPeriodAdded(readablePeriod25, 23);
        mutableDateTime22.setMillis((org.joda.time.ReadableInstant) dateTime24);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(appendable20, (org.joda.time.ReadableInstant) dateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese" + "'", str15, "Japanese");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy(10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        int int16 = dateTime14.getYearOfCentury();
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) (short) 10);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime22.setWeekyear(3);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        mutableDateTime22.setMillis((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeField dateTimeField30 = null;
        mutableDateTime22.setRounding(dateTimeField30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime22.add(readableDuration32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime22.era();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime22.millisOfDay();
        org.joda.time.Chronology chronology36 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfHalfday();
        org.joda.time.DurationField durationField39 = chronology36.weekyears();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = chronology36.add(readablePeriod40, (-72083542597019000L), (int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        long long47 = chronology36.add(readablePeriod44, (long) '4', 50400000);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(1646041841840L, chronology36);
        boolean boolean49 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime18.minusYears(35496);
        org.joda.time.DateTime dateTime52 = dateTime18.toDateTime();
        int int53 = dateTime52.getEra();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-04-22T00:00:00.010Z" + "'", str19, "2022-04-22T00:00:00.010Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-72083542597019000L) + "'", long43 == (-72083542597019000L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 52L + "'", long47 == 52L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int2 = localTime0.getValue(0);
        org.joda.time.LocalTime.Property property3 = localTime0.millisOfDay();
        org.joda.time.Chronology chronology4 = localTime0.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        java.util.Date date3 = new java.util.Date(6, 10, 10);
        int int4 = date3.getDay();
        java.lang.String str5 = date3.toLocaleString();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.MIDNIGHT;
        int int8 = localTime6.getValue(0);
        org.joda.time.LocalTime.Property property9 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addWrapFieldToCopy(3);
        boolean boolean12 = date3.equals((java.lang.Object) property9);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 10 00:00:00 UTC 1906");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u4e0a\u5348 12:00:00" + "'", str5, "\u4e0a\u5348 12:00:00");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(4, (int) (byte) 100, (int) (short) 0);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder7 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder11 = builder4.setDate(44, 44, 10268924);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime13.setWeekyear(3);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime19 = property18.withMaximumValue();
        mutableDateTime13.setMillis((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeField dateTimeField21 = null;
        mutableDateTime13.setRounding(dateTimeField21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime13.add(readableDuration23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime13.era();
        java.lang.String str26 = property25.getName();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        long long30 = dateTimeField27.addWrapField((long) 10, (int) (short) -1);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.MIDNIGHT;
        int int34 = localTime32.compareTo((org.joda.time.ReadablePartial) localTime33);
        org.joda.time.LocalTime.Property property35 = localTime32.minuteOfHour();
        org.joda.time.LocalTime localTime36 = property35.getLocalTime();
        org.joda.time.LocalTime localTime37 = property35.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime38 = property35.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime40 = property35.addCopy(15);
        int[] intArray47 = new int[] { (byte) 1, 11, (short) 100, (-1), (short) 100, 4 };
        int int48 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localTime40, intArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder49 = builder11.setFields(intArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "era" + "'", str26, "era");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-124334351999990L) + "'", long30 == (-124334351999990L));
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 11, 100, -1, 100, 4]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-28T09:50:38.068Z");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.io.IOException iOException4 = new java.io.IOException();
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException7 = new java.io.IOException("DateTimeField[yearOfCentury]", (java.lang.Throwable) iOException6);
        iOException1.addSuppressed((java.lang.Throwable) iOException6);
        java.lang.String str9 = iOException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.io.IOException: 2022-02-28T09:50:38.068Z" + "'", str9, "java.io.IOException: 2022-02-28T09:50:38.068Z");
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime12.setWeekyear(3);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setZone(dateTimeZone22);
        mutableDateTime1.addWeeks((int) (byte) -1);
        mutableDateTime1.setSecondOfDay(2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime1);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime31.withYearOfCentury(340);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 340 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.withPeriodAdded(readablePeriod3, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateTime1.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime1.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTime3.withDayOfWeek(35533);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35533 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.util.Date date19 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.fromDateFields(date19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean22 = localDate20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = localDate20.withEra(0);
        org.joda.time.LocalDate localDate26 = localDate20.plusMonths((int) (byte) -1);
        int int27 = localDate20.getWeekyear();
        org.joda.time.LocalDate.Property property28 = localDate20.dayOfMonth();
        org.joda.time.LocalDate localDate30 = property28.setCopy(17);
        org.joda.time.LocalDate localDate31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property32 = localDate31.era();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime35.setWeekyear(3);
        java.lang.Object obj38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj38);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        mutableDateTime35.setMillis((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeField dateTimeField43 = null;
        mutableDateTime35.setRounding(dateTimeField43);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime46.setWeekyear(3);
        java.lang.Object obj49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(obj49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime55 = dateTime50.withPeriodAdded(readablePeriod53, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime50.getZone();
        mutableDateTime46.setZoneRetainFields(dateTimeZone56);
        mutableDateTime35.setZone(dateTimeZone56);
        mutableDateTime35.addWeeks((int) (byte) -1);
        mutableDateTime35.setSecondOfDay(2);
        int int63 = mutableDateTime35.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime35.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField65 = property64.getField();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime(1644573600000L, dateTimeZone68);
        org.joda.time.Chronology chronology70 = localTime69.getChronology();
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime(1644573027233L);
        int[] intArray73 = localTime72.getValues();
        int int74 = dateTimeField65.getMinimumValue((org.joda.time.ReadablePartial) localTime69, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray76 = dateTimeField13.set((org.joda.time.ReadablePartial) localDate31, 35599, intArray73, 265);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35599");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1997 + "'", int27 == 1997);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[9, 50, 27, 233]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTime();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DurationField durationField14 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField16.add((long) 35565845, 1646041977870L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1646041977870");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(11);
        java.util.Date date13 = localDate12.toDate();
        org.joda.time.LocalDate.Property property14 = localDate12.dayOfMonth();
        org.joda.time.LocalDate.Property property15 = localDate12.dayOfMonth();
        org.joda.time.LocalDate localDate16 = property15.withMaximumValue();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.joda.time.Chronology chronology0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(chronology0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Chronology must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-28T09:50:17.076Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-28t09:50:17.076z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        java.lang.Object obj11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime12.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMonths(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekOfWeekyear();
        boolean boolean20 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        int int21 = localDateTime10.size();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime10.minusMonths(35440);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime10.withMonthOfYear(32769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone16);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, (long) 35408);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime21.addWeeks(19);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime21.add(readablePeriod24, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime21.secondOfMinute();
        mutableDateTime21.addHours(591);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime21.setTime(2122, 659, 35475, (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2122 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35408L + "'", long19 == 35408L);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.minuteOfDay();
        long long2 = property1.remainder();
        org.joda.time.DateTime dateTime3 = property1.withMinimumValue();
        int int4 = dateTime3.getDayOfWeek();
        org.joda.time.DateTime dateTime6 = dateTime3.minusWeeks(4);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        java.util.Date date21 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromDateFields(date21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean24 = localDate22.isSupported(dateTimeFieldType23);
        boolean boolean25 = dateTime15.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime27 = dateTime15.plusHours(11);
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        int int30 = dateTime27.get(dateTimeFieldType29);
        int int31 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateMidnight dateMidnight32 = dateTime6.toDateMidnight();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 28859L + "'", long2 == 28859L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateMidnight32);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.lang.Object obj6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime9 = property8.withMaximumValue();
        java.lang.Object obj10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime11.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getScript();
        java.lang.String str25 = dateTimeZone20.getName(1646041809840L, locale22);
        java.util.Calendar calendar26 = dateTime11.toCalendar(locale22);
        int int27 = property8.getMaximumTextLength(locale22);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime29.setWeekyear(3);
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        mutableDateTime29.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeField dateTimeField37 = null;
        mutableDateTime29.setRounding(dateTimeField37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime29.add(readableDuration39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime29.era();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime29.millisOfDay();
        org.joda.time.Chronology chronology43 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.millisOfSecond();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField48 = chronology43.weekOfWeekyear();
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = dateTimeField48.getAsShortText(1646006400000L, locale50);
        java.lang.String str52 = locale22.getDisplayLanguage(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter2.withLocale(locale22);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(dateTimeZone55);
        long long58 = dateTimeZone55.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime60.setWeekyear(3);
        java.lang.Object obj63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(obj63);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime69 = dateTime64.withPeriodAdded(readablePeriod67, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime64.getZone();
        mutableDateTime60.setZoneRetainFields(dateTimeZone70);
        long long73 = dateTimeZone55.getMillisKeepLocal(dateTimeZone70, (long) 35408);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 4, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime75.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundCeiling();
        org.joda.time.ReadableDuration readableDuration78 = null;
        mutableDateTime77.add(readableDuration78, 0);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime77.year();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) mutableDateTime77);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.232" + "'", str25, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573208910,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=28,MILLISECOND=910,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9" + "'", str51, "9");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "German" + "'", str52, "German");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 35408L + "'", long73 == 35408L);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isParser();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.MIDNIGHT;
        int int10 = localTime8.compareTo((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime.Property property11 = localTime8.minuteOfHour();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localTime8.getFieldTypes();
        org.joda.time.Chronology chronology13 = localTime8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.year();
        long long17 = dateTimeField15.roundCeiling(1644573012275L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1672531200000L + "'", long17 == 1672531200000L);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(32770);
        java.lang.String str3 = dateTimeZone1.getShortName(1646041826656L);
        int int5 = dateTimeZone1.getStandardOffset(4206190450L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:32.770" + "'", str3, "+00:00:32.770");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32770 + "'", int5 == 32770);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate14 = property11.setCopy(1997);
        java.util.Date date20 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean23 = localDate21.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate25 = localDate21.withEra(0);
        org.joda.time.LocalDate localDate27 = localDate21.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate29 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate31 = localDate29.withEra(1);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology33 = null;
        boolean boolean34 = durationFieldType32.isSupported(chronology33);
        java.lang.String str35 = durationFieldType32.toString();
        boolean boolean36 = localDate31.isSupported(durationFieldType32);
        int int37 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        long long42 = dateTimeZone39.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime44.setWeekyear(3);
        java.lang.Object obj47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(obj47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime53 = dateTime48.withPeriodAdded(readablePeriod51, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime48.getZone();
        mutableDateTime44.setZoneRetainFields(dateTimeZone54);
        long long57 = dateTimeZone39.getMillisKeepLocal(dateTimeZone54, (long) 35408);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 4, dateTimeZone39);
        long long60 = dateTimeZone39.convertUTCToLocal(879462060000L);
        org.joda.time.Interval interval61 = localDate31.toInterval(dateTimeZone39);
        org.joda.time.LocalDate localDate63 = localDate31.minusDays(35585556);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eras" + "'", str35, "eras");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 35408L + "'", long57 == 35408L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 879462060000L + "'", long60 == 879462060000L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(localDate63);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField16 = mutableDateTime1.getRoundingField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfDay(1900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNull(dateTimeField16);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronolgy();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronolgy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.MIDNIGHT;
        int int12 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime11);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.withPeriodAdded(readablePeriod17, (int) (byte) 10);
        org.joda.time.DateTime dateTime20 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology21 = dateTime14.getChronology();
        boolean boolean22 = dateTimeFieldType8.isSupported(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter3.withChronology(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.parse("2022-02-28T09:52:29.253Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime14.setWeekyear(3);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField22 = null;
        mutableDateTime14.setRounding(dateTimeField22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime14.add(readableDuration24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime14.era();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime14.millisOfDay();
        org.joda.time.Chronology chronology28 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology28.weekyears();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology28.add(readablePeriod32, (-72083542597019000L), (int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology28.add(readablePeriod36, (long) '4', 50400000);
        org.joda.time.DurationField durationField40 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField41 = chronology28.millisOfDay();
        java.lang.Object obj42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(obj42);
        org.joda.time.LocalDateTime localDateTime44 = dateTime43.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYear(50);
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.getDefault(category51);
        java.util.Locale locale53 = java.util.Locale.getDefault(category51);
        java.util.Locale locale54 = java.util.Locale.getDefault(category51);
        java.lang.String str55 = dateTimeField41.getAsShortText((org.joda.time.ReadablePartial) localDateTime46, (int) (byte) -1, locale54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime56 = property11.setCopy("2022-02-28T09:51:22.913Z", locale54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-28T09:51:22.913Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-72083542597019000L) + "'", long35 == (-72083542597019000L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category51.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1" + "'", str55, "-1");
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime11);
        mutableDateTime13.addMillis(233);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfHalfday();
        long long20 = dateTimeField17.add((long) 'u', (long) 2022);
        int int21 = dateTimeField17.getMinimumValue();
        long long24 = dateTimeField17.getDifferenceAsLong((long) 35440, 61097392267000L);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readablePeriod30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.plus(readableDuration32);
        java.util.Date date39 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.fromDateFields(date39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean42 = localDate40.isSupported(dateTimeFieldType41);
        boolean boolean43 = dateTime33.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime45 = dateTime33.plusHours(11);
        org.joda.time.DateTime.Property property46 = dateTime33.yearOfEra();
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.lang.String str48 = property46.getAsShortText(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayScript();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.lang.String str55 = locale50.getDisplayCountry(locale52);
        java.lang.String str56 = locale50.getDisplayName();
        java.lang.String str57 = locale50.getDisplayScript();
        java.lang.String str58 = locale47.getDisplayScript(locale50);
        java.lang.String str59 = locale47.toLanguageTag();
        java.lang.String str60 = locale47.getLanguage();
        java.lang.String str61 = dateTimeField17.getAsText((int) 'x', locale47);
        org.joda.time.DurationField durationField62 = dateTimeField17.getDurationField();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 7279200117L + "'", long20 == 7279200117L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-16971497L) + "'", long24 == (-16971497L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "10" + "'", str48, "10");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c" + "'", str49, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ja-JP" + "'", str59, "ja-JP");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ja" + "'", str60, "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "120" + "'", str61, "120");
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = dateTimeFormatter6.parseMutableDateTime("2022-02-28T09:52:55.694Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = new java.util.Locale("09:50:02.357");
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.LocalDateTime localDateTime6 = dateTime5.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDurationAdded(readableDuration7, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths(0);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusHours(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusMinutes((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = localDateTime11.toString("10", locale18);
        java.lang.String str20 = locale3.getDisplayName(locale18);
        java.lang.String str21 = locale1.getDisplayName(locale3);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime23.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale34.getScript();
        java.lang.String str37 = dateTimeZone32.getName(1646041809840L, locale34);
        java.util.Calendar calendar38 = dateTime23.toCalendar(locale34);
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = locale34.getDisplayLanguage(locale39);
        java.lang.String str41 = locale3.getDisplayCountry(locale34);
        java.util.Set<java.lang.Character> charSet42 = locale3.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale3.toString(), "09:50:02.357");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10" + "'", str19, "10");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "09:50:02.357" + "'", str20, "09:50:02.357");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (Taiwan)" + "'", str21, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.232" + "'", str37, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644573209302,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=29,MILLISECOND=302,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "German" + "'", str40, "German");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(charSet42);
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime6.setWeekyear(3);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone16);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, (long) 35408);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalTime localTime24 = localTime21.withPeriodAdded(readablePeriod22, 35498);
        org.joda.time.LocalTime localTime26 = localTime21.minusMinutes(35567948);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35408L + "'", long19 == 35408L);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(11);
        java.util.Date date13 = localDate12.toDate();
        java.lang.String str14 = localDate12.toString();
        org.joda.time.LocalDate localDate16 = localDate12.minusWeeks((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate12.minus(readablePeriod17);
        java.util.Date date24 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDate localDate29 = localDate25.withEra(0);
        org.joda.time.LocalDate localDate31 = localDate29.plusMonths(11);
        org.joda.time.LocalDate localDate33 = localDate29.withWeekyear(10);
        org.joda.time.LocalDate.Property property34 = localDate29.yearOfCentury();
        java.lang.Object obj35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) (byte) 10);
        java.lang.Object obj39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(obj39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) (byte) 10);
        boolean boolean43 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(10L, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime38.withFields((org.joda.time.ReadablePartial) localDate46);
        int int48 = localDate29.compareTo((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalDate localDate50 = localDate46.withWeekyear(2);
        int int51 = localDate18.compareTo((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDate localDate53 = localDate18.minus(readablePeriod52);
        int int54 = localDate53.getYearOfEra();
        int int55 = localDate53.getYearOfCentury();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1996-10-13" + "'", str14, "-1996-10-13");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1997 + "'", int54 == 1997);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 96 + "'", int55 == 96);
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((int) (short) 1);
        java.lang.Appendable appendable7 = null;
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.LocalDateTime localDateTime10 = dateTime9.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDurationAdded(readableDuration11, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, 2);
        java.lang.Object obj19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(obj19);
        org.joda.time.LocalDateTime localDateTime21 = dateTime20.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withDurationAdded(readableDuration22, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minusMonths(0);
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusHours(0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.withYearOfEra(19);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, 8);
        int int37 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.era();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime41 = property39.roundHalfFloorCopy();
        java.lang.String str42 = property39.getAsShortText();
        org.joda.time.LocalDateTime localDateTime43 = property39.roundHalfEvenCopy();
        int int44 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(appendable7, (org.joda.time.ReadablePartial) localDateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u897f\u66a6" + "'", str42, "\u897f\u66a6");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1L);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        int int6 = localTime4.compareTo((org.joda.time.ReadablePartial) localTime5);
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.DateTime dateTime14 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology15 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.clockhourOfDay();
        long long21 = dateTimeField19.roundHalfCeiling(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField19.getType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime25 = localTime1.withFieldAdded(durationFieldType23, (-27423360));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'days' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        java.util.Locale locale16 = locale14.stripExtensions();
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        boolean boolean18 = locale14.hasExtensions();
        java.lang.String str19 = locale14.getISO3Country();
        java.lang.String str20 = locale14.getISO3Country();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573209463,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=29,MILLISECOND=463,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "TWN" + "'", str19, "TWN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "TWN" + "'", str20, "TWN");
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withYearOfEra(19);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 8);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMillis(35411);
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYear((int) (short) 0);
        int int27 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime29.setWeekyear(3);
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime33.withPeriodAdded(readablePeriod36, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime33.getZone();
        mutableDateTime29.setZoneRetainFields(dateTimeZone39);
        java.util.TimeZone timeZone41 = dateTimeZone39.toTimeZone();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone41, locale42);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromCalendarFields(calendar43);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.fromCalendarFields(calendar43);
        calendar43.clear();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.fromCalendarFields(calendar43);
        boolean boolean48 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime26.secondOfMinute();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 665);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localTime51);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, 2);
        int int11 = localDateTime7.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime13.setWeekyear(3);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime19 = property18.withMaximumValue();
        mutableDateTime13.setMillis((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeField dateTimeField21 = null;
        mutableDateTime13.setRounding(dateTimeField21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime13.add(readableDuration23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime13.era();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime13.add(readableDuration26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime13.year();
        boolean boolean29 = mutableDateTime13.isBeforeNow();
        java.lang.Object obj30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int35 = dateTime33.get(dateTimeFieldType34);
        mutableDateTime13.set(dateTimeFieldType34, (int) (short) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime7.property(dateTimeFieldType34);
        int int39 = property38.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 35412, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.plus(readablePeriod4);
        java.util.Date date11 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.fromDateFields(date11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate localDate16 = localDate12.withEra(0);
        org.joda.time.LocalDate localDate18 = localDate12.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate20 = localDate12.plus(readablePeriod19);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime22.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime22.getZone();
        org.joda.time.DateMidnight dateMidnight29 = localDate12.toDateMidnight(dateTimeZone28);
        int int31 = dateTimeZone28.getOffset((long) (-27409550));
        org.joda.time.Interval interval32 = localDate5.toInterval(dateTimeZone28);
        org.joda.time.LocalDate localDate34 = localDate5.minusMonths(4);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks((-870617750));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = localDate36.withDayOfWeek(35599);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35599 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.DurationField durationField16 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfMonth();
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) (byte) 10);
        boolean boolean22 = dateTime21.isEqualNow();
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        long long33 = dateTimeZone30.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime34 = dateTime21.toDateTime(dateTimeZone30);
        org.joda.time.LocalTime localTime35 = dateTime21.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime21.getZone();
        org.joda.time.Chronology chronology37 = chronology12.withZone(dateTimeZone36);
        java.lang.String str38 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology12.year();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 11L + "'", long33 == 11L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str38, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        java.lang.String str13 = chronology12.toString();
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime15.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.Chronology chronology26 = chronology12.withZone(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime28.setWeekyear(3);
        java.lang.Object obj31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime32.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime32.getZone();
        mutableDateTime28.setZoneRetainFields(dateTimeZone38);
        java.lang.String str41 = dateTimeZone38.getNameKey(1646041808949L);
        boolean boolean42 = dateTimeZone38.isFixed();
        org.joda.time.Chronology chronology43 = chronology26.withZone(dateTimeZone38);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology43);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(chronology43);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime47.setWeekyear(3);
        java.lang.Object obj50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(obj50);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfMonth();
        org.joda.time.DateTime dateTime53 = property52.withMaximumValue();
        mutableDateTime47.setMillis((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime56 = dateTime53.minusYears((int) (short) 1);
        long long57 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime58 = dateTime53.toDateTime();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.MIDNIGHT;
        int int62 = localTime60.compareTo((org.joda.time.ReadablePartial) localTime61);
        java.lang.Object obj63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(obj63);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime69 = dateTime64.withPeriodAdded(readablePeriod67, (int) (byte) 10);
        org.joda.time.DateTime dateTime70 = localTime61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology71 = dateTime64.getChronology();
        java.lang.String str72 = chronology71.toString();
        java.lang.Object obj73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(obj73);
        org.joda.time.DateTime dateTime76 = dateTime74.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime79 = dateTime74.withPeriodAdded(readablePeriod77, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime74.getZone();
        long long83 = dateTimeZone80.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone80);
        org.joda.time.Chronology chronology85 = chronology71.withZone(dateTimeZone80);
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((java.lang.Object) dateTime53, dateTimeZone80);
        int int88 = dateTimeZone80.getOffsetFromLocal((long) 35412);
        java.util.Locale locale90 = java.util.Locale.ROOT;
        java.lang.String str91 = dateTimeZone80.getShortName(1646041805419L, locale90);
        java.lang.String str93 = dateTimeZone80.getShortName((long) 22);
        long long96 = dateTimeZone80.convertLocalToUTC((long) 922, true);
        java.lang.String str98 = dateTimeZone80.getName((long) 35443833);
        org.joda.time.DateTime dateTime99 = localTime45.toDateTimeToday(dateTimeZone80);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str13, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 11L + "'", long24 == 11L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1646042009768L + "'", long57 == 1646042009768L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str72, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 11L + "'", long83 == 11L);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00" + "'", str93, "+00:00");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 922L + "'", long96 == 922L);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "+00:00" + "'", str98, "+00:00");
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("2022-02-28T09:53:22.171Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        int int6 = date5.getYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date5);
        int int8 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusMinutes(0);
        int int11 = localDateTime7.getMinuteOfHour();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.MIDNIGHT;
        int int16 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime15);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.withPeriodAdded(readablePeriod21, (int) (byte) 10);
        org.joda.time.DateTime dateTime24 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology25 = dateTime18.getChronology();
        boolean boolean26 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime11.withField(dateTimeFieldType12, 10);
        java.lang.Object obj29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime30.withPeriodAdded(readablePeriod33, (int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime30.minusMillis(2022);
        int int38 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime40 = dateTime28.withWeekyear((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime43.setWeekyear(3);
        java.lang.Object obj46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(obj46);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfMonth();
        org.joda.time.DateTime dateTime49 = property48.withMaximumValue();
        mutableDateTime43.setMillis((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeField dateTimeField51 = null;
        mutableDateTime43.setRounding(dateTimeField51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime43.add(readableDuration53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime43.era();
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime43.add(readableDuration56);
        java.lang.String str58 = mutableDateTime43.toString();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.MIDNIGHT;
        int int62 = localTime60.compareTo((org.joda.time.ReadablePartial) localTime61);
        java.lang.Object obj63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(obj63);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime69 = dateTime64.withPeriodAdded(readablePeriod67, (int) (byte) 10);
        org.joda.time.DateTime dateTime70 = localTime61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology71 = dateTime64.getChronology();
        java.lang.String str72 = chronology71.toString();
        java.lang.Object obj73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(obj73);
        org.joda.time.DateTime dateTime76 = dateTime74.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime79 = dateTime74.withPeriodAdded(readablePeriod77, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime74.getZone();
        long long83 = dateTimeZone80.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone80);
        org.joda.time.Chronology chronology85 = chronology71.withZone(dateTimeZone80);
        mutableDateTime43.setChronology(chronology71);
        org.joda.time.DurationField durationField87 = chronology71.years();
        org.joda.time.DateTimeField dateTimeField88 = chronology71.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime(1646041809688L, chronology71);
        org.joda.time.DateTime dateTime90 = dateTime28.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone93 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        org.joda.time.LocalTime localTime94 = new org.joda.time.LocalTime(1644573600000L, dateTimeZone93);
        org.joda.time.DateTime dateTime95 = dateTime90.withZoneRetainFields(dateTimeZone93);
        org.joda.time.DateTime.Property property96 = dateTime90.millisOfSecond();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-28T09:53:29.912Z" + "'", str58, "2022-02-28T09:53:29.912Z");
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str72, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 11L + "'", long83 == 11L);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        boolean boolean4 = dateTime3.isEqualNow();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime3.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime7.setWeekyear(3);
        java.lang.Object obj10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime11.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime7.add(readableDuration19, (int) (byte) 10);
        org.joda.time.DateTime dateTime22 = mutableDateTime7.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime24 = property23.roundFloorCopy();
        boolean boolean25 = gregorianCalendar5.before((java.lang.Object) dateTime24);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = locale28.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap31 = gregorianCalendar5.getDisplayNames((-27409553), 35608, locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime9.setWeekyear(3);
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime9.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.property(dateTimeFieldType14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.property(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = property16.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        java.util.Date date13 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        boolean boolean17 = dateTime7.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = dateTime7.plusHours(11);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withChronology(chronology20);
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.Instant instant23 = dateMidnight22.toInstant();
        boolean boolean25 = dateMidnight22.isEqual(1105054140000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromCalendarFields(calendar15);
        calendar15.setMinimalDaysInFirstWeek(1956);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = calendar15.isSet(35436935);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35436935");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573210105,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1956,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=30,MILLISECOND=105,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withYearOfEra(19);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 8);
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.withField(dateTimeFieldType21, 15);
        int int24 = localDateTime14.get(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property25 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime28 = property25.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime29 = property25.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = property25.addToCopy((-72064071665819000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -72064071665819000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35610 + "'", int24 == 35610);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate6.withPeriodAdded(readablePeriod13, 100);
        org.joda.time.LocalDate.Property property16 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property17 = localDate6.era();
        java.lang.String str18 = localDate6.toString();
        org.joda.time.LocalDate.Property property19 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate21 = localDate6.minusMonths(377);
        org.joda.time.LocalDate localDate23 = localDate6.minusMonths(61200000);
        int int24 = localDate6.getYearOfEra();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1997-11-13" + "'", str18, "1997-11-13");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1997 + "'", int24 == 1997);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(35496241, 251, 99, (-1955), 35585556, (-27409550), 354);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1955 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfWeek();
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime7.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readablePeriod13);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfDay();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 593 + "'", int10 == 593);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-28T09:51:48.689Z");
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.MIDNIGHT;
        int int16 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime15);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.withPeriodAdded(readablePeriod21, (int) (byte) 10);
        org.joda.time.DateTime dateTime24 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology25 = dateTime18.getChronology();
        boolean boolean26 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime11.withField(dateTimeFieldType12, 10);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.minusYears(410);
        org.joda.time.DateTime dateTime34 = dateTime30.plus((long) 98);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        calendar15.set(5, (-292275054), 0, 1, (int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime23.setWeekyear(3);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.withPeriodAdded(readablePeriod30, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime27.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone33.toTimeZone();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone35, locale36);
        calendar15.setTimeZone(timeZone35);
        calendar15.set(1948, (-52), 137998);
        java.util.Date date48 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int49 = date48.getDate();
        int int50 = date48.getMonth();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.fromDateFields(date48);
        calendar15.setTime(date48);
        boolean boolean53 = calendar15.isWeekDateSupported();
        int int55 = calendar15.get(0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-1895947140000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1909,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=337,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644573210342,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=30,MILLISECOND=342,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date48.toString(), "Fri Dec 03 04:01:00 UTC 1909");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 11 + "'", int50 == 11);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("2022-02-11T08:52:05.738");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.Interval interval14 = localDate10.toInterval(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        long long18 = dateTimeZone15.previousTransition(1L);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime20.setWeekyear(3);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime24.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone30);
        long long33 = dateTimeZone15.getMillisKeepLocal(dateTimeZone30, (long) 35408);
        java.lang.String str35 = dateTimeZone30.getShortName((long) (byte) 0);
        org.joda.time.DateTime dateTime36 = localDate10.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.Interval interval37 = localDate10.toInterval();
        org.joda.time.LocalDate localDate39 = localDate10.withYear(617);
        int int40 = localDate39.getWeekOfWeekyear();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35408L + "'", long33 == 35408L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 46 + "'", int40 == 46);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        int int3 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime2);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTime dateTime11 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology12 = dateTime5.getChronology();
        java.lang.String str13 = chronology12.toString();
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfWeek();
        boolean boolean17 = dateTimeField15.isLeap((long) 25975);
        int int19 = dateTimeField15.getMaximumValue(100L);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str13, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str14, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withEra(1);
        org.joda.time.LocalDate localDate18 = localDate14.minusYears(12);
        org.joda.time.LocalDate.Property property19 = localDate18.weekyear();
        org.joda.time.LocalDate localDate21 = localDate18.withWeekyear(50400000);
        org.joda.time.LocalDate localDate23 = localDate18.minusWeeks(922);
        int int24 = localDate23.getYearOfCentury();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 68 + "'", int24 == 68);
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.secondOfMinute();
        int int3 = property2.getMaximumValue();
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime6.minusMillis(2022);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getScript();
        java.lang.String str20 = dateTimeZone15.getName(1646041809840L, locale17);
        java.util.Calendar calendar21 = dateTime6.toCalendar(locale17);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.lang.String str27 = locale22.getDisplayCountry(locale24);
        java.lang.String str28 = locale17.getDisplayCountry(locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = property2.setCopy("2022-02-28T09:50:37.736Z", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-28T09:50:37.736Z\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.232" + "'", str20, "+00:00:00.232");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644573210456,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=30,MILLISECOND=456,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Germany" + "'", str28, "Germany");
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        java.util.Date date6 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate localDate11 = localDate7.withEra(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int13 = localDate7.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate7.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) '4', dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = localDate7.toDateMidnight(dateTimeZone16);
        java.util.Locale locale23 = new java.util.Locale("hi!", "", "");
        java.lang.String str24 = locale23.toLanguageTag();
        boolean boolean25 = dateTimeZone16.equals((java.lang.Object) locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 32769, dateTimeZone16);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("1970-01-03T09:51:53.309Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("35443", "2022-02-15T13:52:38.101+100:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 35443 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        org.joda.time.DateMidnight dateMidnight23 = localDate6.toDateMidnight(dateTimeZone22);
        int int24 = localDate6.getDayOfMonth();
        org.joda.time.LocalDate localDate26 = localDate6.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(40);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 13 + "'", int24 == 13);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        java.util.Locale locale3 = new java.util.Locale("35412", "Dec 3, 1909 4:01:00 AM", "2022-02-11T01:51:16.232Z");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale3.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "35412_DEC 3, 1909 4:01:00 AM_2022-02-11T01:51:16.232Z");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plus(readableDuration7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withPeriodAdded(readablePeriod9, 613);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime0.minusDays(32769);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, 35447363);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra(28);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMonths(0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime1.add(readableDuration14);
        int int16 = mutableDateTime1.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(0, 99, 0, 23999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 86399 + "'", int16 == 86399);
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int2 = localTime0.getValue(0);
        org.joda.time.LocalTime.Property property3 = localTime0.millisOfDay();
        org.joda.time.Chronology chronology4 = localTime0.getChronology();
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.LocalDateTime localDateTime7 = dateTime6.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMonths(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.yearOfCentury();
        int int14 = localDateTime7.getHourOfDay();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(1644573027233L);
        int[] intArray17 = localTime16.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology4.validate((org.joda.time.ReadablePartial) localDateTime7, intArray17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[9, 50, 27, 233]");
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        int int17 = calendar15.getLeastMaximum(15);
        java.util.Date date23 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        date23.setYear((int) (short) 0);
        int int27 = date23.getHours();
        int int28 = date23.getHours();
        calendar15.setTime(date23);
        calendar15.add(0, (-27409550));
        java.lang.String str33 = calendar15.getCalendarType();
        java.util.Date date39 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.fromDateFields(date39);
        date39.setYear((int) (short) 0);
        int int43 = date39.getHours();
        int int44 = date39.getHours();
        java.time.Instant instant45 = date39.toInstant();
        int int46 = date39.getTimezoneOffset();
        calendar15.setTime(date39);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1, chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime53 = dateTime50.withField(dateTimeFieldType51, (int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar54 = dateTime53.toGregorianCalendar();
        boolean boolean55 = calendar15.after((java.lang.Object) gregorianCalendar54);
        int int56 = gregorianCalendar54.getWeekYear();
        gregorianCalendar54.setTimeInMillis((long) 2019);
        int int59 = gregorianCalendar54.getWeeksInWeekYear();
        java.util.Date date60 = gregorianCalendar54.getTime();
        java.util.Date date66 = new java.util.Date(10, (int) (byte) -1, (-1), 100, (int) (byte) 1);
        int int67 = date66.getDate();
        java.util.Date date73 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        boolean boolean74 = date66.before(date73);
        int int75 = date66.getSeconds();
        date66.setMonth(35444867);
        int int78 = date60.compareTo(date66);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-2181603540000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1900,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=317,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50400000 + "'", int17 == 50400000);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "gregory" + "'", str33, "gregory");
        org.junit.Assert.assertEquals(date39.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 23 + "'", int43 == 23);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 23 + "'", int44 == 23);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(gregorianCalendar54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:02 UTC 1970");
        org.junit.Assert.assertEquals(date66.toString(), "Tue Dec 03 04:01:00 UTC 2955647");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDate6.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology17 = localDate6.getChronology();
        int int18 = localDate6.size();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1997-11-13" + "'", str16, "1997-11-13");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = mutableDateTime1.toString(dateTimeFormatter13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        int int19 = localTime17.compareTo((org.joda.time.ReadablePartial) localTime18);
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        org.joda.time.DateTime dateTime27 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology28 = dateTime21.getChronology();
        boolean boolean29 = dateTimeFieldType15.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.era();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.yearOfCentury();
        java.lang.String str33 = dateTimeField31.getAsText((long) 20);
        int int34 = mutableDateTime1.get(dateTimeField31);
        long long37 = dateTimeField31.getDifferenceAsLong(1646041809648L, (long) (-27409550));
        boolean boolean39 = dateTimeField31.isLeap(1646041818754L);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime43 = localTime41.withSecondOfMinute((int) ' ');
        org.joda.time.LocalTime.Property property44 = localTime41.minuteOfHour();
        org.joda.time.LocalTime localTime46 = property44.addCopy(35467);
        org.joda.time.LocalTime localTime47 = property44.roundHalfEvenCopy();
        int int48 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localTime47);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0003-01-01T23:59:59.999Z" + "'", str14, "0003-01-01T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "70" + "'", str33, "70");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime16.setWeekyear(3);
        java.lang.Object obj19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(obj19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeField dateTimeField24 = null;
        mutableDateTime16.setRounding(dateTimeField24);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime27.setWeekyear(3);
        java.lang.Object obj30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime31.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone37);
        mutableDateTime16.setZone(dateTimeZone37);
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.lang.String str42 = dateTimeZone37.getShortName((long) 3, locale41);
        long long44 = dateTimeZone11.getMillisKeepLocal(dateTimeZone37, 1L);
        java.lang.Object obj45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(obj45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime51 = dateTime46.withPeriodAdded(readablePeriod49, (int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime46.minusMillis(2022);
        int int54 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str56 = dateTimeZone11.getName(1646041859237L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        int int3 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusSeconds((int) (short) 10);
        int int6 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusMillis((-52));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusDays(0);
        int int11 = localDateTime0.getDayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(722, 0, 35423);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 722 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            calendar2.add(1994, 366);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573211048,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=31,MILLISECOND=48,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withDate((int) ' ', 9, 23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(41);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withYear(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime2.setWeekyear(3);
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(10L, dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfCentury();
        org.joda.time.Interval interval19 = property18.toInterval();
        int int20 = property18.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(12, 292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 292278993");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        int int4 = dateTimeFormatter2.getDefaultYear();
        java.lang.Object obj5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(obj5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) (byte) 10);
        boolean boolean9 = dateTime8.isEqualNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withWeekOfWeekyear(10);
        org.joda.time.DateTime.Property property12 = dateTime8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime14.setWeekyear(3);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField22 = null;
        mutableDateTime14.setRounding(dateTimeField22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime14.add(readableDuration24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime14.era();
        java.lang.String str27 = property26.getName();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.roundHalfEven();
        long long29 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime28);
        mutableDateTime28.addWeekyears(10299894);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime28, "09:52:38.038", 35412);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "era" + "'", str27, "era");
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4792913L + "'", long29 == 4792913L);
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        int int17 = calendar15.getLeastMaximum(15);
        java.util.Date date23 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        date23.setYear((int) (short) 0);
        int int27 = date23.getHours();
        int int28 = date23.getHours();
        calendar15.setTime(date23);
        calendar15.add(0, (-27409550));
        java.lang.String str33 = calendar15.getCalendarType();
        int int34 = calendar15.getMinimalDaysInFirstWeek();
        calendar15.setFirstDayOfWeek((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            int int38 = calendar15.getGreatestMinimum(35512);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35512");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=120,minimalDaysInFirstWeek=1,ERA=0,YEAR=1900,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=317,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50400000 + "'", int17 == 50400000);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "gregory" + "'", str33, "gregory");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        int int13 = localDate6.getWeekyear();
        org.joda.time.LocalDate.Property property14 = localDate6.dayOfMonth();
        org.joda.time.LocalDate localDate15 = property14.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate15.minus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, 35526);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1997 + "'", int13 == 1997);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale15.getDisplayCountry(locale17);
        java.lang.String str21 = locale17.getScript();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone14, locale17);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = calendar22.getGreatestMinimum(35494);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35494");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644573211469,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=31,MILLISECOND=469,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.eras();
        boolean boolean14 = localDateTime12.isSupported(durationFieldType13);
        boolean boolean15 = localDateTime10.isSupported(durationFieldType13);
        boolean boolean16 = localDateTime9.isSupported(durationFieldType13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withWeekyear(20);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(6);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDateTime20.isSupported(dateTimeFieldType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withMonthOfYear(360000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        java.lang.String str18 = dateTimeField16.getAsShortText(1646041838680L);
        long long20 = dateTimeField16.roundHalfFloor((long) 680);
        org.joda.time.DurationField durationField21 = dateTimeField16.getLeapDurationField();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "22" + "'", str18, "22");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(durationField21);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(58, 35503178, 35452, (-954), 35438445, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -954 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(1644573600000L, dateTimeZone2);
        org.joda.time.LocalTime localTime5 = localTime3.plusMinutes(31916778);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime12.setWeekyear(3);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        mutableDateTime12.setZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setZone(dateTimeZone22);
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = dateTimeZone22.getShortName((long) 3, locale26);
        long long29 = dateTimeZone22.nextTransition((long) 50);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone22.getOffset(readableInstant31);
        int int34 = dateTimeZone22.getOffset(22942L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 50L + "'", long29 == 50L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (short) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property8.addWrapFieldToCopy(2022);
        org.joda.time.DateTime dateTime12 = dateTime10.plusWeeks(0);
        java.util.Date date18 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean21 = localDate19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDate localDate23 = localDate19.withEra(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int25 = localDate19.indexOf(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = dateTime10.withField(dateTimeFieldType24, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime10.withDayOfMonth(59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withWeekOfWeekyear(6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusWeeks(1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusYears(710);
        int int14 = localDateTime13.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(10L, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        java.lang.String str4 = property3.getName();
        org.joda.time.LocalDate localDate6 = property3.addWrapFieldToCopy(30);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property3.getFieldType();
        org.joda.time.LocalDate localDate8 = property3.getLocalDate();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime10.setWeekyear(3);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.withPeriodAdded(readablePeriod17, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime14.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone20);
        java.util.TimeZone timeZone22 = dateTimeZone20.toTimeZone();
        java.util.TimeZone timeZone23 = dateTimeZone20.toTimeZone();
        int int25 = dateTimeZone20.getStandardOffset((long) 590);
        java.lang.String str26 = dateTimeZone20.getID();
        org.joda.time.DateTime dateTime27 = localDate8.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.LocalDate.Property property28 = localDate8.monthOfYear();
        org.joda.time.LocalDate.Property property29 = localDate8.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "monthOfYear" + "'", str4, "monthOfYear");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronolgy();
        boolean boolean7 = dateTimeFormatter3.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter3.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.parse("09:52:01.104", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        java.util.Locale locale3 = new java.util.Locale("09:50:02.357", "", "09:50:02.357");
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.lang.String str6 = locale4.getCountry();
        java.lang.String str7 = locale3.getDisplayVariant(locale4);
        java.lang.String str8 = locale4.getDisplayCountry();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale4);
        calendar9.setMinimalDaysInFirstWeek(68509062);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(10L, chronology13);
        org.joda.time.LocalDate.Property property15 = localDate14.monthOfYear();
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtCurrentTime();
        java.util.Date date17 = localDate14.toDate();
        calendar9.setTime(date17);
        java.time.Instant instant19 = calendar9.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            calendar9.roll(637, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "09:50:02.357__09:50:02.357");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CN" + "'", str6, "CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "09:50:02.357" + "'", str7, "09:50:02.357");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str8, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=68509062,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(10L, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate5 = localDate2.minusMonths(22);
        org.joda.time.LocalDate localDate7 = localDate2.withYearOfCentury(13);
        org.joda.time.LocalDate localDate9 = localDate2.plusWeeks(2019);
        java.lang.Object obj10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime11.getZone();
        org.joda.time.Interval interval18 = localDate9.toInterval(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property20 = localDate9.era();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime10 = dateTime7.minusYears((int) (short) 1);
        long long11 = dateTime7.getMillis();
        java.util.Date date12 = dateTime7.toDate();
        org.joda.time.DateTime.Property property13 = dateTime7.year();
        org.joda.time.DateTime dateTime15 = property13.addToCopy(3L);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime17.setWeekyear(3);
        java.lang.Object obj20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj20);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        mutableDateTime17.setMillis((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeField dateTimeField25 = null;
        mutableDateTime17.setRounding(dateTimeField25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime17.add(readableDuration27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime17.era();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime17.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = property30.add((int) ' ');
        org.joda.time.DateTime dateTime33 = mutableDateTime32.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime32.add(readableDuration34);
        boolean boolean36 = property13.equals((java.lang.Object) mutableDateTime32);
        org.joda.time.DateTime dateTime37 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1646042011780L + "'", long11 == 1646042011780L);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 28 09:53:31 UTC 2022");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(591, 0, (-1955), (int) (short) 10, 35486, 19, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35486 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) '4', dateTimeZone7);
        int int11 = dateTimeZone7.getOffsetFromLocal((long) 32769);
        org.joda.time.DateTime dateTime12 = dateTime3.withZone(dateTimeZone7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        java.lang.String str14 = localTime13.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localTime13.getValue(35595757);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35595757");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00:11:31.899" + "'", str14, "00:11:31.899");
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 23);
        java.lang.Integer int7 = dateTimeFormatter4.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter4.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTimeFormatter4.parseDateTime("35414");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(dateTimeParser8);
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) '4', dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime5.setWeekyear(3);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeField dateTimeField13 = null;
        mutableDateTime5.setRounding(dateTimeField13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime5.add(readableDuration15);
        mutableDateTime5.setSecondOfMinute((int) ' ');
        int int19 = mutableDateTime5.getYear();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        int int23 = localTime21.compareTo((org.joda.time.ReadablePartial) localTime22);
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.withPeriodAdded(readablePeriod28, (int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localTime22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology32 = dateTime25.getChronology();
        java.lang.String str33 = chronology32.toString();
        java.lang.Object obj34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(obj34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime35.getZone();
        long long44 = dateTimeZone41.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.Chronology chronology46 = chronology32.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField47 = chronology32.years();
        org.joda.time.DateTime dateTime48 = mutableDateTime5.toDateTime(chronology32);
        org.joda.time.DateTime dateTime49 = mutableDateTime3.toDateTime(chronology32);
        org.joda.time.DurationField durationField50 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField51 = chronology32.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = dateTimeField51.add(3577905193L, 1644573082818L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644573082818 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str33, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 11L + "'", long44 == 11L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("DEU");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguageTag("2022-02-28T09:52:31.725Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMonths(0);
        int int8 = localDateTime2.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withSecondOfMinute(35602216);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35602216 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        long long3 = dateTimeZone0.nextTransition((long) 233);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 233L + "'", long3 == 233L);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        int int17 = calendar15.getLeastMaximum(15);
        java.util.Date date23 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        date23.setYear((int) (short) 0);
        int int27 = date23.getHours();
        int int28 = date23.getHours();
        calendar15.setTime(date23);
        calendar15.add(0, (-27409550));
        java.lang.String str33 = calendar15.getCalendarType();
        java.util.Date date39 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.fromDateFields(date39);
        date39.setYear((int) (short) 0);
        int int43 = date39.getHours();
        int int44 = date39.getHours();
        java.time.Instant instant45 = date39.toInstant();
        int int46 = date39.getTimezoneOffset();
        calendar15.setTime(date39);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1, chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime53 = dateTime50.withField(dateTimeFieldType51, (int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar54 = dateTime53.toGregorianCalendar();
        boolean boolean55 = calendar15.after((java.lang.Object) gregorianCalendar54);
        int int56 = gregorianCalendar54.getWeekYear();
        gregorianCalendar54.setTimeInMillis((long) 2019);
        int int59 = gregorianCalendar54.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = gregorianCalendar54.getActualMaximum(840);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 840");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-2181603540000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1900,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=317,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50400000 + "'", int17 == 50400000);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "gregory" + "'", str33, "gregory");
        org.junit.Assert.assertEquals(date39.toString(), "Tue Nov 13 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 23 + "'", int43 == 23);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 23 + "'", int44 == 23);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(gregorianCalendar54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("DateTimeField[era]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=datetimefield[era]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate6.plusMonths((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate6.plus(readablePeriod13);
        org.joda.time.LocalDate localDate16 = localDate6.withYear(23);
        org.joda.time.LocalDate localDate18 = localDate16.withWeekyear((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localDate18.getValue(31991081);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31991081");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        java.util.Date date5 = new java.util.Date((int) 'a', 10, 14, (-1), (int) (short) 1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withEra(0);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths(11);
        java.util.Date date13 = localDate12.toDate();
        java.lang.String str14 = date13.toLocaleString();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 13 23:01:00 UTC 1997");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Oct 13 00:00:00 UTC 1997");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1997/10/13 0:00:00" + "'", str14, "1997/10/13 0:00:00");
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime1.withHourOfDay(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(97);
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTimeISO();
        java.lang.String str9 = dateTime5.toString();
        org.joda.time.DateTime.Property property10 = dateTime5.weekyear();
        org.joda.time.Instant instant11 = dateTime5.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11T01:53:32.169Z" + "'", str9, "2022-02-11T01:53:32.169Z");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (short) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.withChronology(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(1986);
        org.joda.time.DateTime.Property property12 = dateTime9.yearOfCentury();
        long long13 = dateTime9.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-61848021987758L) + "'", long13 == (-61848021987758L));
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(10L, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate5 = localDate2.minusMonths(22);
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths(35436935);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.era();
        int int2 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(14);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.secondOfMinute();
        int int8 = localDateTime0.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(145);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfYear(392);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 392 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.withPeriodAdded(readablePeriod8, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime5.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13, locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusYears(35473325);
        java.lang.String str20 = localDateTime17.toString();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573212290,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=53,SECOND=32,MILLISECOND=290,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:53:32.290" + "'", str20, "2022-02-11T09:53:32.290");
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(4, (int) (byte) 100, (int) (short) 0);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder7 = builder4.setLocale(locale5);
        java.util.Calendar calendar8 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar8.getLeastMaximum(32769);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32769");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=20400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=40,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime1.setWeekyear(3);
        java.lang.Object obj4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(obj4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeField dateTimeField9 = null;
        mutableDateTime1.setRounding(dateTimeField9, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime1.copy();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.MIDNIGHT;
        int int16 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime15);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.withPeriodAdded(readablePeriod21, (int) (byte) 10);
        org.joda.time.DateTime dateTime24 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology25 = dateTime18.getChronology();
        java.lang.String str26 = chronology25.toString();
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime28.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime28.getZone();
        long long37 = dateTimeZone34.convertLocalToUTC((long) 11, true);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.Chronology chronology39 = chronology25.withZone(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) -1);
        mutableDateTime41.setWeekyear(3);
        java.lang.Object obj44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(obj44);
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfEra((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime50 = dateTime45.withPeriodAdded(readablePeriod48, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime45.getZone();
        mutableDateTime41.setZoneRetainFields(dateTimeZone51);
        java.lang.String str54 = dateTimeZone51.getNameKey(1646041808949L);
        boolean boolean55 = dateTimeZone51.isFixed();
        org.joda.time.Chronology chronology56 = chronology39.withZone(dateTimeZone51);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(chronology56);
        org.joda.time.DurationField durationField59 = chronology56.centuries();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.secondOfDay();
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str63 = locale62.getDisplayCountry();
        java.lang.String str64 = dateTimeField60.getAsShortText((long) 35444867, locale62);
        mutableDateTime1.setRounding(dateTimeField60);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime1.property(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str26, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 11L + "'", long37 == 11L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "35444" + "'", str64, "35444");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int1 = localTime0.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime.Property property3 = localTime0.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime5 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property3.addWrapFieldToCopy(97);
        org.joda.time.LocalTime localTime9 = property3.addCopy(1644573014993L);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = localTime9.withMillisOfSecond(35);
        int int13 = localTime9.getMillisOfDay();
        int int14 = localTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 999);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localTime9.compareTo((org.joda.time.ReadablePartial) localDateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 61200000 + "'", int13 == 61200000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 61200000 + "'", int14 == 61200000);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "1970");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder1.removeUnicodeLocaleAttribute("2022-02-11T09:50:35.550Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:50:35.550Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 1);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) -1);
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability((double) 0, (double) 96);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter1.println(0.0d);
        printWriter1.write("italie");
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException(throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray9 = mathException7.getSuppressed();
        java.io.PrintStream printStream10 = printStream1.format("italien (Italie)", (java.lang.Object[]) throwableArray9);
        java.io.PrintStream printStream12 = new java.io.PrintStream("zh_CN");
        printStream12.print((float) (byte) -1);
        printStream12.println();
        printStream12.println();
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream12, true);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter22 = printWriter20.append(' ');
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.print("it_IT");
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale28.getDisplayCountry(locale32);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.io.PrintWriter printWriter39 = printWriter25.printf(locale32, "it_IT", objArray37);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("fr");
        printWriter42.print("it_IT");
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        java.lang.Throwable[] throwableArray51 = mathException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = mathException50.getSuppressed();
        java.io.PrintWriter printWriter53 = printWriter42.printf(locale46, "it_IT", (java.lang.Object[]) throwableArray52);
        java.io.PrintWriter printWriter54 = printWriter25.format("it_IT", (java.lang.Object[]) throwableArray52);
        java.io.PrintWriter printWriter55 = printWriter22.format("zh_CN", (java.lang.Object[]) throwableArray52);
        java.io.PrintStream printStream57 = new java.io.PrintStream("zh_CN");
        printStream57.print((float) (byte) -1);
        char[] charArray62 = new char[] { 'x', 'u' };
        printStream57.println(charArray62);
        printWriter55.print(charArray62);
        printStream12.print(charArray62);
        printStream1.println(charArray62);
        printStream1.println("anglais");
        printStream1.println(0.1709401709401705d);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream73 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "kor");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: kor");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[x, u]");
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("zh_cn", "org.apache.commons.math.mathexception: fr");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.mathexception: fr");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("\u82f1\u8a9e");
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        java.util.Locale locale3 = new java.util.Locale("hi!", "chinois", "italien (Italie)");
        java.lang.String str4 = locale3.getScript();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_CHINOIS_italien (Italie)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getVariant();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale0.getDisplayScript(locale4);
        java.util.Locale locale8 = new java.util.Locale("Italy", "Italy");
        java.lang.String str9 = locale4.getDisplayLanguage(locale8);
        java.lang.String str10 = locale8.getCountry();
        java.lang.String str11 = locale8.getDisplayScript();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.String str14 = locale12.getVariant();
        boolean boolean15 = locale12.hasExtensions();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.util.Locale locale19 = new java.util.Locale("fr", "fr");
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Locale.setDefault(locale19);
        java.util.Locale locale25 = new java.util.Locale("", "", "");
        java.lang.String str26 = locale19.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.lang.String str30 = locale27.getVariant();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale27.getDisplayScript(locale31);
        java.util.Locale locale35 = new java.util.Locale("Italy", "Italy");
        java.lang.String str36 = locale31.getDisplayLanguage(locale35);
        boolean boolean37 = locale31.hasExtensions();
        java.lang.String str38 = locale31.getISO3Language();
        java.lang.String str39 = locale25.getDisplayScript(locale31);
        java.lang.String str40 = locale16.getDisplayVariant(locale31);
        java.lang.String str41 = locale8.getDisplayScript(locale31);
        java.lang.Object obj42 = locale8.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale8.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English" + "'", str9, "English");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITALY" + "'", str10, "ITALY");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(locale35.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English" + "'", str36, "English");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eng" + "'", str38, "eng");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "italy_ITALY");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "italy_ITALY");
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.print("ita");
        java.util.Locale locale28 = new java.util.Locale("Italy");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream21.printf(locale28, "chinois", (java.lang.Object[]) throwableArray34);
        java.util.Locale.setDefault(category0, locale28);
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale38.getCountry();
        java.lang.String str41 = locale38.getScript();
        java.lang.String str42 = locale37.getDisplayCountry(locale38);
        java.lang.String str43 = locale28.getDisplayLanguage(locale37);
        java.lang.String str44 = locale37.getScript();
        java.util.Locale.setDefault(locale37);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "China" + "'", str42, "China");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "italy" + "'", str43, "italy");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("zh");
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.lang.String str35 = locale32.getVariant();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale32.getDisplayScript(locale36);
        java.util.Locale locale40 = new java.util.Locale("Italy", "Italy");
        java.lang.String str41 = locale36.getDisplayLanguage(locale40);
        boolean boolean42 = locale36.hasExtensions();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException();
        java.lang.String str46 = mathException45.getPattern();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException45);
        java.lang.Object[] objArray48 = mathException45.getArguments();
        java.io.PrintWriter printWriter49 = printWriter30.format(locale36, "cinese", objArray48);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder50.setLanguageTag("ita");
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        java.lang.String str56 = locale53.getVariant();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale53.getDisplayScript(locale57);
        boolean boolean59 = locale53.hasExtensions();
        java.util.Locale.Builder builder60 = builder50.setLocale(locale53);
        printWriter49.print((java.lang.Object) builder50);
        java.lang.Class<?> wildcardClass62 = printWriter49.getClass();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals(locale40.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) (short) 100, (int) 'u', 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0);
        double double12 = hypergeometricDistributionImpl3.probability((double) 35);
        int int13 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.7008547008546866d + "'", double10 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale4 = new java.util.Locale("English", "", "chinois");
        java.lang.String str5 = locale0.getDisplayName(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale4.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale4.toString(), "english__chinois");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Italian (Italy)" + "'", str5, "Italian (Italy)");
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        printStream1.println(0L);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        printWriter18.print("english");
        java.util.Locale locale25 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.lang.String str28 = locale25.getDisplayCountry(locale26);
        java.util.Set<java.lang.Character> charSet29 = locale25.getExtensionKeys();
        java.io.PrintStream printStream32 = new java.io.PrintStream("zh_CN");
        printStream32.print((float) (byte) -1);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("fr");
        printWriter36.print("it_IT");
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter41 = printWriter36.printf("fr", objArray40);
        printWriter36.println((float) 'u');
        printStream32.print((java.lang.Object) 'u');
        printStream32.println(false);
        printStream32.println(0L);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.lang.String str51 = locale49.getVariant();
        boolean boolean52 = locale49.hasExtensions();
        java.util.Locale locale53 = locale49.stripExtensions();
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter58 = printWriter56.append(' ');
        char[] charArray61 = new char[] { 'x', 'a' };
        printWriter58.print(charArray61);
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        java.lang.Throwable[] throwableArray68 = mathException67.getSuppressed();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter70 = printWriter58.printf("en-GB", (java.lang.Object[]) throwableArray68);
        java.io.PrintStream printStream71 = printStream32.printf(locale49, "Italy", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter72 = printWriter18.format(locale25, "hi!", (java.lang.Object[]) throwableArray68);
        java.io.PrintStream printStream74 = new java.io.PrintStream("zh_CN");
        printStream74.print((float) (byte) -1);
        char[] charArray79 = new char[] { 'x', 'u' };
        printStream74.println(charArray79);
        printWriter72.println(charArray79);
        printWriter72.println(4);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertEquals(locale25.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[x, a]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[x, u]");
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale5.getCountry();
        java.lang.String str8 = locale5.getDisplayLanguage();
        boolean boolean9 = locale5.hasExtensions();
        java.util.Set<java.lang.String> strSet10 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = locale5.stripExtensions();
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.Builder builder13 = builder3.setLocale(locale11);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.util.Locale.setDefault(category14, locale24);
        java.util.Locale locale33 = java.util.Locale.getDefault(category14);
        java.util.Locale locale34 = java.util.Locale.getDefault(category14);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("fr");
        printWriter36.print("it_IT");
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = mathException44.getSuppressed();
        java.io.PrintWriter printWriter47 = printWriter36.printf(locale40, "it_IT", (java.lang.Object[]) throwableArray46);
        java.lang.String str48 = locale34.getDisplayName(locale40);
        java.lang.String str49 = locale40.getISO3Language();
        java.util.Set<java.lang.String> strSet50 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale11.getDisplayLanguage(locale40);
        java.lang.String str52 = locale11.getDisplayName();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale5.getDisplayCountry(locale9);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        java.io.PrintWriter printWriter16 = printWriter2.printf(locale9, "it_IT", objArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("", objArray14);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException17);
        java.lang.Object[] objArray19 = mathException17.getArguments();
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.lang.Object[] objArray23 = mathException22.getArguments();
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        mathException22.addSuppressed((java.lang.Throwable) mathException26);
        mathException17.addSuppressed((java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException();
        java.lang.String str32 = mathException31.getPattern();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException33);
        mathException22.addSuppressed((java.lang.Throwable) mathException34);
        java.lang.String str36 = mathException22.getPattern();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale1.getDisplayLanguage(locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability(1);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(10);
        double double15 = hypergeometricDistributionImpl3.probability(0.0d);
        double double17 = hypergeometricDistributionImpl3.probability((int) (short) 100);
        double double20 = hypergeometricDistributionImpl3.cumulativeProbability((double) (-1L), 10.0d);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) 'u');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2991452991452851d + "'", double11 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.023984009456667447d + "'", double15 == 0.023984009456667447d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        double double6 = hypergeometricDistributionImpl3.probability(0);
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 0, (int) 'u');
        int int10 = hypergeometricDistributionImpl3.getPopulationSize();
        double double12 = hypergeometricDistributionImpl3.probability(0.9760159905433325d);
        double double14 = hypergeometricDistributionImpl3.probability(0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.7008547008546866d + "'", double6 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 117 + "'", int10 == 117);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7008547008546866d + "'", double14 == 0.7008547008546866d);
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale5.getCountry();
        java.lang.String str8 = locale5.getDisplayLanguage();
        boolean boolean9 = locale5.hasExtensions();
        java.util.Set<java.lang.String> strSet10 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = locale5.stripExtensions();
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.Builder builder13 = builder3.setLocale(locale11);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("English (Canada)");
        java.util.Locale.Builder builder16 = builder3.setLocale(locale15);
        java.lang.String str17 = locale15.toString();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.write("en-GB");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl14 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int15 = hypergeometricDistributionImpl14.getSampleSize();
        int int16 = hypergeometricDistributionImpl14.getPopulationSize();
        double double18 = hypergeometricDistributionImpl14.upperCumulativeProbability((int) '#');
        int int19 = hypergeometricDistributionImpl14.getPopulationSize();
        int int20 = hypergeometricDistributionImpl14.getNumberOfSuccesses();
        hypergeometricDistributionImpl14.setNumberOfSuccesses((int) (byte) 10);
        printWriter1.print((java.lang.Object) hypergeometricDistributionImpl14);
        double double25 = hypergeometricDistributionImpl14.probability((double) (byte) 1);
        double double27 = hypergeometricDistributionImpl14.cumulativeProbability((int) ' ');
        hypergeometricDistributionImpl14.setSampleSize(10);
        double double31 = hypergeometricDistributionImpl14.probability((int) (byte) 10);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.11499182616210182d + "'", double25 == 0.11499182616210182d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.1211251798381178E-14d + "'", double31 == 1.1211251798381178E-14d);
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream4.println((int) 'a');
        printStream4.print(' ');
        printStream4.close();
        java.io.PrintStream printStream13 = new java.io.PrintStream("zh_CN");
        printStream13.print((float) (byte) -1);
        printStream13.println();
        printStream13.print("ita");
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.util.Locale locale21 = locale19.stripExtensions();
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = mathException25.getSuppressed();
        java.io.PrintStream printStream28 = printStream13.printf(locale21, "fr", (java.lang.Object[]) throwableArray27);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        java.lang.Object[] objArray32 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) mathException31);
        java.lang.Throwable[] throwableArray34 = mathException31.getSuppressed();
        java.io.PrintStream printStream35 = printStream4.printf("tedesco", (java.lang.Object[]) throwableArray34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        boolean boolean37 = locale36.hasExtensions();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale36.getDisplayName(locale38);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.print("it_IT");
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale44.getDisplayName(locale46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.lang.String str50 = locale44.getDisplayCountry(locale48);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.io.PrintWriter printWriter55 = printWriter41.printf(locale48, "it_IT", objArray53);
        printWriter55.print((double) 100L);
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = locale58.getDisplayCountry(locale59);
        java.lang.String str61 = locale58.getVariant();
        java.lang.String str62 = locale58.getCountry();
        java.io.PrintStream printStream65 = new java.io.PrintStream("zh_CN");
        printStream65.print((float) (byte) -1);
        printStream65.println();
        printStream65.print("ita");
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.util.Locale locale73 = locale71.stripExtensions();
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = mathException77.getSuppressed();
        java.io.PrintStream printStream80 = printStream65.printf(locale73, "fr", (java.lang.Object[]) throwableArray79);
        java.io.PrintWriter printWriter81 = printWriter55.format(locale58, "fra", (java.lang.Object[]) throwableArray79);
        java.util.Set<java.lang.String> strSet82 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale58.toLanguageTag();
        java.lang.String str84 = locale38.getDisplayLanguage(locale58);
        java.lang.String str85 = locale38.getVariant();
        printStream4.print((java.lang.Object) str85);
        printStream4.println(1.7736227499076662E-4d);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ja" + "'", str83, "ja");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter11 = printWriter9.append(' ');
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("fr");
        printWriter14.print("it_IT");
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale17.getDisplayCountry(locale21);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        java.io.PrintWriter printWriter28 = printWriter14.printf(locale21, "it_IT", objArray26);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintWriter printWriter42 = printWriter31.printf(locale35, "it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter43 = printWriter14.format("it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter44 = printWriter11.format("zh_CN", (java.lang.Object[]) throwableArray41);
        java.io.PrintStream printStream46 = new java.io.PrintStream("zh_CN");
        printStream46.print((float) (byte) -1);
        char[] charArray51 = new char[] { 'x', 'u' };
        printStream46.println(charArray51);
        printWriter44.print(charArray51);
        printStream1.print(charArray51);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.println((long) 117);
        java.util.Locale locale61 = new java.util.Locale("deu", "anglais", "CA");
        java.lang.String str62 = locale61.toLanguageTag();
        java.io.PrintStream printStream65 = new java.io.PrintStream("zh_CN");
        printStream65.print((float) (byte) -1);
        printStream65.println();
        printStream65.print("ita");
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.util.Locale locale73 = locale71.stripExtensions();
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = mathException77.getSuppressed();
        java.io.PrintStream printStream80 = printStream65.printf(locale73, "fr", (java.lang.Object[]) throwableArray79);
        java.io.PrintStream printStream81 = printStream1.printf(locale61, "Canada", (java.lang.Object[]) throwableArray79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = locale61.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[x, u]");
        org.junit.Assert.assertEquals(locale61.toString(), "deu_ANGLAIS_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "deu-x-lvariant-CA" + "'", str62, "deu-x-lvariant-CA");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(10);
        java.io.PrintWriter printWriter22 = printWriter1.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(false);
        java.io.PrintWriter printWriter30 = printWriter1.append((java.lang.CharSequence) "Italy", 0, 0);
        printWriter1.write("hi!");
        printWriter1.println();
        printWriter1.println((int) (short) 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(printWriter30);
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        java.io.PrintStream printStream10 = printStream1.append((java.lang.CharSequence) "cinese");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl14 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int15 = hypergeometricDistributionImpl14.getPopulationSize();
        double double17 = hypergeometricDistributionImpl14.cumulativeProbability((int) (short) 100);
        int int19 = hypergeometricDistributionImpl14.inverseCumulativeProbability((double) 1L);
        int int20 = hypergeometricDistributionImpl14.getPopulationSize();
        double double22 = hypergeometricDistributionImpl14.probability((int) (byte) -1);
        double double24 = hypergeometricDistributionImpl14.cumulativeProbability(52);
        printStream1.print((java.lang.Object) double24);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 117 + "'", int20 == 117);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((double) 117);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((double) 'a');
        int int13 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setSampleSize((int) (short) 10);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((double) 97, (double) 100.0f);
        double double20 = hypergeometricDistributionImpl3.probability(97);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = hypergeometricDistributionImpl3.cumulativeProbability((double) 'a', (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 100);
        double double12 = hypergeometricDistributionImpl3.probability((int) (byte) 100);
        int int13 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int14 = hypergeometricDistributionImpl3.getSampleSize();
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.6500000000000139d + "'", double16 == 0.6500000000000139d);
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter11 = printWriter9.append(' ');
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("fr");
        printWriter14.print("it_IT");
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale17.getDisplayCountry(locale21);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        java.io.PrintWriter printWriter28 = printWriter14.printf(locale21, "it_IT", objArray26);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintWriter printWriter42 = printWriter31.printf(locale35, "it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter43 = printWriter14.format("it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter44 = printWriter11.format("zh_CN", (java.lang.Object[]) throwableArray41);
        java.io.PrintStream printStream46 = new java.io.PrintStream("zh_CN");
        printStream46.print((float) (byte) -1);
        char[] charArray51 = new char[] { 'x', 'u' };
        printStream46.println(charArray51);
        printWriter44.print(charArray51);
        printStream1.print(charArray51);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print((int) (byte) -1);
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream61 = printStream1.append((java.lang.CharSequence) "cinese");
        java.io.PrintStream printStream63 = printStream1.append('4');
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException();
        java.lang.String str66 = mathException65.getPattern();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException65);
        java.lang.Object[] objArray68 = mathException65.getArguments();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        java.lang.Object[] objArray71 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException72);
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray78);
        mathException72.addSuppressed((java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException72);
        mathException69.addSuppressed((java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        printStream63.print((java.lang.Object) mathException69);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[x, u]");
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.print("ita");
        java.util.Locale locale28 = new java.util.Locale("Italy");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream21.printf(locale28, "chinois", (java.lang.Object[]) throwableArray34);
        java.util.Locale.setDefault(category0, locale28);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter38.printf(locale42, "it_IT", (java.lang.Object[]) throwableArray48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale42.getDisplayScript(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getVariant();
        java.lang.String str56 = locale54.toLanguageTag();
        java.lang.String str58 = locale54.getUnicodeLocaleType("CA");
        java.lang.String str59 = locale54.getDisplayName();
        boolean boolean60 = locale54.hasExtensions();
        java.util.Locale locale61 = locale54.stripExtensions();
        java.util.Locale.setDefault(category0, locale61);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "hi!_ITALY");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "de" + "'", str56, "de");
        org.junit.Assert.assertNull(str58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str59, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println((int) (short) 0);
        printWriter30.print(1L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter30, false);
        printWriter36.close();
        boolean boolean38 = printWriter36.checkError();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("it_IT", (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale4 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.lang.String str7 = locale4.getDisplayCountry(locale5);
        java.lang.String str8 = locale0.getDisplayVariant(locale5);
        java.lang.String str9 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', 0, (int) (short) 100);
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'u', 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale5 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = mathException17.getSuppressed();
        java.io.PrintWriter printWriter20 = printWriter9.printf(locale13, "it_IT", (java.lang.Object[]) throwableArray19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale26.getDisplayCountry(locale30);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.io.PrintWriter printWriter37 = printWriter23.printf(locale30, "it_IT", objArray35);
        java.io.PrintWriter printWriter38 = printWriter7.printf(locale13, "fr", objArray35);
        java.lang.String str39 = locale5.getDisplayVariant(locale13);
        java.lang.String str40 = locale0.getDisplayVariant(locale13);
        java.lang.String str41 = locale13.getISO3Country();
        java.lang.String str42 = locale13.getISO3Language();
        java.lang.String str43 = locale13.getDisplayScript();
        java.util.Locale locale47 = new java.util.Locale("ja", "", "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        java.lang.String str48 = locale47.getLanguage();
        boolean boolean49 = locale13.equals((java.lang.Object) locale47);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale5.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "chinois" + "'", str39, "chinois");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ja" + "'", str48, "ja");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = new java.io.PrintStream("zh_CN");
        printStream4.print((float) (byte) -1);
        printStream4.println();
        printStream4.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream4, true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter14 = printWriter12.append(' ');
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("fr");
        printWriter34.print("it_IT");
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        java.io.PrintWriter printWriter45 = printWriter34.printf(locale38, "it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter46 = printWriter17.format("it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter47 = printWriter14.format("zh_CN", (java.lang.Object[]) throwableArray44);
        java.io.PrintStream printStream49 = new java.io.PrintStream("zh_CN");
        printStream49.print((float) (byte) -1);
        char[] charArray54 = new char[] { 'x', 'u' };
        printStream49.println(charArray54);
        printWriter47.print(charArray54);
        printStream4.print(charArray54);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("fr");
        printWriter62.print("it_IT");
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.io.PrintWriter printWriter73 = printWriter62.printf(locale66, "it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream74 = printStream4.format(locale58, "hi!", (java.lang.Object[]) throwableArray72);
        java.lang.String str75 = locale58.getLanguage();
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = mathException79.getSuppressed();
        java.io.PrintStream printStream82 = printStream1.printf(locale58, "", (java.lang.Object[]) throwableArray81);
        java.io.PrintWriter printWriter83 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale87 = new java.util.Locale("fra", "it_IT", "fran\347ais (France)");
        java.util.Set<java.lang.String> strSet88 = locale87.getUnicodeLocaleKeys();
        java.lang.Object[] objArray90 = null;
        java.io.PrintWriter printWriter91 = printWriter83.format(locale87, "Deutschland", objArray90);
        printWriter83.print(100L);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[x, u]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertEquals(locale87.toString(), "fra_IT_IT_fran\347ais (France)");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(printWriter91);
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        printWriter1.println();
        printWriter1.print("org.apache.commons.math.MathException: English");
        printWriter1.print(' ');
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        printWriter1.println();
        printWriter1.flush();
        java.io.PrintWriter printWriter24 = printWriter1.append('a');
        printWriter1.println((float) (byte) 10);
        printWriter1.close();
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(printWriter24);
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 0);
        int int14 = hypergeometricDistributionImpl3.inverseCumulativeProbability(1.0d);
        hypergeometricDistributionImpl3.setSampleSize(31);
        int int17 = hypergeometricDistributionImpl3.getSampleSize();
        double double20 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) 0, 0.8547008547008489d);
        double double23 = hypergeometricDistributionImpl3.cumulativeProbability((double) (byte) -1, (double) (short) 10);
        double double25 = hypergeometricDistributionImpl3.cumulativeProbability((double) (-1L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter15.print((double) 100L);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale18.getVariant();
        java.lang.String str22 = locale18.getCountry();
        java.io.PrintStream printStream25 = new java.io.PrintStream("zh_CN");
        printStream25.print((float) (byte) -1);
        printStream25.println();
        printStream25.print("ita");
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale33 = locale31.stripExtensions();
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.io.PrintStream printStream40 = printStream25.printf(locale33, "fr", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter41 = printWriter15.format(locale18, "fra", (java.lang.Object[]) throwableArray39);
        printWriter15.print((float) 'u');
        printWriter15.print((int) (short) 1);
        printWriter15.print("org.apache.commons.math.MathException: hi!");
        printWriter15.println((double) (-1.0f));
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        java.io.PrintWriter printWriter52 = printWriter50.append(' ');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter52);
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en-gb");
        java.lang.String str2 = languageRange1.getRange();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        printWriter4.write("hi!");
        printWriter4.println((java.lang.Object) (-1L));
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.lang.String str10 = locale9.getDisplayName();
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.lang.Object[] objArray15 = mathException14.getArguments();
        java.io.PrintWriter printWriter16 = printWriter4.format(locale9, "anglais", objArray15);
        java.util.Locale locale20 = new java.util.Locale("deu", "anglais", "CA");
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter25 = printWriter23.append(' ');
        char[] charArray28 = new char[] { 'x', 'a' };
        printWriter25.print(charArray28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.lang.Throwable[] throwableArray35 = mathException34.getSuppressed();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter37 = printWriter25.printf("en-GB", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter38 = printWriter16.printf(locale20, "italien (Italie)", (java.lang.Object[]) throwableArray35);
        printWriter16.flush();
        boolean boolean40 = languageRange1.equals((java.lang.Object) printWriter16);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en-gb" + "'", str2, "en-gb");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "italiano (Italia)" + "'", str10, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertEquals(locale20.toString(), "deu_ANGLAIS_CA");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[x, a]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en-GB");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("anglais");
        java.util.Locale locale10 = builder9.build();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder12 = builder9.setLocale(locale11);
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("Italien");
        boolean boolean15 = languageRange1.equals((java.lang.Object) builder12);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.String str2 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TW" + "'", str2, "TW");
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = printWriter7.append(' ');
        char[] charArray12 = new char[] { 'x', 'a' };
        printWriter9.print(charArray12);
        printStream1.println(charArray12);
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.print((float) (byte) -1);
        printStream17.println();
        printStream17.println();
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream17, true);
        printStream17.println();
        printStream17.print((-1));
        java.io.PrintStream printStream28 = new java.io.PrintStream("zh_CN");
        printStream28.println();
        java.io.PrintStream printStream31 = printStream28.append('#');
        printStream28.close();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream28.write(byteArray36);
        printStream17.write(byteArray36);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("italien");
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("fr");
        printWriter44.print("it_IT");
        java.util.Locale locale47 = java.util.Locale.ROOT;
        boolean boolean48 = locale47.hasExtensions();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale47.getDisplayName(locale49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale47.getDisplayCountry(locale51);
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        java.io.PrintWriter printWriter58 = printWriter44.printf(locale51, "it_IT", objArray56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("", objArray56);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException59);
        java.lang.Object[] objArray61 = mathException59.getArguments();
        java.io.PrintStream printStream62 = printStream17.printf(locale40, "it_IT", objArray61);
        java.io.PrintStream printStream63 = printStream1.format("Chinesisch (Taiwan)", objArray61);
        printStream1.flush();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[x, a]");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "italien");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(printStream63);
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter11 = printWriter9.append(' ');
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("fr");
        printWriter14.print("it_IT");
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale17.getDisplayCountry(locale21);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        java.io.PrintWriter printWriter28 = printWriter14.printf(locale21, "it_IT", objArray26);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintWriter printWriter42 = printWriter31.printf(locale35, "it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter43 = printWriter14.format("it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter44 = printWriter11.format("zh_CN", (java.lang.Object[]) throwableArray41);
        java.io.PrintStream printStream46 = new java.io.PrintStream("zh_CN");
        printStream46.print((float) (byte) -1);
        char[] charArray51 = new char[] { 'x', 'u' };
        printStream46.println(charArray51);
        printWriter44.print(charArray51);
        printStream1.print(charArray51);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.println((long) 117);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder58.clearExtensions();
        java.util.Locale.Builder builder60 = builder58.clearExtensions();
        java.util.Locale.Builder builder62 = builder58.setVariant("");
        java.util.Locale.Builder builder63 = builder58.clear();
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.util.Locale locale65 = java.util.Locale.JAPANESE;
        java.lang.String str66 = locale64.getDisplayCountry(locale65);
        java.lang.String str67 = locale64.getVariant();
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.lang.String str69 = locale64.getDisplayScript(locale68);
        boolean boolean70 = locale64.hasExtensions();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("fr");
        printWriter72.print("it_IT");
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        java.lang.Throwable[] throwableArray81 = mathException80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = mathException80.getSuppressed();
        java.io.PrintWriter printWriter83 = printWriter72.printf(locale76, "it_IT", (java.lang.Object[]) throwableArray82);
        java.lang.String str84 = locale76.getLanguage();
        java.lang.String str85 = locale64.getDisplayName(locale76);
        java.util.Locale.Builder builder86 = builder58.setLocale(locale64);
        java.lang.Object[] objArray88 = null;
        java.io.PrintStream printStream89 = printStream1.format(locale64, "", objArray88);
        java.util.Locale locale93 = new java.util.Locale("", "", "");
        java.util.Locale locale94 = locale93.stripExtensions();
        java.lang.String str95 = locale93.getISO3Country();
        java.lang.String str96 = locale64.getDisplayName(locale93);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[x, u]");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Japanese" + "'", str85, "Japanese");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(printStream89);
        org.junit.Assert.assertEquals(locale93.toString(), "");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Japanese" + "'", str96, "Japanese");
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        hypergeometricDistributionImpl3.setPopulationSize(117);
        int int6 = hypergeometricDistributionImpl3.getSampleSize();
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        int int8 = hypergeometricDistributionImpl3.getSampleSize();
        double double10 = hypergeometricDistributionImpl3.upperCumulativeProbability(1);
        int int11 = hypergeometricDistributionImpl3.getPopulationSize();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2991452991452851d + "'", double10 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setVariant("anglais");
        java.util.Locale locale9 = builder8.build();
        java.util.Locale.Builder builder10 = builder8.clear();
        java.util.Locale locale11 = builder10.build();
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale.Builder builder13 = builder3.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder3.removeUnicodeLocaleAttribute("org.apache.commons.math.mathexception: hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.mathexception: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        double double14 = hypergeometricDistributionImpl3.probability((int) '4');
        int int15 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = hypergeometricDistributionImpl3.cumulativeProbability(0.9999999999996674d, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream7.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream7);
        printStream7.print((float) (short) 10);
        printStream7.print(117);
        printStream7.write((int) (byte) 0);
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.println((int) (short) 100);
        printStream1.print(false);
        printStream1.flush();
        printStream1.print((double) '#');
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: fr");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter24.flush();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream22);
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        java.util.Locale locale2 = new java.util.Locale("fran\347ais (France)", "italiano (Italia)");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale5.getDisplayScript(locale9);
        java.util.Set<java.lang.Character> charSet11 = locale9.getExtensionKeys();
        java.lang.String str12 = locale3.getDisplayCountry(locale9);
        java.lang.String str13 = locale2.getDisplayName(locale3);
        java.util.Locale locale14 = locale3.stripExtensions();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        boolean boolean18 = locale16.hasExtensions();
        java.util.Locale.setDefault(locale16);
        java.lang.String str20 = locale14.getDisplayScript(locale16);
        org.junit.Assert.assertEquals(locale2.toString(), "fran\347ais (france)_ITALIANO (ITALIA)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Canada" + "'", str4, "Canada");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais (france) (ITALIANO (ITALIA))" + "'", str13, "fran\347ais (france) (ITALIANO (ITALIA))");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println(false);
        printWriter3.println((long) 'x');
        printWriter3.print(true);
        printWriter3.write("fran\347ais (France)", (int) (byte) 10, (int) (short) 1);
        printWriter3.print('4');
        printWriter3.flush();
        printWriter3.print("Chinesisch (Taiwan)");
        printWriter3.println(false);
        java.io.PrintWriter printWriter22 = printWriter3.append('a');
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????? (????)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = printWriter7.append(' ');
        char[] charArray12 = new char[] { 'x', 'a' };
        printWriter9.print(charArray12);
        printStream1.println(charArray12);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.print((double) (byte) 10);
        boolean boolean19 = printStream1.checkError();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.println();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.print("it_IT");
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale28.getDisplayCountry(locale32);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.io.PrintWriter printWriter39 = printWriter25.printf(locale32, "it_IT", objArray37);
        java.io.PrintWriter printWriter40 = printWriter21.printf("English", objArray37);
        java.util.Locale locale44 = new java.util.Locale("deu", "deu", "italien");
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("fr", objArray48);
        java.io.PrintWriter printWriter51 = printWriter40.printf(locale44, "deu-x-lvariant-CA", objArray48);
        printStream1.println((java.lang.Object) printWriter40);
        printWriter40.println((float) (byte) 0);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[x, a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertEquals(locale44.toString(), "deu_DEU_italien");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) 0, (double) 'a');
        int int13 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(1, 97);
        hypergeometricDistributionImpl3.setPopulationSize(4);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = hypergeometricDistributionImpl3.cumulativeProbability(0.08547008547008297d, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2991452991453134d + "'", double16 == 0.2991452991453134d);
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        java.util.Locale locale3 = new java.util.Locale("ITA", "\u6cd5\u570b", "zh_CN");
        java.util.Locale locale6 = new java.util.Locale("hi! (ITALY)", "allemand (Allemagne)");
        java.util.Locale locale7 = java.util.Locale.ROOT;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale7.getCountry();
        java.lang.String str10 = locale7.getDisplayLanguage();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Set<java.lang.String> strSet12 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale7.getISO3Language();
        java.lang.String str14 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale18 = new java.util.Locale("ja", "", "ja");
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale23 = new java.util.Locale("", "", "");
        java.util.Locale locale24 = locale23.stripExtensions();
        java.io.PrintStream printStream26 = new java.io.PrintStream("zh_CN");
        printStream26.print((float) (byte) -1);
        printStream26.println();
        printStream26.print("ita");
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.util.Locale locale34 = locale32.stripExtensions();
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.lang.Throwable[] throwableArray39 = mathException38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = mathException38.getSuppressed();
        java.io.PrintStream printStream41 = printStream26.printf(locale34, "fr", (java.lang.Object[]) throwableArray40);
        java.lang.String str42 = locale23.getDisplayCountry(locale34);
        java.lang.String str43 = locale18.getDisplayVariant(locale34);
        java.lang.String str44 = locale7.getDisplayCountry(locale34);
        java.lang.String str45 = locale3.getDisplayLanguage(locale34);
        java.lang.String str46 = locale3.getScript();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u6cd5\u570b_zh_CN");
        org.junit.Assert.assertEquals(locale6.toString(), "hi! (italy)_ALLEMAND (ALLEMAGNE)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ALLEMAND (ALLEMAGNE)" + "'", str14, "ALLEMAND (ALLEMAGNE)");
        org.junit.Assert.assertEquals(locale18.toString(), "ja__ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ja" + "'", str43, "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italien" + "'", str45, "Italien");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.print((-1.0f));
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("fr");
        printWriter19.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale22.getDisplayCountry(locale26);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.io.PrintWriter printWriter33 = printWriter19.printf(locale26, "it_IT", objArray31);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("fr");
        printWriter36.print("it_IT");
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = mathException44.getSuppressed();
        java.io.PrintWriter printWriter47 = printWriter36.printf(locale40, "it_IT", (java.lang.Object[]) throwableArray46);
        java.io.PrintWriter printWriter48 = printWriter19.format("it_IT", (java.lang.Object[]) throwableArray46);
        printWriter48.println('x');
        java.io.PrintWriter printWriter52 = printWriter48.append('4');
        printWriter48.write("ja", 0, (int) (byte) 0);
        java.io.PrintStream printStream58 = new java.io.PrintStream("zh_CN");
        printStream58.println();
        java.io.PrintStream printStream61 = printStream58.append('#');
        printStream58.close();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream58.write(byteArray66);
        printStream58.write((int) 'a');
        java.io.PrintStream printStream70 = new java.io.PrintStream((java.io.OutputStream) printStream58);
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter74 = printWriter72.append(' ');
        char[] charArray77 = new char[] { 'x', 'a' };
        printWriter74.print(charArray77);
        printStream70.println(charArray77);
        printWriter48.write(charArray77, (int) (short) 1, 0);
        printWriter1.write(charArray77);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[x, a]");
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getVariant();
        boolean boolean9 = locale6.hasExtensions();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder14 = builder1.setExtension('a', "");
        java.util.Locale.Builder builder15 = builder1.clearExtensions();
        java.util.Locale.Builder builder16 = builder1.clearExtensions();
        java.util.Locale.Builder builder18 = builder1.setLanguage("ENGLISH");
        java.util.Locale.Builder builder19 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.setExtension('#', "kor");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 1);
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        int int16 = hypergeometricDistributionImpl3.getSampleSize();
        int int17 = hypergeometricDistributionImpl3.getPopulationSize();
        double double19 = hypergeometricDistributionImpl3.cumulativeProbability(1);
        double double21 = hypergeometricDistributionImpl3.cumulativeProbability(0.02999999999999997d);
        hypergeometricDistributionImpl3.setSampleSize(21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 117 + "'", int17 == 117);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.7008547008546866d + "'", double21 == 0.7008547008546866d);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        printStream1.println(0);
        printStream1.flush();
        printStream1.println((float) ' ');
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream14.println("\u5fb7\u6587");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) (short) 10, (int) 'a', 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        java.util.Locale locale1 = new java.util.Locale("giapponese (ja)");
        org.junit.Assert.assertEquals(locale1.toString(), "giapponese (ja)");
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "en-US");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en-US");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        boolean boolean9 = locale3.hasExtensions();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale3);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Locale locale18 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = locale18.getDisplayCountry(locale19);
        java.lang.String str22 = locale13.getDisplayCountry(locale19);
        java.lang.String str23 = locale3.getDisplayScript(locale13);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayLanguage();
        java.lang.String str29 = locale25.getCountry();
        java.lang.String str30 = locale3.getDisplayVariant(locale25);
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("fr");
        printWriter33.write("hi!");
        printWriter33.println((java.lang.Object) (-1L));
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        java.lang.Object[] objArray44 = mathException43.getArguments();
        java.io.PrintWriter printWriter45 = printWriter33.format(locale38, "anglais", objArray44);
        java.util.Locale.setDefault(category31, locale38);
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category47, locale48);
        java.util.Locale locale51 = java.util.Locale.getDefault(category47);
        java.util.Locale locale52 = java.util.Locale.getDefault(category47);
        java.util.Locale.setDefault(category31, locale52);
        java.lang.String str54 = locale52.getDisplayScript();
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str56 = locale25.getDisplayScript(locale52);
        java.util.Set<java.lang.String> strSet57 = locale25.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals(locale18.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japanese" + "'", str28, "Japanese");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Italian (Italy)" + "'", str39, "Italian (Italy)");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ITALY");
        java.io.PrintStream printStream3 = new java.io.PrintStream("zh_CN");
        printStream3.print((float) (byte) -1);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        printWriter7.print("it_IT");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter12 = printWriter7.printf("fr", objArray11);
        printWriter7.println((float) 'u');
        printStream3.print((java.lang.Object) 'u');
        printStream3.println(0L);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream3);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream3);
        boolean boolean20 = languageRange1.equals((java.lang.Object) printStream19);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ja");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode6 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet5, filteringMode6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList13, strMap14);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + filteringMode6 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode6.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        java.util.Locale locale2 = new java.util.Locale("_DE", "ko");
        org.junit.Assert.assertEquals(locale2.toString(), "_de_KO");
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.String str2 = locale0.getVariant();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.util.Locale locale7 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str8 = locale7.toLanguageTag();
        java.lang.String str9 = locale0.getDisplayLanguage(locale7);
        java.util.Locale locale13 = new java.util.Locale("", "", "");
        java.util.Locale locale16 = new java.util.Locale("hi!", "Italy");
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.lang.String str20 = locale0.getDisplayScript(locale16);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.setLanguageTag("fr");
        java.util.Locale.Builder builder26 = builder24.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder27 = builder24.clear();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getVariant();
        java.util.Locale.Builder builder32 = builder24.setLocale(locale28);
        java.util.Locale locale33 = builder24.build();
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale0.getDisplayCountry(locale33);
        java.util.Locale locale37 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals(locale7.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "French" + "'", str9, "French");
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi! (ITALY)" + "'", str19, "hi! (ITALY)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Japanese" + "'", str34, "Japanese");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        double double11 = hypergeometricDistributionImpl3.probability((double) 10L);
        int int12 = hypergeometricDistributionImpl3.getSampleSize();
        double double14 = hypergeometricDistributionImpl3.probability((double) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2991452991452851d + "'", double14 == 0.2991452991452851d);
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) 0, (double) 'a');
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability((double) 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter22.write((int) (byte) 100);
        printWriter22.println(true);
        printWriter22.println();
        printWriter22.println();
        printWriter22.println(0.0d);
        printWriter22.println((float) 3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        printStream4.print("und");
        printStream4.print((long) (short) 100);
        printStream4.println();
        org.junit.Assert.assertNotNull(printStream4);
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.print(0);
        printStream1.print('u');
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale13.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String str19 = locale13.getDisplayCountry(locale17);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.io.PrintWriter printWriter24 = printWriter10.printf(locale17, "it_IT", objArray22);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("fr");
        printWriter27.print("it_IT");
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        java.lang.Throwable[] throwableArray36 = mathException35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = mathException35.getSuppressed();
        java.io.PrintWriter printWriter38 = printWriter27.printf(locale31, "it_IT", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter39 = printWriter10.format("it_IT", (java.lang.Object[]) throwableArray37);
        printWriter39.println();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.lang.String str44 = locale41.getVariant();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale41.getDisplayScript(locale45);
        java.util.Locale locale49 = new java.util.Locale("Italy", "Italy");
        java.lang.String str50 = locale45.getDisplayLanguage(locale49);
        boolean boolean51 = locale45.hasExtensions();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException();
        java.lang.String str55 = mathException54.getPattern();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException54);
        java.lang.Object[] objArray57 = mathException54.getArguments();
        java.io.PrintWriter printWriter58 = printWriter39.format(locale45, "cinese", objArray57);
        java.util.Set<java.lang.String> strSet59 = locale45.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray61 = null;
        java.io.PrintStream printStream62 = printStream1.printf(locale45, "fr-CA", objArray61);
        java.lang.String str63 = locale45.getCountry();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals(locale49.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English" + "'", str50, "English");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "CA" + "'", str63, "CA");
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.write((int) '#');
        java.util.Locale locale15 = java.util.Locale.ROOT;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = locale15.getCountry();
        java.lang.String str18 = locale15.getDisplayLanguage();
        boolean boolean19 = locale15.hasExtensions();
        java.util.Set<java.lang.String> strSet20 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale15.getDisplayCountry();
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Object[] objArray27 = mathException26.getArguments();
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        mathException26.addSuppressed((java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray33 = mathException26.getSuppressed();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException();
        java.lang.String str35 = mathException34.getPattern();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray33, (java.lang.Throwable) mathException34);
        java.io.PrintStream printStream37 = printStream1.printf(locale15, "Chinese (Taiwan)", (java.lang.Object[]) throwableArray33);
        printStream37.println((java.lang.Object) "Canada");
        printStream37.print(false);
        printStream37.write((int) ' ');
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(printStream37);
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ita");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.setScript("");
        java.util.Locale.Builder builder7 = builder2.setScript("");
        printStream1.println((java.lang.Object) builder7);
        printStream1.write(117);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException(throwable2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException3);
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray5, throwable6);
        java.lang.Object[] objArray8 = mathException7.getArguments();
        java.lang.String str9 = mathException7.getPattern();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("ENGLISH", (java.lang.Throwable) mathException7);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "anglais" + "'", str9, "anglais");
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Regno Unito");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=regno unito");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        java.util.Locale locale3 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        printWriter7.print("it_IT");
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = mathException15.getSuppressed();
        java.io.PrintWriter printWriter18 = printWriter7.printf(locale11, "it_IT", (java.lang.Object[]) throwableArray17);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.print("it_IT");
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale24.getDisplayCountry(locale28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.io.PrintWriter printWriter35 = printWriter21.printf(locale28, "it_IT", objArray33);
        java.io.PrintWriter printWriter36 = printWriter5.printf(locale11, "fr", objArray33);
        java.lang.String str37 = locale3.getDisplayVariant(locale11);
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale3.getDisplayVariant(locale38);
        java.lang.String str41 = locale38.getVariant();
        java.lang.String str42 = locale38.getDisplayVariant();
        java.lang.String str43 = locale38.getScript();
        java.lang.String str44 = locale38.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "chinois" + "'", str37, "chinois");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "chinois" + "'", str40, "chinois");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u82f1\u8a9e" + "'", str44, "\u82f1\u8a9e");
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("fr");
        printWriter6.print("it_IT");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray18);
        java.io.PrintWriter printWriter20 = printWriter6.printf(locale13, "it_IT", objArray18);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = mathException31.getSuppressed();
        java.io.PrintWriter printWriter34 = printWriter23.printf(locale27, "it_IT", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter35 = printWriter6.format("it_IT", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter36 = printWriter3.format("zh_CN", (java.lang.Object[]) throwableArray33);
        boolean boolean37 = printWriter3.checkError();
        java.util.Locale locale40 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str41 = locale40.toLanguageTag();
        printWriter3.println((java.lang.Object) locale40);
        java.util.Locale locale46 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter("fr");
        printWriter50.print("it_IT");
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        java.lang.Throwable[] throwableArray59 = mathException58.getSuppressed();
        java.lang.Throwable[] throwableArray60 = mathException58.getSuppressed();
        java.io.PrintWriter printWriter61 = printWriter50.printf(locale54, "it_IT", (java.lang.Object[]) throwableArray60);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("fr");
        printWriter64.print("it_IT");
        java.util.Locale locale67 = java.util.Locale.ROOT;
        boolean boolean68 = locale67.hasExtensions();
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.lang.String str70 = locale67.getDisplayName(locale69);
        java.util.Locale locale71 = java.util.Locale.ROOT;
        boolean boolean72 = locale71.hasExtensions();
        java.lang.String str73 = locale67.getDisplayCountry(locale71);
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        java.io.PrintWriter printWriter78 = printWriter64.printf(locale71, "it_IT", objArray76);
        java.io.PrintWriter printWriter79 = printWriter48.printf(locale54, "fr", objArray76);
        java.lang.String str80 = locale46.getDisplayVariant(locale54);
        java.util.Locale locale81 = java.util.Locale.CANADA;
        java.lang.String str82 = locale81.getDisplayScript();
        java.lang.String str83 = locale46.getDisplayVariant(locale81);
        java.util.Locale locale86 = new java.util.Locale("fr", "fr");
        java.lang.String str87 = locale86.getDisplayScript();
        boolean boolean88 = locale86.hasExtensions();
        java.lang.String str89 = locale46.getDisplayLanguage(locale86);
        java.lang.String str90 = locale46.getDisplayCountry();
        java.lang.String str91 = locale40.getDisplayVariant(locale46);
        java.util.Locale locale93 = new java.util.Locale("italy (ANGLAIS)");
        java.lang.String str94 = locale46.getDisplayScript(locale93);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals(locale40.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "und" + "'", str41, "und");
        org.junit.Assert.assertEquals(locale46.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "chinois" + "'", str80, "chinois");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "chinois" + "'", str83, "chinois");
        org.junit.Assert.assertEquals(locale86.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "english" + "'", str89, "english");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals(locale93.toString(), "italy (anglais)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.print("deu (DEU,italien)");
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setUnicodeLocaleKeyword("cor\351en", "it");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: core?en [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter6.print((float) (byte) 100);
        java.io.PrintWriter printWriter10 = printWriter6.append((java.lang.CharSequence) "ja");
        printWriter6.print((java.lang.Object) "\u4e2d\u56fd\u8a9e");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        java.io.PrintStream printStream15 = new java.io.PrintStream("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter19 = printWriter17.append(' ');
        char[] charArray22 = new char[] { 'x', 'a' };
        printWriter19.print(charArray22);
        printStream15.print(charArray22);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("fr");
        printWriter26.print("it_IT");
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.lang.Throwable[] throwableArray35 = mathException34.getSuppressed();
        java.lang.Throwable[] throwableArray36 = mathException34.getSuppressed();
        java.io.PrintWriter printWriter37 = printWriter26.printf(locale30, "it_IT", (java.lang.Object[]) throwableArray36);
        printWriter26.println((float) (byte) 10);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.write("hi!");
        printWriter26.println((java.lang.Object) printWriter41);
        java.io.PrintWriter printWriter46 = printWriter26.append('#');
        printWriter46.close();
        java.io.PrintStream printStream49 = new java.io.PrintStream("zh_CN");
        printStream49.print((float) (byte) -1);
        printStream49.println();
        printStream49.print("ita");
        printStream49.println('#');
        printStream49.println('u');
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter62 = printWriter60.append(' ');
        char[] charArray65 = new char[] { 'x', 'a' };
        printWriter62.print(charArray65);
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        java.lang.Throwable[] throwableArray72 = mathException71.getSuppressed();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray72);
        java.io.PrintWriter printWriter74 = printWriter62.printf("en-GB", (java.lang.Object[]) throwableArray72);
        char[] charArray79 = new char[] { 'a', ' ', 'u', 'x' };
        printWriter74.write(charArray79);
        printStream49.print(charArray79);
        printWriter46.println(charArray79);
        printStream15.println(charArray79);
        printWriter13.write(charArray79, 4, (int) (short) 0);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[x, a]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[x, a]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "a ux");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "a ux");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[a,  , u, x]");
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d);
        int int12 = hypergeometricDistributionImpl3.getSampleSize();
        int int13 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.7008547008546866d + "'", double11 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("");
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale5.getDisplayScript(locale9);
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.util.Locale.Builder builder13 = builder0.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setScript("Japan");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Japan [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.toLanguageTag();
        java.lang.String str6 = locale2.getDisplayName(locale3);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ita");
        java.util.Locale.Builder builder12 = builder8.removeUnicodeLocaleAttribute("ITA");
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale13);
        java.util.Locale locale18 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        printWriter22.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = mathException30.getSuppressed();
        java.io.PrintWriter printWriter33 = printWriter22.printf(locale26, "it_IT", (java.lang.Object[]) throwableArray32);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("fr");
        printWriter36.print("it_IT");
        java.util.Locale locale39 = java.util.Locale.ROOT;
        boolean boolean40 = locale39.hasExtensions();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale39.getDisplayName(locale41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale39.getDisplayCountry(locale43);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.io.PrintWriter printWriter50 = printWriter36.printf(locale43, "it_IT", objArray48);
        java.io.PrintWriter printWriter51 = printWriter20.printf(locale26, "fr", objArray48);
        java.lang.String str52 = locale18.getDisplayVariant(locale26);
        java.lang.String str53 = locale13.getDisplayVariant(locale26);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        java.lang.String str56 = locale54.getDisplayVariant();
        java.lang.String str57 = locale26.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet58 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder59 = builder12.setLocale(locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder62 = builder59.setExtension('4', "org.apache.commons.math.MathException: ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de" + "'", str5, "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch (Taiwan)" + "'", str6, "Chinesisch (Taiwan)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale18.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "chinois" + "'", str52, "chinois");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter1.println((float) (byte) 10);
        printWriter1.print(true);
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale17.getDisplayScript(locale21);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.write("hi!");
        printWriter25.println((java.lang.Object) (-1L));
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        java.lang.Object[] objArray36 = mathException35.getArguments();
        java.io.PrintWriter printWriter37 = printWriter25.format(locale30, "anglais", objArray36);
        java.io.PrintWriter printWriter38 = printWriter1.format(locale21, "Italy", objArray36);
        printWriter1.println("anglais");
        java.io.PrintWriter printWriter42 = printWriter1.append((java.lang.CharSequence) "");
        printWriter42.println((double) 10L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "italiano (Italia)" + "'", str31, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter42);
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getDisplayLanguage();
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getDisplayScript();
        java.util.Set<java.lang.Character> charSet6 = locale0.getExtensionKeys();
        java.lang.String str7 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale locale8 = builder3.build();
        java.util.Locale locale9 = builder3.build();
        java.lang.Object obj10 = locale9.clone();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "");
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException(throwable0);
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray17);
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        mathException2.addSuppressed((java.lang.Throwable) mathException20);
        java.io.PrintStream printStream25 = new java.io.PrintStream("zh_CN");
        printStream25.print((float) (byte) -1);
        printStream25.println();
        printStream25.print("ita");
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale33 = locale31.stripExtensions();
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.io.PrintStream printStream40 = printStream25.printf(locale33, "fr", (java.lang.Object[]) throwableArray39);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException(throwable41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("zh_CN", (java.lang.Object[]) throwableArray39, (java.lang.Throwable) mathException44);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = mathException49.getSuppressed();
        java.lang.Object[] objArray52 = mathException49.getArguments();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("", objArray52);
        mathException45.addSuppressed((java.lang.Throwable) mathException53);
        mathException20.addSuppressed((java.lang.Throwable) mathException53);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale.Builder builder7 = builder1.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setScript("GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ita");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter6 = printWriter4.append(' ');
        printWriter4.println(false);
        printWriter4.println('x');
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        printWriter13.write("hi!");
        printWriter13.println((java.lang.Object) (-1L));
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        java.io.PrintWriter printWriter25 = printWriter13.format(locale18, "anglais", objArray24);
        java.io.PrintWriter printWriter26 = printWriter4.format("italiano (Italia)", objArray24);
        java.io.PrintStream printStream27 = printStream1.printf("it_IT", objArray24);
        java.io.PrintStream printStream29 = printStream1.append((java.lang.CharSequence) "France");
        printStream1.println();
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "italiano (Italia)" + "'", str19, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setPopulationSize((int) 'a');
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 0);
        int int14 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        boolean boolean9 = locale3.hasExtensions();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder11 = builder0.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("cinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: cinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        printStream26.println((float) 117);
        printStream26.println(0L);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream26, false);
        java.io.PrintStream printStream34 = new java.io.PrintStream("zh_CN");
        printStream34.println();
        java.io.PrintStream printStream37 = printStream34.append('#');
        printStream34.close();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream34.write(byteArray42);
        printStream34.write((int) 'a');
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        java.io.PrintStream printStream48 = printStream34.append((java.lang.CharSequence) "italiano (Italia)");
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream48, false);
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream48, true);
        printStream26.print((java.lang.Object) printStream48);
        printStream48.print(false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        printStream1.println(0L);
        java.io.PrintStream printStream17 = printStream1.append((java.lang.CharSequence) "und");
        printStream1.flush();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.print("it_IT");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter26 = printWriter21.printf("fr", objArray25);
        printWriter26.print((float) (byte) 100);
        java.io.PrintWriter printWriter30 = printWriter26.append((java.lang.CharSequence) "ja");
        java.util.Locale locale34 = new java.util.Locale("", "", "");
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale35.getISO3Country();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("fr");
        printWriter40.println();
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("fr");
        printWriter44.print("it_IT");
        java.util.Locale locale47 = java.util.Locale.ROOT;
        boolean boolean48 = locale47.hasExtensions();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale47.getDisplayName(locale49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale47.getDisplayCountry(locale51);
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        java.io.PrintWriter printWriter58 = printWriter44.printf(locale51, "it_IT", objArray56);
        java.io.PrintWriter printWriter59 = printWriter40.printf("English", objArray56);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter40, false);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl65 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int66 = hypergeometricDistributionImpl65.getPopulationSize();
        double double68 = hypergeometricDistributionImpl65.cumulativeProbability((double) (short) -1);
        double double70 = hypergeometricDistributionImpl65.probability((double) (short) 100);
        double double72 = hypergeometricDistributionImpl65.cumulativeProbability((double) 117);
        printWriter40.print((java.lang.Object) 117);
        java.io.PrintWriter printWriter75 = printWriter40.append('4');
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("fr", objArray79);
        java.io.PrintWriter printWriter82 = printWriter75.format("en-GB", objArray79);
        java.lang.Object[] objArray84 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray84);
        java.lang.Object[] objArray86 = mathException85.getArguments();
        java.lang.Object[] objArray88 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("hi!", objArray88);
        java.lang.Throwable[] throwableArray90 = mathException89.getSuppressed();
        mathException85.addSuppressed((java.lang.Throwable) mathException89);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException89);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("chinois", objArray79, (java.lang.Throwable) mathException89);
        java.io.PrintWriter printWriter94 = printWriter26.printf(locale35, "ita", objArray79);
        java.io.PrintStream printStream95 = printStream1.printf("tedesco (JA,italien (Italie))", objArray79);
        printStream95.println(0);
        java.io.PrintStream printStream99 = new java.io.PrintStream((java.io.OutputStream) printStream95, true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 117 + "'", int66 == 117);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(printWriter94);
        org.junit.Assert.assertNotNull(printStream95);
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("tedesco", strMap1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale3.getCountry();
        java.util.Locale locale7 = new java.util.Locale("org.apache.commons.math.MathException");
        java.lang.String str8 = locale3.getDisplayCountry(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str11 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet10);
        java.util.Collection<java.util.Locale> localeCollection12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter(languageRangeList2, localeCollection12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale7.toString(), "org.apache.commons.math.mathexception");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        printStream4.println();
        printStream4.print("italien (Italie)");
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream4);
        printStream4.print("\u82f1\u8a9e");
        printStream4.print((float) (byte) 10);
        printStream4.print(' ');
        org.junit.Assert.assertNotNull(printStream4);
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = mathException13.getSuppressed();
        java.io.PrintStream printStream16 = printStream1.printf(locale9, "fr", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("zh_CN");
        printStream18.print((float) (byte) -1);
        char[] charArray23 = new char[] { 'x', 'u' };
        printStream18.println(charArray23);
        printStream18.println(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 10 };
        printStream18.write(byteArray31);
        printStream16.write(byteArray31);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl39 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int40 = hypergeometricDistributionImpl39.getPopulationSize();
        double double42 = hypergeometricDistributionImpl39.cumulativeProbability((int) (short) 100);
        int int43 = hypergeometricDistributionImpl39.getPopulationSize();
        double double46 = hypergeometricDistributionImpl39.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl39.setSampleSize((int) 'a');
        double double50 = hypergeometricDistributionImpl39.probability((int) '4');
        hypergeometricDistributionImpl39.setPopulationSize(1);
        printStream35.println((java.lang.Object) hypergeometricDistributionImpl39);
        printStream35.println((int) 'x');
        printStream35.println("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream35, false);
        java.io.PrintStream printStream61 = printStream59.append((java.lang.CharSequence) "org.apache.commons.math.MathException: China");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[x, u]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 0, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 117 + "'", int40 == 117);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 117 + "'", int43 == 117);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(printStream61);
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.setScript("Deutschland");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Deutschland [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        printStream7.println("");
        printStream7.println("fr");
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream7, false);
        java.io.PrintStream printStream35 = printStream7.append('a');
        printStream7.print('#');
        printStream7.write((int) 'x');
        printStream7.println(true);
        printStream7.println(true);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Collection<java.util.Locale> localeCollection47 = null;
        java.util.Locale locale48 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, localeCollection47);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList55);
        printStream7.print((java.lang.Object) languageRangeList45);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter("fr");
        printWriter61.print("it_IT");
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter66 = printWriter61.printf("fr", objArray65);
        printWriter66.write((int) 'x');
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("fr-CA");
        java.lang.Throwable[] throwableArray72 = mathException71.getSuppressed();
        java.io.PrintWriter printWriter73 = printWriter66.printf("\u30ab\u30ca\u30c0", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream74 = printStream7.format("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream76 = printStream7.append((java.lang.CharSequence) "fran\347ais (france)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(printStream76);
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter4 = printWriter2.append(' ');
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category5, locale6);
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException(throwable10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter2.format(locale6, "Italy", (java.lang.Object[]) throwableArray13);
        printWriter2.println((int) '4');
        java.io.PrintStream printStream19 = new java.io.PrintStream("zh_CN");
        printStream19.print((float) (byte) -1);
        printStream19.println();
        printStream19.print((double) (short) 1);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", objArray27);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        mathException28.addSuppressed((java.lang.Throwable) mathException32);
        java.lang.Throwable[] throwableArray35 = mathException28.getSuppressed();
        java.io.PrintStream printStream36 = printStream19.format("de", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter37 = printWriter2.printf("cinese (Cina)", (java.lang.Object[]) throwableArray35);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("eng");
        java.lang.Object[] objArray41 = mathException40.getArguments();
        java.io.PrintWriter printWriter42 = printWriter37.format("\u30a4\u30bf\u30ea\u30a2", objArray41);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter("fr");
        printWriter46.print("it_IT");
        java.util.Locale locale49 = java.util.Locale.ROOT;
        boolean boolean50 = locale49.hasExtensions();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale49.getDisplayName(locale51);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        boolean boolean54 = locale53.hasExtensions();
        java.lang.String str55 = locale49.getDisplayCountry(locale53);
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray58);
        java.io.PrintWriter printWriter60 = printWriter46.printf(locale53, "it_IT", objArray58);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", objArray58);
        java.lang.Throwable[] throwableArray62 = mathException61.getSuppressed();
        java.lang.Throwable[] throwableArray63 = mathException61.getSuppressed();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ja-x-lvariant-ja", objArray41, (java.lang.Throwable) mathException64);
        java.lang.String str66 = mathException64.getPattern();
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("ITALIANO (ITALIA)", "fr-CA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: fr-CA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale.Builder builder7 = builder1.setVariant("");
        java.util.Locale.Builder builder8 = builder1.clearExtensions();
        java.util.Locale.Builder builder10 = builder1.setLanguage("Italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder1.setRegion("italie");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: italie [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        java.io.PrintStream printStream1 = new java.io.PrintStream("US");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream5 = printStream1.append((java.lang.CharSequence) "ja_JP", 52, 96);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 96");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.mathexception", "DEU");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: DEU");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("deu (DEU,italien)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.lang.String str4 = locale1.toLanguageTag();
        java.lang.String str5 = locale1.getISO3Language();
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl9 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int10 = hypergeometricDistributionImpl9.getPopulationSize();
        double double12 = hypergeometricDistributionImpl9.upperCumulativeProbability(35);
        double double14 = hypergeometricDistributionImpl9.upperCumulativeProbability((int) (short) 10);
        double double16 = hypergeometricDistributionImpl9.cumulativeProbability((double) 100);
        hypergeometricDistributionImpl9.setNumberOfSuccesses((int) (short) 1);
        double double20 = hypergeometricDistributionImpl9.cumulativeProbability((int) (short) 0);
        boolean boolean21 = locale1.equals((java.lang.Object) (short) 0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 117 + "'", int10 == 117);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7008547008546866d + "'", double20 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream4.println((int) 'a');
        printStream4.print(' ');
        printStream4.close();
        java.io.PrintStream printStream13 = new java.io.PrintStream("zh_CN");
        printStream13.print((float) (byte) -1);
        printStream13.println();
        printStream13.print("ita");
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.util.Locale locale21 = locale19.stripExtensions();
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = mathException25.getSuppressed();
        java.io.PrintStream printStream28 = printStream13.printf(locale21, "fr", (java.lang.Object[]) throwableArray27);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        java.lang.Object[] objArray32 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) mathException31);
        java.lang.Throwable[] throwableArray34 = mathException31.getSuppressed();
        java.io.PrintStream printStream35 = printStream4.printf("tedesco", (java.lang.Object[]) throwableArray34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        boolean boolean37 = locale36.hasExtensions();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale36.getDisplayName(locale38);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.print("it_IT");
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale44.getDisplayName(locale46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.lang.String str50 = locale44.getDisplayCountry(locale48);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.io.PrintWriter printWriter55 = printWriter41.printf(locale48, "it_IT", objArray53);
        printWriter55.print((double) 100L);
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = locale58.getDisplayCountry(locale59);
        java.lang.String str61 = locale58.getVariant();
        java.lang.String str62 = locale58.getCountry();
        java.io.PrintStream printStream65 = new java.io.PrintStream("zh_CN");
        printStream65.print((float) (byte) -1);
        printStream65.println();
        printStream65.print("ita");
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.util.Locale locale73 = locale71.stripExtensions();
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = mathException77.getSuppressed();
        java.io.PrintStream printStream80 = printStream65.printf(locale73, "fr", (java.lang.Object[]) throwableArray79);
        java.io.PrintWriter printWriter81 = printWriter55.format(locale58, "fra", (java.lang.Object[]) throwableArray79);
        java.util.Set<java.lang.String> strSet82 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale58.toLanguageTag();
        java.lang.String str84 = locale38.getDisplayLanguage(locale58);
        java.lang.String str85 = locale38.getVariant();
        printStream4.print((java.lang.Object) str85);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream90 = printStream4.append((java.lang.CharSequence) "CAN", 34, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -33");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ja" + "'", str83, "ja");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println("hi!");
        printStream1.println('4');
        printStream1.println(true);
        printStream1.print('4');
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        printStream1.println((java.lang.Object) strSet18);
        java.io.PrintStream printStream21 = printStream1.append('u');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream25 = printStream21.append((java.lang.CharSequence) "tedesco", (int) (byte) -1, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(printStream21);
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println("hi!");
        printStream1.println('4');
        printStream1.println(true);
        printStream1.print('4');
        printStream1.print((int) (short) 10);
        printStream1.print((float) 52);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) 0L);
        double double12 = hypergeometricDistributionImpl3.probability((int) 'a');
        double double14 = hypergeometricDistributionImpl3.probability(0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.7008547008546866d + "'", double10 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7008547008546866d + "'", double14 == 0.7008547008546866d);
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getCountry();
        java.lang.String str4 = locale1.getScript();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.lang.String str6 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "China" + "'", str5, "China");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize((int) 'u');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability(35);
        hypergeometricDistributionImpl3.setSampleSize(10);
        double double13 = hypergeometricDistributionImpl3.upperCumulativeProbability(1);
        double double15 = hypergeometricDistributionImpl3.probability((double) 17);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.08547008547008297d + "'", double13 == 0.08547008547008297d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("_DE");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=_de");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) 'x');
        double double14 = hypergeometricDistributionImpl3.upperCumulativeProbability(100);
        double double16 = hypergeometricDistributionImpl3.probability(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = hypergeometricDistributionImpl3.cumulativeProbability(117, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        java.util.Locale locale2 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str3 = locale2.getCountry();
        boolean boolean4 = locale2.hasExtensions();
        java.lang.String str5 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITALY" + "'", str3, "ITALY");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITALY" + "'", str5, "ITALY");
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale10.getCountry();
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale10, locale13, locale14, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Collection<java.util.Locale> localeCollection26 = null;
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection26);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.String str32 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale33.getCountry();
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Locale locale41 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale33, locale36, locale37, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList48, strMap49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList50, strMap51);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Collection<java.util.Locale> localeCollection56 = null;
        java.util.Locale locale57 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, localeCollection56);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Collection<java.util.Locale> localeCollection66 = null;
        java.util.Locale locale67 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, localeCollection66);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        java.lang.String str72 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strList70);
        java.util.Locale locale73 = java.util.Locale.ROOT;
        boolean boolean74 = locale73.hasExtensions();
        java.lang.String str75 = locale73.getCountry();
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.util.Locale locale81 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray82 = new java.util.Locale[] { locale73, locale76, locale77, locale81 };
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList83);
        java.util.Locale locale87 = java.util.Locale.lookup(languageRangeList52, (java.util.Collection<java.util.Locale>) localeList83);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(locale57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(locale67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNull(locale87);
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException(throwable1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("English", (java.lang.Throwable) mathException3);
        java.lang.String str6 = mathException5.getPattern();
        java.lang.String str7 = mathException5.getPattern();
        java.lang.String str8 = mathException5.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English" + "'", str6, "English");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.MathException: English" + "'", str8, "org.apache.commons.math.MathException: English");
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale5.getDisplayScript(locale13);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.lang.String str17 = locale15.getVariant();
        boolean boolean18 = locale15.hasExtensions();
        java.util.Locale locale19 = locale15.stripExtensions();
        java.lang.String str20 = locale5.getDisplayScript(locale15);
        java.util.Locale locale23 = new java.util.Locale("\u5fb7\u6587", "hi! (ITALY)");
        java.lang.String str24 = locale15.getDisplayCountry(locale23);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale23.toString(), "\u5fb7\u6587_HI! (ITALY)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fran\347ais (France)");
        java.util.Locale locale4 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str5 = locale4.getCountry();
        boolean boolean6 = locale4.hasExtensions();
        printStream1.print((java.lang.Object) locale4);
        printStream1.print((int) 'x');
        printStream1.println((int) (byte) 10);
        printStream1.print((float) 32);
        java.util.Locale locale15 = new java.util.Locale("fra");
        java.lang.String str16 = locale15.toLanguageTag();
        printStream1.print((java.lang.Object) str16);
        org.junit.Assert.assertEquals(locale4.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITALY" + "'", str5, "ITALY");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "fra");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fra" + "'", str16, "fra");
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        double double6 = hypergeometricDistributionImpl3.probability(0);
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 0, (int) 'u');
        int int10 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 10);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(52);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'a');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.7008547008546866d + "'", double6 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 117 + "'", int10 == 117);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        printStream7.println("");
        printStream7.println("fr");
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream7, false);
        java.io.PrintStream printStream35 = printStream7.append('a');
        printStream7.print('#');
        printStream7.write((int) 'x');
        printStream7.println(true);
        printStream7.println(true);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Collection<java.util.Locale> localeCollection47 = null;
        java.util.Locale locale48 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, localeCollection47);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList55);
        printStream7.print((java.lang.Object) languageRangeList45);
        printStream7.flush();
        printStream7.println((long) (byte) 0);
        java.util.Locale locale65 = new java.util.Locale("English", "", "chinois");
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.lang.String str68 = locale66.getDisplayCountry(locale67);
        boolean boolean69 = locale67.hasExtensions();
        java.lang.String str70 = locale65.getDisplayLanguage(locale67);
        java.util.Locale locale71 = locale67.stripExtensions();
        java.lang.String str72 = locale67.getDisplayName();
        java.lang.String str73 = locale67.getISO3Language();
        java.lang.String str74 = locale67.toLanguageTag();
        printStream7.print((java.lang.Object) locale67);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertEquals(locale65.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "english" + "'", str70, "english");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str72, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "jpn" + "'", str73, "jpn");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ja" + "'", str74, "ja");
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.write("hi!");
        printWriter2.println((java.lang.Object) (-1L));
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Object[] objArray13 = mathException12.getArguments();
        java.io.PrintWriter printWriter14 = printWriter2.format(locale7, "anglais", objArray13);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale16.getDisplayName(locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleKeys();
        java.util.Locale locale22 = locale18.stripExtensions();
        java.lang.String str23 = locale22.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str8, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str20, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "jpn" + "'", str23, "jpn");
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', 0, (int) (short) 100);
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double8 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) -1, 0);
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability(3, 21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = new java.util.Locale("Italy", "anglais");
        java.lang.String str11 = locale5.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italy" + "'", str7, "Italy");
        org.junit.Assert.assertEquals(locale10.toString(), "italy_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "italy_ANGLAIS");
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter1.write("fr");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println((float) (byte) 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("English", (double) 0);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        double double7 = languageRange2.getWeight();
        java.lang.String str8 = languageRange2.getRange();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.println();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("fr");
        printWriter14.print("it_IT");
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale17.getDisplayCountry(locale21);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        java.io.PrintWriter printWriter28 = printWriter14.printf(locale21, "it_IT", objArray26);
        java.io.PrintWriter printWriter29 = printWriter10.printf("English", objArray26);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter10, false);
        printWriter31.write((int) (byte) 100);
        printWriter31.print((long) 35);
        java.lang.Object obj36 = null;
        printWriter31.println(obj36);
        printWriter31.println((long) '4');
        printWriter31.print(0.44444444444442294d);
        boolean boolean42 = languageRange2.equals((java.lang.Object) printWriter31);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "english" + "'", str3, "english");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "english" + "'", str4, "english");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "english" + "'", str8, "english");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("italien (Italie)");
        printWriter1.println("");
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter22.write((int) (byte) 100);
        printWriter22.println('a');
        printWriter22.flush();
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: English");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:english");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double17 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (byte) 100);
        int int19 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.2991452991453134d);
        int int20 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("italy (ANGLAIS)", "allemand (Allemagne)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: italy (ANGLAIS) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 0);
        double double14 = hypergeometricDistributionImpl3.probability(97);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'x', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        java.util.Locale locale1 = new java.util.Locale("cinese");
        boolean boolean2 = locale1.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for cinese");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "cinese");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "Vereinigtes K\366nigreich");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Vereinigtes Ko?nigreich");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintStream printStream7 = printStream4.append((java.lang.CharSequence) "org.apache.commons.math.mathexception: ");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl11 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int12 = hypergeometricDistributionImpl11.getPopulationSize();
        double double14 = hypergeometricDistributionImpl11.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl11.setSampleSize((int) '#');
        hypergeometricDistributionImpl11.setNumberOfSuccesses((int) (short) 10);
        double double20 = hypergeometricDistributionImpl11.cumulativeProbability((int) (short) 0);
        printStream7.println((java.lang.Object) (short) 0);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.023984009456667447d + "'", double20 == 0.023984009456667447d);
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter1.println((float) (byte) 10);
        printWriter1.print(true);
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale17.getDisplayScript(locale21);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.write("hi!");
        printWriter25.println((java.lang.Object) (-1L));
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        java.lang.Object[] objArray36 = mathException35.getArguments();
        java.io.PrintWriter printWriter37 = printWriter25.format(locale30, "anglais", objArray36);
        java.io.PrintWriter printWriter38 = printWriter1.format(locale21, "Italy", objArray36);
        java.lang.String str39 = locale21.getDisplayLanguage();
        java.lang.String str40 = locale21.getISO3Country();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italian (Italy)" + "'", str31, "Italian (Italy)");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English" + "'", str39, "English");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CAN" + "'", str40, "CAN");
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale10.getVariant();
        java.lang.String str13 = locale6.getDisplayVariant(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale10.getUnicodeLocaleType("anglais");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: anglais");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "United Kingdom" + "'", str11, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setLanguageTag("ko");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setVariant("fr_FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: fr_FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.lang.String str35 = locale32.getVariant();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale32.getDisplayScript(locale36);
        java.util.Locale locale40 = new java.util.Locale("Italy", "Italy");
        java.lang.String str41 = locale36.getDisplayLanguage(locale40);
        boolean boolean42 = locale36.hasExtensions();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException();
        java.lang.String str46 = mathException45.getPattern();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException45);
        java.lang.Object[] objArray48 = mathException45.getArguments();
        java.io.PrintWriter printWriter49 = printWriter30.format(locale36, "cinese", objArray48);
        printWriter49.write(31);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals(locale40.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter1.println((float) (byte) 10);
        printWriter1.print(true);
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale17.getDisplayScript(locale21);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.write("hi!");
        printWriter25.println((java.lang.Object) (-1L));
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        java.lang.Object[] objArray36 = mathException35.getArguments();
        java.io.PrintWriter printWriter37 = printWriter25.format(locale30, "anglais", objArray36);
        java.io.PrintWriter printWriter38 = printWriter1.format(locale21, "Italy", objArray36);
        java.io.PrintWriter printWriter40 = printWriter1.append((java.lang.CharSequence) "cinese");
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintWriter printWriter43 = printWriter1.append('4');
        java.io.PrintStream printStream45 = new java.io.PrintStream("zh_CN");
        printStream45.print((float) (byte) -1);
        printStream45.println();
        printStream45.println();
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream45, true);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("fr");
        printWriter53.print("it_IT");
        java.util.Locale locale56 = java.util.Locale.ROOT;
        boolean boolean57 = locale56.hasExtensions();
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale56.getDisplayName(locale58);
        java.util.Locale locale60 = java.util.Locale.ROOT;
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = locale56.getDisplayCountry(locale60);
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("hi!", objArray65);
        java.io.PrintWriter printWriter67 = printWriter53.printf(locale60, "it_IT", objArray65);
        printStream51.println((java.lang.Object) "it_IT");
        printStream51.print((float) (byte) 1);
        printStream51.print(0);
        java.io.PrintStream printStream76 = new java.io.PrintStream("zh_CN");
        printStream76.print((float) (byte) -1);
        printStream76.println();
        printStream76.print("ita");
        java.util.Locale locale82 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet83 = locale82.getUnicodeLocaleKeys();
        java.util.Locale locale84 = locale82.stripExtensions();
        java.lang.Object[] objArray87 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("hi!", objArray87);
        java.lang.Throwable[] throwableArray89 = mathException88.getSuppressed();
        java.lang.Throwable[] throwableArray90 = mathException88.getSuppressed();
        java.io.PrintStream printStream91 = printStream76.printf(locale84, "fr", (java.lang.Object[]) throwableArray90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray90);
        java.io.PrintStream printStream93 = printStream51.format("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray90);
        printStream93.println((int) (byte) 100);
        java.io.PrintStream printStream97 = new java.io.PrintStream((java.io.OutputStream) printStream93, false);
        printWriter43.print((java.lang.Object) printStream97);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italian (Italy)" + "'", str31, "Italian (Italy)");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 1);
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((double) 0.0f, (double) (short) 10);
        int int19 = hypergeometricDistributionImpl3.getPopulationSize();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale locale4 = builder3.build();
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale.setDefault(locale4);
        java.lang.String str7 = locale4.getLanguage();
        boolean boolean8 = locale4.hasExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability((int) ' ');
        hypergeometricDistributionImpl3.setSampleSize((int) 'x');
        double double15 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '4');
        double double17 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 1);
        double double20 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) -1, 117);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.io.PrintStream printStream5 = new java.io.PrintStream("zh_CN");
        printStream5.print((float) (byte) -1);
        printStream5.println();
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        printStream5.println();
        printStream5.print((-1));
        boolean boolean15 = printStream5.checkError();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String str22 = locale16.getDisplayCountry(locale20);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException();
        java.lang.String str25 = mathException24.getPattern();
        java.lang.Object[] objArray26 = mathException24.getArguments();
        java.io.PrintStream printStream27 = printStream5.format(locale20, "Chinese (China)", objArray26);
        java.util.Locale.Builder builder28 = builder1.setLocale(locale20);
        java.lang.String str29 = locale20.getISO3Country();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        double double11 = hypergeometricDistributionImpl3.probability((double) 10L);
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getPopulationSize();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = hypergeometricDistributionImpl3.cumulativeProbability((double) 10L, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream10 = printStream4.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray9);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl15 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int16 = hypergeometricDistributionImpl15.getPopulationSize();
        double double18 = hypergeometricDistributionImpl15.cumulativeProbability((int) (short) 100);
        int int19 = hypergeometricDistributionImpl15.getPopulationSize();
        double double21 = hypergeometricDistributionImpl15.cumulativeProbability((int) '4');
        int int22 = hypergeometricDistributionImpl15.getNumberOfSuccesses();
        hypergeometricDistributionImpl15.setPopulationSize((int) (short) 100);
        double double27 = hypergeometricDistributionImpl15.cumulativeProbability(0.0d, (double) (short) 100);
        hypergeometricDistributionImpl15.setNumberOfSuccesses(35);
        int int30 = hypergeometricDistributionImpl15.getNumberOfSuccesses();
        double double32 = hypergeometricDistributionImpl15.probability((int) ' ');
        printStream10.print((java.lang.Object) ' ');
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException(throwable35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.io.PrintStream printStream39 = printStream10.printf("Italia", (java.lang.Object[]) throwableArray38);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        java.io.PrintStream printStream42 = new java.io.PrintStream("zh_CN");
        printStream42.print((float) (byte) -1);
        char[] charArray47 = new char[] { 'x', 'u' };
        printStream42.println(charArray47);
        java.io.PrintStream printStream50 = new java.io.PrintStream("zh_CN");
        printStream50.println((float) (-1));
        java.io.PrintStream printStream54 = new java.io.PrintStream("zh_CN");
        printStream54.println();
        java.io.PrintStream printStream57 = printStream54.append('#');
        printStream54.close();
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream54.write(byteArray63);
        printStream50.write(byteArray63);
        printStream42.write(byteArray63);
        printStream10.write(byteArray63);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2.6106672925738774E-19d + "'", double32 == 2.6106672925738774E-19d);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[x, u]");
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100, -1, -1]");
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.println(0.0f);
        printWriter1.write("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write("\u65e5\u672c\u8a9e", 117, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 234");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream4.println((int) 'a');
        printStream4.print((double) 0L);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("_DE");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("fr");
        printWriter15.print("it_IT");
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter20 = printWriter15.printf("fr", objArray19);
        printWriter20.print((float) (byte) 100);
        java.io.PrintWriter printWriter24 = printWriter20.append((java.lang.CharSequence) "ja");
        java.util.Locale locale28 = new java.util.Locale("", "", "");
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale29.getISO3Country();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("fr");
        printWriter34.println();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale41 = java.util.Locale.ROOT;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale41.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale41.getDisplayCountry(locale45);
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray50);
        java.io.PrintWriter printWriter52 = printWriter38.printf(locale45, "it_IT", objArray50);
        java.io.PrintWriter printWriter53 = printWriter34.printf("English", objArray50);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter34, false);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl59 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int60 = hypergeometricDistributionImpl59.getPopulationSize();
        double double62 = hypergeometricDistributionImpl59.cumulativeProbability((double) (short) -1);
        double double64 = hypergeometricDistributionImpl59.probability((double) (short) 100);
        double double66 = hypergeometricDistributionImpl59.cumulativeProbability((double) 117);
        printWriter34.print((java.lang.Object) 117);
        java.io.PrintWriter printWriter69 = printWriter34.append('4');
        java.lang.Object[] objArray73 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("hi!", objArray73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("fr", objArray73);
        java.io.PrintWriter printWriter76 = printWriter69.format("en-GB", objArray73);
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        java.lang.Object[] objArray80 = mathException79.getArguments();
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("hi!", objArray82);
        java.lang.Throwable[] throwableArray84 = mathException83.getSuppressed();
        mathException79.addSuppressed((java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("chinois", objArray73, (java.lang.Throwable) mathException83);
        java.io.PrintWriter printWriter88 = printWriter20.printf(locale29, "ita", objArray73);
        java.io.PrintStream printStream89 = printStream10.format(locale12, "org.apache.commons.math.MathException: China", objArray73);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 117 + "'", int60 == 117);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(printWriter88);
        org.junit.Assert.assertNotNull(printStream89);
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        printStream26.print(false);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.getDefault(category29);
        java.util.Locale locale31 = java.util.Locale.getDefault(category29);
        printStream26.println((java.lang.Object) category29);
        java.util.Locale locale33 = java.util.Locale.getDefault(category29);
        java.io.PrintStream printStream35 = new java.io.PrintStream("zh_CN");
        printStream35.println();
        java.io.PrintStream printStream38 = printStream35.append('#');
        printStream35.close();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream35.write(byteArray43);
        printStream35.write((int) 'a');
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream35);
        printStream47.print(false);
        java.util.Locale locale52 = new java.util.Locale("hi!", "Italy");
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale52.getVariant();
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter59 = printWriter57.append(' ');
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("fr");
        printWriter62.print("it_IT");
        java.util.Locale locale65 = java.util.Locale.ROOT;
        boolean boolean66 = locale65.hasExtensions();
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = locale65.getDisplayName(locale67);
        java.util.Locale locale69 = java.util.Locale.ROOT;
        boolean boolean70 = locale69.hasExtensions();
        java.lang.String str71 = locale65.getDisplayCountry(locale69);
        java.lang.Object[] objArray74 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        java.io.PrintWriter printWriter76 = printWriter62.printf(locale69, "it_IT", objArray74);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter("fr");
        printWriter79.print("it_IT");
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray86 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("hi!", objArray86);
        java.lang.Throwable[] throwableArray88 = mathException87.getSuppressed();
        java.lang.Throwable[] throwableArray89 = mathException87.getSuppressed();
        java.io.PrintWriter printWriter90 = printWriter79.printf(locale83, "it_IT", (java.lang.Object[]) throwableArray89);
        java.io.PrintWriter printWriter91 = printWriter62.format("it_IT", (java.lang.Object[]) throwableArray89);
        java.io.PrintWriter printWriter92 = printWriter59.format("zh_CN", (java.lang.Object[]) throwableArray89);
        java.io.PrintStream printStream93 = printStream47.format(locale52, "zh_CN", (java.lang.Object[]) throwableArray89);
        java.lang.String str94 = locale52.toLanguageTag();
        java.lang.String str95 = locale52.getDisplayCountry();
        java.util.Locale.setDefault(category29, locale52);
        java.util.Locale locale97 = java.util.Locale.getDefault(category29);
        java.util.Locale locale98 = java.util.Locale.getDefault(category29);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 10, -1]");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_ITALY");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(printWriter90);
        org.junit.Assert.assertNotNull(printWriter91);
        org.junit.Assert.assertNotNull(printWriter92);
        org.junit.Assert.assertNotNull(printStream93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "und" + "'", str94, "und");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ITALY" + "'", str95, "ITALY");
        org.junit.Assert.assertNotNull(locale97);
        org.junit.Assert.assertEquals(locale97.toString(), "hi!_ITALY");
        org.junit.Assert.assertNotNull(locale98);
        org.junit.Assert.assertEquals(locale98.toString(), "hi!_ITALY");
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter3.printf(locale7, "it_IT", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter32 = printWriter1.printf(locale7, "fr", objArray29);
        printWriter1.print('a');
        printWriter1.println((float) (short) 10);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        java.util.Locale.Builder builder39 = builder37.clearExtensions();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder41 = builder39.setLocale(locale40);
        java.util.Set<java.lang.Character> charSet42 = locale40.getExtensionKeys();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("fr");
        printWriter45.println();
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("fr");
        printWriter49.print("it_IT");
        java.util.Locale locale52 = java.util.Locale.ROOT;
        boolean boolean53 = locale52.hasExtensions();
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale52.getDisplayName(locale54);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        boolean boolean57 = locale56.hasExtensions();
        java.lang.String str58 = locale52.getDisplayCountry(locale56);
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        java.io.PrintWriter printWriter63 = printWriter49.printf(locale56, "it_IT", objArray61);
        java.io.PrintWriter printWriter64 = printWriter45.printf("English", objArray61);
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.Writer) printWriter45, false);
        printWriter45.print(true);
        java.io.PrintWriter printWriter70 = printWriter45.append((java.lang.CharSequence) "Canada");
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet73 = locale71.getExtensionKeys();
        java.io.PrintStream printStream76 = new java.io.PrintStream("zh_CN");
        printStream76.print((float) (byte) -1);
        printStream76.println();
        printStream76.println();
        java.io.PrintStream printStream82 = new java.io.PrintStream((java.io.OutputStream) printStream76, true);
        printStream82.println('u');
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException();
        java.lang.String str88 = mathException87.getPattern();
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException87);
        java.lang.Object[] objArray90 = mathException87.getArguments();
        java.io.PrintStream printStream91 = printStream82.format("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)", objArray90);
        java.io.PrintWriter printWriter92 = printWriter70.format(locale71, "deu", objArray90);
        java.io.PrintWriter printWriter93 = printWriter1.printf(locale40, "French", objArray90);
        java.lang.String str94 = locale40.toLanguageTag();
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(printWriter92);
        org.junit.Assert.assertNotNull(printWriter93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "zh-TW" + "'", str94, "zh-TW");
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.lang.String str4 = locale0.getISO3Country();
        java.util.Set<java.lang.Character> charSet5 = locale0.getExtensionKeys();
        java.lang.String str6 = locale0.getISO3Language();
        java.util.Locale locale7 = locale0.stripExtensions();
        java.lang.String str8 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setVariant("anglais");
        java.util.Locale locale9 = builder8.build();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        printWriter13.print("it_IT");
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String str22 = locale16.getDisplayCountry(locale20);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.io.PrintWriter printWriter27 = printWriter13.printf(locale20, "it_IT", objArray25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray25);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.lang.Throwable[] throwableArray30 = mathException28.getSuppressed();
        java.io.PrintWriter printWriter31 = printWriter1.printf(locale9, "de", (java.lang.Object[]) throwableArray30);
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category32, locale33);
        java.lang.String str35 = locale33.getScript();
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clearExtensions();
        java.util.Locale.Builder builder39 = builder37.setLanguageTag("fr");
        java.util.Locale locale40 = builder39.build();
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale33.getDisplayScript(locale40);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale33.getDisplayCountry(locale43);
        java.lang.String str45 = locale9.getDisplayCountry(locale43);
        java.lang.String str46 = locale43.toLanguageTag();
        java.lang.Object obj47 = locale43.clone();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "it" + "'", str46, "it");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "it");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "it");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "it");
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter1.println((float) (byte) 10);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        printWriter16.write("hi!");
        printWriter1.println((java.lang.Object) printWriter16);
        java.io.PrintWriter printWriter21 = printWriter1.append('#');
        printWriter1.println((int) (short) 0);
        printWriter1.print(0.3499999999999959d);
        printWriter1.write("english", 1, (-1));
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter30.println(31);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter21);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.upperCumulativeProbability(35);
        double double8 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = hypergeometricDistributionImpl3.cumulativeProbability(0.02999999999999997d, 1.7736227499076662E-4d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("fra");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setRegion("de");
        java.util.Locale locale7 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder0.setExtension('x', "United States");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: United States [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "_DE");
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.print((long) 'u');
        printStream1.print(true);
        printStream1.print('4');
        printStream1.write((int) (byte) 10);
        java.io.PrintStream printStream17 = printStream1.append('a');
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder21 = builder18.setScript("");
        java.util.Locale.Builder builder23 = builder18.setScript("");
        java.util.Locale.Builder builder24 = builder18.clear();
        java.util.Locale.Builder builder25 = builder18.clear();
        java.util.Locale locale26 = java.util.Locale.UK;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale26.getDisplayScript(locale27);
        java.lang.String str29 = locale27.getDisplayScript();
        java.util.Locale.Builder builder30 = builder25.setLocale(locale27);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.print("it_IT");
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = mathException43.getSuppressed();
        java.io.PrintWriter printWriter46 = printWriter35.printf(locale39, "it_IT", (java.lang.Object[]) throwableArray45);
        printWriter35.write("fr");
        printWriter35.print(1.0f);
        java.lang.String[] strArray52 = java.util.Locale.getISOLanguages();
        java.io.PrintWriter printWriter53 = printWriter35.format("ita", (java.lang.Object[]) strArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("Deutsch", (java.lang.Object[]) strArray52);
        java.lang.Object[] objArray55 = mathException54.getArguments();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("Japan", objArray55, (java.lang.Throwable) mathException57);
        java.io.PrintStream printStream59 = printStream1.format(locale27, "deu (ANGLAIS,CA)", objArray55);
        printStream1.print(true);
        printStream1.println('a');
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[aa, ab, ae, af, ak, am, an, ar, as, av, ay, az, ba, be, bg, bh, bi, bm, bn, bo, br, bs, ca, ce, ch, co, cr, cs, cu, cv, cy, da, de, dv, dz, ee, el, en, eo, es, et, eu, fa, ff, fi, fj, fo, fr, fy, ga, gd, gl, gn, gu, gv, ha, he, hi, ho, hr, ht, hu, hy, hz, ia, id, ie, ig, ii, ik, in, io, is, it, iu, iw, ja, ji, jv, ka, kg, ki, kj, kk, kl, km, kn, ko, kr, ks, ku, kv, kw, ky, la, lb, lg, li, ln, lo, lt, lu, lv, mg, mh, mi, mk, ml, mn, mo, mr, ms, mt, my, na, nb, nd, ne, ng, nl, nn, no, nr, nv, ny, oc, oj, om, or, os, pa, pi, pl, ps, pt, qu, rm, rn, ro, ru, rw, sa, sc, sd, se, sg, si, sk, sl, sm, sn, so, sq, sr, ss, st, su, sv, sw, ta, te, tg, th, ti, tk, tl, tn, to, tr, ts, tt, tw, ty, ug, uk, ur, uz, ve, vi, vo, wa, wo, xh, yi, yo, za, zh, zu]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[aa, ab, ae, af, ak, am, an, ar, as, av, ay, az, ba, be, bg, bh, bi, bm, bn, bo, br, bs, ca, ce, ch, co, cr, cs, cu, cv, cy, da, de, dv, dz, ee, el, en, eo, es, et, eu, fa, ff, fi, fj, fo, fr, fy, ga, gd, gl, gn, gu, gv, ha, he, hi, ho, hr, ht, hu, hy, hz, ia, id, ie, ig, ii, ik, in, io, is, it, iu, iw, ja, ji, jv, ka, kg, ki, kj, kk, kl, km, kn, ko, kr, ks, ku, kv, kw, ky, la, lb, lg, li, ln, lo, lt, lu, lv, mg, mh, mi, mk, ml, mn, mo, mr, ms, mt, my, na, nb, nd, ne, ng, nl, nn, no, nr, nv, ny, oc, oj, om, or, os, pa, pi, pl, ps, pt, qu, rm, rn, ro, ru, rw, sa, sc, sd, se, sg, si, sk, sl, sm, sn, so, sq, sr, ss, st, su, sv, sw, ta, te, tg, th, ti, tk, tl, tn, to, tr, ts, tt, tw, ty, ug, uk, ur, uz, ve, vi, vo, wa, wo, xh, yi, yo, za, zh, zu]");
        org.junit.Assert.assertNotNull(printStream59);
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter3.printf(locale7, "it_IT", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter32 = printWriter1.printf(locale7, "fr", objArray29);
        char[] charArray36 = new char[] { '#', ' ', 'x' };
        printWriter1.write(charArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("zh_CN");
        printStream39.print((float) (byte) -1);
        printStream39.println();
        printStream39.println();
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream39, true);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        printStream45.println((java.lang.Object) "it_IT");
        printStream45.println(1.0d);
        java.io.PrintStream printStream66 = new java.io.PrintStream("zh_CN");
        printStream66.println();
        java.io.PrintStream printStream69 = printStream66.append('#');
        printStream66.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter74 = printWriter72.append(' ');
        char[] charArray77 = new char[] { 'x', 'a' };
        printWriter74.print(charArray77);
        printStream66.println(charArray77);
        printStream45.print(charArray77);
        printWriter1.print(charArray77);
        printWriter1.print(true);
        printWriter1.print((int) (short) 100);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#,  , x]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[x, a]");
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("fr");
        printWriter20.print("it_IT");
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", objArray27);
        java.lang.Throwable[] throwableArray29 = mathException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = mathException28.getSuppressed();
        java.io.PrintWriter printWriter31 = printWriter20.printf(locale24, "it_IT", (java.lang.Object[]) throwableArray30);
        java.io.PrintWriter printWriter32 = printWriter3.format("it_IT", (java.lang.Object[]) throwableArray30);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.lang.String str36 = locale33.getVariant();
        java.lang.String str37 = locale33.getCountry();
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter40 = printWriter3.format(locale33, "fr-CA", (java.lang.Object[]) strArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("ANGLAIS", (java.lang.Object[]) strArray39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("german (germany) (FRENCH,italiano)", (java.lang.Object[]) strArray39);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        printStream4.println();
        printStream4.println(' ');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream4);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray21, throwable22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("fr");
        printWriter27.print("it_IT");
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale30.getDisplayName(locale32);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String str36 = locale30.getDisplayCountry(locale34);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.io.PrintWriter printWriter41 = printWriter27.printf(locale34, "it_IT", objArray39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("", objArray39);
        java.lang.Object[] objArray43 = mathException42.getArguments();
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("China", objArray24, (java.lang.Throwable) mathException42);
        java.io.PrintStream printStream46 = printStream12.printf(locale13, "Frankreich", objArray24);
        java.lang.String str47 = locale13.getVariant();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale8 = new java.util.Locale("Italy");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = mathException12.getSuppressed();
        java.io.PrintStream printStream15 = printStream1.printf(locale8, "chinois", (java.lang.Object[]) throwableArray14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter19 = printWriter17.append(' ');
        printWriter17.println(false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.write("hi!");
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("fr");
        printWriter27.print("it_IT");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter32 = printWriter27.printf("fr", objArray31);
        printWriter32.print((float) (byte) 100);
        java.io.PrintWriter printWriter36 = printWriter32.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter40 = printWriter38.append(' ');
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("fr");
        printWriter43.print("it_IT");
        java.util.Locale locale46 = java.util.Locale.ROOT;
        boolean boolean47 = locale46.hasExtensions();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale46.getDisplayName(locale48);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String str52 = locale46.getDisplayCountry(locale50);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray55);
        java.io.PrintWriter printWriter57 = printWriter43.printf(locale50, "it_IT", objArray55);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("fr");
        printWriter60.print("it_IT");
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", objArray67);
        java.lang.Throwable[] throwableArray69 = mathException68.getSuppressed();
        java.lang.Throwable[] throwableArray70 = mathException68.getSuppressed();
        java.io.PrintWriter printWriter71 = printWriter60.printf(locale64, "it_IT", (java.lang.Object[]) throwableArray70);
        java.io.PrintWriter printWriter72 = printWriter43.format("it_IT", (java.lang.Object[]) throwableArray70);
        java.io.PrintWriter printWriter73 = printWriter40.format("zh_CN", (java.lang.Object[]) throwableArray70);
        java.io.PrintStream printStream75 = new java.io.PrintStream("zh_CN");
        printStream75.print((float) (byte) -1);
        char[] charArray80 = new char[] { 'x', 'u' };
        printStream75.println(charArray80);
        printWriter73.print(charArray80);
        printWriter36.write(charArray80);
        printWriter23.println(charArray80);
        printWriter17.write(charArray80);
        printStream1.print(charArray80);
        printStream1.print(0.001354928450285685d);
        java.io.PrintStream printStream90 = printStream1.append((java.lang.CharSequence) "FRA");
        printStream1.print(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream95 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "Regno Unito");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Regno Unito");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale8.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[x, u]");
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        java.util.Locale locale10 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str11 = locale10.getCountry();
        java.io.PrintStream printStream14 = new java.io.PrintStream("zh_CN");
        printStream14.print((float) (byte) -1);
        printStream14.println();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException(throwable19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException20);
        java.lang.Throwable[] throwableArray22 = mathException20.getSuppressed();
        java.io.PrintStream printStream23 = printStream14.format("italien (Italie)", (java.lang.Object[]) throwableArray22);
        java.io.PrintStream printStream24 = printStream1.printf(locale10, "fr-CA", (java.lang.Object[]) throwableArray22);
        java.util.Set<java.lang.String> strSet25 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("fr");
        printWriter29.print("it_IT");
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale32.getDisplayName(locale34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale32.getDisplayCountry(locale36);
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.io.PrintWriter printWriter43 = printWriter29.printf(locale36, "it_IT", objArray41);
        java.util.Locale.setDefault(category26, locale36);
        java.util.Locale locale45 = java.util.Locale.getDefault(category26);
        java.util.Locale locale46 = java.util.Locale.getDefault(category26);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter("fr");
        printWriter48.print("it_IT");
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray55);
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = mathException56.getSuppressed();
        java.io.PrintWriter printWriter59 = printWriter48.printf(locale52, "it_IT", (java.lang.Object[]) throwableArray58);
        java.lang.String str60 = locale46.getDisplayName(locale52);
        java.util.Set<java.lang.String> strSet61 = locale46.getUnicodeLocaleKeys();
        java.lang.String str62 = locale10.getDisplayScript(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = locale10.getUnicodeLocaleType("\u5fb7\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException: ??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
        org.junit.Assert.assertEquals(locale10.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITALY" + "'", str11, "ITALY");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\uc774\ud0c8\ub9ac\uc544", "zh_cn (ENGLISH,it,IT)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zh_cn (ENGLISH,it,IT)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("francese (Canada)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=francese(canada)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CN");
        double double2 = languageRange1.getWeight();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        java.util.Locale.Builder builder9 = builder4.setLanguageTag("JA");
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("Chinese");
        boolean boolean12 = languageRange1.equals((java.lang.Object) builder9);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(10);
        java.io.PrintWriter printWriter22 = printWriter1.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(false);
        printWriter1.println('#');
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.lang.Object obj30 = null;
        printWriter29.println(obj30);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        java.util.Locale locale2 = new java.util.Locale("fra (IT_IT,fran\347ais (France))", "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)");
        boolean boolean3 = locale2.hasExtensions();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "fra (it_it,fran\347\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        java.io.PrintStream printStream1 = new java.io.PrintStream("China");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        printWriter4.print("it_IT");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter9 = printWriter4.printf("fr", objArray8);
        printWriter9.write((int) 'x');
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("fr-CA");
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        java.io.PrintWriter printWriter16 = printWriter9.printf("\u30ab\u30ca\u30c0", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream17 = printStream1.printf("english", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream19 = new java.io.PrintStream("zh_CN");
        printStream19.print((float) (byte) -1);
        printStream19.println();
        printStream19.println();
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream19, true);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("fr");
        printWriter27.print("it_IT");
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale30.getDisplayName(locale32);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String str36 = locale30.getDisplayCountry(locale34);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.io.PrintWriter printWriter41 = printWriter27.printf(locale34, "it_IT", objArray39);
        printStream25.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream44 = printStream25.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream25);
        printStream25.println("");
        printStream25.println("fr");
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream25, false);
        java.io.PrintStream printStream53 = printStream25.append('a');
        printStream25.print('#');
        printStream25.write((int) 'x');
        printStream25.println(true);
        printStream25.println(true);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Collection<java.util.Locale> localeCollection65 = null;
        java.util.Locale locale66 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, localeCollection65);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList73);
        printStream25.print((java.lang.Object) languageRangeList63);
        java.util.Collection<java.util.Locale> localeCollection77 = null;
        java.util.Locale.LanguageRange[] languageRangeArray78 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList79 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList79, languageRangeArray78);
        java.lang.String[] strArray86 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, (java.util.Collection<java.lang.String>) strList87);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap90 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList91 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, strMap90);
        java.util.Locale locale92 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet93 = locale92.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, (java.util.Collection<java.lang.String>) strSet93, filteringMode94);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, localeCollection77, filteringMode94);
        printStream1.println((java.lang.Object) filteringMode94);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(locale66);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(languageRangeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(languageRangeList91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode94.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(localeList96);
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        java.io.PrintStream printStream3 = new java.io.PrintStream("zh_CN");
        printStream3.print((float) (byte) -1);
        printStream3.println();
        printStream3.print("ita");
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale11 = locale9.stripExtensions();
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = mathException15.getSuppressed();
        java.io.PrintStream printStream18 = printStream3.printf(locale11, "fr", (java.lang.Object[]) throwableArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.lang.Object[] objArray22 = mathException21.getArguments();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) mathException21);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Object[] objArray27 = mathException26.getArguments();
        mathException21.addSuppressed((java.lang.Throwable) mathException26);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException(throwable29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        mathException21.addSuppressed((java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("deu", (java.lang.Throwable) mathException32);
        java.lang.String str35 = mathException34.getPattern();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "deu" + "'", str35, "deu");
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("hi!", objArray2);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("fr-CA");
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("tedesco", objArray2, (java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ita");
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException(throwable15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException16);
        java.lang.Throwable[] throwableArray18 = mathException16.getSuppressed();
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.print("ita");
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.util.Locale locale29 = locale27.stripExtensions();
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", objArray32);
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = mathException33.getSuppressed();
        java.io.PrintStream printStream36 = printStream21.printf(locale29, "fr", (java.lang.Object[]) throwableArray35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) mathException37);
        java.io.PrintStream printStream39 = printStream12.printf("ita", (java.lang.Object[]) throwableArray18);
        java.io.PrintStream printStream42 = new java.io.PrintStream("zh_CN");
        printStream42.print((float) (byte) -1);
        printStream42.println();
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException48);
        java.lang.Throwable[] throwableArray50 = mathException48.getSuppressed();
        java.io.PrintStream printStream51 = printStream42.format("italien (Italie)", (java.lang.Object[]) throwableArray50);
        java.io.PrintStream printStream52 = printStream12.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray50);
        printStream52.close();
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("fr");
        printWriter55.print("it_IT");
        java.util.Locale locale58 = java.util.Locale.ROOT;
        boolean boolean59 = locale58.hasExtensions();
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale58.getDisplayName(locale60);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        boolean boolean63 = locale62.hasExtensions();
        java.lang.String str64 = locale58.getDisplayCountry(locale62);
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", objArray67);
        java.io.PrintWriter printWriter69 = printWriter55.printf(locale62, "it_IT", objArray67);
        printStream52.print((java.lang.Object) objArray67);
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException(throwable73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException74);
        java.lang.Throwable[] throwableArray76 = mathException75.getSuppressed();
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray76, throwable77);
        java.lang.Object[] objArray79 = mathException78.getArguments();
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("de", objArray67, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("hi! (italy) (ALLEMAND (ALLEMAGNE))", (java.lang.Throwable) mathException81);
        mathException7.addSuppressed((java.lang.Throwable) mathException81);
        java.lang.String str84 = mathException7.toString();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.math.MathException: fr-CA" + "'", str84, "org.apache.commons.math.MathException: fr-CA");
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray15);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.Object[] objArray20 = mathException18.getArguments();
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        java.lang.Throwable[] throwableArray28 = mathException27.getSuppressed();
        mathException23.addSuppressed((java.lang.Throwable) mathException27);
        mathException18.addSuppressed((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException();
        java.lang.String str33 = mathException32.getPattern();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException34);
        mathException23.addSuppressed((java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("giapponese", (java.lang.Throwable) mathException23);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "eng_ITALIANO (ITALIA)_ANGLAIS");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: eng_ITALIANO (ITALIA)_ANGLAIS");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        printStream1.print((int) (short) 0);
        printStream1.write((int) (byte) 10);
        printStream1.print(1L);
        java.io.PrintStream printStream15 = new java.io.PrintStream("zh_CN");
        printStream15.print((float) (byte) -1);
        printStream15.println();
        printStream15.print("ita");
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale23 = locale21.stripExtensions();
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        java.lang.Throwable[] throwableArray28 = mathException27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = mathException27.getSuppressed();
        java.io.PrintStream printStream30 = printStream15.printf(locale23, "fr", (java.lang.Object[]) throwableArray29);
        printStream30.print((int) 'a');
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("fr");
        printWriter36.print("it_IT");
        java.util.Locale locale39 = java.util.Locale.ROOT;
        boolean boolean40 = locale39.hasExtensions();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale39.getDisplayName(locale41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale39.getDisplayCountry(locale43);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.io.PrintWriter printWriter50 = printWriter36.printf(locale43, "it_IT", objArray48);
        printWriter36.println();
        printWriter36.print(10);
        java.io.PrintWriter printWriter57 = printWriter36.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter61 = printWriter59.append(' ');
        char[] charArray64 = new char[] { 'x', 'a' };
        printWriter61.print(charArray64);
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray71);
        java.io.PrintWriter printWriter73 = printWriter61.printf("en-GB", (java.lang.Object[]) throwableArray71);
        char[] charArray78 = new char[] { 'a', ' ', 'u', 'x' };
        printWriter73.write(charArray78);
        printWriter36.println(charArray78);
        printStream30.println(charArray78);
        printStream1.println(charArray78);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[x, a]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "a ux");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "a ux");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[a,  , u, x]");
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.write("hi!");
        printWriter2.println((java.lang.Object) (-1L));
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Object[] objArray13 = mathException12.getArguments();
        java.io.PrintWriter printWriter14 = printWriter2.format(locale7, "anglais", objArray13);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale locale18 = locale16.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.getDefault(category20);
        java.util.Locale locale22 = java.util.Locale.getDefault(category20);
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale19.getDisplayName(locale22);
        java.lang.String str26 = locale16.getDisplayScript(locale22);
        java.lang.String str27 = locale22.getDisplayVariant();
        java.lang.String str28 = locale22.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Italian (Italy)" + "'", str8, "Italian (Italy)");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Taiwan)" + "'", str25, "cinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it_IT" + "'", str28, "it_IT");
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ita");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException(throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.Throwable[] throwableArray7 = mathException5.getSuppressed();
        java.io.PrintStream printStream10 = new java.io.PrintStream("zh_CN");
        printStream10.print((float) (byte) -1);
        printStream10.println();
        printStream10.print("ita");
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.util.Locale locale18 = locale16.stripExtensions();
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.lang.Throwable[] throwableArray23 = mathException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = mathException22.getSuppressed();
        java.io.PrintStream printStream25 = printStream10.printf(locale18, "fr", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) mathException26);
        java.io.PrintStream printStream28 = printStream1.printf("ita", (java.lang.Object[]) throwableArray7);
        printStream28.print((float) (byte) 10);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream28);
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("CA", "Deutschland");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Deutschland");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream26, true);
        java.io.PrintStream printStream32 = printStream26.append('x');
        java.io.PrintStream printStream34 = new java.io.PrintStream("zh_CN");
        printStream34.print((float) (byte) -1);
        printStream34.println();
        printStream34.println();
        printStream34.println((float) ' ');
        printStream34.println("hi!");
        printStream34.print(false);
        printStream34.write((int) 'a');
        printStream34.println((java.lang.Object) 'x');
        printStream26.print((java.lang.Object) 'x');
        printStream26.println();
        java.lang.CharSequence charSequence51 = null;
        java.io.PrintStream printStream52 = printStream26.append(charSequence51);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("fr");
        printWriter54.println();
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("fr");
        printWriter58.print("it_IT");
        java.util.Locale locale61 = java.util.Locale.ROOT;
        boolean boolean62 = locale61.hasExtensions();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale61.getDisplayName(locale63);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        boolean boolean66 = locale65.hasExtensions();
        java.lang.String str67 = locale61.getDisplayCountry(locale65);
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        java.io.PrintWriter printWriter72 = printWriter58.printf(locale65, "it_IT", objArray70);
        java.io.PrintWriter printWriter73 = printWriter54.printf("zh_CN", objArray70);
        printWriter54.print('u');
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter79 = printWriter77.append(' ');
        printWriter79.println((double) '4');
        char[] charArray87 = new char[] { '4', ' ', 'x', 'u', 'a' };
        printWriter79.print(charArray87);
        printWriter54.println(charArray87);
        java.util.Locale.Builder builder90 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder91 = builder90.clearExtensions();
        java.util.Locale.Builder builder92 = builder91.clearExtensions();
        java.util.Locale.Builder builder93 = builder91.clear();
        printWriter54.println((java.lang.Object) builder91);
        printStream26.println((java.lang.Object) printWriter54);
        printWriter54.println((double) (byte) -1);
        printWriter54.println('x');
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "4 xua");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "4 xua");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[4,  , x, u, a]");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println((int) (short) 0);
        printWriter30.print(1L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter30, false);
        printWriter36.flush();
        printWriter36.println((float) '#');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter6.print((float) (byte) 100);
        printWriter6.write("zh");
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException15);
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.lang.Object[] objArray22 = mathException21.getArguments();
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        mathException21.addSuppressed((java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("tedesco", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) mathException28);
        java.io.PrintWriter printWriter30 = printWriter6.printf("org.apache.commons.math.mathexception", (java.lang.Object[]) throwableArray17);
        printWriter6.print('u');
        printWriter6.print(10.0f);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printWriter30);
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getVariant();
        boolean boolean9 = locale6.hasExtensions();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder14 = builder1.setExtension('a', "");
        java.util.Locale.Builder builder15 = builder1.clear();
        java.util.Locale locale16 = builder1.build();
        java.lang.String str17 = locale16.toString();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream26, true);
        java.io.PrintStream printStream32 = printStream26.append('x');
        printStream32.print(false);
        printStream32.close();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        printStream32.println((java.lang.Object) locale36);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("fr");
        printWriter40.println();
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("fr");
        printWriter44.print("it_IT");
        java.util.Locale locale47 = java.util.Locale.ROOT;
        boolean boolean48 = locale47.hasExtensions();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale47.getDisplayName(locale49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale47.getDisplayCountry(locale51);
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        java.io.PrintWriter printWriter58 = printWriter44.printf(locale51, "it_IT", objArray56);
        java.io.PrintWriter printWriter59 = printWriter40.printf("zh_CN", objArray56);
        java.io.PrintStream printStream60 = printStream32.format("fr_FR", objArray56);
        printStream32.print((int) (short) 10);
        printStream32.println(true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printStream60);
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLanguage("ZH_CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ZH_CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("cor\351en");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=core?en");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Japanisch (ja)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=japanisch (ja)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Italian", "cinese");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: cinese");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("fr-ca");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("fr", (java.lang.Throwable) mathException2);
        java.lang.String str4 = mathException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.math.MathException: fr-ca" + "'", str4, "org.apache.commons.math.MathException: fr-ca");
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("zh_CN", objArray17);
        printWriter1.print('u');
        printWriter1.print(false);
        printWriter1.print("tedesco (Germania)");
        printWriter1.println((float) 17);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("hi!", objArray1);
        java.lang.Object[] objArray3 = mathException2.getArguments();
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray5);
        java.lang.Throwable[] throwableArray7 = mathException6.getSuppressed();
        mathException2.addSuppressed((java.lang.Throwable) mathException6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.print((float) (byte) -1);
        printStream11.println();
        printStream11.print("ita");
        java.util.Locale locale18 = new java.util.Locale("Italy");
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.lang.Throwable[] throwableArray23 = mathException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = mathException22.getSuppressed();
        java.io.PrintStream printStream25 = printStream11.printf(locale18, "chinois", (java.lang.Object[]) throwableArray24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("CAN", (java.lang.Object[]) throwableArray24, (java.lang.Throwable) mathException27);
        mathException6.addSuppressed((java.lang.Throwable) mathException27);
        java.lang.Object[] objArray31 = mathException6.getArguments();
        java.lang.Object[] objArray32 = mathException6.getArguments();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals(locale18.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println((int) (short) 0);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        boolean boolean34 = locale33.hasExtensions();
        printWriter30.print((java.lang.Object) locale33);
        java.util.Locale locale39 = new java.util.Locale("tedesco", "org.apache.commons.math.MathException: ", "org.apache.commons.math.MathException: hi!");
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter44 = printWriter42.append(' ');
        printWriter42.println('a');
        printWriter42.println((float) 'a');
        java.util.Locale locale49 = java.util.Locale.UK;
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.lang.String str51 = locale49.getDisplayScript(locale50);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("fr");
        printWriter54.print("it_IT");
        java.util.Locale locale57 = java.util.Locale.ROOT;
        boolean boolean58 = locale57.hasExtensions();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale57.getDisplayName(locale59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        boolean boolean62 = locale61.hasExtensions();
        java.lang.String str63 = locale57.getDisplayCountry(locale61);
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        java.io.PrintWriter printWriter68 = printWriter54.printf(locale61, "it_IT", objArray66);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter("fr");
        printWriter71.print("it_IT");
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = mathException79.getSuppressed();
        java.io.PrintWriter printWriter82 = printWriter71.printf(locale75, "it_IT", (java.lang.Object[]) throwableArray81);
        java.io.PrintWriter printWriter83 = printWriter54.format("it_IT", (java.lang.Object[]) throwableArray81);
        java.util.Locale locale84 = java.util.Locale.JAPANESE;
        java.util.Locale locale85 = java.util.Locale.JAPANESE;
        java.lang.String str86 = locale84.getDisplayCountry(locale85);
        java.lang.String str87 = locale84.getVariant();
        java.lang.String str88 = locale84.getCountry();
        java.lang.String[] strArray90 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter91 = printWriter54.format(locale84, "fr-CA", (java.lang.Object[]) strArray90);
        java.io.PrintWriter printWriter92 = printWriter42.format(locale49, "Italian (Italy)", (java.lang.Object[]) strArray90);
        java.io.PrintWriter printWriter93 = printWriter30.format(locale39, "\uc77c\ubcf8\uc5b4", (java.lang.Object[]) strArray90);
        printWriter93.write("Franz\366sisch (Frankreich)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals(locale39.toString(), "tedesco_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: _org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(printWriter91);
        org.junit.Assert.assertNotNull(printWriter92);
        org.junit.Assert.assertNotNull(printWriter93);
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        boolean boolean9 = locale3.hasExtensions();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder11 = builder0.clear();
        java.util.Locale locale12 = builder11.build();
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(charSet13);
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "Franz\366sisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Franzo?sisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale7);
        java.util.Locale locale12 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale12.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        double double14 = hypergeometricDistributionImpl3.probability((int) '4');
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 1);
        double double18 = hypergeometricDistributionImpl3.upperCumulativeProbability((-1));
        double double20 = hypergeometricDistributionImpl3.probability(0);
        hypergeometricDistributionImpl3.setSampleSize(0);
        hypergeometricDistributionImpl3.setPopulationSize(32);
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistributionImpl3.setNumberOfSuccesses((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.1709401709401705d + "'", double20 == 0.1709401709401705d);
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        printStream28.println("fr-CA");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream35 = printStream28.append((java.lang.CharSequence) "it-IT", 35, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter1.println((float) (byte) 10);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        printWriter16.write("hi!");
        printWriter1.println((java.lang.Object) printWriter16);
        java.io.PrintWriter printWriter21 = printWriter1.append('#');
        printWriter1.println((int) (short) 0);
        java.io.PrintStream printStream25 = new java.io.PrintStream("zh_CN");
        printStream25.println();
        java.io.PrintStream printStream28 = printStream25.append('#');
        printStream28.println((int) 'a');
        printStream28.print((double) 0L);
        printStream28.println(35);
        java.io.PrintStream printStream36 = new java.io.PrintStream("zh_CN");
        printStream36.print((float) (byte) -1);
        printStream36.println();
        printStream36.println();
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream36, true);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("fr");
        printWriter44.print("it_IT");
        java.util.Locale locale47 = java.util.Locale.ROOT;
        boolean boolean48 = locale47.hasExtensions();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale47.getDisplayName(locale49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale47.getDisplayCountry(locale51);
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        java.io.PrintWriter printWriter58 = printWriter44.printf(locale51, "it_IT", objArray56);
        printStream42.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream61 = printStream42.append((java.lang.CharSequence) "fr");
        char[] charArray66 = new char[] { 'a', '4', '4', 'x' };
        printStream61.println(charArray66);
        printStream28.print(charArray66);
        printWriter1.print(charArray66);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a44x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a44x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a, 4, 4, x]");
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getVariant();
        boolean boolean9 = locale6.hasExtensions();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder14 = builder1.setExtension('a', "");
        java.util.Locale.Builder builder15 = builder1.clearExtensions();
        java.util.Locale.Builder builder16 = builder1.clearExtensions();
        java.util.Locale.Builder builder18 = builder1.setLanguage("ENGLISH");
        java.util.Locale.Builder builder19 = builder1.clear();
        java.util.Locale locale21 = new java.util.Locale("fra");
        java.lang.String str22 = locale21.toLanguageTag();
        java.lang.String str23 = locale21.getDisplayVariant();
        java.util.Locale.Builder builder24 = builder19.setLocale(locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = locale21.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals(locale21.toString(), "fra");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        java.util.Locale locale1 = new java.util.Locale("eng_ITALIANO (ITALIA)_ANGLAIS");
        org.junit.Assert.assertEquals(locale1.toString(), "eng_italiano (italia)_anglais");
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.setLanguage("jpn");
        java.util.Locale.Builder builder12 = builder10.setScript("");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("fran\347ais", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franc?ais");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.print("");
        java.io.PrintWriter printWriter10 = printWriter1.append((java.lang.CharSequence) "jpn");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter14 = printWriter1.append((java.lang.CharSequence) "German", 17, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 31");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(printWriter10);
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter6.print((float) (byte) 100);
        printWriter6.write("english");
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        printWriter12.print("it_IT");
        java.util.Locale locale15 = java.util.Locale.ROOT;
        boolean boolean16 = locale15.hasExtensions();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale15.getDisplayName(locale17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale15.getDisplayCountry(locale19);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.io.PrintWriter printWriter26 = printWriter12.printf(locale19, "it_IT", objArray24);
        printWriter12.println();
        printWriter12.print(1L);
        printWriter12.println("");
        printWriter12.close();
        printWriter12.print((long) 1);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter12, true);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter43 = printWriter38.printf("fr", objArray42);
        printWriter43.print((float) (byte) 100);
        java.io.PrintWriter printWriter47 = printWriter43.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter51 = printWriter49.append(' ');
        char[] charArray54 = new char[] { 'x', 'a' };
        printWriter51.print(charArray54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray61);
        java.io.PrintWriter printWriter63 = printWriter51.printf("en-GB", (java.lang.Object[]) throwableArray61);
        char[] charArray68 = new char[] { 'a', ' ', 'u', 'x' };
        printWriter63.write(charArray68);
        java.io.PrintStream printStream71 = new java.io.PrintStream("zh_CN");
        printStream71.print((float) (byte) -1);
        char[] charArray76 = new char[] { 'x', 'u' };
        printStream71.println(charArray76);
        printWriter63.write(charArray76);
        printWriter43.println(charArray76);
        printWriter36.write(charArray76, (-1), (int) ' ');
        printWriter6.write(charArray76);
        printWriter6.print('4');
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[x, a]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a ux");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a ux");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , u, x]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[x, u]");
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ita");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter6 = printWriter4.append(' ');
        printWriter4.println(false);
        printWriter4.println('x');
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        printWriter13.write("hi!");
        printWriter13.println((java.lang.Object) (-1L));
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        java.io.PrintWriter printWriter25 = printWriter13.format(locale18, "anglais", objArray24);
        java.io.PrintWriter printWriter26 = printWriter4.format("italiano (Italia)", objArray24);
        java.io.PrintStream printStream27 = printStream1.printf("it_IT", objArray24);
        java.io.PrintStream printStream29 = printStream1.append('x');
        printStream1.print(0.9999999972520074d);
        java.io.PrintStream printStream33 = new java.io.PrintStream("zh_CN");
        printStream33.print((float) (byte) -1);
        printStream33.println();
        printStream33.println();
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, true);
        printStream33.println();
        java.io.PrintStream printStream42 = printStream33.append((java.lang.CharSequence) "cinese");
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter("fr");
        printWriter46.print("it_IT");
        java.util.Locale locale49 = java.util.Locale.ROOT;
        boolean boolean50 = locale49.hasExtensions();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale49.getDisplayName(locale51);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        boolean boolean54 = locale53.hasExtensions();
        java.lang.String str55 = locale49.getDisplayCountry(locale53);
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray58);
        java.io.PrintWriter printWriter60 = printWriter46.printf(locale53, "it_IT", objArray58);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", objArray58);
        java.lang.Throwable[] throwableArray62 = mathException61.getSuppressed();
        java.io.PrintStream printStream63 = printStream33.format("zh_TW", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter((java.io.OutputStream) printStream33, true);
        boolean boolean66 = printWriter65.checkError();
        java.io.PrintStream printStream68 = new java.io.PrintStream("zh_CN");
        printStream68.print((float) (byte) -1);
        char[] charArray73 = new char[] { 'x', 'u' };
        printStream68.println(charArray73);
        printWriter65.print(charArray73);
        printStream1.println(charArray73);
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Italian (Italy)" + "'", str19, "Italian (Italy)");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[x, u]");
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println("hi!");
        printStream1.print(false);
        printStream1.write((int) 'a');
        printStream1.print(32);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "\u4e2d\u56fd");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("chinois (Chine)", 0.3269230769230756d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinois (chine)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1);
        double double11 = hypergeometricDistributionImpl3.probability((double) 10L);
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getPopulationSize();
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability(2.6106672925738774E-19d);
        double double17 = hypergeometricDistributionImpl3.upperCumulativeProbability(97);
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 10);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7008547008546866d + "'", double15 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.print(0);
        printStream1.print('u');
        java.io.PrintStream printStream12 = new java.io.PrintStream("zh_CN");
        printStream12.println();
        java.io.PrintStream printStream15 = printStream12.append('#');
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        java.util.Locale locale21 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = locale21.getDisplayCountry(locale22);
        java.lang.String str25 = locale21.getISO3Country();
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.lang.Throwable[] throwableArray30 = mathException29.getSuppressed();
        java.io.PrintStream printStream31 = printStream12.format(locale21, "japonais", (java.lang.Object[]) throwableArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("tedesco", (java.lang.Object[]) throwableArray30);
        java.io.PrintStream printStream33 = printStream1.format("\u53f0\u6e7e", (java.lang.Object[]) throwableArray30);
        java.util.Locale locale34 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.lang.Object[] objArray41 = mathException40.getArguments();
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        mathException40.addSuppressed((java.lang.Throwable) mathException44);
        java.lang.Throwable[] throwableArray47 = mathException40.getSuppressed();
        java.lang.Object[] objArray48 = mathException40.getArguments();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("Chinese (Taiwan)", objArray48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("Chinesisch (Taiwan)", objArray48);
        java.io.PrintStream printStream51 = printStream33.printf(locale34, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd", objArray48);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream55 = printStream51.append((java.lang.CharSequence) "ko", (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertEquals(locale21.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printStream51);
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        java.util.Locale locale10 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str11 = locale10.getCountry();
        java.io.PrintStream printStream14 = new java.io.PrintStream("zh_CN");
        printStream14.print((float) (byte) -1);
        printStream14.println();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException(throwable19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException20);
        java.lang.Throwable[] throwableArray22 = mathException20.getSuppressed();
        java.io.PrintStream printStream23 = printStream14.format("italien (Italie)", (java.lang.Object[]) throwableArray22);
        java.io.PrintStream printStream24 = printStream1.printf(locale10, "fr-CA", (java.lang.Object[]) throwableArray22);
        printStream1.print("cinese");
        java.io.PrintStream printStream28 = printStream1.append('x');
        printStream1.print("_DE");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
        org.junit.Assert.assertEquals(locale10.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITALY" + "'", str11, "ITALY");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(printStream28);
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter6, true);
        printWriter6.println(false);
        java.util.Locale locale14 = new java.util.Locale("", "", "");
        java.util.Locale locale17 = new java.util.Locale("hi!", "Italy");
        java.lang.String str18 = locale14.getDisplayCountry(locale17);
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.println();
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream21, true);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("fr");
        printWriter29.print("it_IT");
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale32.getDisplayName(locale34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale32.getDisplayCountry(locale36);
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.io.PrintWriter printWriter43 = printWriter29.printf(locale36, "it_IT", objArray41);
        printStream27.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream46 = printStream27.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        printStream27.println("");
        java.io.PrintStream printStream52 = new java.io.PrintStream("zh_CN");
        printStream52.print((float) (byte) -1);
        printStream52.println();
        printStream52.println();
        java.io.PrintStream printStream58 = new java.io.PrintStream((java.io.OutputStream) printStream52, true);
        printStream52.println();
        printStream52.print((-1));
        printStream52.print((double) '#');
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("fr");
        printWriter67.print("it_IT");
        java.util.Locale locale70 = java.util.Locale.ROOT;
        boolean boolean71 = locale70.hasExtensions();
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.lang.String str73 = locale70.getDisplayName(locale72);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        boolean boolean75 = locale74.hasExtensions();
        java.lang.String str76 = locale70.getDisplayCountry(locale74);
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        java.io.PrintWriter printWriter81 = printWriter67.printf(locale74, "it_IT", objArray79);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("", objArray79);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException82);
        java.lang.Object[] objArray84 = mathException82.getArguments();
        java.io.PrintStream printStream85 = printStream52.format("italiano (Italia)", objArray84);
        java.io.PrintStream printStream86 = printStream27.format("italiano", objArray84);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException();
        java.lang.String str90 = mathException89.getPattern();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException89);
        java.lang.Object[] objArray92 = mathException89.getArguments();
        java.io.PrintStream printStream93 = printStream86.format("tedesco", objArray92);
        java.io.PrintWriter printWriter94 = printWriter6.printf(locale17, "eng", objArray92);
        java.lang.String str95 = locale17.getLanguage();
        java.lang.Object obj96 = locale17.clone();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertNotNull(printStream93);
        org.junit.Assert.assertNotNull(printWriter94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hi!" + "'", str95, "hi!");
        org.junit.Assert.assertNotNull(obj96);
        org.junit.Assert.assertEquals(obj96.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj96), "hi!_ITALY");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj96), "hi!_ITALY");
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "fra");
        printStream1.print("ko");
        printStream1.println('4');
        org.junit.Assert.assertNotNull(printStream3);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = printWriter7.append(' ');
        char[] charArray12 = new char[] { 'x', 'a' };
        printWriter9.print(charArray12);
        printStream1.println(charArray12);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.print((double) (byte) 10);
        boolean boolean19 = printStream1.checkError();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.println();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.print("it_IT");
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale28.getDisplayCountry(locale32);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.io.PrintWriter printWriter39 = printWriter25.printf(locale32, "it_IT", objArray37);
        java.io.PrintWriter printWriter40 = printWriter21.printf("English", objArray37);
        java.util.Locale locale44 = new java.util.Locale("deu", "deu", "italien");
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("fr", objArray48);
        java.io.PrintWriter printWriter51 = printWriter40.printf(locale44, "deu-x-lvariant-CA", objArray48);
        printStream1.println((java.lang.Object) printWriter40);
        printWriter40.print(true);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[x, a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertEquals(locale44.toString(), "deu_DEU_italien");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) (short) 1, 32, 117);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder7 = builder5.setVariant("Italian");
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = locale8.getDisplayScript();
        java.util.Locale locale14 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale35.getDisplayName(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.io.PrintWriter printWriter46 = printWriter32.printf(locale39, "it_IT", objArray44);
        java.io.PrintWriter printWriter47 = printWriter16.printf(locale22, "fr", objArray44);
        java.lang.String str48 = locale14.getDisplayVariant(locale22);
        java.lang.String str49 = locale8.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder50 = builder7.setLocale(locale8);
        java.util.Locale locale51 = builder7.build();
        java.util.Locale locale52 = builder7.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale14.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "chinois" + "'", str48, "chinois");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh-TW");
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'u');
        int int13 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 1);
        int int14 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistributionImpl3.setSampleSize((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: sample size must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println();
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException(throwable34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray37 = mathException35.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter39 = printWriter30.format("Royaume-Uni", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter41 = printWriter39.append((java.lang.CharSequence) "\uc601\uc5b4");
        boolean boolean42 = printWriter41.checkError();
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("fr");
        printWriter44.print("it_IT");
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter49 = printWriter44.printf("fr", objArray48);
        printWriter49.print((float) (byte) 100);
        java.io.PrintWriter printWriter53 = printWriter49.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter55 = printWriter53.append('4');
        printWriter41.print((java.lang.Object) printWriter53);
        printWriter41.print((int) (short) 100);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter55);
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.lang.String str35 = locale32.getVariant();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale32.getDisplayScript(locale36);
        java.util.Locale locale40 = new java.util.Locale("Italy", "Italy");
        java.lang.String str41 = locale36.getDisplayLanguage(locale40);
        boolean boolean42 = locale36.hasExtensions();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException();
        java.lang.String str46 = mathException45.getPattern();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException45);
        java.lang.Object[] objArray48 = mathException45.getArguments();
        java.io.PrintWriter printWriter49 = printWriter30.format(locale36, "cinese", objArray48);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder50.setLanguageTag("ita");
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        java.lang.String str56 = locale53.getVariant();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale53.getDisplayScript(locale57);
        boolean boolean59 = locale53.hasExtensions();
        java.util.Locale.Builder builder60 = builder50.setLocale(locale53);
        printWriter49.print((java.lang.Object) builder50);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder63 = builder50.setScript("english");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: english [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals(locale40.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayName();
        java.lang.String str4 = locale0.getScript();
        java.lang.String str5 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter1.println((float) (byte) 10);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        printWriter16.write("hi!");
        printWriter1.println((java.lang.Object) printWriter16);
        printWriter1.println(2.1858624747371538E-10d);
        printWriter1.print(0);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("italy");
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getDisplayName();
        printWriter25.println((java.lang.Object) locale26);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        java.io.PrintWriter printWriter35 = printWriter1.format(locale26, "IT", (java.lang.Object[]) throwableArray34);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str27, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printWriter35);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("zh_CN");
        printStream32.print((float) (byte) -1);
        printStream32.println();
        printStream32.println();
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream32, true);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter42 = printWriter40.append(' ');
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("fr");
        printWriter45.print("it_IT");
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale48.getDisplayName(locale50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale48.getDisplayCountry(locale52);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        java.io.PrintWriter printWriter59 = printWriter45.printf(locale52, "it_IT", objArray57);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("fr");
        printWriter62.print("it_IT");
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.io.PrintWriter printWriter73 = printWriter62.printf(locale66, "it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintWriter printWriter74 = printWriter45.format("it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintWriter printWriter75 = printWriter42.format("zh_CN", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream77 = new java.io.PrintStream("zh_CN");
        printStream77.print((float) (byte) -1);
        char[] charArray82 = new char[] { 'x', 'u' };
        printStream77.println(charArray82);
        printWriter75.print(charArray82);
        printStream32.print(charArray82);
        printWriter1.println(charArray82);
        printWriter1.println("ita");
        java.io.PrintWriter printWriter90 = printWriter1.append((java.lang.CharSequence) "german (germany) (FRENCH,italiano)");
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write("org.apache.commons.math.MathException: TWN", (int) 'u', 3);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[x, u]");
        org.junit.Assert.assertNotNull(printWriter90);
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 100);
        int int15 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double17 = hypergeometricDistributionImpl3.probability((int) (byte) 1);
        double double19 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 0);
        double double21 = hypergeometricDistributionImpl3.probability((int) ' ');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9699999999999995d + "'", double17 == 0.9699999999999995d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.02999999999999997d + "'", double19 == 0.02999999999999997d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'x', (int) (byte) -1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize((int) 'u');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int9 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 0.0f);
        int int10 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 117 + "'", int10 == 117);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double13 = hypergeometricDistributionImpl3.cumulativeProbability(0.1409979688501311d, 0.7142857142857143d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7008547008546866d + "'", double7 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d);
        double double13 = hypergeometricDistributionImpl3.probability((int) (short) 10);
        int int14 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.7008547008546866d + "'", double11 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        java.util.Locale locale3 = new java.util.Locale("fra", "it_IT", "fran\347ais (France)");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "fra_IT_IT_fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fran\347ais (France)" + "'", str4, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IT_IT" + "'", str6, "IT_IT");
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((double) 117);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((double) 'a');
        int int13 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setSampleSize((int) (short) 10);
        double double17 = hypergeometricDistributionImpl3.probability(52);
        double double19 = hypergeometricDistributionImpl3.cumulativeProbability((int) ' ');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', 0, (int) (short) 100);
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream26, true);
        java.io.PrintStream printStream32 = printStream26.append('x');
        java.io.PrintStream printStream34 = new java.io.PrintStream("zh_CN");
        printStream34.print((float) (byte) -1);
        printStream34.println();
        printStream34.println();
        printStream34.println((float) ' ');
        printStream34.println("hi!");
        printStream34.print(false);
        printStream34.write((int) 'a');
        printStream34.println((java.lang.Object) 'x');
        printStream26.print((java.lang.Object) 'x');
        printStream26.println();
        java.lang.CharSequence charSequence51 = null;
        java.io.PrintStream printStream52 = printStream26.append(charSequence51);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("fr");
        printWriter54.println();
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("fr");
        printWriter58.print("it_IT");
        java.util.Locale locale61 = java.util.Locale.ROOT;
        boolean boolean62 = locale61.hasExtensions();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale61.getDisplayName(locale63);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        boolean boolean66 = locale65.hasExtensions();
        java.lang.String str67 = locale61.getDisplayCountry(locale65);
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        java.io.PrintWriter printWriter72 = printWriter58.printf(locale65, "it_IT", objArray70);
        java.io.PrintWriter printWriter73 = printWriter54.printf("zh_CN", objArray70);
        printWriter54.print('u');
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter79 = printWriter77.append(' ');
        printWriter79.println((double) '4');
        char[] charArray87 = new char[] { '4', ' ', 'x', 'u', 'a' };
        printWriter79.print(charArray87);
        printWriter54.println(charArray87);
        java.util.Locale.Builder builder90 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder91 = builder90.clearExtensions();
        java.util.Locale.Builder builder92 = builder91.clearExtensions();
        java.util.Locale.Builder builder93 = builder91.clear();
        printWriter54.println((java.lang.Object) builder91);
        printStream26.println((java.lang.Object) printWriter54);
        printStream26.print('4');
        java.io.PrintStream printStream99 = printStream26.append((java.lang.CharSequence) "chinois");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "4 xua");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "4 xua");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[4,  , x, u, a]");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(printStream99);
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        printStream7.println("");
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale.Builder builder33 = builder31.setLanguageTag("fr");
        java.util.Locale locale34 = builder33.build();
        java.util.Locale.Builder builder35 = builder33.clearExtensions();
        printStream7.print((java.lang.Object) builder35);
        java.util.Locale.Builder builder37 = builder35.clear();
        java.util.Locale.Builder builder38 = builder37.clear();
        java.util.Locale.Builder builder40 = builder37.setRegion("FR");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder37.setVariant("French (France)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: French (France) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter6.print((float) (byte) 100);
        printWriter6.print("Italy");
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.io.PrintStream printStream14 = new java.io.PrintStream("zh_CN");
        printStream14.print((float) (byte) -1);
        printStream14.println();
        printStream14.println();
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream14, true);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter24 = printWriter22.append(' ');
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("fr");
        printWriter27.print("it_IT");
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale30.getDisplayName(locale32);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String str36 = locale30.getDisplayCountry(locale34);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.io.PrintWriter printWriter41 = printWriter27.printf(locale34, "it_IT", objArray39);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("fr");
        printWriter44.print("it_IT");
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = mathException52.getSuppressed();
        java.io.PrintWriter printWriter55 = printWriter44.printf(locale48, "it_IT", (java.lang.Object[]) throwableArray54);
        java.io.PrintWriter printWriter56 = printWriter27.format("it_IT", (java.lang.Object[]) throwableArray54);
        java.io.PrintWriter printWriter57 = printWriter24.format("zh_CN", (java.lang.Object[]) throwableArray54);
        java.io.PrintStream printStream59 = new java.io.PrintStream("zh_CN");
        printStream59.print((float) (byte) -1);
        char[] charArray64 = new char[] { 'x', 'u' };
        printStream59.println(charArray64);
        printWriter57.print(charArray64);
        printStream14.print(charArray64);
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("fr");
        printWriter72.print("it_IT");
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        java.lang.Throwable[] throwableArray81 = mathException80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = mathException80.getSuppressed();
        java.io.PrintWriter printWriter83 = printWriter72.printf(locale76, "it_IT", (java.lang.Object[]) throwableArray82);
        java.io.PrintStream printStream84 = printStream14.format(locale68, "hi!", (java.lang.Object[]) throwableArray82);
        java.io.PrintWriter printWriter85 = printWriter6.printf(locale11, "", (java.lang.Object[]) throwableArray82);
        printWriter6.println(false);
        java.util.Locale locale88 = java.util.Locale.ROOT;
        boolean boolean89 = locale88.hasExtensions();
        java.lang.String str90 = locale88.getCountry();
        java.lang.String str91 = locale88.getDisplayLanguage();
        boolean boolean92 = locale88.hasExtensions();
        java.util.Set<java.lang.String> strSet93 = locale88.getUnicodeLocaleAttributes();
        java.util.Locale locale94 = locale88.stripExtensions();
        boolean boolean95 = locale94.hasExtensions();
        printWriter6.print((java.lang.Object) boolean95);
        java.io.PrintWriter printWriter97 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[x, u]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertNotNull(printWriter85);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.print((long) 'x');
        printStream1.print((long) 'u');
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.print((float) (byte) -1);
        printStream11.println();
        printStream11.println();
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream11, true);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("fr");
        printWriter19.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale22.getDisplayCountry(locale26);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.io.PrintWriter printWriter33 = printWriter19.printf(locale26, "it_IT", objArray31);
        printStream17.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream36 = printStream17.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream38 = new java.io.PrintStream("zh_CN");
        printStream38.println();
        java.io.PrintStream printStream41 = printStream38.append('#');
        printStream38.close();
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream38.write(byteArray47);
        printStream38.print(false);
        printStream38.println("Italy");
        java.io.PrintStream printStream54 = new java.io.PrintStream("zh_CN");
        printStream54.println((float) (-1));
        java.io.PrintStream printStream58 = new java.io.PrintStream("zh_CN");
        printStream58.println();
        java.io.PrintStream printStream61 = printStream58.append('#');
        printStream58.close();
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream58.write(byteArray67);
        printStream54.write(byteArray67);
        printStream38.write(byteArray67);
        printStream36.write(byteArray67);
        printStream1.write(byteArray67);
        printStream1.print(false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream78 = printStream1.append((java.lang.CharSequence) "DE", 3, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 100, -1, -1]");
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream4.println((int) 'a');
        printStream4.print((double) 0L);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        printStream4.println((float) 10L);
        java.io.PrintStream printStream14 = printStream4.append('x');
        printStream4.flush();
        java.io.PrintStream printStream17 = printStream4.append('x');
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double5 = hypergeometricDistributionImpl3.probability((double) 100.0f);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) 'u');
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) -1, 117);
        int int11 = hypergeometricDistributionImpl3.getPopulationSize();
        int int12 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setNumberOfSuccesses(10);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10);
        double double18 = hypergeometricDistributionImpl3.probability(0.001354928450285685d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u4e2d\u56fd\u8a9e");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter6 = printWriter2.append((java.lang.CharSequence) "_DE", (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -99");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "fra");
        printStream1.print('x');
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale6);
        printStream1.print((java.lang.Object) locale6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.print((float) (byte) -1);
        printStream11.println();
        printStream11.println();
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream11, true);
        printStream11.println();
        java.io.PrintStream printStream20 = printStream11.append((java.lang.CharSequence) "cinese");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        printWriter24.print("it_IT");
        java.util.Locale locale27 = java.util.Locale.ROOT;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale27.getDisplayName(locale29);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale27.getDisplayCountry(locale31);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.io.PrintWriter printWriter38 = printWriter24.printf(locale31, "it_IT", objArray36);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", objArray36);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.io.PrintStream printStream41 = printStream11.format("zh_TW", (java.lang.Object[]) throwableArray40);
        printStream11.println((double) 1);
        java.util.Locale locale44 = java.util.Locale.UK;
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.lang.String str46 = locale44.getDisplayScript(locale45);
        java.util.Locale locale47 = locale44.stripExtensions();
        java.lang.String str48 = locale47.getDisplayCountry();
        java.io.PrintStream printStream51 = new java.io.PrintStream("zh_CN");
        printStream51.print((float) (byte) -1);
        printStream51.println();
        printStream51.print((double) (short) 1);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.lang.Object[] objArray61 = mathException60.getArguments();
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray63);
        java.lang.Throwable[] throwableArray65 = mathException64.getSuppressed();
        mathException60.addSuppressed((java.lang.Throwable) mathException64);
        java.lang.Throwable[] throwableArray67 = mathException60.getSuppressed();
        java.io.PrintStream printStream68 = printStream51.format("de", (java.lang.Object[]) throwableArray67);
        java.io.PrintStream printStream69 = printStream11.printf(locale47, "", (java.lang.Object[]) throwableArray67);
        java.io.PrintStream printStream70 = printStream1.format("zho", (java.lang.Object[]) throwableArray67);
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u82f1\u56fd" + "'", str48, "\u82f1\u56fd");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printStream70);
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println((double) 0L);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter11.println(true);
        printWriter11.println((int) (byte) -1);
        java.io.PrintStream printStream18 = new java.io.PrintStream("zh_CN");
        printStream18.print((float) (byte) -1);
        printStream18.println();
        printStream18.print("ita");
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.util.Locale locale26 = locale24.stripExtensions();
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = mathException30.getSuppressed();
        java.io.PrintStream printStream33 = printStream18.printf(locale26, "fr", (java.lang.Object[]) throwableArray32);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.lang.Object[] objArray37 = mathException36.getArguments();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) mathException36);
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        java.lang.Object[] objArray42 = mathException41.getArguments();
        mathException36.addSuppressed((java.lang.Throwable) mathException41);
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException(throwable44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        mathException36.addSuppressed((java.lang.Throwable) mathException47);
        printWriter11.println((java.lang.Object) mathException36);
        java.lang.Throwable[] throwableArray50 = mathException36.getSuppressed();
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale8 = new java.util.Locale("Italy");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = mathException12.getSuppressed();
        java.io.PrintStream printStream15 = printStream1.printf(locale8, "chinois", (java.lang.Object[]) throwableArray14);
        java.io.PrintStream printStream17 = printStream15.append((java.lang.CharSequence) "cinese");
        printStream15.write((int) 'u');
        boolean boolean20 = printStream15.checkError();
        java.io.PrintStream printStream22 = new java.io.PrintStream("zh_CN");
        printStream22.println();
        java.io.PrintStream printStream25 = printStream22.append('#');
        printStream22.close();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream22.write(byteArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("zh_CN");
        printStream34.print((float) (byte) -1);
        printStream34.println();
        printStream34.println();
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream34, true);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("fr");
        printWriter42.print("it_IT");
        java.util.Locale locale45 = java.util.Locale.ROOT;
        boolean boolean46 = locale45.hasExtensions();
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale45.getDisplayName(locale47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = locale45.getDisplayCountry(locale49);
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        java.io.PrintWriter printWriter56 = printWriter42.printf(locale49, "it_IT", objArray54);
        printStream40.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream59 = printStream40.append((java.lang.CharSequence) "fr");
        printStream40.print((int) (byte) 1);
        byte[] byteArray62 = new byte[] {};
        printStream40.write(byteArray62);
        printStream22.write(byteArray62, (int) (byte) 100, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            printStream15.write(byteArray62, 34, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale8.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguage("ja");
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale10 = new java.util.Locale("fr", "fr");
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale.setDefault(locale10);
        java.util.Locale locale16 = new java.util.Locale("", "", "");
        java.lang.String str17 = locale10.getDisplayVariant(locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.lang.String str19 = locale16.getCountry();
        java.util.Locale.Builder builder20 = builder7.setLocale(locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.setRegion("Vereinigtes K\366nigreich");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Vereinigtes Ko?nigreich [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        java.util.Locale locale3 = new java.util.Locale("Franz\366sisch (Frankreich)", "", "Korean");
        java.util.Locale locale4 = java.util.Locale.UK;
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.lang.String str6 = locale4.getDisplayScript(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale7.getDisplayCountry();
        java.lang.String str9 = locale7.getDisplayVariant();
        java.lang.String str10 = locale7.getDisplayScript();
        java.lang.String str11 = locale7.getDisplayVariant();
        java.lang.String str12 = locale3.getDisplayName(locale7);
        org.junit.Assert.assertEquals(locale3.toString(), "franz\366sisch (frankreich)__Korean");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Royaume-Uni" + "'", str8, "Royaume-Uni");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "franz\366sisch (frankreich) (Korean)" + "'", str12, "franz\366sisch (frankreich) (Korean)");
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        java.io.PrintStream printStream4 = new java.io.PrintStream("zh_CN");
        printStream4.print((float) (byte) -1);
        printStream4.println();
        printStream4.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream4, true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        printWriter12.print("it_IT");
        java.util.Locale locale15 = java.util.Locale.ROOT;
        boolean boolean16 = locale15.hasExtensions();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale15.getDisplayName(locale17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale15.getDisplayCountry(locale19);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.io.PrintWriter printWriter26 = printWriter12.printf(locale19, "it_IT", objArray24);
        printStream10.println((java.lang.Object) "it_IT");
        printStream10.print((float) (byte) 1);
        printStream10.print(0);
        java.io.PrintStream printStream35 = new java.io.PrintStream("zh_CN");
        printStream35.print((float) (byte) -1);
        printStream35.println();
        printStream35.print("ita");
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale43 = locale41.stripExtensions();
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = mathException47.getSuppressed();
        java.io.PrintStream printStream50 = printStream35.printf(locale43, "fr", (java.lang.Object[]) throwableArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray49);
        java.io.PrintStream printStream52 = printStream10.format("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray49);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ja__ja");
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("it_IT", (java.lang.Object[]) throwableArray49, (java.lang.Throwable) mathException54);
        java.lang.Throwable[] throwableArray56 = mathException55.getSuppressed();
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException59);
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray63);
        java.lang.Throwable[] throwableArray65 = mathException64.getSuppressed();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray65);
        mathException59.addSuppressed((java.lang.Throwable) mathException66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("ja-JP", (java.lang.Object[]) throwableArray56, (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException59);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray9 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Collection<java.util.Locale> localeCollection16 = null;
        java.util.Locale locale17 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, localeCollection16);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.lang.String str22 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getCountry();
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale31 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale23, locale26, locale27, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Collection<java.util.Locale> localeCollection39 = null;
        java.util.Locale locale40 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, localeCollection39);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList43);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale46.getCountry();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Locale locale54 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale46, locale49, locale50, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList58);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale61 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNull(locale60);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability((int) ' ');
        int int12 = hypergeometricDistributionImpl3.getSampleSize();
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7008547008546866d + "'", double14 == 0.7008547008546866d);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(1L);
        printWriter1.flush();
        java.io.PrintWriter printWriter21 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.mathexception");
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale24.getCountry();
        java.lang.String str27 = locale24.getDisplayLanguage();
        java.lang.String str28 = locale24.getISO3Country();
        java.lang.String str29 = locale22.getDisplayScript(locale24);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.print("it_IT");
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        java.io.PrintWriter printWriter43 = printWriter32.printf(locale36, "it_IT", (java.lang.Object[]) throwableArray42);
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.util.Locale locale45 = java.util.Locale.ROOT;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale44.getDisplayCountry(locale45);
        java.lang.String str48 = locale44.getDisplayVariant();
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        java.io.PrintWriter printWriter54 = printWriter43.format(locale44, "", (java.lang.Object[]) throwableArray53);
        java.io.PrintWriter printWriter55 = printWriter21.printf(locale24, "Deutschland", (java.lang.Object[]) throwableArray53);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        boolean boolean57 = locale56.hasExtensions();
        java.lang.String str58 = locale56.getCountry();
        java.lang.String str59 = locale56.getScript();
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", objArray62);
        java.lang.Throwable[] throwableArray64 = mathException63.getSuppressed();
        java.lang.Object[] objArray65 = mathException63.getArguments();
        java.io.PrintWriter printWriter66 = printWriter21.printf(locale56, "French", objArray65);
        printWriter21.println('#');
        printWriter21.print(0.0f);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Italy" + "'", str47, "Italy");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(printWriter66);
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream3 = new java.io.PrintStream(outputStream0, false, "en_CA");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        java.util.Locale locale3 = new java.util.Locale("Italie", "Deutsch", "org.apache.commons.math.MathException");
        org.junit.Assert.assertEquals(locale3.toString(), "italie_DEUTSCH_org.apache.commons.math.MathException");
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 0);
        hypergeometricDistributionImpl3.setSampleSize(1);
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        double double17 = hypergeometricDistributionImpl3.cumulativeProbability(0.6500000000000139d);
        double double19 = hypergeometricDistributionImpl3.cumulativeProbability(0.9699999999999995d);
        double double21 = hypergeometricDistributionImpl3.cumulativeProbability((int) ' ');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale10 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.lang.String str14 = locale10.getISO3Country();
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        java.io.PrintStream printStream20 = printStream1.format(locale10, "japonais", (java.lang.Object[]) throwableArray19);
        printStream20.close();
        printStream20.print('x');
        printStream20.println();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertEquals(locale10.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder7 = builder5.setVariant("Italian");
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = locale8.getDisplayScript();
        java.util.Locale locale14 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale35.getDisplayName(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.io.PrintWriter printWriter46 = printWriter32.printf(locale39, "it_IT", objArray44);
        java.io.PrintWriter printWriter47 = printWriter16.printf(locale22, "fr", objArray44);
        java.lang.String str48 = locale14.getDisplayVariant(locale22);
        java.lang.String str49 = locale8.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder50 = builder7.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder7.removeUnicodeLocaleAttribute("x-lvariant-it-IT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: x-lvariant-it-IT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale14.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "chinois" + "'", str48, "chinois");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        printStream1.print((-1));
        printStream1.write((int) (byte) 1);
        printStream1.print(true);
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.println();
        java.io.PrintStream printStream20 = printStream17.append('#');
        printStream17.close();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream17.write(byteArray25);
        printStream17.write((int) 'a');
        printStream17.println((int) (short) 100);
        printStream17.print(1L);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.print("it_IT");
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale38.getDisplayName(locale40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        boolean boolean43 = locale42.hasExtensions();
        java.lang.String str44 = locale38.getDisplayCountry(locale42);
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        java.io.PrintWriter printWriter49 = printWriter35.printf(locale42, "it_IT", objArray47);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("fr");
        printWriter52.print("it_IT");
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = mathException60.getSuppressed();
        java.io.PrintWriter printWriter63 = printWriter52.printf(locale56, "it_IT", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter64 = printWriter35.format("it_IT", (java.lang.Object[]) throwableArray62);
        printWriter64.println();
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        java.lang.Throwable[] throwableArray71 = mathException69.getSuppressed();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray71);
        java.io.PrintWriter printWriter73 = printWriter64.format("Royaume-Uni", (java.lang.Object[]) throwableArray71);
        java.io.PrintStream printStream74 = printStream17.printf("Chinese (China)", (java.lang.Object[]) throwableArray71);
        java.io.PrintStream printStream75 = printStream1.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray71);
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("fr-CA");
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("tedesco", objArray79, (java.lang.Throwable) mathException82);
        java.io.PrintStream printStream84 = printStream1.printf("german", objArray79);
        printStream1.println((-1));
        java.util.Locale.Builder builder87 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder88 = builder87.clearExtensions();
        java.util.Locale.Builder builder90 = builder88.setLanguageTag("fr");
        java.util.Locale locale91 = builder90.build();
        java.util.Locale.Builder builder93 = builder90.setLanguageTag("ja");
        java.util.Locale locale94 = builder90.build();
        java.util.Locale.setDefault(locale94);
        java.lang.String str96 = locale94.getDisplayCountry();
        printStream1.print((java.lang.Object) str96);
        printStream1.println((int) (byte) 0);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italy", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "Italy", "fr" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.parse("fra", strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.util.Locale> localeCollection23 = null;
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, localeCollection23);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Collection<java.util.Locale> localeCollection37 = null;
        java.util.Locale locale38 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, localeCollection37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Collection<java.util.Locale> localeCollection42 = null;
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, localeCollection42);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList50);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList52, filteringMode53);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList17, (java.util.Collection<java.lang.String>) strList31, filteringMode53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap56);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.parse("ja");
        java.lang.String[] strArray75 = new java.lang.String[] { "ita", "", "Italy", "zh_CN", "zh_CN", "anglais", "hi!", "chinois", "ita", "chinois", "ita", "", "anglais", "hi!", "fr" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.lang.String str78 = java.util.Locale.lookupTag(languageRangeList59, (java.util.Collection<java.lang.String>) strList76);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList80 = java.util.Locale.LanguageRange.parse("ja");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList80, strMap81);
        java.util.Locale locale83 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList80, (java.util.Collection<java.lang.String>) strSet84, filteringMode85);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList57, (java.util.Collection<java.lang.String>) strList76, filteringMode85);
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList76);
        java.lang.String str89 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strList88);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap90 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList91 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap90);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode53.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(languageRangeList80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(languageRangeList91);
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("German", "\u82f1\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray3);
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("fr-CA", objArray3, (java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray15 = mathException11.getSuppressed();
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray20, throwable21);
        java.lang.Object[] objArray23 = mathException22.getArguments();
        java.lang.String str24 = mathException22.getPattern();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("inglese (Canada)", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) mathException22);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "anglais" + "'", str24, "anglais");
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException(throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray9 = mathException7.getSuppressed();
        java.io.PrintStream printStream10 = printStream1.format("italien (Italie)", (java.lang.Object[]) throwableArray9);
        java.io.PrintStream printStream12 = new java.io.PrintStream("zh_CN");
        printStream12.print((float) (byte) -1);
        printStream12.println();
        printStream12.println();
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream12, true);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter22 = printWriter20.append(' ');
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.print("it_IT");
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale28.getDisplayCountry(locale32);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.io.PrintWriter printWriter39 = printWriter25.printf(locale32, "it_IT", objArray37);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("fr");
        printWriter42.print("it_IT");
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        java.lang.Throwable[] throwableArray51 = mathException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = mathException50.getSuppressed();
        java.io.PrintWriter printWriter53 = printWriter42.printf(locale46, "it_IT", (java.lang.Object[]) throwableArray52);
        java.io.PrintWriter printWriter54 = printWriter25.format("it_IT", (java.lang.Object[]) throwableArray52);
        java.io.PrintWriter printWriter55 = printWriter22.format("zh_CN", (java.lang.Object[]) throwableArray52);
        java.io.PrintStream printStream57 = new java.io.PrintStream("zh_CN");
        printStream57.print((float) (byte) -1);
        char[] charArray62 = new char[] { 'x', 'u' };
        printStream57.println(charArray62);
        printWriter55.print(charArray62);
        printStream12.print(charArray62);
        printStream1.println(charArray62);
        printStream1.println("anglais");
        printStream1.println();
        printStream1.println((long) 31);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[x, u]");
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 1);
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0, (int) (byte) 1);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((double) (byte) 1, (double) (short) 1);
        hypergeometricDistributionImpl3.setSampleSize((int) (byte) 1);
        int int22 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.9999999999996674d);
        double double24 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("canada_CHINESE_Canada");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=canada_chinese_canada");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = new java.io.PrintStream("zh_CN");
        printStream4.print((float) (byte) -1);
        printStream4.println();
        printStream4.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream4, true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter14 = printWriter12.append(' ');
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("fr");
        printWriter34.print("it_IT");
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        java.io.PrintWriter printWriter45 = printWriter34.printf(locale38, "it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter46 = printWriter17.format("it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter47 = printWriter14.format("zh_CN", (java.lang.Object[]) throwableArray44);
        java.io.PrintStream printStream49 = new java.io.PrintStream("zh_CN");
        printStream49.print((float) (byte) -1);
        char[] charArray54 = new char[] { 'x', 'u' };
        printStream49.println(charArray54);
        printWriter47.print(charArray54);
        printStream4.print(charArray54);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("fr");
        printWriter62.print("it_IT");
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.io.PrintWriter printWriter73 = printWriter62.printf(locale66, "it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream74 = printStream4.format(locale58, "hi!", (java.lang.Object[]) throwableArray72);
        java.lang.String str75 = locale58.getLanguage();
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = mathException79.getSuppressed();
        java.io.PrintStream printStream82 = printStream1.printf(locale58, "", (java.lang.Object[]) throwableArray81);
        java.lang.String str83 = locale58.getDisplayScript();
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[x, u]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ja" + "'", str2, "ja");
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 100);
        int int15 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((double) 0L, 0.2991452991452851d);
        double double20 = hypergeometricDistributionImpl3.probability(0.9699999999999995d);
        int int21 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) '#');
        int int25 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.14529914529914542d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.02999999999999997d + "'", double18 == 0.02999999999999997d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Canada", "Deutsch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Deutsch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double10 = hypergeometricDistributionImpl3.probability(10);
        int int11 = hypergeometricDistributionImpl3.getPopulationSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability(96);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl4 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int5 = hypergeometricDistributionImpl4.getSampleSize();
        hypergeometricDistributionImpl4.setPopulationSize((int) 'u');
        int int8 = hypergeometricDistributionImpl4.getNumberOfSuccesses();
        double double10 = hypergeometricDistributionImpl4.cumulativeProbability(35);
        int int11 = hypergeometricDistributionImpl4.getSampleSize();
        boolean boolean12 = locale0.equals((java.lang.Object) hypergeometricDistributionImpl4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(10);
        double double8 = hypergeometricDistributionImpl3.probability((int) (byte) -1);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray8 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList13, strMap14);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.parse("ko");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("cinese", strMap19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Collection<java.util.Locale> localeCollection24 = null;
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, localeCollection24);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale31.getCountry();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Locale locale39 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale31, locale34, locale35, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Collection<java.util.Locale> localeCollection47 = null;
        java.util.Locale locale48 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, localeCollection47);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList51);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale54.getCountry();
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Locale locale62 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray63 = new java.util.Locale[] { locale54, locale57, locale58, locale62 };
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList66);
        java.util.Locale locale68 = java.util.Locale.lookup(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter(languageRangeList17, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale70 = java.util.Locale.lookup(languageRangeList13, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList13, strMap71);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap73 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList74 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList72, strMap73);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNull(locale68);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNull(locale70);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertNotNull(languageRangeList74);
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.write("hi!");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter10.print((float) (byte) 100);
        java.io.PrintWriter printWriter14 = printWriter10.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter18 = printWriter16.append(' ');
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.print("it_IT");
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale24.getDisplayCountry(locale28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.io.PrintWriter printWriter35 = printWriter21.printf(locale28, "it_IT", objArray33);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter38.printf(locale42, "it_IT", (java.lang.Object[]) throwableArray48);
        java.io.PrintWriter printWriter50 = printWriter21.format("it_IT", (java.lang.Object[]) throwableArray48);
        java.io.PrintWriter printWriter51 = printWriter18.format("zh_CN", (java.lang.Object[]) throwableArray48);
        java.io.PrintStream printStream53 = new java.io.PrintStream("zh_CN");
        printStream53.print((float) (byte) -1);
        char[] charArray58 = new char[] { 'x', 'u' };
        printStream53.println(charArray58);
        printWriter51.print(charArray58);
        printWriter14.write(charArray58);
        printWriter1.println(charArray58);
        printWriter1.println("\uc77c\ubcf8\uc5b4");
        printWriter1.print(true);
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder67.clearExtensions();
        java.util.Locale.Builder builder70 = builder68.setLanguageTag("fr");
        java.util.Locale locale71 = builder70.build();
        java.lang.String str72 = locale71.getISO3Language();
        java.util.Locale locale73 = locale71.stripExtensions();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("italiano (Italia)");
        java.lang.Object[] objArray77 = mathException76.getArguments();
        java.io.PrintWriter printWriter78 = printWriter1.format(locale71, "Italian (Italy)", objArray77);
        printWriter78.println(0.08547008547008297d);
        printWriter78.print(' ');
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.Writer) printWriter78, false);
        printWriter84.print("fra (IT_IT,fran\347ais (France))");
        boolean boolean87 = printWriter84.checkError();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[x, u]");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fra" + "'", str72, "fra");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.println((int) (short) 100);
        printStream1.print(1L);
        java.io.PrintStream printStream18 = new java.io.PrintStream("zh_CN");
        printStream18.println();
        java.io.PrintStream printStream21 = printStream18.append('#');
        printStream18.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        char[] charArray29 = new char[] { 'x', 'a' };
        printWriter26.print(charArray29);
        printStream18.println(charArray29);
        printStream1.print(charArray29);
        printStream1.println(false);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[x, a]");
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale11 = new java.util.Locale("tedesco", "ja", "italien (Italie)");
        java.lang.String str12 = locale11.getScript();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.lang.String str16 = locale14.getUnicodeLocaleType("DE");
        java.lang.String str17 = locale14.getCountry();
        java.lang.String str18 = locale14.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FR" + "'", str6, "FR");
        org.junit.Assert.assertEquals(locale11.toString(), "tedesco_JA_italien (Italie)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "tedesco_JA_italien (Italie)");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JA" + "'", str17, "JA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco_JA_italien (Italie)" + "'", str18, "tedesco_JA_italien (Italie)");
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println((double) '4');
        char[] charArray11 = new char[] { '4', ' ', 'x', 'u', 'a' };
        printWriter3.print(charArray11);
        java.util.Locale locale15 = new java.util.Locale("fr", "fr");
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale21 = new java.util.Locale("", "", "");
        java.lang.String str22 = locale15.getDisplayVariant(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.lang.String str24 = locale21.getCountry();
        java.io.PrintStream printStream27 = new java.io.PrintStream("zh_CN");
        printStream27.println();
        java.io.PrintStream printStream30 = printStream27.append('#');
        printStream27.close();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream27.write(byteArray36);
        printStream27.print(false);
        java.io.PrintStream printStream43 = new java.io.PrintStream("zh_CN");
        printStream43.print((float) (byte) -1);
        printStream43.println();
        printStream43.print("ita");
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.util.Locale locale51 = locale49.stripExtensions();
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        java.lang.Throwable[] throwableArray56 = mathException55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = mathException55.getSuppressed();
        java.io.PrintStream printStream58 = printStream43.printf(locale51, "fr", (java.lang.Object[]) throwableArray57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray57);
        java.io.PrintStream printStream60 = printStream27.format("it_IT", (java.lang.Object[]) throwableArray57);
        java.io.PrintWriter printWriter61 = printWriter3.printf(locale21, "cinese (Taiwan)", (java.lang.Object[]) throwableArray57);
        printWriter3.println(0.9999999972520074d);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 xua");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 xua");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , x, u, a]");
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(printWriter61);
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println((int) (short) 0);
        printWriter30.print(1L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter30, false);
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("fr");
        printWriter39.write("hi!");
        printWriter39.println((java.lang.Object) (-1L));
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getDisplayName();
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.lang.Object[] objArray50 = mathException49.getArguments();
        java.io.PrintWriter printWriter51 = printWriter39.format(locale44, "anglais", objArray50);
        java.util.Locale.setDefault(category37, locale44);
        java.util.Locale locale53 = java.util.Locale.getDefault(category37);
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter62 = printWriter60.append(' ');
        char[] charArray65 = new char[] { 'x', 'a' };
        printWriter62.print(charArray65);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter("fr");
        printWriter69.println();
        printWriter69.write("Italy", 0, (int) (short) -1);
        printWriter69.print((long) '4');
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException(throwable78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException79);
        java.lang.Throwable[] throwableArray81 = mathException79.getSuppressed();
        java.io.PrintWriter printWriter82 = printWriter69.format("\u82f1\u8a9e", (java.lang.Object[]) throwableArray81);
        java.io.PrintWriter printWriter83 = printWriter62.format("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray81);
        java.io.PrintWriter printWriter84 = printWriter36.format(locale53, "de_DE", (java.lang.Object[]) throwableArray81);
        java.util.Set<java.lang.String> strSet85 = locale53.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + category37 + "' != '" + java.util.Locale.Category.FORMAT + "'", category37.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "italien (Italie)" + "'", str45, "italien (Italie)");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str57, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[x, a]");
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(printWriter84);
        org.junit.Assert.assertNotNull(strSet85);
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter6.println("fr");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("fr");
        printWriter11.print("it_IT");
        java.util.Locale locale14 = java.util.Locale.ROOT;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale14.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale14.getDisplayCountry(locale18);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        java.io.PrintWriter printWriter25 = printWriter11.printf(locale18, "it_IT", objArray23);
        printWriter11.println();
        printWriter11.print(1L);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter11);
        printWriter29.println((double) '#');
        java.io.PrintWriter printWriter33 = printWriter29.append((java.lang.CharSequence) "it,IT");
        printWriter29.println((long) (byte) -1);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clearExtensions();
        java.util.Locale.Builder builder38 = builder36.clearExtensions();
        java.util.Locale.Builder builder40 = builder38.setLanguage("italien");
        java.util.Locale locale41 = builder38.build();
        java.lang.Object obj42 = locale41.clone();
        printWriter29.println((java.lang.Object) locale41);
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.lang.String str47 = locale44.getVariant();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale44.getDisplayScript(locale48);
        java.util.Locale locale52 = new java.util.Locale("Italy", "Italy");
        java.lang.String str53 = locale48.getDisplayLanguage(locale52);
        boolean boolean54 = locale48.hasExtensions();
        java.lang.String str55 = locale48.getISO3Language();
        boolean boolean56 = locale48.hasExtensions();
        java.lang.String str57 = locale48.getDisplayName();
        java.lang.String str58 = locale48.getDisplayVariant();
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        java.lang.Object[] objArray66 = mathException65.getArguments();
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", objArray68);
        java.lang.Throwable[] throwableArray70 = mathException69.getSuppressed();
        mathException65.addSuppressed((java.lang.Throwable) mathException69);
        java.lang.Throwable[] throwableArray72 = mathException65.getSuppressed();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException();
        java.lang.String str74 = mathException73.getPattern();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray72, (java.lang.Throwable) mathException73);
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("fr", objArray78);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("it_IT", (java.lang.Object[]) throwableArray72, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("\u4e2d\u56fd", (java.lang.Object[]) throwableArray72);
        java.io.PrintWriter printWriter83 = printWriter29.printf(locale48, "japonais", (java.lang.Object[]) throwableArray72);
        java.io.PrintWriter printWriter84 = printWriter6.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) throwableArray72);
        printWriter6.println((float) 52);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "italien");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "italien");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "italien");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "italien");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals(locale52.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English" + "'", str53, "English");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "eng" + "'", str55, "eng");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "anglais (Canada)" + "'", str57, "anglais (Canada)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(printWriter84);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        java.util.Locale locale2 = new java.util.Locale("italiano (Italia)", "fran\347ais (France)");
        java.lang.Object obj3 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "italiano (italia)_FRAN\347AIS (FRANCE)");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "italiano (italia)_FRAN\347AIS (FRANCE)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "italiano (italia)_FRAN\347AIS (FRANCE)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "italiano (italia)_FRAN\347AIS (FRANCE)");
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter12.println("ja");
        java.io.PrintWriter printWriter16 = printWriter12.append('#');
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.lang.String str18 = locale17.getScript();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        printWriter22.print("it_IT");
        java.util.Locale locale25 = java.util.Locale.ROOT;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale25.getDisplayName(locale27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale25.getDisplayCountry(locale29);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        java.io.PrintWriter printWriter36 = printWriter22.printf(locale29, "it_IT", objArray34);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("fr");
        printWriter39.print("it_IT");
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = mathException47.getSuppressed();
        java.io.PrintWriter printWriter50 = printWriter39.printf(locale43, "it_IT", (java.lang.Object[]) throwableArray49);
        java.io.PrintWriter printWriter51 = printWriter22.format("it_IT", (java.lang.Object[]) throwableArray49);
        printWriter51.println();
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException(throwable55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        java.lang.Throwable[] throwableArray58 = mathException56.getSuppressed();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray58);
        java.io.PrintWriter printWriter60 = printWriter51.format("Royaume-Uni", (java.lang.Object[]) throwableArray58);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("\u30c9\u30a4\u30c4", (java.lang.Object[]) throwableArray58);
        java.io.PrintWriter printWriter62 = printWriter16.format(locale17, "ANGLAIS", (java.lang.Object[]) throwableArray58);
        java.util.Locale locale66 = new java.util.Locale("Japanisch (ja)", "\u53f0\u6e7e", "kor");
        java.lang.String str67 = locale66.getDisplayVariant();
        java.lang.String str68 = locale17.getDisplayScript(locale66);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printWriter62);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "\u53f0\u6e7e_kor");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "kor" + "'", str67, "kor");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale.Builder builder7 = builder5.setLocale(locale6);
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream16 = new java.io.PrintStream("zh_CN");
        printStream16.println();
        java.io.PrintStream printStream19 = printStream16.append('#');
        printStream16.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter24 = printWriter22.append(' ');
        char[] charArray27 = new char[] { 'x', 'a' };
        printWriter24.print(charArray27);
        printStream16.println(charArray27);
        printStream1.println(charArray27);
        printStream1.close();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[x, a]");
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale5 = new java.util.Locale("org.apache.commons.math.MathException");
        java.lang.String str7 = locale5.getUnicodeLocaleType("de");
        java.lang.String str8 = locale0.getDisplayLanguage(locale5);
        java.util.Set<java.lang.String> strSet9 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet10 = locale0.getExtensionKeys();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        printWriter12.print("it_IT");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter17 = printWriter12.printf("fr", objArray16);
        printWriter17.print((float) (byte) 100);
        printWriter17.print("Italy");
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.io.PrintStream printStream25 = new java.io.PrintStream("zh_CN");
        printStream25.print((float) (byte) -1);
        printStream25.println();
        printStream25.println();
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream25, true);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter35 = printWriter33.append(' ');
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale41 = java.util.Locale.ROOT;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale41.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale41.getDisplayCountry(locale45);
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray50);
        java.io.PrintWriter printWriter52 = printWriter38.printf(locale45, "it_IT", objArray50);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("fr");
        printWriter55.print("it_IT");
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", objArray62);
        java.lang.Throwable[] throwableArray64 = mathException63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = mathException63.getSuppressed();
        java.io.PrintWriter printWriter66 = printWriter55.printf(locale59, "it_IT", (java.lang.Object[]) throwableArray65);
        java.io.PrintWriter printWriter67 = printWriter38.format("it_IT", (java.lang.Object[]) throwableArray65);
        java.io.PrintWriter printWriter68 = printWriter35.format("zh_CN", (java.lang.Object[]) throwableArray65);
        java.io.PrintStream printStream70 = new java.io.PrintStream("zh_CN");
        printStream70.print((float) (byte) -1);
        char[] charArray75 = new char[] { 'x', 'u' };
        printStream70.println(charArray75);
        printWriter68.print(charArray75);
        printStream25.print(charArray75);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleKeys();
        java.io.PrintWriter printWriter83 = new java.io.PrintWriter("fr");
        printWriter83.print("it_IT");
        java.util.Locale locale87 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray90 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("hi!", objArray90);
        java.lang.Throwable[] throwableArray92 = mathException91.getSuppressed();
        java.lang.Throwable[] throwableArray93 = mathException91.getSuppressed();
        java.io.PrintWriter printWriter94 = printWriter83.printf(locale87, "it_IT", (java.lang.Object[]) throwableArray93);
        java.io.PrintStream printStream95 = printStream25.format(locale79, "hi!", (java.lang.Object[]) throwableArray93);
        java.io.PrintWriter printWriter96 = printWriter17.printf(locale22, "", (java.lang.Object[]) throwableArray93);
        java.lang.String str97 = locale0.getDisplayLanguage(locale22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italy" + "'", str3, "Italy");
        org.junit.Assert.assertEquals(locale5.toString(), "org.apache.commons.math.mathexception");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Italian" + "'", str8, "Italian");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[x, u]");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(printWriter94);
        org.junit.Assert.assertNotNull(printStream95);
        org.junit.Assert.assertNotNull(printWriter96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Italienisch" + "'", str97, "Italienisch");
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        printStream1.print((-1));
        printStream1.print((double) '#');
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        printWriter16.print("it_IT");
        java.util.Locale locale19 = java.util.Locale.ROOT;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale19.getDisplayName(locale21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale19.getDisplayCountry(locale23);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.io.PrintWriter printWriter30 = printWriter16.printf(locale23, "it_IT", objArray28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", objArray28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Object[] objArray33 = mathException31.getArguments();
        java.io.PrintStream printStream34 = printStream1.format("italiano (Italia)", objArray33);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter35.print(100.0f);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printStream34);
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.println();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("fr");
        printWriter6.print("it_IT");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray18);
        java.io.PrintWriter printWriter20 = printWriter6.printf(locale13, "it_IT", objArray18);
        java.io.PrintWriter printWriter21 = printWriter2.printf("zh_CN", objArray18);
        printWriter2.flush();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("en-gb");
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("CN");
        java.lang.Throwable[] throwableArray28 = mathException27.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter2.format(locale24, "kor", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray28);
        java.lang.Class<?> wildcardClass31 = mathException30.getClass();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException(throwable1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException2);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.String str6 = mathException5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.MathException: " + "'", str6, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("fran\347ais (france)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franc?ais(france)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale5 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = mathException17.getSuppressed();
        java.io.PrintWriter printWriter20 = printWriter9.printf(locale13, "it_IT", (java.lang.Object[]) throwableArray19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale26.getDisplayCountry(locale30);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.io.PrintWriter printWriter37 = printWriter23.printf(locale30, "it_IT", objArray35);
        java.io.PrintWriter printWriter38 = printWriter7.printf(locale13, "fr", objArray35);
        java.lang.String str39 = locale5.getDisplayVariant(locale13);
        java.lang.String str40 = locale0.getDisplayVariant(locale13);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getVariant();
        java.lang.String str43 = locale41.toLanguageTag();
        java.lang.String str45 = locale41.getUnicodeLocaleType("CA");
        java.lang.String str46 = locale41.getDisplayName();
        boolean boolean47 = locale41.hasExtensions();
        java.lang.String str48 = locale0.getDisplayName(locale41);
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale5.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "chinois" + "'", str39, "chinois");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de" + "'", str43, "de");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tedesco" + "'", str46, "tedesco");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Italienisch (Italien)" + "'", str48, "Italienisch (Italien)");
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Locale locale5 = new java.util.Locale("", "", "");
        java.util.Locale locale8 = new java.util.Locale("hi!", "Italy");
        java.lang.String str9 = locale5.getDisplayCountry(locale8);
        java.lang.String str10 = locale0.getDisplayCountry(locale8);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        printWriter12.print("it_IT");
        java.util.Locale locale15 = java.util.Locale.ROOT;
        boolean boolean16 = locale15.hasExtensions();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale15.getDisplayName(locale17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale15.getDisplayCountry(locale19);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.io.PrintWriter printWriter26 = printWriter12.printf(locale19, "it_IT", objArray24);
        printWriter12.println();
        printWriter12.print(10);
        java.io.PrintWriter printWriter33 = printWriter12.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter12, true);
        printWriter12.println(false);
        java.io.PrintWriter printWriter41 = printWriter12.append((java.lang.CharSequence) "Italy", 0, 0);
        printWriter41.flush();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        printWriter41.println((java.lang.Object) locale43);
        java.lang.String str45 = locale43.getDisplayCountry();
        java.lang.String str46 = locale0.getDisplayCountry(locale43);
        java.lang.String str47 = locale43.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Francia" + "'", str45, "Francia");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "FRA" + "'", str47, "FRA");
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability(35, 35);
        double double20 = hypergeometricDistributionImpl3.probability((double) 0L);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 1);
        int int23 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7008547008546866d + "'", double20 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.println((double) 52);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        printWriter12.print("it_IT");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter17 = printWriter12.printf("fr", objArray16);
        printWriter12.println((float) 'u');
        printWriter12.write("it_IT");
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.lang.String str25 = locale22.getVariant();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale22.getDisplayScript(locale26);
        java.util.Locale locale28 = locale26.stripExtensions();
        printWriter12.print((java.lang.Object) locale26);
        printWriter1.println((java.lang.Object) printWriter12);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        java.util.Locale locale2 = new java.util.Locale("", "zh_CN");
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getExtension('x');
        org.junit.Assert.assertEquals(locale2.toString(), "_ZH_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1);
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize((int) '4');
        double double14 = hypergeometricDistributionImpl3.probability((int) '#');
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("fr_FR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=fr_fr");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream4.println((int) 'a');
        printStream4.print((double) 0L);
        printStream4.println(35);
        printStream4.close();
        printStream4.print(true);
        printStream4.flush();
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.print((float) (byte) -1);
        printStream17.println();
        printStream17.println();
        printStream17.println((float) ' ');
        printStream17.println((double) 0L);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.println();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.print("it_IT");
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale38.getDisplayName(locale40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        boolean boolean43 = locale42.hasExtensions();
        java.lang.String str44 = locale38.getDisplayCountry(locale42);
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        java.io.PrintWriter printWriter49 = printWriter35.printf(locale42, "it_IT", objArray47);
        java.io.PrintWriter printWriter50 = printWriter31.printf("English", objArray47);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter31, false);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl56 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int57 = hypergeometricDistributionImpl56.getPopulationSize();
        double double59 = hypergeometricDistributionImpl56.cumulativeProbability((double) (short) -1);
        double double61 = hypergeometricDistributionImpl56.probability((double) (short) 100);
        double double63 = hypergeometricDistributionImpl56.cumulativeProbability((double) 117);
        printWriter31.print((java.lang.Object) 117);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter69 = printWriter67.append(' ');
        java.util.Locale.Category category70 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category70, locale71);
        java.lang.Throwable throwable75 = null;
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException(throwable75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException76);
        java.lang.Throwable[] throwableArray78 = mathException76.getSuppressed();
        java.io.PrintWriter printWriter79 = printWriter67.format(locale71, "Italy", (java.lang.Object[]) throwableArray78);
        java.io.PrintWriter printWriter80 = printWriter31.printf("CAN", (java.lang.Object[]) throwableArray78);
        java.lang.Object[] objArray85 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("hi!", objArray85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("fr", objArray85);
        java.lang.Throwable[] throwableArray88 = mathException87.getSuppressed();
        java.lang.Object[] objArray89 = mathException87.getArguments();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("CAN", objArray89);
        java.io.PrintWriter printWriter91 = printWriter31.format("it_IT", objArray89);
        java.io.PrintWriter printWriter92 = printWriter27.format("it", objArray89);
        java.io.PrintStream printStream93 = printStream4.format("eng", objArray89);
        printStream4.print((long) 21);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 117 + "'", int57 == 117);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertTrue("'" + category70 + "' != '" + java.util.Locale.Category.FORMAT + "'", category70.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(printWriter91);
        org.junit.Assert.assertNotNull(printWriter92);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.println((int) (short) 100);
        printStream1.print(false);
        printStream1.flush();
        printStream1.print((double) '#');
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream20.write((int) 'u');
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.println();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("fr");
        printWriter29.print("it_IT");
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale32.getDisplayName(locale34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale32.getDisplayCountry(locale36);
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.io.PrintWriter printWriter43 = printWriter29.printf(locale36, "it_IT", objArray41);
        java.io.PrintWriter printWriter44 = printWriter25.printf("English", objArray41);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter25, false);
        printWriter25.print(true);
        java.io.PrintWriter printWriter50 = printWriter25.append((java.lang.CharSequence) "Canada");
        java.io.PrintStream printStream52 = new java.io.PrintStream("zh_CN");
        printStream52.print((float) (byte) -1);
        printStream52.println();
        printStream52.print("ita");
        printStream52.println('#');
        printStream52.println('u');
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter65 = printWriter63.append(' ');
        char[] charArray68 = new char[] { 'x', 'a' };
        printWriter65.print(charArray68);
        java.lang.Object[] objArray73 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("hi!", objArray73);
        java.lang.Throwable[] throwableArray75 = mathException74.getSuppressed();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray75);
        java.io.PrintWriter printWriter77 = printWriter65.printf("en-GB", (java.lang.Object[]) throwableArray75);
        char[] charArray82 = new char[] { 'a', ' ', 'u', 'x' };
        printWriter77.write(charArray82);
        printStream52.print(charArray82);
        printWriter50.write(charArray82);
        printStream23.println(charArray82);
        printStream23.print("\u30a4\u30bf\u30ea\u30a2");
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[x, a]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a ux");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a ux");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a,  , u, x]");
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.print("ita");
        java.util.Locale locale28 = new java.util.Locale("Italy");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream21.printf(locale28, "chinois", (java.lang.Object[]) throwableArray34);
        java.util.Locale.setDefault(category0, locale28);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter38.printf(locale42, "it_IT", (java.lang.Object[]) throwableArray48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale42.getDisplayScript(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.util.Locale locale54 = java.util.Locale.getDefault(category0);
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale55);
        java.util.Locale locale59 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet60 = locale59.getExtensionKeys();
        java.lang.String str61 = locale59.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale59);
        java.util.Locale locale63 = java.util.Locale.getDefault(category0);
        java.lang.String str64 = locale63.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "inglese" + "'", str61, "inglese");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        java.io.PrintWriter printWriter13 = printWriter2.printf(locale6, "it_IT", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale6.getDisplayScript(locale14);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.lang.String str17 = locale6.getDisplayCountry(locale16);
        java.lang.String str18 = locale0.getDisplayCountry(locale6);
        java.util.Set<java.lang.Character> charSet19 = locale0.getExtensionKeys();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.util.Set<java.lang.Character> charSet26 = locale24.getExtensionKeys();
        java.lang.String str27 = locale24.getDisplayLanguage();
        java.lang.String str28 = locale24.getDisplayCountry();
        java.util.Locale locale31 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str32 = locale31.toLanguageTag();
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.write("hi!");
        printWriter35.println((java.lang.Object) (-1L));
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale40.getDisplayName();
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.lang.Object[] objArray46 = mathException45.getArguments();
        java.io.PrintWriter printWriter47 = printWriter35.format(locale40, "anglais", objArray46);
        java.util.Locale.setDefault(category33, locale40);
        java.util.Locale locale49 = java.util.Locale.getDefault(category33);
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale50.getDisplayCountry(locale51);
        java.lang.String str53 = locale49.getDisplayName(locale51);
        java.lang.String str54 = locale31.getDisplayLanguage(locale49);
        java.lang.String str55 = locale24.getDisplayName(locale49);
        java.lang.String str56 = locale0.getDisplayCountry(locale49);
        java.lang.String str57 = locale0.getDisplayVariant();
        java.lang.String str58 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "inglese" + "'", str27, "inglese");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Canada" + "'", str28, "Canada");
        org.junit.Assert.assertEquals(locale31.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "italiano (Italia)" + "'", str41, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str53, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en-gb" + "'", str54, "en-gb");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "inglese (Canada)" + "'", str55, "inglese (Canada)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ja" + "'", str58, "ja");
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("deu (ANGLAIS,CA)");
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("fra");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category6);
        java.util.Locale.Builder builder10 = builder0.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setExtension(' ', "org.apache.commons.math.MathException: TWN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(10);
        java.io.PrintWriter printWriter22 = printWriter1.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.print((double) (byte) 0);
        printWriter1.println(0.0d);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category29, locale30);
        java.io.PrintStream printStream35 = new java.io.PrintStream("zh_CN");
        printStream35.print((float) (byte) -1);
        printStream35.println();
        printStream35.print("ita");
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale43 = locale41.stripExtensions();
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = mathException47.getSuppressed();
        java.io.PrintStream printStream50 = printStream35.printf(locale43, "fr", (java.lang.Object[]) throwableArray49);
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        java.lang.Object[] objArray54 = mathException53.getArguments();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray49, (java.lang.Throwable) mathException53);
        java.lang.Throwable[] throwableArray56 = mathException53.getSuppressed();
        java.io.PrintWriter printWriter57 = printWriter1.printf(locale30, "org.apache.commons.math.MathException: fr", (java.lang.Object[]) throwableArray56);
        boolean boolean58 = printWriter1.checkError();
        printWriter1.println((long) 31);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 100);
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(35);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = hypergeometricDistributionImpl3.cumulativeProbability((double) '4', (double) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Italie");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("fr");
        printWriter20.print("it_IT");
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", objArray27);
        java.lang.Throwable[] throwableArray29 = mathException28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = mathException28.getSuppressed();
        java.io.PrintWriter printWriter31 = printWriter20.printf(locale24, "it_IT", (java.lang.Object[]) throwableArray30);
        java.io.PrintWriter printWriter32 = printWriter3.format("it_IT", (java.lang.Object[]) throwableArray30);
        printWriter32.write("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        boolean boolean35 = languageRange1.equals((java.lang.Object) "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) (short) 100, 0, 52);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.write("hi!");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter10.print((float) (byte) 100);
        java.io.PrintWriter printWriter14 = printWriter10.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter18 = printWriter16.append(' ');
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.print("it_IT");
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale24.getDisplayCountry(locale28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.io.PrintWriter printWriter35 = printWriter21.printf(locale28, "it_IT", objArray33);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter38.printf(locale42, "it_IT", (java.lang.Object[]) throwableArray48);
        java.io.PrintWriter printWriter50 = printWriter21.format("it_IT", (java.lang.Object[]) throwableArray48);
        java.io.PrintWriter printWriter51 = printWriter18.format("zh_CN", (java.lang.Object[]) throwableArray48);
        java.io.PrintStream printStream53 = new java.io.PrintStream("zh_CN");
        printStream53.print((float) (byte) -1);
        char[] charArray58 = new char[] { 'x', 'u' };
        printStream53.println(charArray58);
        printWriter51.print(charArray58);
        printWriter14.write(charArray58);
        printWriter1.println(charArray58);
        printWriter1.println("\uc77c\ubcf8\uc5b4");
        printWriter1.print(true);
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder67.clearExtensions();
        java.util.Locale.Builder builder70 = builder68.setLanguageTag("fr");
        java.util.Locale locale71 = builder70.build();
        java.lang.String str72 = locale71.getISO3Language();
        java.util.Locale locale73 = locale71.stripExtensions();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("italiano (Italia)");
        java.lang.Object[] objArray77 = mathException76.getArguments();
        java.io.PrintWriter printWriter78 = printWriter1.format(locale71, "Italian (Italy)", objArray77);
        printWriter78.println(0.08547008547008297d);
        printWriter78.print(' ');
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.Writer) printWriter78, false);
        printWriter84.print("org.apache.commons.math.MathException: chinois");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[x, u]");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fra" + "'", str72, "fra");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(printWriter78);
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder6.addUnicodeLocaleAttribute("\u82f1\u8a9e\u30ab\u30ca\u30c0)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double7 = hypergeometricDistributionImpl3.probability((double) 0);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(100);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((double) (-1L), 0.0d);
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((-1), 0);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((int) ' ');
        int int19 = hypergeometricDistributionImpl3.getPopulationSize();
        double double21 = hypergeometricDistributionImpl3.cumulativeProbability(2.6106672925738774E-19d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7008547008546866d + "'", double7 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9368413983102586d + "'", double18 == 0.9368413983102586d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str4 = locale0.getUnicodeLocaleType("CA");
        java.lang.String str5 = locale0.getDisplayName();
        boolean boolean6 = locale0.hasExtensions();
        java.util.Locale locale7 = locale0.stripExtensions();
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.Object obj9 = null;
        boolean boolean10 = locale7.equals(obj9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str5, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException(throwable9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        java.io.PrintWriter printWriter13 = printWriter1.format(locale5, "Italy", (java.lang.Object[]) throwableArray12);
        printWriter13.println(false);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("fr-CA");
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("tedesco", objArray19, (java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("fr-CA", objArray19, (java.lang.Throwable) mathException25);
        java.lang.String str28 = mathException25.getPattern();
        java.lang.String str29 = mathException25.getPattern();
        printWriter13.print((java.lang.Object) mathException25);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getVariant();
        boolean boolean9 = locale6.hasExtensions();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder14 = builder1.setExtension('a', "");
        java.util.Locale.Builder builder15 = builder1.clearExtensions();
        java.util.Locale locale16 = builder15.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder15.setScript("x-lvariant-it-IT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: x-lvariant-it-IT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int8 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 1L);
        int int9 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int11 = hypergeometricDistributionImpl3.getPopulationSize();
        int int12 = hypergeometricDistributionImpl3.getPopulationSize();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setSampleSize(35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 1);
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        int int16 = hypergeometricDistributionImpl3.getSampleSize();
        int int17 = hypergeometricDistributionImpl3.getPopulationSize();
        double double19 = hypergeometricDistributionImpl3.probability((int) ' ');
        int int20 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 117 + "'", int17 == 117);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 117 + "'", int20 == 117);
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double17 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (byte) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) '4');
        double double21 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            double double24 = hypergeometricDistributionImpl3.cumulativeProbability((double) ' ', (double) 21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 100);
        int int15 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize(1);
        int int18 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double20 = hypergeometricDistributionImpl3.cumulativeProbability(0.9999999999999717d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream1.write(byteArray10);
        printStream1.print(false);
        printStream1.println("Italy");
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.println((float) (-1));
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.println();
        java.io.PrintStream printStream24 = printStream21.append('#');
        printStream21.close();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream21.write(byteArray30);
        printStream17.write(byteArray30);
        printStream1.write(byteArray30);
        printStream1.println((double) (-1));
        printStream1.close();
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("fr");
        printWriter39.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.ROOT;
        boolean boolean43 = locale42.hasExtensions();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale42.getDisplayName(locale44);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale42.getDisplayCountry(locale46);
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        java.io.PrintWriter printWriter53 = printWriter39.printf(locale46, "it_IT", objArray51);
        java.io.PrintStream printStream54 = printStream1.format("zh_cn", objArray51);
        printStream54.flush();
        java.io.PrintStream printStream57 = new java.io.PrintStream("zh_CN");
        printStream57.print((float) (byte) -1);
        printStream57.println();
        printStream57.println();
        java.io.PrintStream printStream63 = new java.io.PrintStream((java.io.OutputStream) printStream57, true);
        printStream57.println();
        printStream57.print((-1));
        java.io.PrintStream printStream68 = new java.io.PrintStream("zh_CN");
        printStream68.println();
        java.io.PrintStream printStream71 = printStream68.append('#');
        printStream68.close();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream68.write(byteArray76);
        printStream57.write(byteArray76);
        printStream54.write(byteArray76, 100, (int) (byte) 100);
        printStream54.println(' ');
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 10, -1]");
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        java.util.Locale locale2 = new java.util.Locale("English (Canada)", "german (germany) (FRENCH,italiano)");
        java.util.Locale locale3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getDisplayName(locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "english (canada)_GERMAN (GERMANY) (FRENCH,ITALIANO)");
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("tedesco (Germania)", "eng_ITALIANO (ITALIA)_ANGLAIS");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: eng_ITALIANO (ITALIA)_ANGLAIS");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: ko", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:ko");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale5 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = mathException17.getSuppressed();
        java.io.PrintWriter printWriter20 = printWriter9.printf(locale13, "it_IT", (java.lang.Object[]) throwableArray19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale26.getDisplayCountry(locale30);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.io.PrintWriter printWriter37 = printWriter23.printf(locale30, "it_IT", objArray35);
        java.io.PrintWriter printWriter38 = printWriter7.printf(locale13, "fr", objArray35);
        java.lang.String str39 = locale5.getDisplayVariant(locale13);
        java.lang.String str40 = locale0.getDisplayVariant(locale13);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.lang.String str43 = locale41.getDisplayVariant();
        java.lang.String str44 = locale13.getDisplayScript(locale41);
        java.util.Set<java.lang.String> strSet45 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale41.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale5.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "chinois" + "'", str39, "chinois");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        printStream7.print((float) (byte) 1);
        printStream7.print('u');
        printStream7.println('4');
        printStream7.print('x');
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream7);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream7, true);
        printWriter35.print(10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        printStream26.println("China");
        java.io.PrintStream printStream32 = new java.io.PrintStream("zh_CN");
        printStream32.print((float) (byte) -1);
        printStream32.println();
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException(throwable37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray40 = mathException38.getSuppressed();
        java.io.PrintStream printStream41 = printStream32.format("italien (Italie)", (java.lang.Object[]) throwableArray40);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.io.PrintStream printStream48 = printStream32.printf(locale42, "ja", (java.lang.Object[]) throwableArray47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("zh_CN", (java.lang.Object[]) throwableArray47);
        java.io.PrintStream printStream50 = printStream26.format("org.apache.commons.math.MathException: fr-CA", (java.lang.Object[]) throwableArray47);
        printStream26.print('u');
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream50);
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter1.write("chinois");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getCountry();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale6.getISO3Country();
        java.util.Set<java.lang.Character> charSet11 = locale6.getExtensionKeys();
        java.io.PrintStream printStream14 = new java.io.PrintStream("zh_CN");
        printStream14.print((float) (byte) -1);
        char[] charArray19 = new char[] { 'x', 'u' };
        printStream14.println(charArray19);
        java.util.Locale locale23 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str24 = locale23.getCountry();
        java.io.PrintStream printStream27 = new java.io.PrintStream("zh_CN");
        printStream27.print((float) (byte) -1);
        printStream27.println();
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException(throwable32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray35 = mathException33.getSuppressed();
        java.io.PrintStream printStream36 = printStream27.format("italien (Italie)", (java.lang.Object[]) throwableArray35);
        java.io.PrintStream printStream37 = printStream14.printf(locale23, "fr-CA", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter38 = printWriter1.printf(locale6, "italiano", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter40 = printWriter1.append((java.lang.CharSequence) "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("fr");
        printWriter43.print("it_IT");
        java.util.Locale locale46 = java.util.Locale.ROOT;
        boolean boolean47 = locale46.hasExtensions();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale46.getDisplayName(locale48);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String str52 = locale46.getDisplayCountry(locale50);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray55);
        java.io.PrintWriter printWriter57 = printWriter43.printf(locale50, "it_IT", objArray55);
        printWriter57.println(true);
        java.util.Locale locale63 = new java.util.Locale("hi!", "chinois", "italien (Italie)");
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter68 = printWriter66.append(' ');
        printWriter66.println(false);
        printWriter66.println('x');
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter("fr");
        printWriter75.write("hi!");
        printWriter75.println((java.lang.Object) (-1L));
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = locale80.getDisplayName();
        java.lang.Object[] objArray84 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray84);
        java.lang.Object[] objArray86 = mathException85.getArguments();
        java.io.PrintWriter printWriter87 = printWriter75.format(locale80, "anglais", objArray86);
        java.io.PrintWriter printWriter88 = printWriter66.format("italiano (Italia)", objArray86);
        java.io.PrintWriter printWriter89 = printWriter57.format(locale63, "tedesco", objArray86);
        java.io.PrintWriter printWriter90 = printWriter40.printf("Chinese", objArray86);
        printWriter40.println(96);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[x, u]");
        org.junit.Assert.assertEquals(locale23.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITALY" + "'", str24, "ITALY");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_CHINOIS_italien (Italie)");
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "italiano (Italia)" + "'", str81, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printWriter88);
        org.junit.Assert.assertNotNull(printWriter89);
        org.junit.Assert.assertNotNull(printWriter90);
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder9 = builder3.setExtension('a', "italiano");
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("cinese");
        java.util.Locale.Builder builder14 = builder9.setExtension('x', "ANGLAIS");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setScript("fr-FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: fr-FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println((float) (-1));
        java.io.PrintStream printStream5 = new java.io.PrintStream("zh_CN");
        printStream5.println();
        java.io.PrintStream printStream8 = printStream5.append('#');
        printStream5.close();
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream5.write(byteArray14);
        printStream1.write(byteArray14);
        java.util.Locale locale18 = new java.util.Locale("cinese");
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.print("it_IT");
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter30 = printWriter25.printf("fr", objArray29);
        printWriter25.println((float) 'u');
        printStream21.print((java.lang.Object) 'u');
        printStream21.println(false);
        printStream21.println(0L);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale38.getVariant();
        boolean boolean41 = locale38.hasExtensions();
        java.util.Locale locale42 = locale38.stripExtensions();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter47 = printWriter45.append(' ');
        char[] charArray50 = new char[] { 'x', 'a' };
        printWriter47.print(charArray50);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray55);
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray57);
        java.io.PrintWriter printWriter59 = printWriter47.printf("en-GB", (java.lang.Object[]) throwableArray57);
        java.io.PrintStream printStream60 = printStream21.printf(locale38, "Italy", (java.lang.Object[]) throwableArray57);
        java.io.PrintStream printStream61 = printStream1.printf(locale18, "Chinese (Taiwan)", (java.lang.Object[]) throwableArray57);
        java.lang.String str62 = locale18.getDisplayName();
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, -1, -1]");
        org.junit.Assert.assertEquals(locale18.toString(), "cinese");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[x, a]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "cinese" + "'", str62, "cinese");
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("hi!", objArray1);
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = mathException2.getSuppressed();
        java.lang.Object[] objArray5 = mathException2.getArguments();
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Object[] objArray10 = mathException9.getArguments();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        mathException9.addSuppressed((java.lang.Throwable) mathException13);
        java.lang.Throwable[] throwableArray16 = mathException9.getSuppressed();
        java.lang.Object[] objArray17 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("Chinese (Taiwan)", objArray17);
        mathException2.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        java.lang.String str22 = mathException20.toString();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str22, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter1.println(false);
        printWriter1.println('x');
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.write("hi!");
        printWriter10.println((java.lang.Object) (-1L));
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray19);
        java.lang.Object[] objArray21 = mathException20.getArguments();
        java.io.PrintWriter printWriter22 = printWriter10.format(locale15, "anglais", objArray21);
        java.io.PrintWriter printWriter23 = printWriter1.format("italiano (Italia)", objArray21);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter28 = printWriter26.append(' ');
        printWriter28.println();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter28, true);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter35 = printWriter33.append(' ');
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale41 = java.util.Locale.ROOT;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale41.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale41.getDisplayCountry(locale45);
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray50);
        java.io.PrintWriter printWriter52 = printWriter38.printf(locale45, "it_IT", objArray50);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("fr");
        printWriter55.print("it_IT");
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", objArray62);
        java.lang.Throwable[] throwableArray64 = mathException63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = mathException63.getSuppressed();
        java.io.PrintWriter printWriter66 = printWriter55.printf(locale59, "it_IT", (java.lang.Object[]) throwableArray65);
        java.io.PrintWriter printWriter67 = printWriter38.format("it_IT", (java.lang.Object[]) throwableArray65);
        java.io.PrintWriter printWriter68 = printWriter35.format("zh_CN", (java.lang.Object[]) throwableArray65);
        java.io.PrintStream printStream70 = new java.io.PrintStream("zh_CN");
        printStream70.print((float) (byte) -1);
        char[] charArray75 = new char[] { 'x', 'u' };
        printStream70.println(charArray75);
        printWriter68.print(charArray75);
        printWriter31.print(charArray75);
        printWriter23.print(charArray75);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "italiano (Italia)" + "'", str16, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[x, u]");
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream7.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream7);
        printWriter9.println((int) (byte) 100);
        printWriter9.print(0.0f);
        java.io.PrintStream printStream15 = new java.io.PrintStream("zh_CN");
        printStream15.println();
        java.io.PrintStream printStream18 = printStream15.append('#');
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        printStream18.println('#');
        printStream18.println();
        printStream18.print("italien (Italie)");
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream18);
        printStream18.print(1.0d);
        printStream18.write((int) '4');
        printStream18.println(0.7008547008546866d);
        java.io.PrintStream printStream33 = new java.io.PrintStream("zh_CN");
        printStream33.print((float) (byte) -1);
        printStream33.println();
        printStream33.println();
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, true);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.print("it_IT");
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale44.getDisplayName(locale46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.lang.String str50 = locale44.getDisplayCountry(locale48);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.io.PrintWriter printWriter55 = printWriter41.printf(locale48, "it_IT", objArray53);
        printStream39.println((java.lang.Object) "it_IT");
        printStream39.println(1.0d);
        java.io.PrintStream printStream60 = new java.io.PrintStream("zh_CN");
        printStream60.println();
        java.io.PrintStream printStream63 = printStream60.append('#');
        printStream60.close();
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter68 = printWriter66.append(' ');
        char[] charArray71 = new char[] { 'x', 'a' };
        printWriter68.print(charArray71);
        printStream60.println(charArray71);
        printStream39.print(charArray71);
        printStream18.print(charArray71);
        // The following exception was thrown during execution in test generation
        try {
            printWriter9.write(charArray71, 96, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[x, a]");
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("jpn");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("ja");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray14 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("cinese", strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Collection<java.util.Locale> localeCollection28 = null;
        java.util.Locale locale29 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, localeCollection28);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList32);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale35.getCountry();
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.util.Locale locale43 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray44 = new java.util.Locale[] { locale35, locale38, locale39, locale43 };
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Collection<java.util.Locale> localeCollection51 = null;
        java.util.Locale locale52 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, localeCollection51);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.lang.String str57 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList55);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        boolean boolean59 = locale58.hasExtensions();
        java.lang.String str60 = locale58.getCountry();
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.util.Locale locale66 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale58, locale61, locale62, locale66 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale72 = java.util.Locale.lookup(languageRangeList24, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.lang.String[] strArray81 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.lang.String>) strList82);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap85 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList86 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, strMap85);
        java.util.Locale locale87 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet88 = locale87.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.lang.String>) strSet88, filteringMode89);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList21, (java.util.Collection<java.util.Locale>) localeList71, filteringMode89);
        java.util.Locale locale92 = java.util.Locale.lookup(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList71, filteringMode93);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(languageRangeList86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNull(locale92);
        org.junit.Assert.assertTrue("'" + filteringMode93 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode93.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList94);
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        boolean boolean10 = locale8.hasExtensions();
        java.util.Locale.setDefault(locale8);
        java.util.Locale.Builder builder12 = builder3.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.addUnicodeLocaleAttribute("org.apache.commons.math.MathException: China");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.MathException: China [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        int int6 = hypergeometricDistributionImpl3.getSampleSize();
        double double8 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) 'x');
        hypergeometricDistributionImpl3.setPopulationSize(4);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.toLanguageTag();
        java.lang.String str6 = locale2.getDisplayName(locale3);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale13.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String str19 = locale13.getDisplayCountry(locale17);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.io.PrintWriter printWriter24 = printWriter10.printf(locale17, "it_IT", objArray22);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("fr");
        printWriter27.print("it_IT");
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        java.lang.Throwable[] throwableArray36 = mathException35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = mathException35.getSuppressed();
        java.io.PrintWriter printWriter38 = printWriter27.printf(locale31, "it_IT", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter39 = printWriter10.format("it_IT", (java.lang.Object[]) throwableArray37);
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.lang.String str43 = locale40.getVariant();
        java.lang.String str44 = locale40.getCountry();
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter47 = printWriter10.format(locale40, "fr-CA", (java.lang.Object[]) strArray46);
        java.util.Locale.Builder builder48 = builder7.setLocale(locale40);
        boolean boolean49 = locale40.hasExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de" + "'", str5, "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch (Taiwan)" + "'", str6, "Chinesisch (Taiwan)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability(0.9999999999999717d);
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability(32);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability(1, 96);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.7008547008546866d + "'", double9 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2991452991453134d + "'", double14 == 0.2991452991453134d);
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability((int) ' ');
        hypergeometricDistributionImpl3.setSampleSize((int) 'x');
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10, 117);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        java.io.PrintWriter printWriter13 = printWriter2.printf(locale6, "it_IT", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale6.getDisplayScript(locale14);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.lang.String str17 = locale6.getDisplayCountry(locale16);
        java.lang.String str18 = locale0.getDisplayCountry(locale6);
        java.util.Set<java.lang.Character> charSet19 = locale0.getExtensionKeys();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.util.Set<java.lang.Character> charSet26 = locale24.getExtensionKeys();
        java.lang.String str27 = locale24.getDisplayLanguage();
        java.lang.String str28 = locale24.getDisplayCountry();
        java.util.Locale locale31 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str32 = locale31.toLanguageTag();
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.write("hi!");
        printWriter35.println((java.lang.Object) (-1L));
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale40.getDisplayName();
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.lang.Object[] objArray46 = mathException45.getArguments();
        java.io.PrintWriter printWriter47 = printWriter35.format(locale40, "anglais", objArray46);
        java.util.Locale.setDefault(category33, locale40);
        java.util.Locale locale49 = java.util.Locale.getDefault(category33);
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale50.getDisplayCountry(locale51);
        java.lang.String str53 = locale49.getDisplayName(locale51);
        java.lang.String str54 = locale31.getDisplayLanguage(locale49);
        java.lang.String str55 = locale24.getDisplayName(locale49);
        java.lang.String str56 = locale0.getDisplayCountry(locale49);
        java.lang.String str57 = locale49.getScript();
        java.lang.String str58 = locale49.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u82f1\u8a9e" + "'", str27, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u30ab\u30ca\u30c0" + "'", str28, "\u30ab\u30ca\u30c0");
        org.junit.Assert.assertEquals(locale31.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str41, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str53, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en-gb" + "'", str54, "en-gb");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "inglese (Canada)" + "'", str55, "inglese (Canada)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str58, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        printStream1.print((-1));
        printStream1.write((int) (byte) 1);
        printStream1.print(true);
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.println();
        java.io.PrintStream printStream20 = printStream17.append('#');
        printStream17.close();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream17.write(byteArray25);
        printStream17.write((int) 'a');
        printStream17.println((int) (short) 100);
        printStream17.print(1L);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.print("it_IT");
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale38.getDisplayName(locale40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        boolean boolean43 = locale42.hasExtensions();
        java.lang.String str44 = locale38.getDisplayCountry(locale42);
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        java.io.PrintWriter printWriter49 = printWriter35.printf(locale42, "it_IT", objArray47);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("fr");
        printWriter52.print("it_IT");
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = mathException60.getSuppressed();
        java.io.PrintWriter printWriter63 = printWriter52.printf(locale56, "it_IT", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter64 = printWriter35.format("it_IT", (java.lang.Object[]) throwableArray62);
        printWriter64.println();
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        java.lang.Throwable[] throwableArray71 = mathException69.getSuppressed();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray71);
        java.io.PrintWriter printWriter73 = printWriter64.format("Royaume-Uni", (java.lang.Object[]) throwableArray71);
        java.io.PrintStream printStream74 = printStream17.printf("Chinese (China)", (java.lang.Object[]) throwableArray71);
        java.io.PrintStream printStream75 = printStream1.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray71);
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("fr-CA");
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("tedesco", objArray79, (java.lang.Throwable) mathException82);
        java.io.PrintStream printStream84 = printStream1.printf("german", objArray79);
        printStream1.println((-1));
        java.io.PrintWriter printWriter88 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.print(false);
        java.io.PrintWriter printWriter91 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(printStream84);
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "\ub3c5\uc77c\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ????????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.print((long) (byte) 0);
        printWriter3.write("italien");
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder7 = builder5.setVariant("Italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setRegion("United States");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: United States [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale7);
        java.util.Locale.Builder builder13 = builder3.setLanguageTag("fr-FR");
        java.util.Locale.Builder builder14 = builder3.clearExtensions();
        java.util.Locale locale15 = builder3.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ita");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter6 = printWriter4.append(' ');
        printWriter4.println(false);
        printWriter4.println('x');
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        printWriter13.write("hi!");
        printWriter13.println((java.lang.Object) (-1L));
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        java.io.PrintWriter printWriter25 = printWriter13.format(locale18, "anglais", objArray24);
        java.io.PrintWriter printWriter26 = printWriter4.format("italiano (Italia)", objArray24);
        java.io.PrintStream printStream27 = printStream1.printf("it_IT", objArray24);
        printStream1.print((float) '#');
        printStream1.println();
        printStream1.print((long) (byte) 0);
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str19, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "org.apache.commons.math.MathException: ja");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ja");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray3);
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = mathException4.getSuppressed();
        java.lang.Object[] objArray7 = mathException4.getArguments();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException();
        java.lang.String str11 = mathException10.getPattern();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException10);
        mathException8.addSuppressed((java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("inglese", (java.lang.Throwable) mathException12);
        java.lang.String str15 = mathException14.toString();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.MathException: inglese" + "'", str15, "org.apache.commons.math.MathException: inglese");
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream4 = new java.io.PrintStream("zh_CN");
        printStream4.println();
        java.io.PrintStream printStream7 = printStream4.append('#');
        printStream4.close();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream4.write(byteArray12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        printStream4.print((java.lang.Object) locale14);
        printStream4.println(false);
        java.util.Locale locale23 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getDisplayCountry(locale24);
        java.util.Set<java.lang.Character> charSet27 = locale23.getExtensionKeys();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale34 = java.util.Locale.ROOT;
        boolean boolean35 = locale34.hasExtensions();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale34.getDisplayName(locale36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale34.getDisplayCountry(locale38);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.io.PrintWriter printWriter45 = printWriter31.printf(locale38, "it_IT", objArray43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", objArray43);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        java.lang.Object[] objArray48 = mathException46.getArguments();
        java.io.PrintStream printStream49 = printStream4.format(locale23, "org.apache.commons.math.MathException: tedesco", objArray48);
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = java.util.Locale.getDefault(category50);
        java.util.Locale locale52 = java.util.Locale.getDefault(category50);
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale52.getDisplayName();
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException(throwable58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException59);
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray61, throwable62);
        java.lang.Object[] objArray64 = mathException63.getArguments();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        java.io.PrintStream printStream66 = printStream49.printf(locale52, "ita", objArray64);
        boolean boolean67 = locale2.equals((java.lang.Object) locale52);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale23.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.FORMAT + "'", category50.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)" + "'", str54, "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getScript();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.write("hi!");
        printWriter5.println((java.lang.Object) (-1L));
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        java.lang.Object[] objArray16 = mathException15.getArguments();
        java.io.PrintWriter printWriter17 = printWriter5.format(locale10, "anglais", objArray16);
        java.util.Locale locale21 = new java.util.Locale("deu", "anglais", "CA");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        char[] charArray29 = new char[] { 'x', 'a' };
        printWriter26.print(charArray29);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        java.lang.Throwable[] throwableArray36 = mathException35.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray36);
        java.io.PrintWriter printWriter38 = printWriter26.printf("en-GB", (java.lang.Object[]) throwableArray36);
        java.io.PrintWriter printWriter39 = printWriter17.printf(locale21, "italien (Italie)", (java.lang.Object[]) throwableArray36);
        java.lang.String str40 = locale21.getDisplayName();
        java.lang.String str41 = locale0.getDisplayScript(locale21);
        java.lang.String str43 = locale0.getExtension('a');
        java.lang.String str44 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str11, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertEquals(locale21.toString(), "deu_ANGLAIS_CA");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[x, a]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "deu (ANGLAIS,CA)" + "'", str40, "deu (ANGLAIS,CA)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.print("ita");
        java.util.Locale locale28 = new java.util.Locale("Italy");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream21.printf(locale28, "chinois", (java.lang.Object[]) throwableArray34);
        java.util.Locale.setDefault(category0, locale28);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter38.printf(locale42, "it_IT", (java.lang.Object[]) throwableArray48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale42.getDisplayScript(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.util.Locale locale54 = java.util.Locale.getDefault(category0);
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale55);
        java.util.Locale locale62 = new java.util.Locale("zh_CN", "English", "it_IT");
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        java.util.Locale locale64 = java.util.Locale.UK;
        java.lang.String str65 = locale64.toLanguageTag();
        java.lang.String str66 = locale62.getDisplayVariant(locale64);
        java.lang.String str67 = locale55.getDisplayScript(locale62);
        java.util.Locale locale71 = new java.util.Locale("zh", "zh", "\u30a4\u30ae\u30ea\u30b9");
        java.util.Locale locale72 = locale71.stripExtensions();
        java.lang.String str73 = locale62.getDisplayCountry(locale72);
        java.lang.String str74 = locale72.getDisplayVariant();
        java.lang.String str75 = locale72.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals(locale62.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(charSet63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "en-GB" + "'", str65, "en-GB");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "it,IT" + "'", str66, "it,IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(locale72);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ENGLISH" + "'", str73, "ENGLISH");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str74, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str75, "\u30a4\u30ae\u30ea\u30b9");
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("kor", "fr_FR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: fr_FR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1);
        double double11 = hypergeometricDistributionImpl3.probability((double) 10L);
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getPopulationSize();
        double double15 = hypergeometricDistributionImpl3.probability((int) (short) 10);
        double double17 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) (short) 10);
        hypergeometricDistributionImpl3.setSampleSize((int) (byte) 1);
        int int23 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.8547008547008489d);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = hypergeometricDistributionImpl3.cumulativeProbability(97, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(10);
        java.io.PrintWriter printWriter22 = printWriter1.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(false);
        java.io.PrintWriter printWriter30 = printWriter1.append((java.lang.CharSequence) "Italy", 0, 0);
        printWriter1.write("hi!");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl38 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int39 = hypergeometricDistributionImpl38.getPopulationSize();
        double double41 = hypergeometricDistributionImpl38.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl38.setNumberOfSuccesses((int) (short) 1);
        int int44 = hypergeometricDistributionImpl38.getSampleSize();
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        java.lang.Object[] objArray48 = mathException47.getArguments();
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray50);
        java.lang.Throwable[] throwableArray52 = mathException51.getSuppressed();
        mathException47.addSuppressed((java.lang.Throwable) mathException51);
        java.lang.Throwable[] throwableArray54 = mathException47.getSuppressed();
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter("fr");
        printWriter56.print("it_IT");
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter61 = printWriter56.printf("fr", objArray60);
        printWriter61.print((float) (byte) 100);
        java.io.PrintWriter printWriter65 = printWriter61.append((java.lang.CharSequence) "ja");
        java.lang.Object[] objArray66 = new java.lang.Object[] { int44, throwableArray54, printWriter65 };
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException();
        java.lang.String str68 = mathException67.getPattern();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray54, (java.lang.Throwable) mathException67);
        java.io.PrintWriter printWriter70 = printWriter1.printf("japonais", (java.lang.Object[]) throwableArray54);
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter74 = printWriter72.append(' ');
        char[] charArray77 = new char[] { 'x', 'a' };
        printWriter74.print(charArray77);
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("hi!", objArray82);
        java.lang.Throwable[] throwableArray84 = mathException83.getSuppressed();
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray84);
        java.io.PrintWriter printWriter86 = printWriter74.printf("en-GB", (java.lang.Object[]) throwableArray84);
        char[] charArray91 = new char[] { 'a', ' ', 'u', 'x' };
        printWriter86.write(charArray91);
        // The following exception was thrown during execution in test generation
        try {
            printWriter70.write(charArray91, 10, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 117 + "'", int39 == 117);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[x, a]");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "a ux");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "a ux");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[a,  , u, x]");
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double5 = hypergeometricDistributionImpl3.probability((double) 100.0f);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) 'u');
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) -1, 117);
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((double) 1, (double) 117);
        int int15 = hypergeometricDistributionImpl3.getPopulationSize();
        int int16 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability(1);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(10);
        double double15 = hypergeometricDistributionImpl3.probability((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: population size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2991452991452851d + "'", double11 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.String str2 = locale0.getVariant();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.util.Locale locale7 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str8 = locale7.toLanguageTag();
        java.lang.String str9 = locale0.getDisplayLanguage(locale7);
        java.util.Locale locale13 = new java.util.Locale("", "", "");
        java.util.Locale locale16 = new java.util.Locale("hi!", "Italy");
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.lang.String str20 = locale0.getDisplayScript(locale16);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.setLanguageTag("fr");
        java.util.Locale.Builder builder26 = builder24.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder27 = builder24.clear();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getVariant();
        java.util.Locale.Builder builder32 = builder24.setLocale(locale28);
        java.util.Locale locale33 = builder24.build();
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale0.getDisplayCountry(locale33);
        java.lang.String str37 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals(locale7.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "French" + "'", str9, "French");
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi! (ITALY)" + "'", str19, "hi! (ITALY)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str34, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability((int) ' ');
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder7 = builder3.setRegion("ja");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("japonais");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.setLanguage("kor");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.setRegion("zh_cn");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: zh_cn [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "italiano (Italia)");
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        printStream15.flush();
        printStream15.println((-1));
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.println();
        java.io.PrintStream printStream24 = printStream21.append('#');
        printStream21.close();
        printStream21.close();
        java.io.PrintStream printStream28 = new java.io.PrintStream("zh_CN");
        printStream28.print((float) (byte) -1);
        printStream28.println();
        printStream28.println();
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream28, true);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter38 = printWriter36.append(' ');
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.print("it_IT");
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale44.getDisplayName(locale46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.lang.String str50 = locale44.getDisplayCountry(locale48);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.io.PrintWriter printWriter55 = printWriter41.printf(locale48, "it_IT", objArray53);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("fr");
        printWriter58.print("it_IT");
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("hi!", objArray65);
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = mathException66.getSuppressed();
        java.io.PrintWriter printWriter69 = printWriter58.printf(locale62, "it_IT", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter70 = printWriter41.format("it_IT", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter71 = printWriter38.format("zh_CN", (java.lang.Object[]) throwableArray68);
        java.io.PrintStream printStream73 = new java.io.PrintStream("zh_CN");
        printStream73.print((float) (byte) -1);
        char[] charArray78 = new char[] { 'x', 'u' };
        printStream73.println(charArray78);
        printWriter71.print(charArray78);
        printStream28.print(charArray78);
        java.io.PrintWriter printWriter82 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        java.io.PrintStream printStream84 = new java.io.PrintStream("zh_CN");
        printStream84.println();
        java.io.PrintStream printStream87 = printStream84.append('#');
        printStream84.close();
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream84.write(byteArray92);
        printStream28.write(byteArray92);
        printStream21.write(byteArray92);
        printStream15.write(byteArray92);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[x, u]");
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 10, -1]");
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = mathException13.getSuppressed();
        java.io.PrintWriter printWriter16 = printWriter5.printf(locale9, "it_IT", (java.lang.Object[]) throwableArray15);
        printWriter5.println((float) (byte) 10);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("fr");
        printWriter20.write("hi!");
        printWriter5.println((java.lang.Object) printWriter20);
        java.io.PrintWriter printWriter25 = printWriter5.append('#');
        printWriter25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("fr");
        printWriter28.print("it_IT");
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter33 = printWriter28.printf("fr", objArray32);
        printWriter33.print((float) (byte) 100);
        java.io.PrintWriter printWriter37 = printWriter33.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter41 = printWriter39.append(' ');
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("fr");
        printWriter44.print("it_IT");
        java.util.Locale locale47 = java.util.Locale.ROOT;
        boolean boolean48 = locale47.hasExtensions();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale47.getDisplayName(locale49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale47.getDisplayCountry(locale51);
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        java.io.PrintWriter printWriter58 = printWriter44.printf(locale51, "it_IT", objArray56);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter("fr");
        printWriter61.print("it_IT");
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", objArray68);
        java.lang.Throwable[] throwableArray70 = mathException69.getSuppressed();
        java.lang.Throwable[] throwableArray71 = mathException69.getSuppressed();
        java.io.PrintWriter printWriter72 = printWriter61.printf(locale65, "it_IT", (java.lang.Object[]) throwableArray71);
        java.io.PrintWriter printWriter73 = printWriter44.format("it_IT", (java.lang.Object[]) throwableArray71);
        java.io.PrintWriter printWriter74 = printWriter41.format("zh_CN", (java.lang.Object[]) throwableArray71);
        java.io.PrintStream printStream76 = new java.io.PrintStream("zh_CN");
        printStream76.print((float) (byte) -1);
        char[] charArray81 = new char[] { 'x', 'u' };
        printStream76.println(charArray81);
        printWriter74.print(charArray81);
        printWriter37.write(charArray81);
        printWriter25.print(charArray81);
        printWriter1.print(charArray81);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[x, u]");
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        java.util.Locale locale3 = new java.util.Locale("deu", "deu", "italien");
        java.io.PrintStream printStream5 = new java.io.PrintStream("zh_CN");
        printStream5.print((float) (byte) -1);
        printStream5.println();
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        printWriter13.print("it_IT");
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String str22 = locale16.getDisplayCountry(locale20);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.io.PrintWriter printWriter27 = printWriter13.printf(locale20, "it_IT", objArray25);
        printStream11.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream30 = printStream11.append((java.lang.CharSequence) "fr");
        printStream30.println((float) 117);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.lang.String str36 = locale33.getVariant();
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale33.getDisplayScript(locale37);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.print("it_IT");
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale44.getDisplayName(locale46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.lang.String str50 = locale44.getDisplayCountry(locale48);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.io.PrintWriter printWriter55 = printWriter41.printf(locale48, "it_IT", objArray53);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("fr");
        printWriter58.print("it_IT");
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("hi!", objArray65);
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = mathException66.getSuppressed();
        java.io.PrintWriter printWriter69 = printWriter58.printf(locale62, "it_IT", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter70 = printWriter41.format("it_IT", (java.lang.Object[]) throwableArray68);
        java.io.PrintStream printStream71 = printStream30.format(locale37, "italien (Italie)", (java.lang.Object[]) throwableArray68);
        java.lang.String str72 = locale3.getDisplayLanguage(locale37);
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleKeys();
        java.util.Locale locale75 = java.util.Locale.ROOT;
        boolean boolean76 = locale75.hasExtensions();
        java.lang.String str77 = locale75.getCountry();
        java.lang.String str78 = locale75.getDisplayLanguage();
        java.lang.String str79 = locale75.getISO3Country();
        java.lang.String str80 = locale73.getDisplayScript(locale75);
        java.util.Locale locale81 = java.util.Locale.ROOT;
        boolean boolean82 = locale81.hasExtensions();
        java.lang.String str83 = locale81.getCountry();
        java.lang.String str84 = locale81.getDisplayLanguage();
        java.lang.String str85 = locale81.getISO3Country();
        java.lang.String str86 = locale81.getDisplayVariant();
        java.lang.String str87 = locale73.getDisplayName(locale81);
        java.lang.String str88 = locale3.getDisplayLanguage(locale81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = locale3.getUnicodeLocaleType("org.apache.commons.math.MathException: fr-ca");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException: fr-ca");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "deu_DEU_italien");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "deu" + "'", str72, "deu");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "German (Germany)" + "'", str87, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "deu" + "'", str88, "deu");
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("FR");
        java.io.PrintStream printStream3 = new java.io.PrintStream("zh_CN");
        printStream3.print((float) (byte) -1);
        printStream3.println();
        printStream3.println();
        printStream3.println((float) ' ');
        printStream3.print((long) 'u');
        printStream3.print(true);
        printStream3.print('4');
        printStream3.write((int) (byte) 10);
        java.io.PrintStream printStream19 = printStream3.append('a');
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder23 = builder20.setScript("");
        java.util.Locale.Builder builder25 = builder20.setScript("");
        java.util.Locale.Builder builder26 = builder20.clear();
        java.util.Locale.Builder builder27 = builder20.clear();
        java.util.Locale locale28 = java.util.Locale.UK;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayScript(locale29);
        java.lang.String str31 = locale29.getDisplayScript();
        java.util.Locale.Builder builder32 = builder27.setLocale(locale29);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("fr");
        printWriter37.print("it_IT");
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.lang.Throwable[] throwableArray46 = mathException45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = mathException45.getSuppressed();
        java.io.PrintWriter printWriter48 = printWriter37.printf(locale41, "it_IT", (java.lang.Object[]) throwableArray47);
        printWriter37.write("fr");
        printWriter37.print(1.0f);
        java.lang.String[] strArray54 = java.util.Locale.getISOLanguages();
        java.io.PrintWriter printWriter55 = printWriter37.format("ita", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("Deutsch", (java.lang.Object[]) strArray54);
        java.lang.Object[] objArray57 = mathException56.getArguments();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("allemand");
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("Japan", objArray57, (java.lang.Throwable) mathException59);
        java.io.PrintStream printStream61 = printStream3.format(locale29, "deu (ANGLAIS,CA)", objArray57);
        boolean boolean62 = languageRange1.equals((java.lang.Object) printStream61);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[aa, ab, ae, af, ak, am, an, ar, as, av, ay, az, ba, be, bg, bh, bi, bm, bn, bo, br, bs, ca, ce, ch, co, cr, cs, cu, cv, cy, da, de, dv, dz, ee, el, en, eo, es, et, eu, fa, ff, fi, fj, fo, fr, fy, ga, gd, gl, gn, gu, gv, ha, he, hi, ho, hr, ht, hu, hy, hz, ia, id, ie, ig, ii, ik, in, io, is, it, iu, iw, ja, ji, jv, ka, kg, ki, kj, kk, kl, km, kn, ko, kr, ks, ku, kv, kw, ky, la, lb, lg, li, ln, lo, lt, lu, lv, mg, mh, mi, mk, ml, mn, mo, mr, ms, mt, my, na, nb, nd, ne, ng, nl, nn, no, nr, nv, ny, oc, oj, om, or, os, pa, pi, pl, ps, pt, qu, rm, rn, ro, ru, rw, sa, sc, sd, se, sg, si, sk, sl, sm, sn, so, sq, sr, ss, st, su, sv, sw, ta, te, tg, th, ti, tk, tl, tn, to, tr, ts, tt, tw, ty, ug, uk, ur, uz, ve, vi, vo, wa, wo, xh, yi, yo, za, zh, zu]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[aa, ab, ae, af, ak, am, an, ar, as, av, ay, az, ba, be, bg, bh, bi, bm, bn, bo, br, bs, ca, ce, ch, co, cr, cs, cu, cv, cy, da, de, dv, dz, ee, el, en, eo, es, et, eu, fa, ff, fi, fj, fo, fr, fy, ga, gd, gl, gn, gu, gv, ha, he, hi, ho, hr, ht, hu, hy, hz, ia, id, ie, ig, ii, ik, in, io, is, it, iu, iw, ja, ji, jv, ka, kg, ki, kj, kk, kl, km, kn, ko, kr, ks, ku, kv, kw, ky, la, lb, lg, li, ln, lo, lt, lu, lv, mg, mh, mi, mk, ml, mn, mo, mr, ms, mt, my, na, nb, nd, ne, ng, nl, nn, no, nr, nv, ny, oc, oj, om, or, os, pa, pi, pl, ps, pt, qu, rm, rn, ro, ru, rw, sa, sc, sd, se, sg, si, sk, sl, sm, sn, so, sq, sr, ss, st, su, sv, sw, ta, te, tg, th, ti, tk, tl, tn, to, tr, ts, tt, tw, ty, ug, uk, ur, uz, ve, vi, vo, wa, wo, xh, yi, yo, za, zh, zu]");
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter3.printf(locale7, "it_IT", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter32 = printWriter1.printf(locale7, "fr", objArray29);
        printWriter1.print('a');
        printWriter1.println((float) (short) 10);
        printWriter1.print((double) (short) 1);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter11 = printWriter9.append(' ');
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("fr");
        printWriter14.print("it_IT");
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale17.getDisplayCountry(locale21);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        java.io.PrintWriter printWriter28 = printWriter14.printf(locale21, "it_IT", objArray26);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintWriter printWriter42 = printWriter31.printf(locale35, "it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter43 = printWriter14.format("it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter44 = printWriter11.format("zh_CN", (java.lang.Object[]) throwableArray41);
        java.io.PrintStream printStream46 = new java.io.PrintStream("zh_CN");
        printStream46.print((float) (byte) -1);
        char[] charArray51 = new char[] { 'x', 'u' };
        printStream46.println(charArray51);
        printWriter44.print(charArray51);
        printStream1.print(charArray51);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream57 = new java.io.PrintStream("zh_CN");
        printStream57.println();
        java.io.PrintStream printStream60 = printStream57.append('#');
        printStream57.close();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream57.write(byteArray65);
        printStream1.write(byteArray65);
        printStream1.print((int) (short) 100);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print(true);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[x, u]");
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 10, -1]");
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("zh_CN", objArray17);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl24 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int25 = hypergeometricDistributionImpl24.getPopulationSize();
        double double27 = hypergeometricDistributionImpl24.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl24.setSampleSize(0);
        printWriter1.print((java.lang.Object) hypergeometricDistributionImpl24);
        double double32 = hypergeometricDistributionImpl24.probability((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = hypergeometricDistributionImpl24.cumulativeProbability(0.023984009456667447d, 1.237301700029129E-30d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double7 = hypergeometricDistributionImpl3.probability((double) 0);
        double double9 = hypergeometricDistributionImpl3.probability(21);
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability(1);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7008547008546866d + "'", double7 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize(0);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        java.util.Locale locale3 = new java.util.Locale("fra", "it_IT", "fran\347ais (France)");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.lang.Object obj5 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "fra_IT_IT_fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fran\347ais (France)" + "'", str4, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "fra_IT_IT_fran\347ais (France)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "fra_IT_IT_fran\347ais (France)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "fra_IT_IT_fran\347ais (France)");
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.MathException: chinois", "\u82f1\u6587");
        java.lang.String str3 = locale2.toString();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u82f1\u6587" + "'", str3, "\u82f1\u6587");
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setLanguageTag("ko");
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale8);
        java.util.Locale locale13 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = mathException25.getSuppressed();
        java.io.PrintWriter printWriter28 = printWriter17.printf(locale21, "it_IT", (java.lang.Object[]) throwableArray27);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale34 = java.util.Locale.ROOT;
        boolean boolean35 = locale34.hasExtensions();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale34.getDisplayName(locale36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale34.getDisplayCountry(locale38);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.io.PrintWriter printWriter45 = printWriter31.printf(locale38, "it_IT", objArray43);
        java.io.PrintWriter printWriter46 = printWriter15.printf(locale21, "fr", objArray43);
        java.lang.String str47 = locale13.getDisplayVariant(locale21);
        java.lang.String str48 = locale8.getDisplayVariant(locale21);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getVariant();
        java.lang.String str51 = locale49.toLanguageTag();
        java.lang.String str53 = locale49.getUnicodeLocaleType("CA");
        java.lang.String str54 = locale49.getDisplayName();
        boolean boolean55 = locale49.hasExtensions();
        java.lang.String str56 = locale8.getDisplayName(locale49);
        java.util.Locale.Builder builder57 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder58 = builder7.clear();
        java.util.Locale.Builder builder59 = builder58.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale13.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "chinois" + "'", str47, "chinois");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "de" + "'", str51, "de");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tedesco" + "'", str54, "tedesco");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Italienisch (Italien)" + "'", str56, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = new java.io.PrintStream("zh_CN");
        printStream4.print((float) (byte) -1);
        printStream4.println();
        printStream4.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream4, true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter14 = printWriter12.append(' ');
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("fr");
        printWriter34.print("it_IT");
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        java.io.PrintWriter printWriter45 = printWriter34.printf(locale38, "it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter46 = printWriter17.format("it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter47 = printWriter14.format("zh_CN", (java.lang.Object[]) throwableArray44);
        java.io.PrintStream printStream49 = new java.io.PrintStream("zh_CN");
        printStream49.print((float) (byte) -1);
        char[] charArray54 = new char[] { 'x', 'u' };
        printStream49.println(charArray54);
        printWriter47.print(charArray54);
        printStream4.print(charArray54);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("fr");
        printWriter62.print("it_IT");
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.io.PrintWriter printWriter73 = printWriter62.printf(locale66, "it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream74 = printStream4.format(locale58, "hi!", (java.lang.Object[]) throwableArray72);
        java.lang.String str75 = locale58.getLanguage();
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = mathException79.getSuppressed();
        java.io.PrintStream printStream82 = printStream1.printf(locale58, "", (java.lang.Object[]) throwableArray81);
        java.io.PrintStream printStream84 = printStream82.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.OutputStream) printStream82);
        java.util.Locale.Builder builder86 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder87 = builder86.clearExtensions();
        java.util.Locale.Builder builder89 = builder87.setLanguageTag("fr");
        java.util.Locale.Builder builder91 = builder89.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder92 = builder89.clear();
        java.util.Locale.Builder builder93 = builder89.clear();
        java.util.Locale locale94 = builder89.build();
        java.util.Locale locale95 = builder89.build();
        java.util.Locale.Builder builder97 = builder89.setLanguage("fr");
        printStream82.println((java.lang.Object) "fr");
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[x, u]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "");
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("US", 0.9999999999996674d);
        java.lang.String str3 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "us" + "'", str3, "us");
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        printWriter31.print((double) 100L);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getVariant();
        java.lang.String str38 = locale34.getCountry();
        java.io.PrintStream printStream41 = new java.io.PrintStream("zh_CN");
        printStream41.print((float) (byte) -1);
        printStream41.println();
        printStream41.print("ita");
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.util.Locale locale49 = locale47.stripExtensions();
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = mathException53.getSuppressed();
        java.io.PrintStream printStream56 = printStream41.printf(locale49, "fr", (java.lang.Object[]) throwableArray55);
        java.io.PrintWriter printWriter57 = printWriter31.format(locale34, "fra", (java.lang.Object[]) throwableArray55);
        char[] charArray58 = new char[] {};
        printWriter31.print(charArray58);
        printWriter15.println(charArray58);
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray63);
        java.lang.Object[] objArray65 = mathException64.getArguments();
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", objArray67);
        java.lang.Throwable[] throwableArray69 = mathException68.getSuppressed();
        mathException64.addSuppressed((java.lang.Throwable) mathException68);
        java.lang.Throwable[] throwableArray71 = mathException64.getSuppressed();
        java.lang.Object[] objArray72 = mathException64.getArguments();
        java.io.PrintWriter printWriter73 = printWriter15.printf("CN", objArray72);
        // The following exception was thrown during execution in test generation
        try {
            printWriter15.write("\uc77c\ubcf8\uc5b4", 0, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 31");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(printWriter73);
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale10.getCountry();
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale10, locale13, locale14, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Collection<java.util.Locale> localeCollection26 = null;
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection26);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.String str32 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale33.getCountry();
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Locale locale41 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale33, locale36, locale37, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Collection<java.util.Locale> localeCollection52 = null;
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, localeCollection52);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strList56);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = locale59.getCountry();
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.util.Locale locale67 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale59, locale62, locale63, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter(languageRangeList48, (java.util.Collection<java.util.Locale>) localeList69, filteringMode72);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strSet75);
        java.util.Locale locale77 = java.util.Locale.ITALY;
        java.util.Locale locale81 = new java.util.Locale("English", "", "chinois");
        java.lang.String str82 = locale77.getDisplayName(locale81);
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str84 = java.util.Locale.lookupTag(languageRangeList48, (java.util.Collection<java.lang.String>) strSet83);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode72.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale81.toString(), "english__chinois");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Italian (Italy)" + "'", str82, "Italian (Italy)");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getUnicodeLocaleType("FR");
        java.lang.String str4 = locale0.getISO3Language();
        java.util.Locale locale5 = locale0.stripExtensions();
        java.lang.String str6 = locale0.getISO3Country();
        java.lang.String str7 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fra" + "'", str4, "fra");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FRA" + "'", str6, "FRA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ita", (double) 0L);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        java.lang.String str5 = languageRange2.getRange();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.clearExtensions();
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("fr");
        printWriter15.write("hi!");
        printWriter15.println((java.lang.Object) (-1L));
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.lang.Object[] objArray26 = mathException25.getArguments();
        java.io.PrintWriter printWriter27 = printWriter15.format(locale20, "anglais", objArray26);
        java.util.Locale.setDefault(category13, locale20);
        java.util.Locale locale29 = java.util.Locale.getDefault(category13);
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.util.Locale locale34 = locale29.stripExtensions();
        java.util.Locale.setDefault(locale34);
        java.util.Locale locale37 = new java.util.Locale("it_IT");
        java.lang.String str38 = locale34.getDisplayName(locale37);
        java.util.Locale.Builder builder39 = builder9.setLocale(locale34);
        java.util.Locale.Builder builder41 = builder9.setLanguage("Korean");
        java.util.Locale locale42 = builder41.build();
        boolean boolean43 = languageRange2.equals((java.lang.Object) locale42);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ita" + "'", str4, "ita");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ita" + "'", str5, "ita");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ita" + "'", str7, "ita");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "italiano (Italia)" + "'", str21, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str33, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale37.toString(), "it_it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Italian (Italy)" + "'", str38, "Italian (Italy)");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "korean_IT");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((double) 100L, 100.0d);
        hypergeometricDistributionImpl3.setPopulationSize((int) '4');
        hypergeometricDistributionImpl3.setNumberOfSuccesses(52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap14);
        java.util.Locale locale18 = new java.util.Locale("en-GB", "Italy");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("fra", strMap22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList25, strMap26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Collection<java.util.Locale> localeCollection31 = null;
        java.util.Locale locale32 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, localeCollection31);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList35);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale38.getCountry();
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.util.Locale locale46 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale38, locale41, locale42, locale46 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter(languageRangeList25, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Locale locale52 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray61 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, strMap65);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, strMap67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, strMap69);
        java.util.Collection<java.lang.String> strCollection71 = null;
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Collection<java.util.Locale> localeCollection75 = null;
        java.util.Locale locale76 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, localeCollection75);
        java.util.Locale.LanguageRange[] languageRangeArray77 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList78 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList78, languageRangeArray77);
        java.util.Collection<java.util.Locale> localeCollection80 = null;
        java.util.Locale locale81 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, localeCollection80);
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, (java.util.Collection<java.lang.String>) strList88);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strList90, filteringMode91);
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags(languageRangeList70, strCollection71, filteringMode91);
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList93);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertEquals(locale18.toString(), "en-gb_ITALY");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(locale76);
        org.junit.Assert.assertNotNull(languageRangeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode91.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(outputStream0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "GB");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: GB");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("english (chinois)");
        printWriter1.flush();
        java.io.PrintStream printStream4 = new java.io.PrintStream("zh_CN");
        printStream4.print((float) (byte) -1);
        printStream4.println();
        printStream4.print("ita");
        java.util.Locale locale11 = new java.util.Locale("Italy");
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = mathException15.getSuppressed();
        java.io.PrintStream printStream18 = printStream4.printf(locale11, "chinois", (java.lang.Object[]) throwableArray17);
        java.io.PrintStream printStream20 = printStream18.append((java.lang.CharSequence) "cinese");
        printStream18.write((int) 'u');
        printStream18.print(true);
        printStream18.print((long) (byte) 100);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("fr");
        printWriter28.print("it_IT");
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter33 = printWriter28.printf("fr", objArray32);
        printWriter33.print((float) (byte) 100);
        java.io.PrintWriter printWriter37 = printWriter33.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter41 = printWriter39.append(' ');
        char[] charArray44 = new char[] { 'x', 'a' };
        printWriter41.print(charArray44);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        java.lang.Throwable[] throwableArray51 = mathException50.getSuppressed();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray51);
        java.io.PrintWriter printWriter53 = printWriter41.printf("en-GB", (java.lang.Object[]) throwableArray51);
        char[] charArray58 = new char[] { 'a', ' ', 'u', 'x' };
        printWriter53.write(charArray58);
        java.io.PrintStream printStream61 = new java.io.PrintStream("zh_CN");
        printStream61.print((float) (byte) -1);
        char[] charArray66 = new char[] { 'x', 'u' };
        printStream61.println(charArray66);
        printWriter53.write(charArray66);
        printWriter33.println(charArray66);
        printStream18.println(charArray66);
        printWriter1.write(charArray66);
        org.junit.Assert.assertEquals(locale11.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[x, a]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "a ux");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "a ux");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a,  , u, x]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[x, u]");
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 1);
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        double double11 = hypergeometricDistributionImpl3.upperCumulativeProbability(1);
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability(0.2991452991452851d, (double) 'x');
        double double17 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (byte) 1);
        double double19 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2991452991452851d + "'", double11 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2991452991453134d + "'", double15 == 0.2991452991453134d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.2991452991452851d + "'", double17 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 100);
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 1);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((double) 35);
        hypergeometricDistributionImpl3.setPopulationSize(120);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        java.util.Locale locale2 = new java.util.Locale("fran\347ais (France)", "italiano (Italia)");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale5.getDisplayScript(locale9);
        java.util.Set<java.lang.Character> charSet11 = locale9.getExtensionKeys();
        java.lang.String str12 = locale3.getDisplayCountry(locale9);
        java.lang.String str13 = locale2.getDisplayName(locale3);
        java.util.Locale locale14 = locale3.stripExtensions();
        java.lang.String str15 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(locale3);
        org.junit.Assert.assertEquals(locale2.toString(), "fran\347ais (france)_ITALIANO (ITALIA)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Canada" + "'", str4, "Canada");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais (france) (ITALIANO (ITALIA))" + "'", str13, "fran\347ais (france) (ITALIANO (ITALIA))");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "francese" + "'", str15, "francese");
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        java.util.Locale locale1 = new java.util.Locale("italy (ANGLAIS)");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "italy (anglais)");
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fran\347ais (france) (ITALIANO (ITALIA))", (double) 117);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=117.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: Italia", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:italia");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("en-GB", "\u4e2d\u56fd\u8a9e", "zh_TW");
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.lang.String str9 = locale0.getExtension('a');
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.println();
        java.io.PrintStream printStream14 = printStream11.append('#');
        printStream11.close();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream11.write(byteArray19);
        printStream11.write((int) 'a');
        printStream11.write((int) '#');
        java.util.Locale locale25 = java.util.Locale.ROOT;
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = locale25.getCountry();
        java.lang.String str28 = locale25.getDisplayLanguage();
        boolean boolean29 = locale25.hasExtensions();
        java.util.Set<java.lang.String> strSet30 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale25.getDisplayCountry();
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.lang.Object[] objArray37 = mathException36.getArguments();
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        mathException36.addSuppressed((java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray43 = mathException36.getSuppressed();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException();
        java.lang.String str45 = mathException44.getPattern();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray43, (java.lang.Throwable) mathException44);
        java.io.PrintStream printStream47 = printStream11.printf(locale25, "Chinese (Taiwan)", (java.lang.Object[]) throwableArray43);
        java.lang.String str48 = locale0.getDisplayCountry(locale25);
        java.util.Set<java.lang.String> strSet49 = locale25.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "\u4e2d\u56fd\u8a9e_zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "French" + "'", str7, "French");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder9 = builder3.setExtension('a', "italiano");
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("cinese");
        java.util.Locale.Builder builder14 = builder9.setExtension('x', "ANGLAIS");
        java.util.Locale locale15 = builder14.build();
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale15.getCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.print(0);
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.print((float) (byte) -1);
        printStream11.println();
        printStream11.print("ita");
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Locale locale19 = locale17.stripExtensions();
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = mathException23.getSuppressed();
        java.io.PrintStream printStream26 = printStream11.printf(locale19, "fr", (java.lang.Object[]) throwableArray25);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.lang.Object[] objArray30 = mathException29.getArguments();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray25, (java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("fran\347ais (France)", (java.lang.Object[]) throwableArray25);
        java.io.PrintStream printStream33 = printStream1.printf("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray25);
        boolean boolean34 = printStream33.checkError();
        java.io.PrintStream printStream36 = new java.io.PrintStream("zh_CN");
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 1 };
        printStream36.write(byteArray39, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            printStream33.write(byteArray39, 120, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 1]");
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("FR");
        java.util.Locale locale5 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = mathException17.getSuppressed();
        java.io.PrintWriter printWriter20 = printWriter9.printf(locale13, "it_IT", (java.lang.Object[]) throwableArray19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale26.getDisplayCountry(locale30);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.io.PrintWriter printWriter37 = printWriter23.printf(locale30, "it_IT", objArray35);
        java.io.PrintWriter printWriter38 = printWriter7.printf(locale13, "fr", objArray35);
        java.lang.String str39 = locale5.getDisplayVariant(locale13);
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = locale5.getDisplayVariant(locale40);
        printWriter1.println((java.lang.Object) locale40);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("fr");
        printWriter45.print("it_IT");
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = mathException53.getSuppressed();
        java.io.PrintWriter printWriter56 = printWriter45.printf(locale49, "it_IT", (java.lang.Object[]) throwableArray55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale49.getDisplayScript(locale57);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleKeys();
        java.lang.String str61 = locale59.getVariant();
        boolean boolean62 = locale59.hasExtensions();
        java.util.Locale locale63 = locale59.stripExtensions();
        java.lang.String str64 = locale49.getDisplayScript(locale59);
        java.lang.String str65 = locale40.getDisplayScript(locale59);
        java.lang.String str66 = locale59.getDisplayName();
        java.lang.String str67 = locale59.getDisplayName();
        java.lang.String str68 = locale59.getVariant();
        org.junit.Assert.assertEquals(locale5.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "chinois" + "'", str39, "chinois");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "chinois" + "'", str42, "chinois");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fran\347ais" + "'", str66, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "fran\347ais" + "'", str67, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("italy_ITALY", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=italy_italy");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "kor");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: kor");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability((int) ' ');
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability(0.7008547008546866d);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7008547008546866d + "'", double14 == 0.7008547008546866d);
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ko");
        printWriter1.println(true);
        printWriter1.println((int) 'u');
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale8 = new java.util.Locale("Italy");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = mathException12.getSuppressed();
        java.io.PrintStream printStream15 = printStream1.printf(locale8, "chinois", (java.lang.Object[]) throwableArray14);
        java.io.PrintStream printStream17 = printStream15.append((java.lang.CharSequence) "cinese");
        printStream15.print("ja");
        java.io.PrintStream printStream21 = printStream15.append((java.lang.CharSequence) "\u30a4\u30ae\u30ea\u30b9");
        java.io.PrintStream printStream23 = new java.io.PrintStream("zh_CN");
        printStream23.print((float) (byte) -1);
        printStream23.println();
        printStream23.println();
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream23, true);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale34 = java.util.Locale.ROOT;
        boolean boolean35 = locale34.hasExtensions();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale34.getDisplayName(locale36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale34.getDisplayCountry(locale38);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.io.PrintWriter printWriter45 = printWriter31.printf(locale38, "it_IT", objArray43);
        printStream29.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream48 = printStream29.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream49);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) -1, (byte) 0, (byte) 10, (byte) 10 };
        printStream49.write(byteArray56);
        printStream21.write(byteArray56);
        org.junit.Assert.assertEquals(locale8.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, -1, 0, 10, 10]");
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Canada");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Collection<java.util.Locale> localeCollection5 = null;
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, localeCollection5);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap16);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Collection<java.util.Locale> localeCollection21 = null;
        java.util.Locale locale22 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, localeCollection21);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getCountry();
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale36 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale28, locale31, locale32, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Locale locale41 = java.util.Locale.lookup(languageRangeList17, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList38, filteringMode42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Collection<java.util.Locale> localeCollection47 = null;
        java.util.Locale locale48 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, localeCollection47);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap58);
        java.util.Locale locale62 = new java.util.Locale("en-GB", "Italy");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str64 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet63);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Collection<java.util.Locale> localeCollection68 = null;
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, localeCollection68);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Collection<java.util.Locale> localeCollection73 = null;
        java.util.Locale locale74 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, localeCollection73);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.lang.String>) strList81);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strList83, filteringMode84);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet63, filteringMode84);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode42.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertEquals(locale62.toString(), "en-gb_ITALY");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "Italy", "fr" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray18 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList21, filteringMode22);
        java.util.Collection<java.util.Locale> localeCollection24 = null;
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap26);
        java.util.Locale locale31 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.lang.String str34 = locale31.getDisplayCountry(locale32);
        java.io.PrintStream printStream36 = new java.io.PrintStream("zh_CN");
        printStream36.println((float) (-1));
        java.io.PrintStream printStream40 = new java.io.PrintStream("zh_CN");
        printStream40.println();
        java.io.PrintStream printStream43 = printStream40.append('#');
        printStream40.close();
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream40.write(byteArray49);
        printStream36.write(byteArray49);
        java.util.Locale locale53 = new java.util.Locale("cinese");
        java.io.PrintStream printStream56 = new java.io.PrintStream("zh_CN");
        printStream56.print((float) (byte) -1);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("fr");
        printWriter60.print("it_IT");
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter65 = printWriter60.printf("fr", objArray64);
        printWriter60.println((float) 'u');
        printStream56.print((java.lang.Object) 'u');
        printStream56.println(false);
        printStream56.println(0L);
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleKeys();
        java.lang.String str75 = locale73.getVariant();
        boolean boolean76 = locale73.hasExtensions();
        java.util.Locale locale77 = locale73.stripExtensions();
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter82 = printWriter80.append(' ');
        char[] charArray85 = new char[] { 'x', 'a' };
        printWriter82.print(charArray85);
        java.lang.Object[] objArray90 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("hi!", objArray90);
        java.lang.Throwable[] throwableArray92 = mathException91.getSuppressed();
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray92);
        java.io.PrintWriter printWriter94 = printWriter82.printf("en-GB", (java.lang.Object[]) throwableArray92);
        java.io.PrintStream printStream95 = printStream56.printf(locale73, "Italy", (java.lang.Object[]) throwableArray92);
        java.io.PrintStream printStream96 = printStream36.printf(locale53, "Chinese (Taiwan)", (java.lang.Object[]) throwableArray92);
        java.lang.String str97 = locale32.getDisplayScript(locale53);
        java.util.Set<java.lang.String> strSet98 = locale32.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet98);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode22.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertEquals(locale31.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100, -1, -1]");
        org.junit.Assert.assertEquals(locale53.toString(), "cinese");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[x, a]");
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(printWriter94);
        org.junit.Assert.assertNotNull(printStream95);
        org.junit.Assert.assertNotNull(printStream96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(strSet98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: Italian");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:italian");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.println("English");
        printWriter1.println((long) (byte) 10);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder16 = builder13.setScript("");
        java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder20 = builder18.setVariant("Italian");
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        printWriter24.print("it_IT");
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintWriter printWriter35 = printWriter24.printf(locale28, "it_IT", (java.lang.Object[]) throwableArray34);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale41 = java.util.Locale.ROOT;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale41.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale41.getDisplayCountry(locale45);
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray50);
        java.io.PrintWriter printWriter52 = printWriter38.printf(locale45, "it_IT", objArray50);
        java.io.PrintWriter printWriter53 = printWriter22.printf(locale28, "fr", objArray50);
        java.lang.String str55 = locale28.getExtension('x');
        java.util.Locale locale56 = locale28.stripExtensions();
        java.util.Locale.Builder builder57 = builder20.setLocale(locale56);
        printWriter1.println((java.lang.Object) builder57);
        java.util.Locale.Builder builder59 = builder57.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder61 = builder59.setRegion("ALLEMAND (ALLEMAGNE)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ALLEMAND (ALLEMAGNE) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ita");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException(throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray8 = mathException6.getSuppressed();
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.print((float) (byte) -1);
        printStream11.println();
        printStream11.print("ita");
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Locale locale19 = locale17.stripExtensions();
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = mathException23.getSuppressed();
        java.io.PrintStream printStream26 = printStream11.printf(locale19, "fr", (java.lang.Object[]) throwableArray25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) mathException27);
        java.io.PrintStream printStream29 = printStream2.printf("ita", (java.lang.Object[]) throwableArray8);
        java.io.PrintStream printStream32 = new java.io.PrintStream("zh_CN");
        printStream32.print((float) (byte) -1);
        printStream32.println();
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException(throwable37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray40 = mathException38.getSuppressed();
        java.io.PrintStream printStream41 = printStream32.format("italien (Italie)", (java.lang.Object[]) throwableArray40);
        java.io.PrintStream printStream42 = printStream2.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray40);
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("fr");
        printWriter45.print("it_IT");
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale48.getDisplayName(locale50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale48.getDisplayCountry(locale52);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        java.io.PrintWriter printWriter59 = printWriter45.printf(locale52, "it_IT", objArray57);
        printStream42.print((java.lang.Object) objArray57);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException(throwable63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException64);
        java.lang.Throwable[] throwableArray66 = mathException65.getSuppressed();
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray66, throwable67);
        java.lang.Object[] objArray69 = mathException68.getArguments();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("de", objArray57, (java.lang.Throwable) mathException70);
        java.lang.String str72 = mathException70.getPattern();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "org.apache.commons.math.MathException: hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 100);
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 1);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(0.02999999999999997d);
        double double18 = hypergeometricDistributionImpl3.probability(0.9699999999999995d);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = mathException13.getSuppressed();
        java.io.PrintStream printStream16 = printStream1.printf(locale9, "fr", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("zh_CN");
        printStream18.print((float) (byte) -1);
        char[] charArray23 = new char[] { 'x', 'u' };
        printStream18.println(charArray23);
        printStream18.println(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 10 };
        printStream18.write(byteArray31);
        printStream16.write(byteArray31);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl39 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int40 = hypergeometricDistributionImpl39.getPopulationSize();
        double double42 = hypergeometricDistributionImpl39.cumulativeProbability((int) (short) 100);
        int int43 = hypergeometricDistributionImpl39.getPopulationSize();
        double double46 = hypergeometricDistributionImpl39.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl39.setSampleSize((int) 'a');
        double double50 = hypergeometricDistributionImpl39.probability((int) '4');
        hypergeometricDistributionImpl39.setPopulationSize(1);
        printStream35.println((java.lang.Object) hypergeometricDistributionImpl39);
        int int54 = hypergeometricDistributionImpl39.getPopulationSize();
        int int55 = hypergeometricDistributionImpl39.getNumberOfSuccesses();
        double double57 = hypergeometricDistributionImpl39.cumulativeProbability((int) (byte) 0);
        int int58 = hypergeometricDistributionImpl39.getSampleSize();
        int int59 = hypergeometricDistributionImpl39.getNumberOfSuccesses();
        hypergeometricDistributionImpl39.setPopulationSize(34);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[x, u]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 0, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 117 + "'", int40 == 117);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 117 + "'", int43 == 117);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setUnicodeLocaleKeyword("coreano", "Deutschland");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: coreano [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.util.Locale locale20 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        printWriter22.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = mathException30.getSuppressed();
        java.io.PrintWriter printWriter33 = printWriter22.printf(locale26, "it_IT", (java.lang.Object[]) throwableArray32);
        java.lang.String str34 = locale20.getDisplayName(locale26);
        java.lang.String str35 = locale26.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.lang.String str19 = locale10.getDisplayCountry();
        java.lang.String str20 = locale10.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.clearExtensions();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("ita");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getVariant();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale12.getDisplayScript(locale16);
        boolean boolean18 = locale12.hasExtensions();
        java.util.Locale.Builder builder19 = builder9.setLocale(locale12);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.util.Locale locale28 = new java.util.Locale("Italy", "Italy");
        java.lang.String str29 = locale24.getDisplayLanguage(locale28);
        boolean boolean30 = locale24.hasExtensions();
        java.lang.String str31 = locale24.getISO3Language();
        boolean boolean32 = locale24.hasExtensions();
        java.util.Locale.Builder builder33 = builder9.setLocale(locale24);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale24);
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale35.getDisplayCountry(locale36);
        java.lang.String str38 = locale35.getVariant();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale35.getDisplayScript(locale39);
        java.util.Locale locale41 = locale39.stripExtensions();
        java.util.Set<java.lang.Character> charSet42 = locale39.getExtensionKeys();
        java.lang.String str43 = locale24.getDisplayCountry(locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = locale39.getUnicodeLocaleType("kor");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: kor");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Canada" + "'", str43, "Canada");
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("it-IT", (double) 96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=96.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        printStream7.println("");
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale.Builder builder33 = builder31.setLanguageTag("fr");
        java.util.Locale locale34 = builder33.build();
        java.util.Locale.Builder builder35 = builder33.clearExtensions();
        printStream7.print((java.lang.Object) builder35);
        java.util.Locale.Builder builder37 = builder35.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder39 = builder37.setRegion("Italienisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Italienisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("zh_CN", objArray17);
        printWriter1.flush();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("en-gb");
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("CN");
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter28 = printWriter1.format(locale23, "kor", (java.lang.Object[]) throwableArray27);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter29.println(false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(printWriter28);
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\ub3c5\uc77c\uc5b4", 1.1211251798381178E-14d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("zh_CN", objArray17);
        java.io.PrintWriter printWriter22 = printWriter1.append('u');
        printWriter1.println((float) 120);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\uc601\uc5b4", "\u65e5\u6587");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException(throwable2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException3);
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("English", (java.lang.Throwable) mathException4);
        java.lang.String str7 = mathException6.getPattern();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("tedesco", (java.lang.Throwable) mathException8);
        java.lang.String str10 = mathException8.getPattern();
        java.lang.Object[] objArray11 = mathException8.getArguments();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0);
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability((double) (byte) 0, 0.08547008547008297d);
        hypergeometricDistributionImpl3.setPopulationSize(32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream17 = printStream1.append((java.lang.CharSequence) "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", 120, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -119");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray4);
        java.lang.Object[] objArray6 = mathException5.getArguments();
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        mathException5.addSuppressed((java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException5.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException();
        java.lang.String str14 = mathException13.getPattern();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) mathException13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("fr", objArray18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("it_IT", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) mathException20);
        java.lang.String str22 = mathException20.getPattern();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("TWN", (java.lang.Throwable) mathException20);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr" + "'", str22, "fr");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.lang.String str17 = locale13.getDisplayVariant();
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.lang.Throwable[] throwableArray22 = mathException21.getSuppressed();
        java.io.PrintWriter printWriter23 = printWriter12.format(locale13, "", (java.lang.Object[]) throwableArray22);
        printWriter23.println(true);
        printWriter23.println((long) 117);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter23, true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italy" + "'", str16, "Italy");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintStream printStream7 = new java.io.PrintStream("zh_CN");
        printStream7.print((float) (byte) -1);
        printStream7.println();
        printStream7.print("ita");
        java.util.Locale locale14 = new java.util.Locale("Italy");
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = mathException18.getSuppressed();
        java.io.PrintStream printStream21 = printStream7.printf(locale14, "chinois", (java.lang.Object[]) throwableArray20);
        java.io.PrintStream printStream23 = printStream21.append((java.lang.CharSequence) "cinese");
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter27 = printWriter25.append(' ');
        printWriter25.println(false);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.write("hi!");
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.print("it_IT");
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter40 = printWriter35.printf("fr", objArray39);
        printWriter40.print((float) (byte) 100);
        java.io.PrintWriter printWriter44 = printWriter40.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter48 = printWriter46.append(' ');
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter("fr");
        printWriter51.print("it_IT");
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.lang.String str57 = locale54.getDisplayName(locale56);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        boolean boolean59 = locale58.hasExtensions();
        java.lang.String str60 = locale54.getDisplayCountry(locale58);
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray63);
        java.io.PrintWriter printWriter65 = printWriter51.printf(locale58, "it_IT", objArray63);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("fr");
        printWriter68.print("it_IT");
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", objArray75);
        java.lang.Throwable[] throwableArray77 = mathException76.getSuppressed();
        java.lang.Throwable[] throwableArray78 = mathException76.getSuppressed();
        java.io.PrintWriter printWriter79 = printWriter68.printf(locale72, "it_IT", (java.lang.Object[]) throwableArray78);
        java.io.PrintWriter printWriter80 = printWriter51.format("it_IT", (java.lang.Object[]) throwableArray78);
        java.io.PrintWriter printWriter81 = printWriter48.format("zh_CN", (java.lang.Object[]) throwableArray78);
        java.io.PrintStream printStream83 = new java.io.PrintStream("zh_CN");
        printStream83.print((float) (byte) -1);
        char[] charArray88 = new char[] { 'x', 'u' };
        printStream83.println(charArray88);
        printWriter81.print(charArray88);
        printWriter44.write(charArray88);
        printWriter31.println(charArray88);
        printWriter25.write(charArray88);
        printStream21.print(charArray88);
        printWriter5.write(charArray88);
        printWriter5.println((double) (byte) 100);
        printWriter5.println("Japanisch (ja)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[x, u]");
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.toLanguageTag();
        java.lang.String str6 = locale2.getDisplayName(locale3);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ita");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("de-DE");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: de-DE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de" + "'", str5, "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch (Taiwan)" + "'", str6, "Chinesisch (Taiwan)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        java.util.Locale locale3 = new java.util.Locale("DE", "Italienisch (Italien)", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.Object obj5 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "de_ITALIENISCH (ITALIEN)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "de_ITALIENISCH (ITALIEN)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "de_ITALIENISCH (ITALIEN)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "de_ITALIENISCH (ITALIEN)");
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter15.print((double) 100L);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale18.getVariant();
        java.lang.String str22 = locale18.getCountry();
        java.io.PrintStream printStream25 = new java.io.PrintStream("zh_CN");
        printStream25.print((float) (byte) -1);
        printStream25.println();
        printStream25.print("ita");
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale33 = locale31.stripExtensions();
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.io.PrintStream printStream40 = printStream25.printf(locale33, "fr", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter41 = printWriter15.format(locale18, "fra", (java.lang.Object[]) throwableArray39);
        java.util.Locale locale43 = new java.util.Locale("Italy");
        printWriter15.print((java.lang.Object) "Italy");
        printWriter15.println((long) '#');
        printWriter15.println();
        printWriter15.print((double) 10.0f);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertEquals(locale43.toString(), "italy");
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl4 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int5 = hypergeometricDistributionImpl4.getPopulationSize();
        double double7 = hypergeometricDistributionImpl4.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl4.setNumberOfSuccesses((int) (short) 1);
        int int10 = hypergeometricDistributionImpl4.getSampleSize();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Object[] objArray14 = mathException13.getArguments();
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        mathException13.addSuppressed((java.lang.Throwable) mathException17);
        java.lang.Throwable[] throwableArray20 = mathException13.getSuppressed();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        printWriter22.print("it_IT");
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter27 = printWriter22.printf("fr", objArray26);
        printWriter27.print((float) (byte) 100);
        java.io.PrintWriter printWriter31 = printWriter27.append((java.lang.CharSequence) "ja");
        java.lang.Object[] objArray32 = new java.lang.Object[] { int10, throwableArray20, printWriter31 };
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException();
        java.lang.String str34 = mathException33.getPattern();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException35);
        java.lang.String str37 = mathException35.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str37, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 100);
        int int15 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize(1);
        hypergeometricDistributionImpl3.setSampleSize((int) ' ');
        int int20 = hypergeometricDistributionImpl3.getPopulationSize();
        int int21 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 10);
        int int13 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(100.0d, (double) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        boolean boolean3 = locale1.hasExtensions();
        java.util.Set<java.lang.Character> charSet4 = locale1.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale1.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1);
        double double11 = hypergeometricDistributionImpl3.probability((double) 10L);
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability(0.8290598290598294d);
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7008547008546866d + "'", double14 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        java.io.PrintStream printStream22 = new java.io.PrintStream("zh_CN");
        printStream22.print((float) (byte) -1);
        printStream22.println();
        printStream22.println();
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream22, true);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter32 = printWriter30.append(' ');
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.print("it_IT");
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale38.getDisplayName(locale40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        boolean boolean43 = locale42.hasExtensions();
        java.lang.String str44 = locale38.getDisplayCountry(locale42);
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        java.io.PrintWriter printWriter49 = printWriter35.printf(locale42, "it_IT", objArray47);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("fr");
        printWriter52.print("it_IT");
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = mathException60.getSuppressed();
        java.io.PrintWriter printWriter63 = printWriter52.printf(locale56, "it_IT", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter64 = printWriter35.format("it_IT", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter65 = printWriter32.format("zh_CN", (java.lang.Object[]) throwableArray62);
        java.io.PrintStream printStream67 = new java.io.PrintStream("zh_CN");
        printStream67.print((float) (byte) -1);
        char[] charArray72 = new char[] { 'x', 'u' };
        printStream67.println(charArray72);
        printWriter65.print(charArray72);
        printStream22.print(charArray72);
        printWriter20.write(charArray72);
        java.io.PrintWriter printWriter78 = printWriter20.append((java.lang.CharSequence) "Chinesisch (Taiwan)");
        printWriter78.println(1.0f);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[x, u]");
        org.junit.Assert.assertNotNull(printWriter78);
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = new java.util.Locale("zh_CN", "English", "it_IT");
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale9);
        java.lang.String str14 = locale9.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale6.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "giapponese" + "'", str14, "giapponese");
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter1.println('a');
        printWriter1.println((long) 0);
        java.io.PrintStream printStream9 = new java.io.PrintStream("zh_CN");
        printStream9.println();
        java.io.PrintStream printStream12 = printStream9.append('#');
        printStream9.close();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream9.write(byteArray17);
        printStream9.write((int) 'a');
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        java.io.PrintStream printStream23 = printStream9.append((java.lang.CharSequence) "italiano (Italia)");
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.lang.Throwable[] throwableArray30 = mathException29.getSuppressed();
        java.io.PrintStream printStream31 = printStream23.printf("en-gb", (java.lang.Object[]) throwableArray30);
        printWriter1.print((java.lang.Object) printStream23);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream23, true);
        printStream23.println('a');
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((double) 117);
        hypergeometricDistributionImpl3.setSampleSize(97);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(1);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(0.9999999999999717d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.1709401709401705d + "'", double16 == 0.1709401709401705d);
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        boolean boolean9 = locale3.hasExtensions();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale3);
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale11.getVariant();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale11.getDisplayScript(locale15);
        java.util.Locale locale19 = new java.util.Locale("Italy", "Italy");
        java.lang.String str20 = locale15.getDisplayLanguage(locale19);
        boolean boolean21 = locale15.hasExtensions();
        java.lang.String str22 = locale15.getISO3Language();
        boolean boolean23 = locale15.hasExtensions();
        java.util.Locale.Builder builder24 = builder0.setLocale(locale15);
        java.util.Locale locale28 = new java.util.Locale("", "", "");
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale15.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getISO3Country();
        java.lang.String str32 = locale29.getDisplayLanguage();
        java.lang.Object obj33 = locale29.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale19.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "eng" + "'", str22, "eng");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "");
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(1L);
        printWriter1.flush();
        java.io.PrintWriter printWriter21 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.mathexception");
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale24.getCountry();
        java.lang.String str27 = locale24.getDisplayLanguage();
        java.lang.String str28 = locale24.getISO3Country();
        java.lang.String str29 = locale22.getDisplayScript(locale24);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.print("it_IT");
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        java.io.PrintWriter printWriter43 = printWriter32.printf(locale36, "it_IT", (java.lang.Object[]) throwableArray42);
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.util.Locale locale45 = java.util.Locale.ROOT;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale44.getDisplayCountry(locale45);
        java.lang.String str48 = locale44.getDisplayVariant();
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        java.io.PrintWriter printWriter54 = printWriter43.format(locale44, "", (java.lang.Object[]) throwableArray53);
        java.io.PrintWriter printWriter55 = printWriter21.printf(locale24, "Deutschland", (java.lang.Object[]) throwableArray53);
        java.io.PrintStream printStream58 = new java.io.PrintStream("zh_CN");
        printStream58.print((float) (byte) -1);
        printStream58.println();
        printStream58.println();
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream58, true);
        printStream58.println();
        printStream58.print((-1));
        boolean boolean68 = printStream58.checkError();
        java.util.Locale locale69 = java.util.Locale.ROOT;
        boolean boolean70 = locale69.hasExtensions();
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = locale69.getDisplayName(locale71);
        java.util.Locale locale73 = java.util.Locale.ROOT;
        boolean boolean74 = locale73.hasExtensions();
        java.lang.String str75 = locale69.getDisplayCountry(locale73);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException();
        java.lang.String str78 = mathException77.getPattern();
        java.lang.Object[] objArray79 = mathException77.getArguments();
        java.io.PrintStream printStream80 = printStream58.format(locale73, "Chinese (China)", objArray79);
        java.io.PrintWriter printWriter81 = printWriter55.printf("deu", objArray79);
        printWriter55.println("Italien");
        printWriter55.close();
        printWriter55.println();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Italy" + "'", str47, "Italy");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(printWriter81);
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize((int) 'u');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int8 = hypergeometricDistributionImpl3.getSampleSize();
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability((double) 100L, (double) 'u');
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability((double) 1.0f);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(0.1709401709401705d, (double) (short) 1);
        hypergeometricDistributionImpl3.setSampleSize(0);
        int int19 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2991452991453134d + "'", double16 == 0.2991452991453134d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: fr", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:fr");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.probability((int) '4');
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) '#');
        hypergeometricDistributionImpl3.setSampleSize((int) '4');
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = hypergeometricDistributionImpl3.cumulativeProbability((double) 'u', 0.001354928450285685d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.removeUnicodeLocaleAttribute("DEU");
        java.util.Locale.Builder builder8 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("\ub3c5\uc77c\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        hypergeometricDistributionImpl3.setPopulationSize(117);
        int int6 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize((int) ' ');
        double double10 = hypergeometricDistributionImpl3.probability(34);
        double double12 = hypergeometricDistributionImpl3.probability(17);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ja");
        java.lang.String[] strArray17 = new java.lang.String[] { "ita", "", "Italy", "zh_CN", "zh_CN", "anglais", "hi!", "chinois", "ita", "chinois", "ita", "", "anglais", "hi!", "fr" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String str20 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList18);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.lang.String[] strArray29 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strMap33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "Italy", "fr" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray53 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList54);
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList56, filteringMode57);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags(languageRangeList34, (java.util.Collection<java.lang.String>) strList56, filteringMode59);
        java.lang.String str61 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList56);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.parse("ja");
        java.lang.String[] strArray79 = new java.lang.String[] { "ita", "", "Italy", "zh_CN", "zh_CN", "anglais", "hi!", "chinois", "ita", "chinois", "ita", "", "anglais", "hi!", "fr" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        java.lang.String str82 = java.util.Locale.lookupTag(languageRangeList63, (java.util.Collection<java.lang.String>) strList80);
        java.lang.String str83 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList80);
        java.util.Collection<java.lang.String> strCollection84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = java.util.Locale.lookupTag(languageRangeList1, strCollection84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode57.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.setLanguageTag("JA");
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("Chinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguageTag("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.toLanguageTag();
        java.lang.String str6 = locale2.getDisplayName(locale3);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ita");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder14 = builder11.addUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale19 = new java.util.Locale("ja", "", "ja");
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale24 = new java.util.Locale("", "", "");
        java.util.Locale locale25 = locale24.stripExtensions();
        java.io.PrintStream printStream27 = new java.io.PrintStream("zh_CN");
        printStream27.print((float) (byte) -1);
        printStream27.println();
        printStream27.print("ita");
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.util.Locale locale35 = locale33.stripExtensions();
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintStream printStream42 = printStream27.printf(locale35, "fr", (java.lang.Object[]) throwableArray41);
        java.lang.String str43 = locale24.getDisplayCountry(locale35);
        java.lang.String str44 = locale19.getDisplayVariant(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder45 = builder14.setLocale(locale19);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ja [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de" + "'", str5, "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch (Taiwan)" + "'", str6, "Chinesisch (Taiwan)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals(locale19.toString(), "ja__ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ja" + "'", str44, "ja");
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0, (int) '4');
        int int16 = hypergeometricDistributionImpl3.getPopulationSize();
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((-1));
        int int20 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.0d);
        double double22 = hypergeometricDistributionImpl3.probability((double) 52);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(1);
        double double26 = hypergeometricDistributionImpl3.cumulativeProbability(1);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = hypergeometricDistributionImpl3.cumulativeProbability(120, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getVariant();
        boolean boolean9 = locale6.hasExtensions();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder14 = builder1.setExtension('a', "");
        java.util.Locale.Builder builder15 = builder1.clearExtensions();
        java.util.Locale locale16 = builder15.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder15.setScript("Italian (Italy)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Italian (Italy) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???(??)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.lang.String str35 = locale32.getVariant();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale32.getDisplayScript(locale36);
        java.util.Locale locale40 = new java.util.Locale("Italy", "Italy");
        java.lang.String str41 = locale36.getDisplayLanguage(locale40);
        boolean boolean42 = locale36.hasExtensions();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException();
        java.lang.String str46 = mathException45.getPattern();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException45);
        java.lang.Object[] objArray48 = mathException45.getArguments();
        java.io.PrintWriter printWriter49 = printWriter30.format(locale36, "cinese", objArray48);
        java.util.Set<java.lang.String> strSet50 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale36.getCountry();
        java.util.Locale locale52 = locale36.stripExtensions();
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = locale52.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals(locale40.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CA" + "'", str51, "CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "CAN" + "'", str53, "CAN");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English" + "'", str54, "English");
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        java.util.Locale locale3 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e", "deu-x-lvariant-CA", "deu (DEU,italien)");
        org.junit.Assert.assertEquals(locale3.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e_DEU-X-LVARIANT-CA_deu (DEU,italien)");
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter22.write((int) (byte) 100);
        printWriter22.println(true);
        printWriter22.write(0);
        printWriter22.print(1.0f);
        printWriter22.print((float) 'u');
        printWriter22.println('x');
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Royaume-Uni", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(10);
        double double8 = hypergeometricDistributionImpl3.probability((int) (byte) -1);
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0, (int) 'a');
        int int12 = hypergeometricDistributionImpl3.getSampleSize();
        double double14 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (short) 0);
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setSampleSize(31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9999999999999717d + "'", double14 == 0.9999999999999717d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println((double) 0L);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter11.println(true);
        java.io.PrintWriter printWriter15 = printWriter11.append('4');
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("FR");
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        java.io.PrintWriter printWriter20 = printWriter15.format("\u82f1\u6587", (java.lang.Object[]) throwableArray19);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("de-DE", "\u4e2d\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ???");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.println((int) (byte) -1);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter15 = printWriter13.append((java.lang.CharSequence) "ja");
        printWriter15.println(true);
        printWriter15.write("allemand");
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.util.Locale locale26 = locale24.stripExtensions();
        java.util.Set<java.lang.Character> charSet27 = locale24.getExtensionKeys();
        java.lang.String str28 = locale24.getISO3Country();
        java.io.PrintStream printStream32 = new java.io.PrintStream("zh_CN");
        printStream32.print((float) (byte) -1);
        printStream32.println();
        printStream32.print("ita");
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale40 = locale38.stripExtensions();
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = mathException44.getSuppressed();
        java.io.PrintStream printStream47 = printStream32.printf(locale40, "fr", (java.lang.Object[]) throwableArray46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray46);
        java.io.PrintWriter printWriter49 = printWriter15.printf(locale24, "DE", (java.lang.Object[]) throwableArray46);
        java.io.PrintWriter printWriter51 = printWriter49.append((java.lang.CharSequence) "\uc601\uc5b4");
        printWriter49.print('4');
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CAN" + "'", str28, "CAN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ja");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setVariant("zh_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: zh_TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double10 = hypergeometricDistributionImpl3.probability(10);
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1);
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability(117);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter12.println("ja");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter12);
        printWriter15.print("zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println((double) 0L);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter11.println(true);
        printWriter11.println((int) (byte) -1);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("fr");
        printWriter19.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale22.getDisplayCountry(locale26);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.io.PrintWriter printWriter33 = printWriter19.printf(locale26, "it_IT", objArray31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray31);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException34);
        java.lang.Object[] objArray36 = mathException34.getArguments();
        java.io.PrintWriter printWriter37 = printWriter11.printf("Regno Unito", objArray36);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        double double15 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '4');
        double double17 = hypergeometricDistributionImpl3.probability(0.2991452991452851d);
        int int18 = hypergeometricDistributionImpl3.getSampleSize();
        double double20 = hypergeometricDistributionImpl3.cumulativeProbability(117);
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        java.util.Locale locale1 = new java.util.Locale("chinois (Taiwan)");
        org.junit.Assert.assertEquals(locale1.toString(), "chinois (taiwan)");
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "ITALY");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ITALY");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        printStream28.println("fr-CA");
        java.io.PrintStream printStream34 = new java.io.PrintStream("zh_CN");
        printStream34.println();
        java.io.PrintStream printStream37 = printStream34.append('#');
        printStream34.close();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream34.write(byteArray42);
        printStream34.write((int) 'a');
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        java.io.PrintStream printStream48 = printStream34.append((java.lang.CharSequence) "italiano (Italia)");
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream48, false);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.lang.Throwable[] throwableArray55 = mathException54.getSuppressed();
        java.io.PrintStream printStream56 = printStream48.printf("en-gb", (java.lang.Object[]) throwableArray55);
        java.io.PrintStream printStream57 = printStream28.printf("France", (java.lang.Object[]) throwableArray55);
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream57, false);
        printStream59.println((long) '4');
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        java.util.Locale locale1 = new java.util.Locale("jpn");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "jpn");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl(35, 31, (int) (byte) 1);
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u6cd5\u570b_zh_CN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=ita_??_zh_cn");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        boolean boolean9 = locale3.hasExtensions();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale3);
        java.util.Locale locale11 = builder0.build();
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder16 = builder13.removeUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder19 = builder13.setExtension('a', "cinese");
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = locale11.equals((java.lang.Object) builder20);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getVariant();
        boolean boolean9 = locale6.hasExtensions();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder14 = builder1.setExtension('a', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setVariant("TWN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: TWN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream("zh_CN");
        printStream10.print((float) (byte) -1);
        printStream10.println();
        printStream10.println(0);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream10, false);
        byte[] byteArray19 = new byte[] { (byte) -1 };
        printStream10.write(byteArray19);
        printStream1.write(byteArray19);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.write((int) (short) -1);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale10.getCountry();
        java.lang.String str13 = locale10.getDisplayLanguage();
        boolean boolean14 = locale10.hasExtensions();
        java.lang.String str15 = locale10.getDisplayCountry();
        java.util.Locale locale16 = locale10.stripExtensions();
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.util.Locale locale18 = locale16.stripExtensions();
        java.util.Locale locale19 = locale18.stripExtensions();
        printStream1.println((java.lang.Object) locale19);
        java.lang.String str21 = locale19.getISO3Language();
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = new java.util.Locale("Italy", "anglais");
        java.lang.String str7 = locale1.getDisplayName(locale6);
        java.util.Locale locale8 = locale6.stripExtensions();
        java.lang.String str9 = locale8.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italy" + "'", str3, "Italy");
        org.junit.Assert.assertEquals(locale6.toString(), "italy_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "italy_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "italy" + "'", str9, "italy");
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.mathexception");
        printWriter1.write("English");
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(10);
        java.io.PrintWriter printWriter22 = printWriter1.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.print((double) (byte) 0);
        printWriter1.println(0.0d);
        printWriter1.print(117);
        printWriter1.println((float) (short) 1);
        printWriter1.println((long) (byte) 100);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        printWriter31.print((double) 100L);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getVariant();
        java.lang.String str38 = locale34.getCountry();
        java.io.PrintStream printStream41 = new java.io.PrintStream("zh_CN");
        printStream41.print((float) (byte) -1);
        printStream41.println();
        printStream41.print("ita");
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.util.Locale locale49 = locale47.stripExtensions();
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = mathException53.getSuppressed();
        java.io.PrintStream printStream56 = printStream41.printf(locale49, "fr", (java.lang.Object[]) throwableArray55);
        java.io.PrintWriter printWriter57 = printWriter31.format(locale34, "fra", (java.lang.Object[]) throwableArray55);
        char[] charArray58 = new char[] {};
        printWriter31.print(charArray58);
        printWriter15.println(charArray58);
        java.io.PrintWriter printWriter62 = printWriter15.append('a');
        printWriter15.println(0);
        printWriter15.println(3);
        // The following exception was thrown during execution in test generation
        try {
            printWriter15.write("IT_IT", 96, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 127");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
        org.junit.Assert.assertNotNull(printWriter62);
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        boolean boolean10 = locale8.hasExtensions();
        java.util.Locale.setDefault(locale8);
        java.util.Locale.Builder builder12 = builder3.setLocale(locale8);
        java.util.Locale.Builder builder14 = builder12.setVariant("inglese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("\uc601\uc5b4\uce90\ub098\ub2e4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.lang.String str6 = locale3.getDisplayVariant(locale4);
        java.lang.String str7 = locale3.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayVariant(locale3);
        java.util.Set<java.lang.String> strSet9 = locale0.getUnicodeLocaleAttributes();
        java.io.PrintStream printStream11 = new java.io.PrintStream("ANGLAIS");
        boolean boolean12 = locale0.equals((java.lang.Object) printStream11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str7, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException: ", (double) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println(false);
        printWriter3.println((long) 'x');
        printWriter3.print(true);
        printWriter3.print((float) (short) 0);
        printWriter3.write("italiano");
        printWriter3.println();
        printWriter3.close();
        printWriter3.write("Korean", (int) 'a', (int) (byte) 1);
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        java.util.Locale locale2 = new java.util.Locale("fran\347ais (France)", "italiano (Italia)");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale5.getDisplayScript(locale9);
        java.util.Set<java.lang.Character> charSet11 = locale9.getExtensionKeys();
        java.lang.String str12 = locale3.getDisplayCountry(locale9);
        java.lang.String str13 = locale2.getDisplayName(locale3);
        java.util.Locale locale14 = locale3.stripExtensions();
        java.lang.String str15 = locale3.getDisplayLanguage();
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.println();
        java.io.PrintStream printStream20 = printStream17.append('#');
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        printStream20.println('#');
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream26 = printStream20.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray25);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream26);
        printStream27.println((double) 1L);
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.lang.String str33 = locale30.getVariant();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale30.getDisplayScript(locale34);
        java.util.Locale locale38 = new java.util.Locale("Italy", "Italy");
        java.lang.String str39 = locale34.getDisplayLanguage(locale38);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException(throwable41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException42);
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        java.io.PrintStream printStream45 = printStream27.format(locale34, "anglais", (java.lang.Object[]) throwableArray44);
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        boolean boolean49 = locale46.hasExtensions();
        java.lang.Object[] objArray51 = null;
        java.io.PrintStream printStream52 = printStream27.format(locale46, "Chinesisch (Taiwan)", objArray51);
        java.io.PrintStream printStream54 = printStream27.append(' ');
        printStream27.println((float) 0);
        boolean boolean57 = locale3.equals((java.lang.Object) printStream27);
        org.junit.Assert.assertEquals(locale2.toString(), "fran\347ais (france)_ITALIANO (ITALIA)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30ab\u30ca\u30c0" + "'", str4, "\u30ab\u30ca\u30c0");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais (france) (ITALIANO (ITALIA))" + "'", str13, "fran\347ais (france) (ITALIANO (ITALIA))");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str15, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals(locale38.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English" + "'", str39, "English");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale.Builder builder7 = builder1.setVariant("");
        java.util.Locale.Builder builder8 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguage("ja-JP");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ja-JP [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getVariant();
        boolean boolean9 = locale6.hasExtensions();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder14 = builder1.setExtension('a', "");
        java.util.Locale.Builder builder15 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setRegion("japonais");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: japonais [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getCountry();
        java.util.Locale.setDefault(locale0);
        java.lang.String str3 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "IT" + "'", str1, "IT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ita" + "'", str3, "ita");
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl26 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int27 = hypergeometricDistributionImpl26.getPopulationSize();
        double double29 = hypergeometricDistributionImpl26.cumulativeProbability((double) (short) -1);
        double double31 = hypergeometricDistributionImpl26.probability((double) (short) 100);
        double double33 = hypergeometricDistributionImpl26.cumulativeProbability((double) 117);
        printWriter1.print((java.lang.Object) 117);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter39 = printWriter37.append(' ');
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category40, locale41);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException(throwable45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter37.format(locale41, "Italy", (java.lang.Object[]) throwableArray48);
        java.io.PrintWriter printWriter50 = printWriter1.printf("CAN", (java.lang.Object[]) throwableArray48);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("fr", objArray55);
        java.lang.Throwable[] throwableArray58 = mathException57.getSuppressed();
        java.lang.Object[] objArray59 = mathException57.getArguments();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("CAN", objArray59);
        java.io.PrintWriter printWriter61 = printWriter1.format("it_IT", objArray59);
        java.util.Locale locale63 = new java.util.Locale("org.apache.commons.math.MathException");
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = locale63.getScript();
        printWriter61.print((java.lang.Object) str65);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 117 + "'", int27 == 117);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertEquals(locale63.toString(), "org.apache.commons.math.mathexception");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.mathexception" + "'", str64, "org.apache.commons.math.mathexception");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter3.printf(locale7, "it_IT", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter32 = printWriter1.printf(locale7, "fr", objArray29);
        char[] charArray36 = new char[] { '#', ' ', 'x' };
        printWriter1.write(charArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("zh_CN");
        printStream39.print((float) (byte) -1);
        printStream39.println();
        printStream39.println();
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream39, true);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        printStream45.println((java.lang.Object) "it_IT");
        printStream45.println(1.0d);
        java.io.PrintStream printStream66 = new java.io.PrintStream("zh_CN");
        printStream66.println();
        java.io.PrintStream printStream69 = printStream66.append('#');
        printStream66.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter74 = printWriter72.append(' ');
        char[] charArray77 = new char[] { 'x', 'a' };
        printWriter74.print(charArray77);
        printStream66.println(charArray77);
        printStream45.print(charArray77);
        printWriter1.print(charArray77);
        printWriter1.println((long) 32);
        java.lang.Object[] objArray85 = null;
        java.io.PrintWriter printWriter86 = printWriter1.format("\uc601\uc5b4", objArray85);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#,  , x]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[x, a]");
        org.junit.Assert.assertNotNull(printWriter86);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) 'x');
        double double14 = hypergeometricDistributionImpl3.upperCumulativeProbability(100);
        int int15 = hypergeometricDistributionImpl3.getPopulationSize();
        double double17 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) ' ');
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.toLanguageTag();
        java.lang.String str6 = locale2.getDisplayName(locale3);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder8 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension('4', "Taiwan");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de" + "'", str5, "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch (Taiwan)" + "'", str6, "Chinesisch (Taiwan)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale.Builder builder5 = builder2.setExtension('a', "it_IT");
        java.util.Locale.Builder builder6 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguageTag("franz\366sisch (frankreich) (Korean)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: franzo?sisch (frankreich) (Korean) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(1L);
        printWriter1.println("");
        printWriter1.close();
        printWriter1.print((long) 1);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter25.println((float) (short) 0);
        printWriter25.print((double) 96);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter5.print((float) '4');
        printWriter5.write("org.apache.commons.math.MathException: ko");
        printWriter5.flush();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "cinese");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: cinese");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.println("English");
        printWriter1.println((long) (byte) 10);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder16 = builder13.setScript("");
        java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder20 = builder18.setVariant("Italian");
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        printWriter24.print("it_IT");
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintWriter printWriter35 = printWriter24.printf(locale28, "it_IT", (java.lang.Object[]) throwableArray34);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale41 = java.util.Locale.ROOT;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale41.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale41.getDisplayCountry(locale45);
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray50);
        java.io.PrintWriter printWriter52 = printWriter38.printf(locale45, "it_IT", objArray50);
        java.io.PrintWriter printWriter53 = printWriter22.printf(locale28, "fr", objArray50);
        java.lang.String str55 = locale28.getExtension('x');
        java.util.Locale locale56 = locale28.stripExtensions();
        java.util.Locale.Builder builder57 = builder20.setLocale(locale56);
        printWriter1.println((java.lang.Object) builder57);
        java.util.Locale.Builder builder59 = builder57.clearExtensions();
        java.util.Locale locale60 = builder59.build();
        java.lang.Class<?> wildcardClass61 = locale60.getClass();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println("hi!");
        printStream1.println('4');
        printStream1.println(true);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException(throwable16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException17);
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray19, throwable20);
        java.lang.Object[] objArray22 = mathException21.getArguments();
        java.io.PrintStream printStream23 = printStream1.format("org.apache.commons.math.MathException", objArray22);
        printStream23.println((long) 34);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        java.util.Locale locale3 = new java.util.Locale("deu", "deu", "italien");
        java.lang.String str4 = locale3.getScript();
        java.lang.Object obj5 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "deu_DEU_italien");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "deu_DEU_italien");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "deu_DEU_italien");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "deu_DEU_italien");
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("giapponese (ja)", "org.apache.commons.math.MathException: org.apache.commons.math.MathException");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: org.apache.commons.math.MathException");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("German");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setRegion("deu (ANGLAIS,CA)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: deu (ANGLAIS,CA) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) 0L);
        double double12 = hypergeometricDistributionImpl3.probability((int) 'a');
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 10);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(120);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.7008547008546866d + "'", double10 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Japan", "\u6cd5\u570b_zh_CN");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ita_??_zh_CN");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("eng_ITALIANO (ITALIA)_ANGLAIS");
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.println((int) (byte) -1);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter15 = printWriter13.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter16.print(0.14529914529914542d);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(1L);
        printWriter1.println("");
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale26.getDisplayCountry(locale30);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.io.PrintWriter printWriter37 = printWriter23.printf(locale30, "it_IT", objArray35);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("fr");
        printWriter39.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.ROOT;
        boolean boolean43 = locale42.hasExtensions();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale42.getDisplayName(locale44);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale42.getDisplayCountry(locale46);
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        java.io.PrintWriter printWriter53 = printWriter39.printf(locale46, "it_IT", objArray51);
        printWriter53.print((double) 100L);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = locale56.getVariant();
        java.lang.String str60 = locale56.getCountry();
        java.io.PrintStream printStream63 = new java.io.PrintStream("zh_CN");
        printStream63.print((float) (byte) -1);
        printStream63.println();
        printStream63.print("ita");
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleKeys();
        java.util.Locale locale71 = locale69.stripExtensions();
        java.lang.Object[] objArray74 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        java.lang.Throwable[] throwableArray76 = mathException75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = mathException75.getSuppressed();
        java.io.PrintStream printStream78 = printStream63.printf(locale71, "fr", (java.lang.Object[]) throwableArray77);
        java.io.PrintWriter printWriter79 = printWriter53.format(locale56, "fra", (java.lang.Object[]) throwableArray77);
        char[] charArray80 = new char[] {};
        printWriter53.print(charArray80);
        printWriter37.println(charArray80);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write(charArray80, (int) '4', 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[]");
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream1.write(byteArray10);
        printStream1.print(false);
        printStream1.println("Italy");
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.println((float) (-1));
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.println();
        java.io.PrintStream printStream24 = printStream21.append('#');
        printStream21.close();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream21.write(byteArray30);
        printStream17.write(byteArray30);
        printStream1.write(byteArray30);
        printStream1.println((double) (-1));
        printStream1.println(100L);
        printStream1.print((long) 100);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        char[] charArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter41.write(charArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, -1, -1]");
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("it-IT", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        int int6 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability(5.836992974634979E-6d, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = hypergeometricDistributionImpl3.cumulativeProbability(7.009401437221889E-12d, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2991452991453134d + "'", double9 == 0.2991452991453134d);
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getLanguage();
        java.lang.String str4 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str1, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str4, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        java.util.Locale locale2 = new java.util.Locale("hi!", "zh_cn");
        java.lang.String str3 = locale2.getDisplayCountry();
        java.lang.String str4 = locale2.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ZH_CN");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_ZH_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZH_CN" + "'", str3, "ZH_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("Royaume-Uni", "\uc774\ud0c8\ub9ac\uc544\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ???????????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println((int) (short) 1);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = printWriter7.append(' ');
        char[] charArray12 = new char[] { 'x', 'a' };
        printWriter9.print(charArray12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray19);
        java.io.PrintWriter printWriter21 = printWriter9.printf("en-GB", (java.lang.Object[]) throwableArray19);
        java.io.PrintStream printStream23 = new java.io.PrintStream("zh_CN");
        printStream23.println();
        java.io.PrintStream printStream26 = printStream23.append('#');
        printStream23.close();
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream23.write(byteArray32);
        printStream23.print(false);
        printStream23.println("Italy");
        java.io.PrintStream printStream39 = new java.io.PrintStream("zh_CN");
        printStream39.println((float) (-1));
        java.io.PrintStream printStream43 = new java.io.PrintStream("zh_CN");
        printStream43.println();
        java.io.PrintStream printStream46 = printStream43.append('#');
        printStream43.close();
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream43.write(byteArray52);
        printStream39.write(byteArray52);
        printStream23.write(byteArray52);
        printStream23.println((double) (-1));
        printStream23.println(100L);
        java.io.PrintStream printStream61 = new java.io.PrintStream("zh_CN");
        printStream61.print((float) (byte) -1);
        char[] charArray66 = new char[] { 'x', 'u' };
        printStream61.println(charArray66);
        printStream23.println(charArray66);
        printWriter9.write(charArray66);
        printWriter3.print(charArray66);
        printWriter3.write(3);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[x, a]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[x, u]");
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println(false);
        printWriter3.println((long) 'x');
        printWriter3.print(true);
        printWriter3.write("fran\347ais (France)", (int) (byte) 10, (int) (short) 1);
        printWriter3.print('4');
        printWriter3.flush();
        java.io.PrintStream printStream19 = new java.io.PrintStream("zh_CN");
        printStream19.println();
        java.io.PrintStream printStream22 = printStream19.append('#');
        printStream19.close();
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream19.write(byteArray28);
        printStream19.println();
        printStream19.println((double) (-1));
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.getDefault(category33);
        java.util.Locale locale39 = new java.util.Locale("zh_CN", "English", "it_IT");
        java.util.Locale.setDefault(category33, locale39);
        java.util.Locale locale41 = java.util.Locale.getDefault(category33);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("fr");
        printWriter43.print("it_IT");
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray50);
        java.lang.Throwable[] throwableArray52 = mathException51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = mathException51.getSuppressed();
        java.io.PrintWriter printWriter54 = printWriter43.printf(locale47, "it_IT", (java.lang.Object[]) throwableArray53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale47.getDisplayScript(locale55);
        java.lang.String str57 = locale55.getVariant();
        java.util.Locale.setDefault(category33, locale55);
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        java.lang.String str60 = locale59.getScript();
        java.util.Locale.setDefault(category33, locale59);
        java.io.PrintStream printStream64 = new java.io.PrintStream("zh_CN");
        printStream64.print((float) (byte) -1);
        printStream64.println();
        printStream64.print((double) (short) 1);
        java.lang.Object[] objArray72 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("hi!", objArray72);
        java.lang.Object[] objArray74 = mathException73.getArguments();
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        mathException73.addSuppressed((java.lang.Throwable) mathException77);
        java.lang.Throwable[] throwableArray80 = mathException73.getSuppressed();
        java.io.PrintStream printStream81 = printStream64.format("de", (java.lang.Object[]) throwableArray80);
        java.io.PrintStream printStream82 = printStream19.format(locale59, "it,IT", (java.lang.Object[]) throwableArray80);
        java.io.PrintWriter printWriter83 = printWriter3.format("Frankreich", (java.lang.Object[]) throwableArray80);
        java.io.PrintWriter printWriter85 = printWriter3.append('u');
        printWriter85.print(true);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100, -1, -1]");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale39.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(printWriter85);
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        double double14 = hypergeometricDistributionImpl3.probability((int) '4');
        int int15 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double19 = hypergeometricDistributionImpl3.cumulativeProbability(117);
        int int20 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream1.write(byteArray10);
        printStream1.print(false);
        printStream1.println("Italy");
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.println((float) (-1));
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.println();
        java.io.PrintStream printStream24 = printStream21.append('#');
        printStream21.close();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream21.write(byteArray30);
        printStream17.write(byteArray30);
        printStream1.write(byteArray30);
        printStream1.println((double) (-1));
        java.io.PrintStream printStream37 = new java.io.PrintStream("zh_CN");
        printStream37.println();
        java.io.PrintStream printStream40 = printStream37.append('#');
        printStream37.close();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream37.write(byteArray45);
        printStream1.write(byteArray45, (int) (short) -1, 100);
        printStream1.write((int) (byte) -1);
        printStream1.print((double) 100);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 10, -1]");
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException: China", 3.72317234707988E-12d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception: china");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.println((int) (short) 100);
        printStream1.print(1L);
        printStream1.print('a');
        boolean boolean19 = printStream1.checkError();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }
}

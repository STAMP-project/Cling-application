import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest15 {

    public static boolean debug = false;

    @Test
    public void test07501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07501");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter15.print((double) 100L);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale18.getVariant();
        java.lang.String str22 = locale18.getCountry();
        java.io.PrintStream printStream25 = new java.io.PrintStream("zh_CN");
        printStream25.print((float) (byte) -1);
        printStream25.println();
        printStream25.print("ita");
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale33 = locale31.stripExtensions();
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.io.PrintStream printStream40 = printStream25.printf(locale33, "fr", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter41 = printWriter15.format(locale18, "fra", (java.lang.Object[]) throwableArray39);
        java.lang.String str42 = locale18.getDisplayName();
        java.lang.String str43 = locale18.getISO3Language();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Japanese" + "'", str42, "Japanese");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "jpn" + "'", str43, "jpn");
    }

    @Test
    public void test07502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07502");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.setLanguageTag("JA");
        java.util.Locale.Builder builder7 = builder1.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = locale8.getDisplayScript();
        java.util.Locale locale14 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale35.getDisplayName(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.io.PrintWriter printWriter46 = printWriter32.printf(locale39, "it_IT", objArray44);
        java.io.PrintWriter printWriter47 = printWriter16.printf(locale22, "fr", objArray44);
        java.lang.String str48 = locale14.getDisplayVariant(locale22);
        java.lang.String str49 = locale8.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder50 = builder1.setLocale(locale14);
        java.util.Locale.Builder builder51 = builder1.clear();
        java.util.Locale.Builder builder52 = builder1.clear();
        java.util.Locale.Builder builder54 = builder1.addUnicodeLocaleAttribute("deu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder57 = builder54.setUnicodeLocaleKeyword("cinese (Taiwan)", "deu (ANGLAIS,CA)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: cinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale14.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "chinois" + "'", str48, "chinois");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test07503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07503");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println((float) (-1));
        java.io.PrintStream printStream5 = new java.io.PrintStream("zh_CN");
        printStream5.println();
        java.io.PrintStream printStream8 = printStream5.append('#');
        printStream5.close();
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream5.write(byteArray14);
        printStream1.write(byteArray14);
        java.util.Locale locale18 = new java.util.Locale("cinese");
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.print("it_IT");
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter30 = printWriter25.printf("fr", objArray29);
        printWriter25.println((float) 'u');
        printStream21.print((java.lang.Object) 'u');
        printStream21.println(false);
        printStream21.println(0L);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale38.getVariant();
        boolean boolean41 = locale38.hasExtensions();
        java.util.Locale locale42 = locale38.stripExtensions();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter47 = printWriter45.append(' ');
        char[] charArray50 = new char[] { 'x', 'a' };
        printWriter47.print(charArray50);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray55);
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray57);
        java.io.PrintWriter printWriter59 = printWriter47.printf("en-GB", (java.lang.Object[]) throwableArray57);
        java.io.PrintStream printStream60 = printStream21.printf(locale38, "Italy", (java.lang.Object[]) throwableArray57);
        java.io.PrintStream printStream61 = printStream1.printf(locale18, "Chinese (Taiwan)", (java.lang.Object[]) throwableArray57);
        printStream61.println((float) 10L);
        printStream61.print(true);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, -1, -1]");
        org.junit.Assert.assertEquals(locale18.toString(), "cinese");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[x, a]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(printStream61);
    }

    @Test
    public void test07504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07504");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println((int) (short) 1);
        printWriter3.println(false);
        printWriter3.print((float) (byte) 100);
        printWriter3.flush();
        boolean boolean11 = printWriter3.checkError();
        printWriter3.println();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07505");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko");
        printStream1.print(false);
        printStream1.print(117);
        java.io.PrintStream printStream7 = new java.io.PrintStream("zh_CN");
        printStream7.print((float) (byte) -1);
        printStream7.println();
        printStream7.println();
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream7, true);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("fr");
        printWriter15.print("it_IT");
        java.util.Locale locale18 = java.util.Locale.ROOT;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale18.getDisplayName(locale20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale18.getDisplayCountry(locale22);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", objArray27);
        java.io.PrintWriter printWriter29 = printWriter15.printf(locale22, "it_IT", objArray27);
        printStream13.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream32 = printStream13.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream13);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream33);
        printStream34.print("org.apache.commons.math.MathException");
        printStream34.println("FR");
        printStream34.print((double) (byte) 1);
        java.io.PrintStream printStream42 = printStream34.append('x');
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream42);
        java.io.PrintStream printStream45 = new java.io.PrintStream("zh_CN");
        printStream45.println();
        java.io.PrintStream printStream48 = printStream45.append('#');
        printStream45.close();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream45.write(byteArray53);
        printStream45.write((int) 'a');
        printStream45.println((int) (short) 100);
        printStream45.print(false);
        printStream45.flush();
        printStream45.print((double) '#');
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream45);
        printStream64.close();
        java.io.PrintStream printStream67 = new java.io.PrintStream("zh_CN");
        printStream67.println();
        java.io.PrintStream printStream70 = printStream67.append('#');
        printStream67.close();
        printStream67.print((float) 'u');
        printStream67.println(35);
        printStream67.println(0.0d);
        java.io.PrintStream printStream79 = new java.io.PrintStream("zh_CN");
        printStream79.println();
        java.io.PrintStream printStream82 = printStream79.append('#');
        printStream79.close();
        byte[] byteArray88 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream79.write(byteArray88);
        printStream67.write(byteArray88);
        printStream64.write(byteArray88, (-1), 0);
        printStream42.write(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray88, (int) 'u', 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-1, 100, -1, -1]");
    }

    @Test
    public void test07506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07506");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale locale8 = builder3.build();
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = locale8.getCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test07507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07507");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println("hi!");
        printStream1.println('4');
        printStream1.print((long) (short) 100);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print("zh_CN");
        printStream1.println(0.0f);
    }

    @Test
    public void test07508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07508");
        java.util.Locale locale2 = new java.util.Locale("fr", "fr");
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.getCountry();
        java.lang.String str5 = locale2.getCountry();
        java.lang.String str6 = locale2.getScript();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("ita");
        java.util.Locale locale10 = builder9.build();
        java.util.Locale.Builder builder13 = builder9.setExtension('a', "japonais");
        boolean boolean14 = locale2.equals((java.lang.Object) builder13);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FR" + "'", str4, "FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FR" + "'", str5, "FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ita");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07509");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.write("it_IT");
        java.io.PrintWriter printWriter12 = printWriter1.append((java.lang.CharSequence) "fr_FR");
        printWriter1.close();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test07510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07510");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        printStream4.println();
        printStream4.println(' ');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream4);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray21, throwable22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("fr");
        printWriter27.print("it_IT");
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale30.getDisplayName(locale32);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String str36 = locale30.getDisplayCountry(locale34);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.io.PrintWriter printWriter41 = printWriter27.printf(locale34, "it_IT", objArray39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("", objArray39);
        java.lang.Object[] objArray43 = mathException42.getArguments();
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("China", objArray24, (java.lang.Throwable) mathException42);
        java.io.PrintStream printStream46 = printStream12.printf(locale13, "Frankreich", objArray24);
        java.lang.Object obj47 = locale13.clone();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "");
    }

    @Test
    public void test07511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07511");
        java.util.Locale locale2 = new java.util.Locale("\u82f1\u6587", "\u4e2d\u56fd\u8a9e (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: KO)");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u82f1\u6587\u4e2d\u56fd\u8a9e (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: KO)");
    }

    @Test
    public void test07512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07512");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        char[] charArray6 = new char[] { 'x', 'a' };
        printWriter3.print(charArray6);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter15 = printWriter3.printf("en-GB", (java.lang.Object[]) throwableArray13);
        printWriter3.close();
        printWriter3.close();
        printWriter3.print((long) 34);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, a]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test07513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07513");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: Chinesisch (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:chinesisch(taiwan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07514");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        printWriter1.write("Italy", 0, (int) (short) -1);
        printWriter1.print(0);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.println();
        java.io.PrintStream printStream14 = printStream11.append('#');
        printStream11.close();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream11.write(byteArray19);
        printStream11.println((int) (byte) -1);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        printWriter23.print((long) 97);
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getCountry();
        java.lang.String str31 = locale28.getDisplayLanguage();
        java.lang.String str32 = locale28.getISO3Country();
        java.lang.String str33 = locale26.getDisplayScript(locale28);
        java.io.PrintStream printStream36 = new java.io.PrintStream("zh_CN");
        printStream36.println();
        java.io.PrintStream printStream39 = printStream36.append('#');
        printStream36.close();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream36.write(byteArray44);
        printStream36.write((int) 'a');
        java.io.PrintStream printStream48 = new java.io.PrintStream((java.io.OutputStream) printStream36);
        printStream48.print(false);
        printStream48.print(false);
        java.util.Locale locale55 = new java.util.Locale("hi!", "Italy");
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale55.getVariant();
        java.util.Locale.setDefault(locale55);
        java.io.PrintStream printStream61 = new java.io.PrintStream("zh_CN");
        printStream61.print((float) (byte) -1);
        printStream61.println();
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException(throwable66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException67);
        java.lang.Throwable[] throwableArray69 = mathException67.getSuppressed();
        java.io.PrintStream printStream70 = printStream61.format("italien (Italie)", (java.lang.Object[]) throwableArray69);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.Object[] objArray74 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        java.lang.Throwable[] throwableArray76 = mathException75.getSuppressed();
        java.io.PrintStream printStream77 = printStream61.printf(locale71, "ja", (java.lang.Object[]) throwableArray76);
        java.io.PrintStream printStream78 = printStream48.printf(locale55, "CN", (java.lang.Object[]) throwableArray76);
        java.io.PrintWriter printWriter79 = printWriter23.printf(locale26, "Regno Unito", (java.lang.Object[]) throwableArray76);
        printWriter9.print((java.lang.Object) printWriter79);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl84 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'a', (int) 'a', (int) ' ');
        int int85 = hypergeometricDistributionImpl84.getPopulationSize();
        double double88 = hypergeometricDistributionImpl84.cumulativeProbability(52, (int) 'x');
        int int90 = hypergeometricDistributionImpl84.inverseCumulativeProbability(0.9999999972520074d);
        printWriter9.println((java.lang.Object) int90);
        printWriter9.println((long) (short) -1);
        printWriter9.println(false);
        printWriter9.flush();
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, -1]");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!_ITALY");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(printStream77);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 31 + "'", int90 == 31);
    }

    @Test
    public void test07515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07515");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        hypergeometricDistributionImpl3.setPopulationSize(117);
        int int6 = hypergeometricDistributionImpl3.getSampleSize();
        int int7 = hypergeometricDistributionImpl3.getSampleSize();
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
    }

    @Test
    public void test07516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07516");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        boolean boolean4 = locale0.hasExtensions();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        boolean boolean8 = locale6.hasExtensions();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale6.getScript();
        java.lang.String str11 = locale0.getDisplayVariant(locale6);
        java.lang.String str12 = locale6.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japanese" + "'", str9, "Japanese");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test07517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07517");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        printStream1.println(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 10 };
        printStream1.write(byteArray14);
        printStream1.println('x');
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException();
        java.lang.String str21 = mathException20.getPattern();
        java.lang.Object[] objArray22 = mathException20.getArguments();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de", (java.lang.Throwable) mathException20);
        java.lang.Object[] objArray24 = mathException20.getArguments();
        java.lang.Object[] objArray25 = mathException20.getArguments();
        java.io.PrintStream printStream26 = printStream1.printf("fr_CA", objArray25);
        boolean boolean27 = printStream1.checkError();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 0, 10]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07518");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder9 = builder3.setExtension('a', "italiano");
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("cinese");
        java.util.Locale.Builder builder14 = builder9.setExtension('x', "ANGLAIS");
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test07519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07519");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) (short) 10, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07520");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("DEU");
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "deu");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "deu" + "'", str2, "deu");
    }

    @Test
    public void test07521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07521");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getLanguage();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        printWriter7.print("it_IT");
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale10.getDisplayName(locale12);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale10.getDisplayCountry(locale14);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray19);
        java.io.PrintWriter printWriter21 = printWriter7.printf(locale14, "it_IT", objArray19);
        java.util.Locale.setDefault(category4, locale14);
        java.lang.String str23 = locale14.getVariant();
        java.lang.String str24 = locale0.getDisplayCountry(locale14);
        boolean boolean25 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str1, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test07522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07522");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(10);
        double double8 = hypergeometricDistributionImpl3.cumulativeProbability(0);
        double double10 = hypergeometricDistributionImpl3.probability((int) (short) 1);
        int int11 = hypergeometricDistributionImpl3.getPopulationSize();
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability(0, 0);
        double double16 = hypergeometricDistributionImpl3.probability((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.7008547008546866d + "'", double8 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2991452991452851d + "'", double10 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7008547008546866d + "'", double14 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2991452991452851d + "'", double16 == 0.2991452991452851d);
    }

    @Test
    public void test07523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07523");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getScript();
        java.io.PrintStream printStream5 = new java.io.PrintStream("zh_CN");
        printStream5.print((float) (byte) -1);
        printStream5.println();
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter15 = printWriter13.append(' ');
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale21.getDisplayName(locale23);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = locale21.getDisplayCountry(locale25);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        java.io.PrintWriter printWriter32 = printWriter18.printf(locale25, "it_IT", objArray30);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.print("it_IT");
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = mathException43.getSuppressed();
        java.io.PrintWriter printWriter46 = printWriter35.printf(locale39, "it_IT", (java.lang.Object[]) throwableArray45);
        java.io.PrintWriter printWriter47 = printWriter18.format("it_IT", (java.lang.Object[]) throwableArray45);
        java.io.PrintWriter printWriter48 = printWriter15.format("zh_CN", (java.lang.Object[]) throwableArray45);
        java.io.PrintStream printStream50 = new java.io.PrintStream("zh_CN");
        printStream50.print((float) (byte) -1);
        char[] charArray55 = new char[] { 'x', 'u' };
        printStream50.println(charArray55);
        printWriter48.print(charArray55);
        printStream5.print(charArray55);
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        printStream5.println((long) 117);
        java.util.Locale locale65 = new java.util.Locale("deu", "anglais", "CA");
        java.lang.String str66 = locale65.toLanguageTag();
        java.io.PrintStream printStream69 = new java.io.PrintStream("zh_CN");
        printStream69.print((float) (byte) -1);
        printStream69.println();
        printStream69.print("ita");
        java.util.Locale locale75 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleKeys();
        java.util.Locale locale77 = locale75.stripExtensions();
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray80);
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        java.lang.Throwable[] throwableArray83 = mathException81.getSuppressed();
        java.io.PrintStream printStream84 = printStream69.printf(locale77, "fr", (java.lang.Object[]) throwableArray83);
        java.io.PrintStream printStream85 = printStream5.printf(locale65, "Canada", (java.lang.Object[]) throwableArray83);
        java.lang.String str86 = locale0.getDisplayLanguage(locale65);
        java.util.Locale locale87 = java.util.Locale.JAPANESE;
        java.util.Locale locale88 = java.util.Locale.JAPANESE;
        java.lang.String str89 = locale87.getDisplayCountry(locale88);
        java.lang.String str90 = locale87.getVariant();
        java.util.Locale locale91 = java.util.Locale.CANADA;
        java.lang.String str92 = locale87.getDisplayScript(locale91);
        java.util.Locale locale95 = new java.util.Locale("Italy", "Italy");
        java.lang.String str96 = locale91.getDisplayLanguage(locale95);
        java.lang.String str97 = locale95.getVariant();
        java.lang.String str98 = locale95.getDisplayVariant();
        java.lang.String str99 = locale0.getDisplayName(locale95);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[x, u]");
        org.junit.Assert.assertEquals(locale65.toString(), "deu_ANGLAIS_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "deu-x-lvariant-CA" + "'", str66, "deu-x-lvariant-CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals(locale95.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "English" + "'", str96, "English");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test07524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07524");
        java.util.Locale locale3 = new java.util.Locale("", "", "");
        java.util.Locale locale6 = new java.util.Locale("hi!", "Italy");
        java.lang.String str7 = locale3.getDisplayCountry(locale6);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale12 = new java.util.Locale("fr", "fr");
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale.setDefault(locale12);
        java.lang.String str15 = locale8.getDisplayLanguage(locale12);
        java.lang.String str16 = locale8.toLanguageTag();
        java.lang.String str17 = locale8.getISO3Country();
        java.util.Locale locale18 = locale8.stripExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi! (ITALY)" + "'", str9, "hi! (ITALY)");
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "japonais" + "'", str15, "japonais");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ja-JP" + "'", str16, "ja-JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JPN" + "'", str17, "JPN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
    }

    @Test
    public void test07525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07525");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("ITALY");
        java.util.Locale.Builder builder6 = builder0.setLanguage("CN");
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.setRegion("de");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder9.addUnicodeLocaleAttribute("China");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setVariant("Regno Unito");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Regno Unito [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test07526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07526");
        java.io.PrintStream printStream3 = new java.io.PrintStream("zh_CN");
        printStream3.println();
        java.io.PrintStream printStream6 = printStream3.append('#');
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream3);
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale8.getVariant();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale8.getDisplayScript(locale12);
        java.util.Locale locale14 = locale12.stripExtensions();
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        java.lang.String str16 = locale12.getISO3Country();
        java.io.PrintStream printStream19 = new java.io.PrintStream("zh_CN");
        printStream19.print((float) (byte) -1);
        printStream19.println();
        printStream19.println();
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream19, true);
        printStream19.println();
        java.io.PrintStream printStream28 = printStream19.append((java.lang.CharSequence) "cinese");
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale35.getDisplayName(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.io.PrintWriter printWriter46 = printWriter32.printf(locale39, "it_IT", objArray44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray44);
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        java.io.PrintStream printStream49 = printStream19.format("zh_TW", (java.lang.Object[]) throwableArray48);
        printStream19.println((double) 1);
        java.util.Locale locale52 = java.util.Locale.UK;
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.lang.String str54 = locale52.getDisplayScript(locale53);
        java.util.Locale locale55 = locale52.stripExtensions();
        java.lang.String str56 = locale55.getDisplayCountry();
        java.io.PrintStream printStream59 = new java.io.PrintStream("zh_CN");
        printStream59.print((float) (byte) -1);
        printStream59.println();
        printStream59.print((double) (short) 1);
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", objArray67);
        java.lang.Object[] objArray69 = mathException68.getArguments();
        java.lang.Object[] objArray71 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        mathException68.addSuppressed((java.lang.Throwable) mathException72);
        java.lang.Throwable[] throwableArray75 = mathException68.getSuppressed();
        java.io.PrintStream printStream76 = printStream59.format("de", (java.lang.Object[]) throwableArray75);
        java.io.PrintStream printStream77 = printStream19.printf(locale55, "", (java.lang.Object[]) throwableArray75);
        java.io.PrintWriter printWriter78 = printWriter7.printf(locale12, "org.apache.commons.math.MathException: China", (java.lang.Object[]) throwableArray75);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray75);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("zh_TW", (java.lang.Object[]) throwableArray75);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CAN" + "'", str16, "CAN");
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str56, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(printStream77);
        org.junit.Assert.assertNotNull(printWriter78);
    }

    @Test
    public void test07527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07527");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        printStream4.println();
        printStream4.print("italien (Italie)");
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream4);
        printStream4.print("\u82f1\u8a9e");
        printStream4.print(false);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.lang.String str18 = locale16.getVariant();
        boolean boolean19 = locale16.hasExtensions();
        java.io.PrintStream printStream22 = new java.io.PrintStream("zh_CN");
        printStream22.print((float) (byte) -1);
        printStream22.println();
        printStream22.println();
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream22, true);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("fr");
        printWriter30.print("it_IT");
        java.util.Locale locale33 = java.util.Locale.ROOT;
        boolean boolean34 = locale33.hasExtensions();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale33.getDisplayName(locale35);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale33.getDisplayCountry(locale37);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        java.io.PrintWriter printWriter44 = printWriter30.printf(locale37, "it_IT", objArray42);
        printStream28.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream47 = printStream28.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream47, false);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream47, true);
        java.io.PrintStream printStream53 = printStream47.append('x');
        printStream53.print(false);
        printStream53.close();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        printStream53.println((java.lang.Object) locale57);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter("fr");
        printWriter61.println();
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter("fr");
        printWriter65.print("it_IT");
        java.util.Locale locale68 = java.util.Locale.ROOT;
        boolean boolean69 = locale68.hasExtensions();
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = locale68.getDisplayName(locale70);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        boolean boolean73 = locale72.hasExtensions();
        java.lang.String str74 = locale68.getDisplayCountry(locale72);
        java.lang.Object[] objArray77 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray77);
        java.io.PrintWriter printWriter79 = printWriter65.printf(locale72, "it_IT", objArray77);
        java.io.PrintWriter printWriter80 = printWriter61.printf("zh_CN", objArray77);
        java.io.PrintStream printStream81 = printStream53.format("fr_FR", objArray77);
        java.io.PrintStream printStream82 = printStream4.format(locale16, "zh_cn", objArray77);
        java.lang.String str83 = locale16.getLanguage();
        java.util.Locale.setDefault(locale16);
        java.lang.String str85 = locale16.getDisplayLanguage();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "fr" + "'", str83, "fr");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "fran\347ais" + "'", str85, "fran\347ais");
    }

    @Test
    public void test07528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07528");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println("hi!");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.close();
        printStream1.print('#');
        printStream1.flush();
    }

    @Test
    public void test07529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07529");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(10);
        java.io.PrintWriter printWriter22 = printWriter1.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(false);
        java.io.PrintWriter printWriter30 = printWriter1.append((java.lang.CharSequence) "Italy", 0, 0);
        printWriter30.flush();
        printWriter30.println();
        printWriter30.flush();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(printWriter30);
    }

    @Test
    public void test07530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07530");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int8 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 1L);
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int13 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int14 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double16 = hypergeometricDistributionImpl3.probability(117);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test07531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07531");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.lang.String str17 = locale13.getDisplayVariant();
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.lang.Throwable[] throwableArray22 = mathException21.getSuppressed();
        java.io.PrintWriter printWriter23 = printWriter12.format(locale13, "", (java.lang.Object[]) throwableArray22);
        printWriter12.print(false);
        printWriter12.println((float) (short) -1);
        java.io.PrintWriter printWriter29 = printWriter12.append('a');
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italy" + "'", str16, "Italy");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printWriter29);
    }

    @Test
    public void test07532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07532");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.write("en-GB");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl14 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int15 = hypergeometricDistributionImpl14.getSampleSize();
        int int16 = hypergeometricDistributionImpl14.getPopulationSize();
        double double18 = hypergeometricDistributionImpl14.upperCumulativeProbability((int) '#');
        int int19 = hypergeometricDistributionImpl14.getPopulationSize();
        int int20 = hypergeometricDistributionImpl14.getNumberOfSuccesses();
        hypergeometricDistributionImpl14.setNumberOfSuccesses((int) (byte) 10);
        printWriter1.print((java.lang.Object) hypergeometricDistributionImpl14);
        printWriter1.close();
        java.io.PrintStream printStream26 = new java.io.PrintStream("zh_CN");
        printStream26.println((float) (-1));
        java.io.PrintStream printStream30 = new java.io.PrintStream("zh_CN");
        printStream30.print((float) (byte) -1);
        char[] charArray35 = new char[] { 'x', 'u' };
        printStream30.println(charArray35);
        printStream26.println(charArray35);
        printWriter1.println(charArray35);
        printWriter1.println();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[x, u]");
    }

    @Test
    public void test07533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07533");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream7.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream7);
        printStream7.println('x');
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream7, true);
    }

    @Test
    public void test07534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07534");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("japonais");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println();
        printWriter1.print('x');
    }

    @Test
    public void test07535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07535");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("hi!", objArray2);
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = mathException3.getSuppressed();
        java.lang.Object[] objArray6 = mathException3.getArguments();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        java.lang.Object[] objArray11 = mathException10.getArguments();
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        mathException10.addSuppressed((java.lang.Throwable) mathException14);
        java.lang.Throwable[] throwableArray17 = mathException10.getSuppressed();
        java.lang.Object[] objArray18 = mathException10.getArguments();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("Chinese (Taiwan)", objArray18);
        mathException3.addSuppressed((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException3);
        java.lang.Throwable[] throwableArray22 = mathException21.getSuppressed();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray22);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test07536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07536");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fran\347ais (france) (ITALIANO (ITALIA))", "it,IT");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: it,IT");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07537");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.cumulativeProbability((double) 0L);
        int int8 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double12 = hypergeometricDistributionImpl3.probability(0.1794871794871778d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7008547008546866d + "'", double7 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test07538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07538");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println(false);
        printWriter3.println((long) 'x');
        printWriter3.print(true);
        printWriter3.write("fran\347ais (France)", (int) (byte) 10, (int) (short) 1);
        printWriter3.print('4');
        printWriter3.flush();
        printWriter3.print("Chinesisch (Taiwan)");
        printWriter3.println(false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        printWriter22.println();
        boolean boolean24 = printWriter22.checkError();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter22, false);
        printWriter22.println('a');
        printWriter3.println((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07539");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter6, true);
        printWriter6.println(false);
        java.util.Locale locale14 = new java.util.Locale("", "", "");
        java.util.Locale locale17 = new java.util.Locale("hi!", "Italy");
        java.lang.String str18 = locale14.getDisplayCountry(locale17);
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.println();
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream21, true);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("fr");
        printWriter29.print("it_IT");
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale32.getDisplayName(locale34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale32.getDisplayCountry(locale36);
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.io.PrintWriter printWriter43 = printWriter29.printf(locale36, "it_IT", objArray41);
        printStream27.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream46 = printStream27.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        printStream27.println("");
        java.io.PrintStream printStream52 = new java.io.PrintStream("zh_CN");
        printStream52.print((float) (byte) -1);
        printStream52.println();
        printStream52.println();
        java.io.PrintStream printStream58 = new java.io.PrintStream((java.io.OutputStream) printStream52, true);
        printStream52.println();
        printStream52.print((-1));
        printStream52.print((double) '#');
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("fr");
        printWriter67.print("it_IT");
        java.util.Locale locale70 = java.util.Locale.ROOT;
        boolean boolean71 = locale70.hasExtensions();
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.lang.String str73 = locale70.getDisplayName(locale72);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        boolean boolean75 = locale74.hasExtensions();
        java.lang.String str76 = locale70.getDisplayCountry(locale74);
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray79);
        java.io.PrintWriter printWriter81 = printWriter67.printf(locale74, "it_IT", objArray79);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("", objArray79);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException82);
        java.lang.Object[] objArray84 = mathException82.getArguments();
        java.io.PrintStream printStream85 = printStream52.format("italiano (Italia)", objArray84);
        java.io.PrintStream printStream86 = printStream27.format("italiano", objArray84);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException();
        java.lang.String str90 = mathException89.getPattern();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException89);
        java.lang.Object[] objArray92 = mathException89.getArguments();
        java.io.PrintStream printStream93 = printStream86.format("tedesco", objArray92);
        java.io.PrintWriter printWriter94 = printWriter6.printf(locale17, "eng", objArray92);
        printWriter6.println((long) 10);
        printWriter6.close();
        printWriter6.print((long) 21);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertNotNull(printStream93);
        org.junit.Assert.assertNotNull(printWriter94);
    }

    @Test
    public void test07540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07540");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale4 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.lang.String str7 = locale4.getDisplayCountry(locale5);
        java.lang.String str8 = locale0.getDisplayVariant(locale5);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        java.lang.String str16 = locale0.getDisplayCountry(locale13);
        java.lang.Object obj17 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "China" + "'", str16, "China");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "zh_CN");
    }

    @Test
    public void test07541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07541");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability((int) ' ');
        hypergeometricDistributionImpl3.setSampleSize((int) 'x');
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10, 117);
        double double18 = hypergeometricDistributionImpl3.probability(1.8472640568670461E-7d);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = hypergeometricDistributionImpl3.cumulativeProbability(0.9999999999996674d, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test07542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07542");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("hi! (italy) (ALLEMAND (ALLEMAGNE))", "zh-ZH");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zh-ZH");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07543");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        printWriter1.write("Italy", 0, (int) (short) -1);
        printWriter1.print(0);
        printWriter1.print('a');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println(false);
        printWriter1.print((float) 0L);
        boolean boolean16 = printWriter1.checkError();
        printWriter1.println((float) 1);
        printWriter1.print((float) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07544");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("");
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale5.getDisplayScript(locale9);
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.util.Locale.Builder builder13 = builder0.setLocale(locale9);
        java.util.Locale.Builder builder14 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder14.setUnicodeLocaleKeyword("fran\347ais (france)", "Japanisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: franc?ais (france) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test07545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07545");
        java.util.Locale locale3 = new java.util.Locale("italien", "CA", "tedesco");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        printWriter5.println();
        printWriter5.print(10);
        java.io.PrintWriter printWriter26 = printWriter5.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        printWriter5.println(false);
        java.io.PrintWriter printWriter34 = printWriter5.append((java.lang.CharSequence) "Italy", 0, 0);
        printWriter34.flush();
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        printWriter34.println((java.lang.Object) locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale3.getDisplayName(locale36);
        org.junit.Assert.assertEquals(locale3.toString(), "italien_CA_tedesco");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Francia" + "'", str38, "Francia");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "italien (Canada,tedesco)" + "'", str39, "italien (Canada,tedesco)");
    }

    @Test
    public void test07546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07546");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.println((int) (short) 100);
        printStream1.print(false);
        printStream1.flush();
        printStream1.print((double) '#');
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: fr");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter24.write("org.apache.commons.math.MathException: fr-ca");
        printWriter24.println("de_DE");
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream22);
    }

    @Test
    public void test07547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07547");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.print((-1.0f));
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter18.print("fr-FR");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl24 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int25 = hypergeometricDistributionImpl24.getSampleSize();
        hypergeometricDistributionImpl24.setPopulationSize((int) 'u');
        int int28 = hypergeometricDistributionImpl24.getNumberOfSuccesses();
        double double30 = hypergeometricDistributionImpl24.cumulativeProbability(35);
        int int31 = hypergeometricDistributionImpl24.getSampleSize();
        hypergeometricDistributionImpl24.setSampleSize(0);
        printWriter18.print((java.lang.Object) hypergeometricDistributionImpl24);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
    }

    @Test
    public void test07548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07548");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Franz\366sisch (Frankreich)", 0.3767292059269009d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franzo?sisch (frankreich)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07549");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = mathException13.getSuppressed();
        java.io.PrintStream printStream16 = printStream1.printf(locale9, "fr", (java.lang.Object[]) throwableArray15);
        printStream16.print((int) 'a');
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16, false);
        printStream16.print((long) 31);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream16);
    }

    @Test
    public void test07550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07550");
        java.util.Locale locale1 = new java.util.Locale("\u82f1\u8a9e");
        java.lang.String str2 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test07551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07551");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        printStream1.println(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 10 };
        printStream1.write(byteArray14);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 0, 10]");
    }

    @Test
    public void test07552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07552");
        java.lang.String[] strArray1 = java.util.Locale.getISOLanguages();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        printWriter4.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.ROOT;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale7.getDisplayCountry(locale11);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.io.PrintWriter printWriter18 = printWriter4.printf(locale11, "it_IT", objArray16);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray16);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        java.lang.Object[] objArray21 = mathException19.getArguments();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("\u53f0\u6e7e", (java.lang.Object[]) strArray1, (java.lang.Throwable) mathException19);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = mathException25.getSuppressed();
        java.lang.Object[] objArray28 = mathException25.getArguments();
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Object[] objArray33 = mathException32.getArguments();
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        mathException32.addSuppressed((java.lang.Throwable) mathException36);
        java.lang.Throwable[] throwableArray39 = mathException32.getSuppressed();
        java.lang.Object[] objArray40 = mathException32.getArguments();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("Chinese (Taiwan)", objArray40);
        mathException25.addSuppressed((java.lang.Throwable) mathException41);
        mathException22.addSuppressed((java.lang.Throwable) mathException41);
        java.lang.Throwable[] throwableArray44 = mathException41.getSuppressed();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException45);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test07553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07553");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        double double14 = hypergeometricDistributionImpl3.probability((int) '4');
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setNumberOfSuccesses(12);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
    }

    @Test
    public void test07554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07554");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream18 = printStream14.append((java.lang.CharSequence) "deu", (int) '#', 119);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 119");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
    }

    @Test
    public void test07555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07555");
        java.lang.Object[] objArray1 = null;
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray17);
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = mathException20.getSuppressed();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.print("it_IT");
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter30 = printWriter25.printf("fr", objArray29);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.lang.Object[] objArray35 = mathException34.getArguments();
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.lang.Throwable[] throwableArray39 = mathException38.getSuppressed();
        mathException34.addSuppressed((java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray41 = mathException34.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException();
        java.lang.String str43 = mathException42.getPattern();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray41, (java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.mathexception", (java.lang.Object[]) throwableArray22, (java.lang.Throwable) mathException45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("zh,CN", objArray1, (java.lang.Throwable) mathException45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test07556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07556");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = new java.io.PrintStream("zh_CN");
        printStream4.print((float) (byte) -1);
        printStream4.println();
        printStream4.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream4, true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter14 = printWriter12.append(' ');
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("fr");
        printWriter34.print("it_IT");
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        java.io.PrintWriter printWriter45 = printWriter34.printf(locale38, "it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter46 = printWriter17.format("it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter47 = printWriter14.format("zh_CN", (java.lang.Object[]) throwableArray44);
        java.io.PrintStream printStream49 = new java.io.PrintStream("zh_CN");
        printStream49.print((float) (byte) -1);
        char[] charArray54 = new char[] { 'x', 'u' };
        printStream49.println(charArray54);
        printWriter47.print(charArray54);
        printStream4.print(charArray54);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("fr");
        printWriter62.print("it_IT");
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.io.PrintWriter printWriter73 = printWriter62.printf(locale66, "it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream74 = printStream4.format(locale58, "hi!", (java.lang.Object[]) throwableArray72);
        java.lang.String str75 = locale58.getLanguage();
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = mathException79.getSuppressed();
        java.io.PrintStream printStream82 = printStream1.printf(locale58, "", (java.lang.Object[]) throwableArray81);
        java.io.PrintStream printStream84 = printStream82.append((java.lang.CharSequence) "fra");
        printStream84.println(10);
        printStream84.println((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream92 = printStream84.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e", (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 35");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[x, u]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printStream84);
    }

    @Test
    public void test07557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07557");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.lang.String str6 = locale4.getVariant();
        java.lang.String str7 = locale0.getDisplayCountry(locale4);
        java.util.Locale locale11 = new java.util.Locale("DE", "Italienisch (Italien)", "");
        java.lang.String str12 = locale4.getDisplayCountry(locale11);
        java.util.Set<java.lang.String> strSet13 = locale4.getUnicodeLocaleKeys();
        java.lang.String str14 = locale4.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "giapponese" + "'", str3, "giapponese");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale11.toString(), "de_ITALIENISCH (ITALIEN)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test07558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07558");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("en-GB", "\u4e2d\u56fd\u8a9e", "zh_TW");
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.lang.String str9 = locale0.getExtension('a');
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.println();
        java.io.PrintStream printStream14 = printStream11.append('#');
        printStream11.close();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream11.write(byteArray19);
        printStream11.write((int) 'a');
        printStream11.write((int) '#');
        java.util.Locale locale25 = java.util.Locale.ROOT;
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = locale25.getCountry();
        java.lang.String str28 = locale25.getDisplayLanguage();
        boolean boolean29 = locale25.hasExtensions();
        java.util.Set<java.lang.String> strSet30 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale25.getDisplayCountry();
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.lang.Object[] objArray37 = mathException36.getArguments();
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        mathException36.addSuppressed((java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray43 = mathException36.getSuppressed();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException();
        java.lang.String str45 = mathException44.getPattern();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray43, (java.lang.Throwable) mathException44);
        java.io.PrintStream printStream47 = printStream11.printf(locale25, "Chinese (Taiwan)", (java.lang.Object[]) throwableArray43);
        java.lang.String str48 = locale0.getDisplayCountry(locale25);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str51 = locale50.toLanguageTag();
        java.util.Locale locale52 = locale50.stripExtensions();
        java.lang.String str53 = locale0.getDisplayLanguage(locale50);
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        boolean boolean56 = locale55.hasExtensions();
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale55.getDisplayName(locale57);
        java.lang.String str59 = locale54.getDisplayCountry(locale55);
        java.lang.String str60 = locale0.getDisplayCountry(locale55);
        java.lang.String str61 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "\u4e2d\u56fd\u8a9e_zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "French" + "'", str7, "French");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "French" + "'", str53, "French");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japan" + "'", str59, "Japan");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test07559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07559");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder6 = builder0.setExtension('a', "cinese");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale13 = new java.util.Locale("English", "", "chinois");
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale13.getDisplayLanguage(locale15);
        java.util.Locale locale19 = locale15.stripExtensions();
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale.Builder builder21 = builder9.setLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale13.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "english" + "'", str18, "english");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ja" + "'", str20, "ja");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test07560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07560");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 100);
        hypergeometricDistributionImpl3.setPopulationSize((int) (byte) 1);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(0.02999999999999997d);
        double double18 = hypergeometricDistributionImpl3.probability(0.9699999999999995d);
        double double20 = hypergeometricDistributionImpl3.cumulativeProbability(0.7008547008546866d);
        int int21 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int22 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
    }

    @Test
    public void test07561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07561");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double17 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (byte) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) '4');
        double double21 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'x');
        int int23 = hypergeometricDistributionImpl3.inverseCumulativeProbability(5.836992974634979E-6d);
        double double25 = hypergeometricDistributionImpl3.probability(120);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test07562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07562");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter15.println(true);
        java.util.Locale locale21 = new java.util.Locale("hi!", "chinois", "italien (Italie)");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        printWriter24.println(false);
        printWriter24.println('x');
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("fr");
        printWriter33.write("hi!");
        printWriter33.println((java.lang.Object) (-1L));
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        java.lang.Object[] objArray44 = mathException43.getArguments();
        java.io.PrintWriter printWriter45 = printWriter33.format(locale38, "anglais", objArray44);
        java.io.PrintWriter printWriter46 = printWriter24.format("italiano (Italia)", objArray44);
        java.io.PrintWriter printWriter47 = printWriter15.format(locale21, "tedesco", objArray44);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "Italy", "fr" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray66 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList67);
        java.util.Locale.FilteringMode filteringMode70 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList69, filteringMode70);
        printWriter47.print((java.lang.Object) strList69);
        printWriter47.println((long) (short) 100);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_CHINOIS_italien (Italie)");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "italiano (Italia)" + "'", str39, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + filteringMode70 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode70.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList71);
    }

    @Test
    public void test07563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07563");
        java.util.Locale locale3 = new java.util.Locale("english", "org.apache.commons.math.MathException: ", "\u610f\u5927\u5229\u6587\u610f\u5927\u5229)");
        java.util.Locale locale6 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.io.PrintStream printStream10 = new java.io.PrintStream("zh_CN");
        printStream10.print((float) (byte) -1);
        char[] charArray15 = new char[] { 'x', 'u' };
        printStream10.println(charArray15);
        java.util.Locale locale19 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str20 = locale19.getCountry();
        java.io.PrintStream printStream23 = new java.io.PrintStream("zh_CN");
        printStream23.print((float) (byte) -1);
        printStream23.println();
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException(throwable28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        java.lang.Throwable[] throwableArray31 = mathException29.getSuppressed();
        java.io.PrintStream printStream32 = printStream23.format("italien (Italie)", (java.lang.Object[]) throwableArray31);
        java.io.PrintStream printStream33 = printStream10.printf(locale19, "fr-CA", (java.lang.Object[]) throwableArray31);
        java.lang.String str34 = locale6.getDisplayLanguage(locale19);
        java.lang.String str35 = locale19.getDisplayVariant();
        java.lang.String str36 = locale3.getDisplayScript(locale19);
        java.util.Locale locale40 = new java.util.Locale("italiano", "de", "English");
        java.lang.String str41 = locale19.getDisplayVariant(locale40);
        java.lang.String str42 = locale19.getVariant();
        java.lang.String str43 = locale19.getVariant();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u610f\u5927\u5229\u6587\u610f\u5927\u5229)");
        org.junit.Assert.assertEquals(locale6.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITALY" + "'", str7, "ITALY");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en-gb" + "'", str8, "en-gb");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[x, u]");
        org.junit.Assert.assertEquals(locale19.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITALY" + "'", str20, "ITALY");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en-gb" + "'", str34, "en-gb");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale40.toString(), "italiano_DE_English");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test07564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07564");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale4 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.lang.String str7 = locale4.getDisplayCountry(locale5);
        java.lang.String str8 = locale0.getDisplayVariant(locale5);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        java.lang.String str16 = locale0.getDisplayCountry(locale13);
        java.util.Locale locale17 = locale0.stripExtensions();
        java.lang.String str18 = locale17.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "China" + "'", str16, "China");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
    }

    @Test
    public void test07565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07565");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 1);
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0, (int) (byte) 1);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((double) (byte) 1, (double) (short) 1);
        hypergeometricDistributionImpl3.setSampleSize((int) (byte) 1);
        double double22 = hypergeometricDistributionImpl3.probability((int) 'u');
        double double24 = hypergeometricDistributionImpl3.probability(0.14529914529914542d);
        double double26 = hypergeometricDistributionImpl3.cumulativeProbability(96);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
    }

    @Test
    public void test07566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07566");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale0.getDisplayName(locale2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale0.getDisplayCountry(locale4);
        java.util.Set<java.lang.String> strSet7 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale11 = new java.util.Locale("ja", "", "ja");
        java.lang.String str12 = locale11.getScript();
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale0.getDisplayLanguage(locale11);
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("fr");
        printWriter19.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale22.getDisplayCountry(locale26);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.io.PrintWriter printWriter33 = printWriter19.printf(locale26, "it_IT", objArray31);
        java.util.Locale.setDefault(category16, locale26);
        java.util.Locale locale35 = java.util.Locale.getDefault(category16);
        java.io.PrintStream printStream37 = new java.io.PrintStream("zh_CN");
        printStream37.print((float) (byte) -1);
        printStream37.println();
        printStream37.print("ita");
        java.util.Locale locale44 = new java.util.Locale("Italy");
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        java.lang.Throwable[] throwableArray49 = mathException48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = mathException48.getSuppressed();
        java.io.PrintStream printStream51 = printStream37.printf(locale44, "chinois", (java.lang.Object[]) throwableArray50);
        java.util.Locale.setDefault(category16, locale44);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("fr");
        printWriter54.print("it_IT");
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = mathException62.getSuppressed();
        java.io.PrintWriter printWriter65 = printWriter54.printf(locale58, "it_IT", (java.lang.Object[]) throwableArray64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale58.getDisplayScript(locale66);
        java.lang.String str68 = locale66.getVariant();
        java.util.Locale.setDefault(category16, locale66);
        java.util.Locale locale70 = java.util.Locale.getDefault(category16);
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.lang.String str72 = locale71.getISO3Country();
        java.lang.String str73 = locale71.getDisplayCountry();
        java.util.Locale.setDefault(category16, locale71);
        java.util.Locale locale78 = new java.util.Locale("zh_CN", "English", "it_IT");
        java.util.Set<java.lang.Character> charSet79 = locale78.getExtensionKeys();
        java.util.Locale locale80 = java.util.Locale.UK;
        java.lang.String str81 = locale80.toLanguageTag();
        java.lang.String str82 = locale78.getDisplayVariant(locale80);
        java.lang.String str83 = locale71.getDisplayScript(locale78);
        java.util.Locale.setDefault(locale78);
        java.lang.String str85 = locale78.getLanguage();
        java.lang.String str86 = locale0.getDisplayCountry(locale78);
        java.lang.String str87 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals(locale11.toString(), "ja__ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja__ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals(locale44.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals(locale78.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "en-GB" + "'", str81, "en-GB");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "it,IT" + "'", str82, "it,IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "zh_cn" + "'", str85, "zh_cn");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test07567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07567");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((double) 117);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((double) 'a');
        int int13 = hypergeometricDistributionImpl3.getPopulationSize();
        int int14 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double17 = hypergeometricDistributionImpl3.cumulativeProbability(1.8472640568670461E-7d, (double) 99);
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.2991452991453134d + "'", double17 == 0.2991452991453134d);
    }

    @Test
    public void test07568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07568");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getVariant();
        java.io.PrintStream printStream5 = new java.io.PrintStream("zh_CN");
        printStream5.println();
        java.io.PrintStream printStream8 = printStream5.append('#');
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        printStream8.println('#');
        java.lang.String[] strArray13 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream14 = printStream8.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = new java.io.PrintStream((java.io.OutputStream) printStream14);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl19 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int20 = hypergeometricDistributionImpl19.getPopulationSize();
        double double22 = hypergeometricDistributionImpl19.cumulativeProbability((int) (short) 100);
        int int23 = hypergeometricDistributionImpl19.getPopulationSize();
        double double25 = hypergeometricDistributionImpl19.cumulativeProbability((int) '4');
        int int26 = hypergeometricDistributionImpl19.getNumberOfSuccesses();
        hypergeometricDistributionImpl19.setPopulationSize((int) (short) 100);
        double double31 = hypergeometricDistributionImpl19.cumulativeProbability(0.0d, (double) (short) 100);
        hypergeometricDistributionImpl19.setNumberOfSuccesses(35);
        int int34 = hypergeometricDistributionImpl19.getNumberOfSuccesses();
        double double36 = hypergeometricDistributionImpl19.probability((int) ' ');
        printStream14.print((java.lang.Object) ' ');
        java.util.Locale locale41 = new java.util.Locale("tedesco", "org.apache.commons.math.MathException: ", "org.apache.commons.math.MathException: hi!");
        java.io.PrintStream printStream44 = new java.io.PrintStream("zh_CN");
        printStream44.println();
        java.io.PrintStream printStream47 = printStream44.append('#');
        printStream44.close();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream44.write(byteArray52);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleAttributes();
        printStream44.print((java.lang.Object) locale54);
        printStream44.println(false);
        java.util.Locale locale63 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleKeys();
        java.lang.String str66 = locale63.getDisplayCountry(locale64);
        java.util.Set<java.lang.Character> charSet67 = locale63.getExtensionKeys();
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter("fr");
        printWriter71.print("it_IT");
        java.util.Locale locale74 = java.util.Locale.ROOT;
        boolean boolean75 = locale74.hasExtensions();
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = locale74.getDisplayName(locale76);
        java.util.Locale locale78 = java.util.Locale.ROOT;
        boolean boolean79 = locale78.hasExtensions();
        java.lang.String str80 = locale74.getDisplayCountry(locale78);
        java.lang.Object[] objArray83 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("hi!", objArray83);
        java.io.PrintWriter printWriter85 = printWriter71.printf(locale78, "it_IT", objArray83);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("", objArray83);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        java.lang.Object[] objArray88 = mathException86.getArguments();
        java.io.PrintStream printStream89 = printStream44.format(locale63, "org.apache.commons.math.MathException: tedesco", objArray88);
        java.io.PrintStream printStream90 = printStream14.format(locale41, "", objArray88);
        java.lang.String str91 = locale0.getDisplayLanguage(locale41);
        java.util.Set<java.lang.String> strSet92 = locale41.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 117 + "'", int20 == 117);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 117 + "'", int23 == 117);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2.6106672925738774E-19d + "'", double36 == 2.6106672925738774E-19d);
        org.junit.Assert.assertEquals(locale41.toString(), "tedesco_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: _org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals(locale63.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertNotNull(printWriter85);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(printStream89);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Japanese" + "'", str91, "Japanese");
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test07569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07569");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "Italy", "fr" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList7);
        java.util.Collection<java.util.Locale> localeCollection10 = null;
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Collection<java.util.Locale> localeCollection14 = null;
        java.util.Locale locale15 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, localeCollection14);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale21.getCountry();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.util.Locale locale29 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale21, locale24, locale25, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Collection<java.util.Locale> localeCollection37 = null;
        java.util.Locale locale38 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, localeCollection37);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String str43 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.lang.String str46 = locale44.getCountry();
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Locale locale52 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray53 = new java.util.Locale[] { locale44, locale47, locale48, locale52 };
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList54);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, strMap58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Collection<java.util.Locale> localeCollection63 = null;
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, localeCollection63);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList67);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        boolean boolean71 = locale70.hasExtensions();
        java.lang.String str72 = locale70.getCountry();
        java.util.Locale locale73 = java.util.Locale.JAPAN;
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.util.Locale locale78 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale70, locale73, locale74, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale.FilteringMode filteringMode83 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter(languageRangeList59, (java.util.Collection<java.util.Locale>) localeList80, filteringMode83);
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection10, filteringMode83);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap86 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList87 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap86);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(locale64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertTrue("'" + filteringMode83 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode83.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(languageRangeList87);
    }

    @Test
    public void test07570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07570");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("chinois", 0.0d);
        java.lang.String str3 = languageRange2.getRange();
        double double4 = languageRange2.getWeight();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.io.PrintStream printStream8 = new java.io.PrintStream("zh_CN");
        printStream8.print((float) (byte) -1);
        printStream8.println();
        printStream8.println();
        printStream8.println((float) ' ');
        printStream8.println((double) 0L);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream8, true);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        printWriter19.close();
        java.io.PrintWriter printWriter22 = printWriter19.append('a');
        boolean boolean23 = languageRange2.equals((java.lang.Object) 'a');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chinois" + "'", str3, "chinois");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07571");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize((int) 'u');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) 0, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
    }

    @Test
    public void test07572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07572");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception: org.apache.commons.math.mathexception: hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07573");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        printStream1.println(false);
        printStream1.println(0L);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter21.println("\u82f1\u8a9e\u30ab\u30ca\u30c0)");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
    }

    @Test
    public void test07574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07574");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) 0L);
        double double12 = hypergeometricDistributionImpl3.probability((int) 'a');
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        double double17 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 0, (int) '#');
        double double19 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(1);
        double double23 = hypergeometricDistributionImpl3.probability((double) 97);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.7008547008546866d + "'", double10 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test07575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07575");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        double double8 = hypergeometricDistributionImpl3.cumulativeProbability(96);
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability((double) (byte) 10, (double) 34);
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability((int) '#');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test07576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07576");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        boolean boolean6 = printStream1.checkError();
        printStream1.println((long) '#');
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.print("it_IT");
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = mathException18.getSuppressed();
        java.io.PrintWriter printWriter21 = printWriter10.printf(locale14, "it_IT", (java.lang.Object[]) throwableArray20);
        printWriter10.println((float) (byte) 10);
        printWriter10.print(true);
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.lang.String str29 = locale26.getVariant();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale26.getDisplayScript(locale30);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("fr");
        printWriter34.write("hi!");
        printWriter34.println((java.lang.Object) (-1L));
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.lang.Object[] objArray45 = mathException44.getArguments();
        java.io.PrintWriter printWriter46 = printWriter34.format(locale39, "anglais", objArray45);
        java.io.PrintWriter printWriter47 = printWriter10.format(locale30, "Italy", objArray45);
        printStream1.print((java.lang.Object) objArray45);
        printStream1.print((double) 1L);
        java.util.Locale locale51 = java.util.Locale.US;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale51.getScript();
        printStream1.print((java.lang.Object) locale51);
        java.lang.String str55 = locale51.toString();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)" + "'", str40, "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en_US" + "'", str55, "en_US");
    }

    @Test
    public void test07577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07577");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) (short) 100, (int) 'u', 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07578");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("zh_CN");
        printStream32.print((float) (byte) -1);
        printStream32.println();
        printStream32.println();
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream32, true);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter42 = printWriter40.append(' ');
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("fr");
        printWriter45.print("it_IT");
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale48.getDisplayName(locale50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale48.getDisplayCountry(locale52);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        java.io.PrintWriter printWriter59 = printWriter45.printf(locale52, "it_IT", objArray57);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("fr");
        printWriter62.print("it_IT");
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.io.PrintWriter printWriter73 = printWriter62.printf(locale66, "it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintWriter printWriter74 = printWriter45.format("it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintWriter printWriter75 = printWriter42.format("zh_CN", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream77 = new java.io.PrintStream("zh_CN");
        printStream77.print((float) (byte) -1);
        char[] charArray82 = new char[] { 'x', 'u' };
        printStream77.println(charArray82);
        printWriter75.print(charArray82);
        printStream32.print(charArray82);
        printWriter1.println(charArray82);
        printWriter1.println("ita");
        java.io.PrintWriter printWriter90 = printWriter1.append((java.lang.CharSequence) "german (germany) (FRENCH,italiano)");
        printWriter90.println("franz\366sisch (frankreich) (Korean)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[x, u]");
        org.junit.Assert.assertNotNull(printWriter90);
    }

    @Test
    public void test07579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07579");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.print("ita");
        java.util.Locale locale28 = new java.util.Locale("Italy");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream21.printf(locale28, "chinois", (java.lang.Object[]) throwableArray34);
        java.util.Locale.setDefault(category0, locale28);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter38.printf(locale42, "it_IT", (java.lang.Object[]) throwableArray48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale42.getDisplayScript(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.util.Locale locale54 = java.util.Locale.getDefault(category0);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("ITALY");
        java.util.Locale.setDefault(category0, locale56);
        java.util.Locale locale58 = java.util.Locale.getDefault(category0);
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.lang.String str60 = locale59.getCountry();
        java.util.Locale locale61 = locale59.stripExtensions();
        java.util.Locale.setDefault(category0, locale59);
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        java.lang.String str64 = locale63.getDisplayName();
        java.lang.String str65 = locale63.getCountry();
        java.lang.String str66 = locale63.getLanguage();
        java.util.Locale.Category category67 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter("fr");
        printWriter70.print("it_IT");
        java.util.Locale locale73 = java.util.Locale.ROOT;
        boolean boolean74 = locale73.hasExtensions();
        java.util.Locale locale75 = java.util.Locale.ROOT;
        java.lang.String str76 = locale73.getDisplayName(locale75);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        boolean boolean78 = locale77.hasExtensions();
        java.lang.String str79 = locale73.getDisplayCountry(locale77);
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("hi!", objArray82);
        java.io.PrintWriter printWriter84 = printWriter70.printf(locale77, "it_IT", objArray82);
        java.util.Locale.setDefault(category67, locale77);
        java.lang.String str86 = locale77.getVariant();
        java.lang.String str87 = locale63.getDisplayCountry(locale77);
        java.lang.String str88 = locale77.getCountry();
        java.lang.String str89 = locale59.getDisplayCountry(locale77);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "italy");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "italy");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "IT" + "'", str60, "IT");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str64, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "it" + "'", str66, "it");
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.FORMAT + "'", category67.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertNotNull(printWriter84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Italy" + "'", str89, "Italy");
    }

    @Test
    public void test07580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07580");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("zh_CN", objArray17);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl24 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int25 = hypergeometricDistributionImpl24.getPopulationSize();
        double double27 = hypergeometricDistributionImpl24.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl24.setSampleSize(0);
        printWriter1.print((java.lang.Object) hypergeometricDistributionImpl24);
        double double33 = hypergeometricDistributionImpl24.cumulativeProbability((double) (-1L), (double) (short) 100);
        int int34 = hypergeometricDistributionImpl24.getSampleSize();
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test07581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07581");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((double) 96);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(16);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test07582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07582");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.println((int) (byte) -1);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter15 = printWriter13.append((java.lang.CharSequence) "ja");
        printWriter15.println(true);
        boolean boolean18 = printWriter15.checkError();
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.println();
        java.io.PrintStream printStream24 = printStream21.append('#');
        printStream21.close();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream21.write(byteArray29);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleAttributes();
        printStream21.print((java.lang.Object) locale31);
        printStream21.println(false);
        java.util.Locale locale40 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.lang.String str43 = locale40.getDisplayCountry(locale41);
        java.util.Set<java.lang.Character> charSet44 = locale40.getExtensionKeys();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter("fr");
        printWriter48.print("it_IT");
        java.util.Locale locale51 = java.util.Locale.ROOT;
        boolean boolean52 = locale51.hasExtensions();
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale51.getDisplayName(locale53);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale51.getDisplayCountry(locale55);
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", objArray60);
        java.io.PrintWriter printWriter62 = printWriter48.printf(locale55, "it_IT", objArray60);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", objArray60);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException63);
        java.lang.Object[] objArray65 = mathException63.getArguments();
        java.io.PrintStream printStream66 = printStream21.format(locale40, "org.apache.commons.math.MathException: tedesco", objArray65);
        java.io.PrintWriter printWriter67 = printWriter15.format("fr-CA", objArray65);
        printWriter67.write((int) (short) 0);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals(locale40.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printWriter67);
    }

    @Test
    public void test07583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07583");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println(false);
        printWriter3.println((long) 'x');
        java.io.PrintWriter printWriter9 = printWriter3.append('4');
        java.io.PrintStream printStream12 = new java.io.PrintStream("zh_CN");
        printStream12.println();
        java.io.PrintStream printStream15 = printStream12.append('#');
        printStream12.close();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream12.write(byteArray20);
        printStream12.println((int) (byte) -1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintWriter printWriter26 = printWriter24.append((java.lang.CharSequence) "ja");
        printWriter26.println(true);
        printWriter26.write("allemand");
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.String str34 = locale31.getVariant();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale31.getDisplayScript(locale35);
        java.util.Locale locale37 = locale35.stripExtensions();
        java.util.Set<java.lang.Character> charSet38 = locale35.getExtensionKeys();
        java.lang.String str39 = locale35.getISO3Country();
        java.io.PrintStream printStream43 = new java.io.PrintStream("zh_CN");
        printStream43.print((float) (byte) -1);
        printStream43.println();
        printStream43.print("ita");
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.util.Locale locale51 = locale49.stripExtensions();
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        java.lang.Throwable[] throwableArray56 = mathException55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = mathException55.getSuppressed();
        java.io.PrintStream printStream58 = printStream43.printf(locale51, "fr", (java.lang.Object[]) throwableArray57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray57);
        java.io.PrintWriter printWriter60 = printWriter26.printf(locale35, "DE", (java.lang.Object[]) throwableArray57);
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray63);
        java.lang.Throwable[] throwableArray65 = mathException64.getSuppressed();
        java.lang.Object[] objArray66 = mathException64.getArguments();
        java.io.PrintWriter printWriter67 = printWriter60.format("Canada", objArray66);
        java.io.PrintWriter printWriter68 = printWriter9.printf("deu (ANGLAIS,CA)", objArray66);
        printWriter9.flush();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CAN" + "'", str39, "CAN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter68);
    }

    @Test
    public void test07584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07584");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream3 = new java.io.PrintStream("zh_CN");
        printStream3.print((float) (byte) -1);
        char[] charArray8 = new char[] { 'x', 'u' };
        printStream3.println(charArray8);
        java.util.Locale locale12 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str13 = locale12.getCountry();
        java.io.PrintStream printStream16 = new java.io.PrintStream("zh_CN");
        printStream16.print((float) (byte) -1);
        printStream16.println();
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException(throwable21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        java.lang.Throwable[] throwableArray24 = mathException22.getSuppressed();
        java.io.PrintStream printStream25 = printStream16.format("italien (Italie)", (java.lang.Object[]) throwableArray24);
        java.io.PrintStream printStream26 = printStream3.printf(locale12, "fr-CA", (java.lang.Object[]) throwableArray24);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = locale30.getUnicodeLocaleType("inglese (Canada)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: inglese (Canada)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[x, u]");
        org.junit.Assert.assertEquals(locale12.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITALY" + "'", str13, "ITALY");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en-gb_ITALY");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en-gb_ITALY");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en-gb_ITALY");
    }

    @Test
    public void test07585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07585");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = printWriter7.append(' ');
        char[] charArray12 = new char[] { 'x', 'a' };
        printWriter9.print(charArray12);
        printStream1.println(charArray12);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.print((double) (byte) 10);
        java.io.PrintStream printStream20 = new java.io.PrintStream("zh_CN");
        printStream20.println((float) (-1));
        printStream1.println((java.lang.Object) (-1));
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl27 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int28 = hypergeometricDistributionImpl27.getPopulationSize();
        double double30 = hypergeometricDistributionImpl27.cumulativeProbability((int) (short) 100);
        int int31 = hypergeometricDistributionImpl27.getPopulationSize();
        double double34 = hypergeometricDistributionImpl27.cumulativeProbability(0, (int) 'a');
        int int35 = hypergeometricDistributionImpl27.getSampleSize();
        int int36 = hypergeometricDistributionImpl27.getNumberOfSuccesses();
        int int37 = hypergeometricDistributionImpl27.getSampleSize();
        hypergeometricDistributionImpl27.setPopulationSize(117);
        double double41 = hypergeometricDistributionImpl27.upperCumulativeProbability((int) (byte) 100);
        hypergeometricDistributionImpl27.setNumberOfSuccesses((int) '4');
        double double45 = hypergeometricDistributionImpl27.cumulativeProbability((int) 'x');
        int int46 = hypergeometricDistributionImpl27.getNumberOfSuccesses();
        hypergeometricDistributionImpl27.setPopulationSize(117);
        printStream1.println((java.lang.Object) hypergeometricDistributionImpl27);
        double double52 = hypergeometricDistributionImpl27.cumulativeProbability(0.9999999999999717d, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double55 = hypergeometricDistributionImpl27.cumulativeProbability(1.6083206916363773E-10d, 0.999999999999992d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[x, a]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 117 + "'", int28 == 117);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 117 + "'", int31 == 117);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9999999999962769d + "'", double52 == 0.9999999999962769d);
    }

    @Test
    public void test07586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07586");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        printStream4.print("und");
        printStream4.println(false);
        java.io.PrintStream printStream13 = printStream4.append((java.lang.CharSequence) "italiano (Italia)");
        printStream4.println(' ');
        java.io.PrintStream printStream17 = printStream4.append('x');
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test07587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07587");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter3.printf(locale7, "it_IT", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter32 = printWriter1.printf(locale7, "fr", objArray29);
        char[] charArray36 = new char[] { '#', ' ', 'x' };
        printWriter1.write(charArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("zh_CN");
        printStream39.print((float) (byte) -1);
        printStream39.println();
        printStream39.println();
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream39, true);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        printStream45.println((java.lang.Object) "it_IT");
        printStream45.println(1.0d);
        java.io.PrintStream printStream66 = new java.io.PrintStream("zh_CN");
        printStream66.println();
        java.io.PrintStream printStream69 = printStream66.append('#');
        printStream66.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter74 = printWriter72.append(' ');
        char[] charArray77 = new char[] { 'x', 'a' };
        printWriter74.print(charArray77);
        printStream66.println(charArray77);
        printStream45.print(charArray77);
        printWriter1.print(charArray77);
        printWriter1.println((long) 32);
        printWriter1.println("Japanese");
        printWriter1.print(0.7008547008546866d);
        printWriter1.println('#');
        printWriter1.println((int) (short) 100);
        printWriter1.print('a');
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#,  , x]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[x, a]");
    }

    @Test
    public void test07588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07588");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("fr");
        printWriter6.print("it_IT");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray18);
        java.io.PrintWriter printWriter20 = printWriter6.printf(locale13, "it_IT", objArray18);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = mathException31.getSuppressed();
        java.io.PrintWriter printWriter34 = printWriter23.printf(locale27, "it_IT", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter35 = printWriter6.format("it_IT", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter36 = printWriter3.format("zh_CN", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("fr");
        printWriter39.println();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("fr");
        printWriter43.print("it_IT");
        java.util.Locale locale46 = java.util.Locale.ROOT;
        boolean boolean47 = locale46.hasExtensions();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale46.getDisplayName(locale48);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String str52 = locale46.getDisplayCountry(locale50);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray55);
        java.io.PrintWriter printWriter57 = printWriter43.printf(locale50, "it_IT", objArray55);
        java.io.PrintWriter printWriter58 = printWriter39.printf("English", objArray55);
        java.io.PrintWriter printWriter59 = printWriter36.format("fran\347ais (France)", objArray55);
        printWriter36.close();
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.Writer) printWriter36, false);
        printWriter62.println('x');
        printWriter62.print(120);
        java.io.PrintStream printStream68 = new java.io.PrintStream("zh_CN");
        printStream68.println();
        java.io.PrintStream printStream71 = printStream68.append('#');
        printStream68.close();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream68.write(byteArray76);
        printStream68.write((int) 'a');
        printStream68.println((int) (short) 100);
        printStream68.print(false);
        printStream68.flush();
        printStream68.print((double) '#');
        java.io.PrintStream printStream87 = new java.io.PrintStream((java.io.OutputStream) printStream68);
        printStream87.write((int) 'u');
        java.io.PrintStream printStream90 = new java.io.PrintStream((java.io.OutputStream) printStream87);
        java.io.PrintWriter printWriter92 = new java.io.PrintWriter((java.io.OutputStream) printStream90, false);
        printStream90.println((long) ' ');
        printStream90.println(0.9368413983102586d);
        printStream90.print('u');
        printWriter62.print((java.lang.Object) 'u');
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 10, -1]");
    }

    @Test
    public void test07589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07589");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        printStream1.print((float) 'u');
        printStream1.println(35);
        printStream1.println((float) 'a');
        printStream1.println((double) (short) 100);
        org.junit.Assert.assertNotNull(printStream4);
    }

    @Test
    public void test07590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07590");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int11 = hypergeometricDistributionImpl3.inverseCumulativeProbability(1.0d);
        hypergeometricDistributionImpl3.setSampleSize(96);
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability(0.9999999999996674d);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability(0.3499999999999959d, 100.0d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.1794871794871778d + "'", double15 == 0.1794871794871778d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.8205128205128223d + "'", double18 == 0.8205128205128223d);
    }

    @Test
    public void test07591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07591");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.print((-1.0f));
        printWriter1.println((double) 0.0f);
        printWriter1.close();
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Object[] objArray27 = mathException25.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("fr-CA");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        mathException29.addSuppressed((java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("\u5fb7\u6587", objArray27, (java.lang.Throwable) mathException29);
        java.io.PrintWriter printWriter37 = printWriter1.printf("\u30a4\u30ae\u30ea\u30b9)", objArray27);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
    }

    @Test
    public void test07592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07592");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        printStream7.println("");
        java.io.PrintStream printStream31 = printStream7.append((java.lang.CharSequence) "italiano (Italia)");
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        java.util.Locale locale34 = java.util.Locale.getDefault(category32);
        java.util.Locale locale38 = new java.util.Locale("zh_CN", "English", "it_IT");
        java.util.Locale.setDefault(category32, locale38);
        java.util.Locale locale40 = java.util.Locale.getDefault(category32);
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.getDisplayCountry();
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category32, locale41);
        java.util.Locale locale46 = java.util.Locale.getDefault(category32);
        printStream31.println((java.lang.Object) category32);
        java.util.Locale locale50 = new java.util.Locale("hi!", "Italy");
        java.lang.String str51 = locale50.getDisplayScript();
        java.lang.String str52 = locale50.toLanguageTag();
        java.util.Locale.setDefault(category32, locale50);
        java.lang.String str54 = locale50.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertEquals(locale38.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "und" + "'", str52, "und");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
    }

    @Test
    public void test07593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07593");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("cinese", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Collection<java.util.Locale> localeCollection6 = null;
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, localeCollection6);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale13.getCountry();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale13, locale16, locale17, locale21 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Collection<java.util.Locale> localeCollection29 = null;
        java.util.Locale locale30 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, localeCollection29);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale36.getCountry();
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale locale44 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale36, locale39, locale40, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.Locale locale50 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Collection<java.lang.String> strCollection51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList2, strCollection51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNull(locale50);
    }

    @Test
    public void test07594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07594");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("German");
        java.lang.String str2 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "german");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test07595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07595");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream1.write(byteArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("zh_CN");
        printStream13.print((float) (byte) -1);
        printStream13.println();
        printStream13.println();
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream13, true);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.print("it_IT");
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale24.getDisplayCountry(locale28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.io.PrintWriter printWriter35 = printWriter21.printf(locale28, "it_IT", objArray33);
        printStream19.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream38 = printStream19.append((java.lang.CharSequence) "fr");
        printStream19.print((int) (byte) 1);
        byte[] byteArray41 = new byte[] {};
        printStream19.write(byteArray41);
        printStream1.write(byteArray41, (int) (byte) 100, (int) (byte) 10);
        printStream1.println((float) 52);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test07596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07596");
        java.util.Locale locale3 = new java.util.Locale("\u52a0\u62ff\u5927", "org.apache.commons.math.MathException: fr", "german");
        java.util.Locale.setDefault(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale3.getUnicodeLocaleType("hi! (italy) (ALLEMAND (ALLEMAGNE))");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: hi! (italy) (ALLEMAND (ALLEMAGNE))");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "\u52a0\u62ff\u5927_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FR_german");
    }

    @Test
    public void test07597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07597");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale5 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = mathException17.getSuppressed();
        java.io.PrintWriter printWriter20 = printWriter9.printf(locale13, "it_IT", (java.lang.Object[]) throwableArray19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale26.getDisplayCountry(locale30);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.io.PrintWriter printWriter37 = printWriter23.printf(locale30, "it_IT", objArray35);
        java.io.PrintWriter printWriter38 = printWriter7.printf(locale13, "fr", objArray35);
        java.lang.String str39 = locale5.getDisplayVariant(locale13);
        java.lang.String str40 = locale0.getDisplayVariant(locale13);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getVariant();
        java.lang.String str43 = locale41.toLanguageTag();
        java.lang.String str45 = locale41.getUnicodeLocaleType("CA");
        java.lang.String str46 = locale41.getDisplayName();
        boolean boolean47 = locale41.hasExtensions();
        java.lang.String str48 = locale0.getDisplayName(locale41);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder49.clearExtensions();
        java.util.Locale.Builder builder52 = builder50.setLanguageTag("fr");
        java.util.Locale locale53 = builder52.build();
        java.util.Locale.Builder builder55 = builder52.setLanguageTag("ja");
        java.util.Locale locale56 = builder52.build();
        java.util.Locale.setDefault(locale56);
        java.lang.String str58 = locale56.getDisplayCountry();
        java.lang.String str59 = locale56.getLanguage();
        boolean boolean60 = locale56.hasExtensions();
        java.lang.String str61 = locale0.getDisplayCountry(locale56);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale5.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "chinois" + "'", str39, "chinois");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de" + "'", str43, "de");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tedesco" + "'", str46, "tedesco");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Italienisch (Italien)" + "'", str48, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ja" + "'", str59, "ja");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u30a4\u30bf\u30ea\u30a2" + "'", str61, "\u30a4\u30bf\u30ea\u30a2");
    }

    @Test
    public void test07598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07598");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("CAN", 7.171712453397489E-22d);
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        printWriter4.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = mathException12.getSuppressed();
        java.io.PrintWriter printWriter15 = printWriter4.printf(locale8, "it_IT", (java.lang.Object[]) throwableArray14);
        printWriter4.println((float) (byte) 10);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("fr");
        printWriter19.write("hi!");
        printWriter4.println((java.lang.Object) printWriter19);
        java.io.PrintWriter printWriter24 = printWriter4.append('#');
        printWriter4.write((int) ' ');
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category27, locale28);
        java.lang.String str30 = locale28.getScript();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        java.util.Locale.Builder builder34 = builder32.setLanguageTag("fr");
        java.util.Locale locale35 = builder34.build();
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale28.getDisplayScript(locale35);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale28.getDisplayCountry(locale38);
        java.lang.String str40 = locale28.getISO3Language();
        java.lang.String str41 = locale28.getDisplayLanguage();
        java.io.PrintStream printStream44 = new java.io.PrintStream("zh_CN");
        printStream44.print((float) (byte) -1);
        printStream44.println();
        printStream44.println();
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream44, true);
        printStream50.close();
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream50);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("fr");
        printWriter55.print("it_IT");
        java.util.Locale locale58 = java.util.Locale.ROOT;
        boolean boolean59 = locale58.hasExtensions();
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale58.getDisplayName(locale60);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        boolean boolean63 = locale62.hasExtensions();
        java.lang.String str64 = locale58.getDisplayCountry(locale62);
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", objArray67);
        java.io.PrintWriter printWriter69 = printWriter55.printf(locale62, "it_IT", objArray67);
        printWriter55.println();
        printWriter55.print(1L);
        java.lang.Throwable throwable75 = null;
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException(throwable75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException76);
        java.lang.Throwable[] throwableArray78 = mathException76.getSuppressed();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray78);
        java.io.PrintWriter printWriter80 = printWriter55.printf("\u30ab\u30ca\u30c0", (java.lang.Object[]) throwableArray78);
        java.io.PrintWriter printWriter81 = printWriter52.printf("", (java.lang.Object[]) throwableArray78);
        java.io.PrintWriter printWriter82 = printWriter4.printf(locale28, "Italian", (java.lang.Object[]) throwableArray78);
        boolean boolean83 = languageRange2.equals((java.lang.Object) "Italian");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "jpn" + "'", str40, "jpn");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str41, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test07599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07599");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("zh_CN", objArray17);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl24 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int25 = hypergeometricDistributionImpl24.getPopulationSize();
        double double27 = hypergeometricDistributionImpl24.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl24.setSampleSize(0);
        printWriter1.print((java.lang.Object) hypergeometricDistributionImpl24);
        int int31 = hypergeometricDistributionImpl24.getSampleSize();
        double double33 = hypergeometricDistributionImpl24.probability((int) (short) 0);
        int int34 = hypergeometricDistributionImpl24.getSampleSize();
        double double36 = hypergeometricDistributionImpl24.probability(100);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test07600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07600");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ko", 0.7142857142857143d);
        java.lang.String str3 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
    }

    @Test
    public void test07601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07601");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) 'x');
        double double14 = hypergeometricDistributionImpl3.upperCumulativeProbability(100);
        double double16 = hypergeometricDistributionImpl3.probability(0.0d);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test07602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07602");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale.Builder builder7 = builder1.setVariant("");
        java.util.Locale.Builder builder8 = builder1.clear();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("fr");
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder16 = builder13.clear();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale.Builder builder21 = builder13.setLocale(locale17);
        java.util.Locale locale22 = builder13.build();
        java.util.Locale.Builder builder23 = builder9.setLocale(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test07603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07603");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 100);
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(35);
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 10);
        double double21 = hypergeometricDistributionImpl3.probability((int) (short) 1);
        int int22 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
    }

    @Test
    public void test07604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07604");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        char[] charArray6 = new char[] { 'x', 'a' };
        printWriter3.print(charArray6);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter15 = printWriter3.printf("en-GB", (java.lang.Object[]) throwableArray13);
        printWriter15.println(1L);
        printWriter15.println(true);
        printWriter15.print((-1.0d));
        char[] charArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter15.print(charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, a]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test07605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07605");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println(true);
        java.io.PrintWriter printWriter19 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: TWN");
        printWriter19.println();
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl24 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int25 = hypergeometricDistributionImpl24.getPopulationSize();
        double double27 = hypergeometricDistributionImpl24.cumulativeProbability((double) (short) -1);
        double double29 = hypergeometricDistributionImpl24.probability((double) (short) 100);
        hypergeometricDistributionImpl24.setSampleSize((int) '4');
        int int32 = hypergeometricDistributionImpl24.getPopulationSize();
        int int33 = hypergeometricDistributionImpl24.getPopulationSize();
        double double35 = hypergeometricDistributionImpl24.cumulativeProbability(100);
        printWriter19.println((java.lang.Object) double35);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 117 + "'", int32 == 117);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 117 + "'", int33 == 117);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test07606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07606");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException(throwable9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        printStream1.println((java.lang.Object) throwableArray12);
        printStream1.println('x');
        printStream1.print((long) 21);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test07607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07607");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u610f\u5927\u5229\u6587\u610f\u5927\u5229)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????(???)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07608");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        printStream1.println(false);
        printStream1.println(0L);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print(false);
        printStream1.print(true);
        printStream1.print(119);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
    }

    @Test
    public void test07609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07609");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Japanisch", "Germany");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Germany");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07610");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale locale6 = builder5.build();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("fr");
        printWriter8.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = mathException16.getSuppressed();
        java.io.PrintWriter printWriter19 = printWriter8.printf(locale12, "it_IT", (java.lang.Object[]) throwableArray18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale12.getDisplayScript(locale20);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = locale22.getVariant();
        boolean boolean25 = locale22.hasExtensions();
        java.util.Locale locale26 = locale22.stripExtensions();
        java.lang.String str27 = locale12.getDisplayScript(locale22);
        java.util.Locale.Builder builder28 = builder5.setLocale(locale22);
        java.util.Locale.Builder builder30 = builder5.setVariant("GERMAN");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test07611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07611");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 0);
        int int14 = hypergeometricDistributionImpl3.inverseCumulativeProbability(1.0d);
        int int15 = hypergeometricDistributionImpl3.getPopulationSize();
        double double17 = hypergeometricDistributionImpl3.cumulativeProbability(0.001354928450285685d);
        hypergeometricDistributionImpl3.setPopulationSize((int) '#');
        double double21 = hypergeometricDistributionImpl3.probability((double) (-1L));
        int int22 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test07612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07612");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en-gb");
        double double2 = languageRange1.getWeight();
        java.io.PrintStream printStream4 = new java.io.PrintStream("zh_CN");
        printStream4.println();
        java.io.PrintStream printStream7 = printStream4.append('#');
        printStream4.close();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream4.write(byteArray12);
        printStream4.println((int) (byte) -1);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printWriter16.print((long) 97);
        java.io.PrintStream printStream20 = new java.io.PrintStream("zh_CN");
        printStream20.print((float) (byte) -1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        printWriter24.print("it_IT");
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter29 = printWriter24.printf("fr", objArray28);
        printWriter24.println((float) 'u');
        printStream20.print((java.lang.Object) 'u');
        printStream20.println(false);
        printStream20.println((int) 'a');
        printWriter16.print((java.lang.Object) 'a');
        boolean boolean38 = printWriter16.checkError();
        boolean boolean39 = languageRange1.equals((java.lang.Object) boolean38);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07613");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.write("hi!");
        printWriter2.println((java.lang.Object) (-1L));
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Object[] objArray13 = mathException12.getArguments();
        java.io.PrintWriter printWriter14 = printWriter2.format(locale7, "anglais", objArray13);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("fr");
        printWriter19.write("hi!");
        printWriter19.println((java.lang.Object) (-1L));
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.lang.Object[] objArray30 = mathException29.getArguments();
        java.io.PrintWriter printWriter31 = printWriter19.format(locale24, "anglais", objArray30);
        java.util.Locale.setDefault(category17, locale24);
        java.util.Locale locale33 = java.util.Locale.getDefault(category17);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale39 = locale35.stripExtensions();
        java.lang.String str40 = locale16.getDisplayLanguage(locale39);
        java.lang.String str41 = locale16.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        boolean boolean43 = locale42.hasExtensions();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale42.getDisplayName(locale44);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale42.getDisplayCountry(locale46);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale locale53 = new java.util.Locale("ja", "", "ja");
        java.lang.String str54 = locale53.getScript();
        java.lang.String str55 = locale46.getDisplayVariant(locale53);
        java.lang.String str56 = locale46.getCountry();
        java.lang.String str57 = locale16.getDisplayName(locale46);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str8, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str25, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str37, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str40, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ita" + "'", str41, "ita");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals(locale53.toString(), "ja__ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Italian (Italy)" + "'", str57, "Italian (Italy)");
    }

    @Test
    public void test07614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07614");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        printStream1.print('a');
        java.io.PrintStream printStream11 = printStream1.append('a');
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl15 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int16 = hypergeometricDistributionImpl15.getPopulationSize();
        double double18 = hypergeometricDistributionImpl15.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl15.setNumberOfSuccesses(0);
        double double22 = hypergeometricDistributionImpl15.cumulativeProbability((int) (short) 1);
        double double25 = hypergeometricDistributionImpl15.cumulativeProbability((int) (short) 0, (int) (byte) 1);
        hypergeometricDistributionImpl15.setNumberOfSuccesses(0);
        int int28 = hypergeometricDistributionImpl15.getPopulationSize();
        double double30 = hypergeometricDistributionImpl15.cumulativeProbability(0.7142857142857143d);
        printStream1.println((java.lang.Object) hypergeometricDistributionImpl15);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = hypergeometricDistributionImpl15.cumulativeProbability(96, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 117 + "'", int28 == 117);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
    }

    @Test
    public void test07615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07615");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.println("English");
        printWriter1.write("");
        printWriter1.print("italiano");
        java.io.PrintWriter printWriter16 = printWriter1.append('a');
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(printWriter16);
    }

    @Test
    public void test07616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07616");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.println('x');
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test07617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07617");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        printStream1.println(0L);
        java.io.PrintStream printStream17 = printStream1.append((java.lang.CharSequence) "und");
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter24 = printWriter22.append(' ');
        char[] charArray27 = new char[] { 'x', 'a' };
        printWriter24.print(charArray27);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", objArray32);
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray34);
        java.io.PrintWriter printWriter36 = printWriter24.printf("en-GB", (java.lang.Object[]) throwableArray34);
        char[] charArray41 = new char[] { 'a', ' ', 'u', 'x' };
        printWriter36.write(charArray41);
        java.io.PrintStream printStream44 = new java.io.PrintStream("zh_CN");
        printStream44.println();
        java.io.PrintStream printStream47 = printStream44.append('#');
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream47);
        java.io.PrintStream printStream50 = new java.io.PrintStream("zh_CN");
        printStream50.print((float) (byte) -1);
        printStream50.println();
        printStream50.println();
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream50, true);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("fr");
        printWriter58.print("it_IT");
        java.util.Locale locale61 = java.util.Locale.ROOT;
        boolean boolean62 = locale61.hasExtensions();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale61.getDisplayName(locale63);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        boolean boolean66 = locale65.hasExtensions();
        java.lang.String str67 = locale61.getDisplayCountry(locale65);
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        java.io.PrintWriter printWriter72 = printWriter58.printf(locale65, "it_IT", objArray70);
        printStream56.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream75 = printStream56.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream76 = new java.io.PrintStream((java.io.OutputStream) printStream56);
        printStream56.println("");
        java.util.Locale.Builder builder79 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder80 = builder79.clearExtensions();
        java.util.Locale.Builder builder82 = builder80.setLanguageTag("fr");
        java.util.Locale locale83 = builder82.build();
        java.util.Locale.Builder builder84 = builder82.clearExtensions();
        printStream56.print((java.lang.Object) builder84);
        java.util.Locale.Builder builder86 = builder84.clear();
        java.util.Locale.Builder builder87 = builder86.clear();
        java.util.Locale locale88 = builder87.build();
        java.lang.String[] strArray90 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream91 = printStream47.printf(locale88, "zh_CN", (java.lang.Object[]) strArray90);
        java.lang.String[] strArray93 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter94 = printWriter36.format(locale88, "fran\347ais (France)", (java.lang.Object[]) strArray93);
        java.io.PrintStream printStream95 = printStream19.format("\u5fb7\u6587", (java.lang.Object[]) strArray93);
        printStream19.close();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[x, a]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a ux");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a ux");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a,  , u, x]");
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(printWriter94);
        org.junit.Assert.assertNotNull(printStream95);
    }

    @Test
    public void test07618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07618");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ja__ja", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=ja__ja");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07619");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        printStream26.println((float) 117);
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.lang.String str32 = locale29.getVariant();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale29.getDisplayScript(locale33);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("fr");
        printWriter37.print("it_IT");
        java.util.Locale locale40 = java.util.Locale.ROOT;
        boolean boolean41 = locale40.hasExtensions();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale40.getDisplayName(locale42);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.lang.String str46 = locale40.getDisplayCountry(locale44);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        java.io.PrintWriter printWriter51 = printWriter37.printf(locale44, "it_IT", objArray49);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("fr");
        printWriter54.print("it_IT");
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = mathException62.getSuppressed();
        java.io.PrintWriter printWriter65 = printWriter54.printf(locale58, "it_IT", (java.lang.Object[]) throwableArray64);
        java.io.PrintWriter printWriter66 = printWriter37.format("it_IT", (java.lang.Object[]) throwableArray64);
        java.io.PrintStream printStream67 = printStream26.format(locale33, "italien (Italie)", (java.lang.Object[]) throwableArray64);
        java.io.PrintStream printStream69 = new java.io.PrintStream("zh_CN");
        printStream69.print((float) (byte) -1);
        printStream69.println();
        printStream69.print("ita");
        printStream69.println('#');
        printStream69.println('u');
        printStream26.println((java.lang.Object) 'u');
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.OutputStream) printStream26, true);
        boolean boolean82 = printWriter81.checkError();
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test07620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07620");
        java.util.Locale locale1 = new java.util.Locale("ALLEMAND (ALLEMAGNE)");
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "allemand (allemagne)");
    }

    @Test
    public void test07621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07621");
        java.util.Locale locale1 = new java.util.Locale("fra");
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "fra");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test07622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07622");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale22 = new java.util.Locale("English", "", "chinois");
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale22.getDisplayLanguage(locale24);
        java.lang.String str28 = locale24.getDisplayName();
        java.lang.String str29 = locale10.getDisplayCountry(locale24);
        boolean boolean30 = locale24.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "allemand (allemagne)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertEquals(locale22.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "english" + "'", str27, "english");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japanese" + "'", str28, "Japanese");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07623");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("CN");
        printWriter1.println();
        printWriter1.write((int) (byte) 100);
        printWriter1.println(0L);
    }

    @Test
    public void test07624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07624");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("francese (Francia)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=francese(francia)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07625");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("anglais");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.Object obj3 = null;
        boolean boolean4 = languageRange1.equals(obj3);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "anglais" + "'", str2, "anglais");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07626");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("German", "ITALIENISCH (ITALIEN)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ITALIENISCH (ITALIEN)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07627");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl(1, 117, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07628");
        java.util.Locale locale3 = new java.util.Locale("\u52a0\u62ff\u5927", "org.apache.commons.math.MathException: fr", "german");
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getCountry();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale6.getISO3Country();
        java.lang.String str11 = locale4.getDisplayScript(locale6);
        java.io.PrintStream printStream13 = new java.io.PrintStream("zh_CN");
        printStream13.print((float) (byte) -1);
        printStream13.println();
        printStream13.println();
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream13, true);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.print("it_IT");
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale24.getDisplayCountry(locale28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.io.PrintWriter printWriter35 = printWriter21.printf(locale28, "it_IT", objArray33);
        printStream19.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream38 = printStream19.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        printStream19.println("");
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder42.clearExtensions();
        java.util.Locale.Builder builder45 = builder43.setLanguageTag("fr");
        java.util.Locale locale46 = builder45.build();
        java.util.Locale.Builder builder47 = builder45.clearExtensions();
        printStream19.print((java.lang.Object) builder47);
        java.util.Locale.Builder builder49 = builder47.clear();
        java.util.Locale.Builder builder50 = builder49.clear();
        java.util.Locale locale51 = builder50.build();
        java.util.Locale locale52 = builder50.build();
        java.lang.String str53 = locale4.getDisplayName(locale52);
        java.util.Locale locale55 = new java.util.Locale("italiano");
        java.lang.String str56 = locale52.getDisplayScript(locale55);
        java.lang.String str57 = locale3.getDisplayName(locale55);
        org.junit.Assert.assertEquals(locale3.toString(), "\u52a0\u62ff\u5927_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FR_german");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "German (Germany)" + "'", str53, "German (Germany)");
        org.junit.Assert.assertEquals(locale55.toString(), "italiano");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u52a0\u62ff\u5927 (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FR,german)" + "'", str57, "\u52a0\u62ff\u5927 (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FR,german)");
    }

    @Test
    public void test07629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07629");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((double) 117);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((double) 'a');
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 1);
        int int17 = hypergeometricDistributionImpl3.getPopulationSize();
        int int18 = hypergeometricDistributionImpl3.getSampleSize();
        double double20 = hypergeometricDistributionImpl3.cumulativeProbability((double) 0);
        hypergeometricDistributionImpl3.setPopulationSize(117);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 117 + "'", int17 == 117);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7008547008546866d + "'", double20 == 0.7008547008546866d);
    }

    @Test
    public void test07630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07630");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u53f0\u6e7e", "chn");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: chn");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07631");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("japonais (Japon)", "org.apache.commons.math.MathException: ja");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ja");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07632");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter6.print((float) (byte) 100);
        java.io.PrintWriter printWriter10 = printWriter6.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        java.io.PrintStream printStream13 = new java.io.PrintStream("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter17 = printWriter15.append(' ');
        char[] charArray20 = new char[] { 'x', 'a' };
        printWriter17.print(charArray20);
        printStream13.print(charArray20);
        printWriter11.print(charArray20);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter11, true);
        printWriter25.write((int) (byte) 100);
        printWriter25.print('4');
        printWriter25.println(' ');
        printWriter25.println();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[x, a]");
    }

    @Test
    public void test07633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07633");
        java.util.Locale locale1 = new java.util.Locale("Germany");
        java.lang.String str2 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test07634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07634");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream26, true);
        java.io.PrintStream printStream32 = printStream26.append('x');
        printStream32.println(true);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream32);
    }

    @Test
    public void test07635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07635");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        printStream1.print((float) 'u');
        printStream1.println(35);
        printStream1.println(0.0d);
        java.io.PrintStream printStream13 = new java.io.PrintStream("zh_CN");
        printStream13.println();
        java.io.PrintStream printStream16 = printStream13.append('#');
        printStream13.close();
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream13.write(byteArray22);
        printStream1.write(byteArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream27 = printStream25.append('a');
        java.lang.Object[] objArray29 = null;
        java.io.PrintStream printStream30 = printStream27.format("German (Germany)", objArray29);
        printStream27.println();
        printStream27.println(0.3787956759997426d);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream30);
    }

    @Test
    public void test07636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07636");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.write((int) '#');
        java.util.Locale locale15 = java.util.Locale.ROOT;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = locale15.getCountry();
        java.lang.String str18 = locale15.getDisplayLanguage();
        boolean boolean19 = locale15.hasExtensions();
        java.util.Set<java.lang.String> strSet20 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale15.getDisplayCountry();
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Object[] objArray27 = mathException26.getArguments();
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        mathException26.addSuppressed((java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray33 = mathException26.getSuppressed();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException();
        java.lang.String str35 = mathException34.getPattern();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray33, (java.lang.Throwable) mathException34);
        java.io.PrintStream printStream37 = printStream1.printf(locale15, "Chinese (Taiwan)", (java.lang.Object[]) throwableArray33);
        java.lang.String str38 = locale15.getISO3Language();
        java.lang.String str39 = locale15.getDisplayLanguage();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleKeys();
        boolean boolean44 = locale40.hasExtensions();
        java.lang.String str45 = locale40.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet46 = locale40.getExtensionKeys();
        java.lang.String str47 = locale15.getDisplayVariant(locale40);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test07637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07637");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.probability((int) '4');
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) '#');
        hypergeometricDistributionImpl3.setSampleSize((int) '4');
        hypergeometricDistributionImpl3.setPopulationSize(21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test07638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07638");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1);
        double double11 = hypergeometricDistributionImpl3.probability((double) 10L);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(97);
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability((double) (-1L));
        int int16 = hypergeometricDistributionImpl3.getPopulationSize();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = hypergeometricDistributionImpl3.cumulativeProbability(3.723172347079774E-12d, 2.0581548335510597E-6d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
    }

    @Test
    public void test07639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07639");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int14 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test07640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07640");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability(35, 35);
        double double20 = hypergeometricDistributionImpl3.probability((double) 0L);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 1);
        int int23 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = hypergeometricDistributionImpl3.cumulativeProbability(99, 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7008547008546866d + "'", double20 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test07641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07641");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((double) 100L, 100.0d);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(34);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test07642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07642");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double17 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (byte) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) '4');
        double double21 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'x');
        int int23 = hypergeometricDistributionImpl3.inverseCumulativeProbability(5.836992974634979E-6d);
        double double25 = hypergeometricDistributionImpl3.probability(0.8290598290598294d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test07643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07643");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("chinois");
        java.util.Locale locale5 = builder4.build();
        java.lang.String str6 = locale5.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test07644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07644");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 0);
        int int14 = hypergeometricDistributionImpl3.inverseCumulativeProbability(1.0d);
        hypergeometricDistributionImpl3.setSampleSize(31);
        int int17 = hypergeometricDistributionImpl3.getSampleSize();
        int int18 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
    }

    @Test
    public void test07645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07645");
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("hi!", objArray1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("fr");
        printWriter6.print("it_IT");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray18);
        java.io.PrintWriter printWriter20 = printWriter6.printf(locale13, "it_IT", objArray18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray18);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException21);
        java.lang.Object[] objArray23 = mathException21.getArguments();
        java.lang.Object[] objArray24 = mathException21.getArguments();
        java.io.PrintStream printStream27 = new java.io.PrintStream("zh_CN");
        printStream27.print((float) (byte) -1);
        printStream27.println();
        printStream27.print("ita");
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.util.Locale locale35 = locale33.stripExtensions();
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintStream printStream42 = printStream27.printf(locale35, "fr", (java.lang.Object[]) throwableArray41);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.lang.Object[] objArray46 = mathException45.getArguments();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray41, (java.lang.Throwable) mathException45);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        java.lang.Object[] objArray51 = mathException50.getArguments();
        mathException45.addSuppressed((java.lang.Throwable) mathException50);
        mathException21.addSuppressed((java.lang.Throwable) mathException50);
        mathException2.addSuppressed((java.lang.Throwable) mathException50);
        java.lang.Object[] objArray55 = mathException2.getArguments();
        java.lang.Object[] objArray56 = mathException2.getArguments();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
    }

    @Test
    public void test07646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07646");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder7.setVariant("german");
        java.util.Locale.Builder builder12 = builder7.setExtension('x', "Italy");
        java.util.Locale locale13 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale13.getUnicodeLocaleType("org.apache.commons.math.MathException: tedesco");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException: tedesco");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
    }

    @Test
    public void test07647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07647");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 10);
        int int13 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double15 = hypergeometricDistributionImpl3.probability((int) 'u');
        int int16 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double18 = hypergeometricDistributionImpl3.probability((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test07648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07648");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.mathexception: fr");
        printStream1.close();
    }

    @Test
    public void test07649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07649");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u82f1\u56fd");
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ?? (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07650");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.println("English");
        printWriter1.write((int) (byte) 1);
        java.io.PrintStream printStream14 = new java.io.PrintStream("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.io.PrintStream printStream16 = printStream14.append((java.lang.CharSequence) "fra");
        java.io.PrintStream printStream18 = new java.io.PrintStream("fran\347ais (France)");
        java.io.PrintStream printStream20 = new java.io.PrintStream("zh_CN");
        printStream20.print((float) (byte) -1);
        printStream20.println();
        printStream20.println();
        java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream20, true);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("fr");
        printWriter28.print("it_IT");
        java.util.Locale locale31 = java.util.Locale.ROOT;
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale31.getDisplayName(locale33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale31.getDisplayCountry(locale35);
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        java.io.PrintWriter printWriter42 = printWriter28.printf(locale35, "it_IT", objArray40);
        printStream26.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream45 = printStream26.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream47 = new java.io.PrintStream("zh_CN");
        printStream47.println();
        java.io.PrintStream printStream50 = printStream47.append('#');
        printStream47.close();
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream47.write(byteArray56);
        printStream47.print(false);
        printStream47.println("Italy");
        java.io.PrintStream printStream63 = new java.io.PrintStream("zh_CN");
        printStream63.println((float) (-1));
        java.io.PrintStream printStream67 = new java.io.PrintStream("zh_CN");
        printStream67.println();
        java.io.PrintStream printStream70 = printStream67.append('#');
        printStream67.close();
        byte[] byteArray76 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream67.write(byteArray76);
        printStream63.write(byteArray76);
        printStream47.write(byteArray76);
        printStream45.write(byteArray76);
        printStream18.write(byteArray76);
        printStream14.write(byteArray76);
        printWriter1.println((java.lang.Object) byteArray76);
        printWriter1.println('a');
        printWriter1.close();
        java.io.PrintWriter printWriter87 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter87.print(' ');
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 100, -1, -1]");
    }

    @Test
    public void test07651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07651");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("eng");
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("it");
        java.util.Locale.Builder builder12 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setRegion("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ??? (???????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test07652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07652");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("it");
        java.util.Locale locale5 = new java.util.Locale("ja", "", "ja");
        java.lang.String str6 = locale5.getScript();
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale8 = locale5.stripExtensions();
        java.util.Set<java.lang.String> strSet9 = locale5.getUnicodeLocaleKeys();
        java.lang.String str10 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet9);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertEquals(locale5.toString(), "ja__ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test07653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07653");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("italie", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07654");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'a', (int) 'a', (int) ' ');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.cumulativeProbability(52, (int) 'x');
        hypergeometricDistributionImpl3.setNumberOfSuccesses(52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test07655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07655");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println((double) 0L);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print((float) 117);
        printStream1.print(0.0d);
        printStream1.println((long) (short) 1);
    }

    @Test
    public void test07656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07656");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter1.println(false);
        printWriter1.println('x');
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.write("hi!");
        printWriter10.println((java.lang.Object) (-1L));
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray19);
        java.lang.Object[] objArray21 = mathException20.getArguments();
        java.io.PrintWriter printWriter22 = printWriter10.format(locale15, "anglais", objArray21);
        java.io.PrintWriter printWriter23 = printWriter1.format("italiano (Italia)", objArray21);
        printWriter1.println(0.0f);
        java.util.Locale locale29 = new java.util.Locale("deu", "anglais", "CA");
        java.lang.String str30 = locale29.toLanguageTag();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("allemand");
        java.lang.String str33 = locale29.getDisplayCountry(locale32);
        printWriter1.println((java.lang.Object) str33);
        printWriter1.println((long) (byte) 10);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str16, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertEquals(locale29.toString(), "deu_ANGLAIS_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "deu-x-lvariant-CA" + "'", str30, "deu-x-lvariant-CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "allemand");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ANGLAIS" + "'", str33, "ANGLAIS");
    }

    @Test
    public void test07657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07657");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        printWriter4.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = mathException12.getSuppressed();
        java.io.PrintWriter printWriter15 = printWriter4.printf(locale8, "it_IT", (java.lang.Object[]) throwableArray14);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale21.getDisplayName(locale23);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = locale21.getDisplayCountry(locale25);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        java.io.PrintWriter printWriter32 = printWriter18.printf(locale25, "it_IT", objArray30);
        java.io.PrintWriter printWriter33 = printWriter2.printf(locale8, "fr", objArray30);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("fr");
        printWriter36.print("it_IT");
        java.util.Locale locale39 = java.util.Locale.ROOT;
        boolean boolean40 = locale39.hasExtensions();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale39.getDisplayName(locale41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale39.getDisplayCountry(locale43);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.io.PrintWriter printWriter50 = printWriter36.printf(locale43, "it_IT", objArray48);
        printWriter50.print((double) 100L);
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        java.lang.String str56 = locale53.getVariant();
        java.lang.String str57 = locale53.getCountry();
        java.io.PrintStream printStream60 = new java.io.PrintStream("zh_CN");
        printStream60.print((float) (byte) -1);
        printStream60.println();
        printStream60.print("ita");
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.util.Locale locale68 = locale66.stripExtensions();
        java.lang.Object[] objArray71 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        java.lang.Throwable[] throwableArray74 = mathException72.getSuppressed();
        java.io.PrintStream printStream75 = printStream60.printf(locale68, "fr", (java.lang.Object[]) throwableArray74);
        java.io.PrintWriter printWriter76 = printWriter50.format(locale53, "fra", (java.lang.Object[]) throwableArray74);
        java.io.PrintWriter printWriter77 = printWriter33.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray74);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("italy", (java.lang.Object[]) throwableArray74);
        java.lang.Object[] objArray79 = mathException78.getArguments();
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
    }

    @Test
    public void test07658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07658");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setUnicodeLocaleKeyword("ZH_CN", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ZH_CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
    }

    @Test
    public void test07659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07659");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        java.lang.String str5 = locale2.getLanguage();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale13.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String str19 = locale13.getDisplayCountry(locale17);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.io.PrintWriter printWriter24 = printWriter10.printf(locale17, "it_IT", objArray22);
        java.util.Locale.setDefault(category7, locale17);
        java.util.Locale locale26 = java.util.Locale.getDefault(category7);
        java.util.Locale locale27 = java.util.Locale.getDefault(category7);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("fr");
        printWriter29.print("it_IT");
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.io.PrintWriter printWriter40 = printWriter29.printf(locale33, "it_IT", (java.lang.Object[]) throwableArray39);
        java.lang.String str41 = locale27.getDisplayName(locale33);
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale42.getDisplayCountry(locale43);
        boolean boolean45 = locale43.hasExtensions();
        java.util.Locale.setDefault(locale43);
        java.lang.String str47 = locale43.getLanguage();
        java.lang.String str49 = locale43.getExtension('u');
        java.lang.String str50 = locale33.getDisplayScript(locale43);
        java.lang.String str51 = locale33.toLanguageTag();
        java.lang.String str52 = locale2.getDisplayLanguage(locale33);
        boolean boolean53 = locale2.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ja" + "'", str5, "ja");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ja" + "'", str47, "ja");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Japanese" + "'", str52, "Japanese");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07660");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr-CA");
        double double2 = languageRange1.getWeight();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        printWriter4.print("it_IT");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter9 = printWriter4.printf("fr", objArray8);
        printWriter4.println((float) 'u');
        printWriter4.write("en-GB");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl17 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int18 = hypergeometricDistributionImpl17.getSampleSize();
        int int19 = hypergeometricDistributionImpl17.getPopulationSize();
        double double21 = hypergeometricDistributionImpl17.upperCumulativeProbability((int) '#');
        int int22 = hypergeometricDistributionImpl17.getPopulationSize();
        int int23 = hypergeometricDistributionImpl17.getNumberOfSuccesses();
        hypergeometricDistributionImpl17.setNumberOfSuccesses((int) (byte) 10);
        printWriter4.print((java.lang.Object) hypergeometricDistributionImpl17);
        double double28 = hypergeometricDistributionImpl17.probability((double) (byte) 1);
        double double30 = hypergeometricDistributionImpl17.cumulativeProbability((int) ' ');
        double double32 = hypergeometricDistributionImpl17.cumulativeProbability(0.11499182616210182d);
        double double34 = hypergeometricDistributionImpl17.cumulativeProbability((int) (short) -1);
        boolean boolean35 = languageRange1.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 117 + "'", int22 == 117);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.11499182616210182d + "'", double28 == 0.11499182616210182d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.023984009456667447d + "'", double32 == 0.023984009456667447d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07661");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setSampleSize((int) (byte) 100);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) 10L);
        int int13 = hypergeometricDistributionImpl3.getPopulationSize();
        int int14 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double16 = hypergeometricDistributionImpl3.probability(96);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(10);
        int int19 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test07662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07662");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(10);
        java.io.PrintWriter printWriter22 = printWriter1.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.print((double) (byte) 0);
        printWriter1.println(0.0d);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category29, locale30);
        java.io.PrintStream printStream35 = new java.io.PrintStream("zh_CN");
        printStream35.print((float) (byte) -1);
        printStream35.println();
        printStream35.print("ita");
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale43 = locale41.stripExtensions();
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = mathException47.getSuppressed();
        java.io.PrintStream printStream50 = printStream35.printf(locale43, "fr", (java.lang.Object[]) throwableArray49);
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        java.lang.Object[] objArray54 = mathException53.getArguments();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray49, (java.lang.Throwable) mathException53);
        java.lang.Throwable[] throwableArray56 = mathException53.getSuppressed();
        java.io.PrintWriter printWriter57 = printWriter1.printf(locale30, "org.apache.commons.math.MathException: fr", (java.lang.Object[]) throwableArray56);
        java.io.PrintWriter printWriter59 = printWriter57.append((java.lang.CharSequence) "ITA");
        printWriter57.println((float) 100L);
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.util.Locale locale64 = java.util.Locale.getDefault(category62);
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder66 = builder65.clearExtensions();
        java.util.Locale.Builder builder67 = builder65.clearExtensions();
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder69 = builder67.setLocale(locale68);
        java.util.Set<java.lang.Character> charSet70 = locale68.getExtensionKeys();
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.setDefault(locale71);
        java.lang.String str73 = locale68.getDisplayCountry(locale71);
        java.util.Locale.setDefault(category62, locale68);
        java.lang.String str75 = locale68.getDisplayLanguage();
        printWriter57.println((java.lang.Object) str75);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u53f0\u7063" + "'", str73, "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u4e2d\u6587" + "'", str75, "\u4e2d\u6587");
    }

    @Test
    public void test07663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07663");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.MathException: English");
        printStream1.println(1L);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "German (Germany)", (int) (short) 1, (int) (byte) 1);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream7);
        org.junit.Assert.assertNotNull(printStream7);
    }

    @Test
    public void test07664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07664");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.lang.Object obj3 = null;
        printWriter1.print(obj3);
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("fr", objArray8);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf("ita", (java.lang.Object[]) throwableArray11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale locale17 = java.util.Locale.getDefault(category13);
        java.io.PrintStream printStream20 = new java.io.PrintStream("ita");
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException24);
        java.lang.Throwable[] throwableArray26 = mathException24.getSuppressed();
        java.io.PrintStream printStream29 = new java.io.PrintStream("zh_CN");
        printStream29.print((float) (byte) -1);
        printStream29.println();
        printStream29.print("ita");
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale37 = locale35.stripExtensions();
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = mathException41.getSuppressed();
        java.io.PrintStream printStream44 = printStream29.printf(locale37, "fr", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) mathException45);
        java.io.PrintStream printStream47 = printStream20.printf("ita", (java.lang.Object[]) throwableArray26);
        java.io.PrintWriter printWriter48 = printWriter12.format(locale17, "italien (Italie)", (java.lang.Object[]) throwableArray26);
        printWriter12.println('u');
        printWriter12.write((int) '#');
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printWriter48);
    }

    @Test
    public void test07665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07665");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        printWriter31.print((double) 100L);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getVariant();
        java.lang.String str38 = locale34.getCountry();
        java.io.PrintStream printStream41 = new java.io.PrintStream("zh_CN");
        printStream41.print((float) (byte) -1);
        printStream41.println();
        printStream41.print("ita");
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.util.Locale locale49 = locale47.stripExtensions();
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = mathException53.getSuppressed();
        java.io.PrintStream printStream56 = printStream41.printf(locale49, "fr", (java.lang.Object[]) throwableArray55);
        java.io.PrintWriter printWriter57 = printWriter31.format(locale34, "fra", (java.lang.Object[]) throwableArray55);
        char[] charArray58 = new char[] {};
        printWriter31.print(charArray58);
        printWriter15.println(charArray58);
        printWriter15.print(0.0f);
        printWriter15.write((int) '4');
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.Writer) printWriter15, false);
        // The following exception was thrown during execution in test generation
        try {
            printWriter66.write("hi!_ITALY", (int) (byte) 1, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 22");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
    }

    @Test
    public void test07666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07666");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter6.print((float) (byte) 100);
        printWriter6.print("Italy");
        printWriter6.close();
        printWriter6.print((int) 'u');
        java.io.PrintStream printStream15 = new java.io.PrintStream("zh_CN");
        printStream15.print((float) (byte) -1);
        printStream15.println();
        printStream15.println();
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream15, true);
        printStream21.println('u');
        printWriter6.print((java.lang.Object) printStream21);
        printWriter6.println('u');
        boolean boolean27 = printWriter6.checkError();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException();
        java.lang.String str31 = mathException30.getPattern();
        java.lang.Object[] objArray32 = mathException30.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("de", (java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        java.io.PrintWriter printWriter35 = printWriter6.format("ITALIANO (ITALIA)", (java.lang.Object[]) throwableArray34);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printWriter35);
    }

    @Test
    public void test07667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07667");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray8 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "Italy", "fr" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList35, filteringMode36);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList35);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Collection<java.util.Locale> localeCollection42 = null;
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, localeCollection42);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList46);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = locale49.getCountry();
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.util.Locale locale57 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale49, locale52, locale53, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Collection<java.util.Locale> localeCollection65 = null;
        java.util.Locale locale66 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, localeCollection65);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String str71 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList69);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        boolean boolean73 = locale72.hasExtensions();
        java.lang.String str74 = locale72.getCountry();
        java.util.Locale locale75 = java.util.Locale.JAPAN;
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.util.Locale locale80 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray81 = new java.util.Locale[] { locale72, locale75, locale76, locale80 };
        java.util.ArrayList<java.util.Locale> localeList82 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList82, localeArray81);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList82);
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.Locale locale86 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.Locale locale87 = java.util.Locale.JAPANESE;
        java.util.Locale locale88 = java.util.Locale.JAPANESE;
        java.lang.String str89 = locale87.getDisplayCountry(locale88);
        java.lang.String str90 = locale87.getVariant();
        java.util.Locale locale91 = java.util.Locale.CANADA;
        java.lang.String str92 = locale87.getDisplayScript(locale91);
        java.util.Set<java.lang.Character> charSet93 = locale91.getExtensionKeys();
        java.lang.String str94 = locale91.getDisplayLanguage();
        java.lang.String str95 = locale91.getDisplayCountry();
        java.util.Set<java.lang.String> strSet96 = locale91.getUnicodeLocaleAttributes();
        java.lang.String str97 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet96);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode36.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(locale66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(localeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNull(locale86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(charSet93);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u82f1\u8a9e" + "'", str94, "\u82f1\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "\u30ab\u30ca\u30c0" + "'", str95, "\u30ab\u30ca\u30c0");
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test07668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07668");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale locale4 = builder3.build();
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale locale6 = locale4.stripExtensions();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.print("it_IT");
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = mathException18.getSuppressed();
        java.io.PrintWriter printWriter21 = printWriter10.printf(locale14, "it_IT", (java.lang.Object[]) throwableArray20);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        printWriter24.print("it_IT");
        java.util.Locale locale27 = java.util.Locale.ROOT;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale27.getDisplayName(locale29);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale27.getDisplayCountry(locale31);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.io.PrintWriter printWriter38 = printWriter24.printf(locale31, "it_IT", objArray36);
        java.io.PrintWriter printWriter39 = printWriter8.printf(locale14, "fr", objArray36);
        java.lang.String str41 = locale14.getExtension('x');
        java.util.Locale locale42 = locale14.stripExtensions();
        java.lang.String str43 = locale4.getDisplayLanguage(locale14);
        java.lang.String str44 = locale14.toLanguageTag();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "und" + "'", str44, "und");
    }

    @Test
    public void test07669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07669");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.clearExtensions();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("ita");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getVariant();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale12.getDisplayScript(locale16);
        boolean boolean18 = locale12.hasExtensions();
        java.util.Locale.Builder builder19 = builder9.setLocale(locale12);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.util.Locale locale28 = new java.util.Locale("Italy", "Italy");
        java.lang.String str29 = locale24.getDisplayLanguage(locale28);
        boolean boolean30 = locale24.hasExtensions();
        java.lang.String str31 = locale24.getISO3Language();
        boolean boolean32 = locale24.hasExtensions();
        java.util.Locale.Builder builder33 = builder9.setLocale(locale24);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale24);
        java.util.Locale.Builder builder35 = builder3.clear();
        java.util.Locale.Builder builder38 = builder3.setExtension('u', "German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder38.setUnicodeLocaleKeyword("\u52a0\u62ff\u5927", "org.apache.commons.math.MathException: tedesco");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test07670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07670");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'u');
        int int13 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 1);
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability(0.8290598290598294d);
        int int16 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test07671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07671");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguage("ja");
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("anglais");
        java.util.Locale.Builder builder8 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setVariant("org.apache.commons.math.MathException: inglese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: org.apache.commons.math.MathException: inglese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test07672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07672");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println((double) '4');
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        printWriter7.print("it_IT");
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = mathException15.getSuppressed();
        java.io.PrintWriter printWriter18 = printWriter7.printf(locale11, "it_IT", (java.lang.Object[]) throwableArray17);
        printWriter7.println((float) (byte) 10);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        printWriter22.write("hi!");
        printWriter7.println((java.lang.Object) printWriter22);
        java.io.PrintWriter printWriter27 = printWriter7.append('#');
        printWriter3.println((java.lang.Object) printWriter7);
        boolean boolean29 = printWriter3.checkError();
        printWriter3.print(21);
        printWriter3.flush();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07673");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 100);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) -1);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(5.836992974634979E-6d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.6500000000000139d + "'", double16 == 0.6500000000000139d);
    }

    @Test
    public void test07674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07674");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.Object obj2 = locale1.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "hi!");
    }

    @Test
    public void test07675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07675");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        char[] charArray6 = new char[] { 'x', 'a' };
        printWriter3.print(charArray6);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter15 = printWriter3.printf("en-GB", (java.lang.Object[]) throwableArray13);
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayLanguage();
        java.io.PrintStream printStream23 = new java.io.PrintStream("zh_CN");
        printStream23.print((float) (byte) -1);
        printStream23.println();
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException(throwable28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        java.lang.Throwable[] throwableArray31 = mathException29.getSuppressed();
        java.io.PrintStream printStream32 = printStream23.format("italien (Italie)", (java.lang.Object[]) throwableArray31);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.io.PrintStream printStream39 = printStream23.printf(locale33, "ja", (java.lang.Object[]) throwableArray38);
        java.io.PrintWriter printWriter40 = printWriter3.printf(locale17, "Chinesisch (Taiwan)", (java.lang.Object[]) throwableArray38);
        printWriter40.print((float) 120);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, a]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str20, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test07676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07676");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((double) 117);
        hypergeometricDistributionImpl3.setSampleSize(97);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 0);
        int int15 = hypergeometricDistributionImpl3.getPopulationSize();
        double double17 = hypergeometricDistributionImpl3.cumulativeProbability((double) 1.0f);
        int int18 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.1709401709401705d + "'", double14 == 0.1709401709401705d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
    }

    @Test
    public void test07677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07677");
        java.util.Locale locale2 = new java.util.Locale("hi!", "Italy");
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale2.getCountry();
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ITALY" + "'", str4, "ITALY");
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test07678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07678");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.setLanguage("Korean");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("kor", "chn");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: kor [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test07679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07679");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 1);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) -1);
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability((double) 0, (double) 96);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = hypergeometricDistributionImpl3.cumulativeProbability(1.8472640568670461E-7d, 0.3787956759997426d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test07680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07680");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = mathException13.getSuppressed();
        java.io.PrintStream printStream16 = printStream1.printf(locale9, "fr", (java.lang.Object[]) throwableArray15);
        printStream16.print((int) 'a');
        printStream16.flush();
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16);
        printStream20.print((long) (short) -1);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream16);
    }

    @Test
    public void test07681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07681");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.println(0.0f);
        printWriter1.write("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.print((float) (byte) -1);
        printStream11.println();
        printStream11.println();
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream11, true);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("fr");
        printWriter19.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale22.getDisplayCountry(locale26);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.io.PrintWriter printWriter33 = printWriter19.printf(locale26, "it_IT", objArray31);
        printStream17.println((java.lang.Object) "it_IT");
        printStream17.print((float) (byte) 1);
        printStream17.println((double) (short) 0);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream17, false);
        printWriter1.print((java.lang.Object) false);
        java.io.PrintStream printStream43 = new java.io.PrintStream("zh_CN");
        printStream43.println();
        java.io.PrintStream printStream46 = printStream43.append('#');
        printStream43.close();
        printStream43.close();
        printStream43.println('u');
        printWriter1.println((java.lang.Object) printStream43);
        java.io.PrintStream printStream53 = new java.io.PrintStream("zh_CN");
        printStream53.print((float) (byte) -1);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter("fr");
        printWriter57.print("it_IT");
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter62 = printWriter57.printf("fr", objArray61);
        printWriter57.println((float) 'u');
        printStream53.print((java.lang.Object) 'u');
        printStream53.println(0L);
        printStream53.print('a');
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.OutputStream) printStream53, true);
        printWriter1.println((java.lang.Object) printStream53);
        java.io.PrintStream printStream74 = printStream53.append('u');
        printStream74.println((int) 'u');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printStream74);
    }

    @Test
    public void test07682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07682");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "italiano (Italia)");
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.lang.Throwable[] throwableArray22 = mathException21.getSuppressed();
        java.io.PrintStream printStream23 = printStream15.printf("en-gb", (java.lang.Object[]) throwableArray22);
        printStream23.close();
        printStream23.println();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test07683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07683");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test07684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07684");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("eng");
        java.lang.Object[] objArray2 = mathException1.getArguments();
        java.lang.String str3 = mathException1.toString();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.MathException: eng" + "'", str3, "org.apache.commons.math.MathException: eng");
    }

    @Test
    public void test07685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07685");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        double double14 = hypergeometricDistributionImpl3.probability((int) '4');
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setSampleSize((int) (short) 10);
        int int18 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double20 = hypergeometricDistributionImpl3.probability(0.02999999999999997d);
        hypergeometricDistributionImpl3.setSampleSize((int) (byte) 10);
        int int23 = hypergeometricDistributionImpl3.getPopulationSize();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = hypergeometricDistributionImpl3.cumulativeProbability(0.999999619426224d, 0.9699999999999995d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 117 + "'", int23 == 117);
    }

    @Test
    public void test07686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07686");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'a', (int) 'a', (int) ' ');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.2991452991453134d, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = hypergeometricDistributionImpl3.cumulativeProbability(1.8472640568670461E-7d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test07687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07687");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        printStream28.println("fr-CA");
        boolean boolean32 = printStream28.checkError();
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Object[] objArray38 = mathException37.getArguments();
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        mathException37.addSuppressed((java.lang.Throwable) mathException41);
        java.lang.Throwable[] throwableArray44 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("English", (java.lang.Object[]) throwableArray44);
        java.io.PrintStream printStream46 = printStream28.printf("hi!", (java.lang.Object[]) throwableArray44);
        printStream46.println('a');
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printStream46);
    }

    @Test
    public void test07688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07688");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setSampleSize(100);
        hypergeometricDistributionImpl3.setSampleSize((int) ' ');
        double double15 = hypergeometricDistributionImpl3.probability((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.27350427350427164d + "'", double15 == 0.27350427350427164d);
    }

    @Test
    public void test07689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07689");
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("hi!", objArray1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("fr");
        printWriter6.print("it_IT");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray18);
        java.io.PrintWriter printWriter20 = printWriter6.printf(locale13, "it_IT", objArray18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray18);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException21);
        java.lang.Object[] objArray23 = mathException21.getArguments();
        java.lang.Object[] objArray24 = mathException21.getArguments();
        java.io.PrintStream printStream27 = new java.io.PrintStream("zh_CN");
        printStream27.print((float) (byte) -1);
        printStream27.println();
        printStream27.print("ita");
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.util.Locale locale35 = locale33.stripExtensions();
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintStream printStream42 = printStream27.printf(locale35, "fr", (java.lang.Object[]) throwableArray41);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.lang.Object[] objArray46 = mathException45.getArguments();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray41, (java.lang.Throwable) mathException45);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        java.lang.Object[] objArray51 = mathException50.getArguments();
        mathException45.addSuppressed((java.lang.Throwable) mathException50);
        mathException21.addSuppressed((java.lang.Throwable) mathException50);
        mathException2.addSuppressed((java.lang.Throwable) mathException50);
        java.lang.String str55 = mathException50.toString();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str55, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test07690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07690");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter6.print((float) (byte) 100);
        printWriter6.print("Italy");
        printWriter6.close();
        printWriter6.print((int) 'u');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("fr");
        printWriter15.print("it_IT");
        java.util.Locale locale18 = java.util.Locale.ROOT;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale18.getDisplayName(locale20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale18.getDisplayCountry(locale22);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", objArray27);
        java.io.PrintWriter printWriter29 = printWriter15.printf(locale22, "it_IT", objArray27);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.print("it_IT");
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        java.io.PrintWriter printWriter43 = printWriter32.printf(locale36, "it_IT", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter15.format("it_IT", (java.lang.Object[]) throwableArray42);
        printWriter44.println();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.lang.String str49 = locale46.getVariant();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale46.getDisplayScript(locale50);
        java.util.Locale locale54 = new java.util.Locale("Italy", "Italy");
        java.lang.String str55 = locale50.getDisplayLanguage(locale54);
        boolean boolean56 = locale50.hasExtensions();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException();
        java.lang.String str60 = mathException59.getPattern();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException59);
        java.lang.Object[] objArray62 = mathException59.getArguments();
        java.io.PrintWriter printWriter63 = printWriter44.format(locale50, "cinese", objArray62);
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder66 = builder64.setLanguageTag("ita");
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = locale67.getDisplayCountry(locale68);
        java.lang.String str70 = locale67.getVariant();
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.lang.String str72 = locale67.getDisplayScript(locale71);
        boolean boolean73 = locale67.hasExtensions();
        java.util.Locale.Builder builder74 = builder64.setLocale(locale67);
        printWriter63.print((java.lang.Object) builder64);
        printWriter6.print((java.lang.Object) builder64);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(locale54.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test07691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07691");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguage("ja");
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale10 = new java.util.Locale("fr", "fr");
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale.setDefault(locale10);
        java.util.Locale locale16 = new java.util.Locale("", "", "");
        java.lang.String str17 = locale10.getDisplayVariant(locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.lang.String str19 = locale16.getCountry();
        java.util.Locale.Builder builder20 = builder7.setLocale(locale16);
        java.util.Locale.Builder builder21 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder21.setUnicodeLocaleKeyword("Chinese", "CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Chinese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test07692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07692");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println(false);
        printWriter3.println((long) 'x');
        java.io.PrintWriter printWriter9 = printWriter3.append('4');
        java.io.PrintStream printStream12 = new java.io.PrintStream("zh_CN");
        printStream12.println();
        java.io.PrintStream printStream15 = printStream12.append('#');
        printStream12.close();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream12.write(byteArray20);
        printStream12.println((int) (byte) -1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintWriter printWriter26 = printWriter24.append((java.lang.CharSequence) "ja");
        printWriter26.println(true);
        printWriter26.write("allemand");
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.String str34 = locale31.getVariant();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale31.getDisplayScript(locale35);
        java.util.Locale locale37 = locale35.stripExtensions();
        java.util.Set<java.lang.Character> charSet38 = locale35.getExtensionKeys();
        java.lang.String str39 = locale35.getISO3Country();
        java.io.PrintStream printStream43 = new java.io.PrintStream("zh_CN");
        printStream43.print((float) (byte) -1);
        printStream43.println();
        printStream43.print("ita");
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.util.Locale locale51 = locale49.stripExtensions();
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        java.lang.Throwable[] throwableArray56 = mathException55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = mathException55.getSuppressed();
        java.io.PrintStream printStream58 = printStream43.printf(locale51, "fr", (java.lang.Object[]) throwableArray57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray57);
        java.io.PrintWriter printWriter60 = printWriter26.printf(locale35, "DE", (java.lang.Object[]) throwableArray57);
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("hi!", objArray63);
        java.lang.Throwable[] throwableArray65 = mathException64.getSuppressed();
        java.lang.Object[] objArray66 = mathException64.getArguments();
        java.io.PrintWriter printWriter67 = printWriter60.format("Canada", objArray66);
        java.io.PrintWriter printWriter68 = printWriter9.printf("deu (ANGLAIS,CA)", objArray66);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        printWriter9.println("org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CAN" + "'", str39, "CAN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter68);
    }

    @Test
    public void test07693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07693");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.lang.Class<?> wildcardClass3 = locale0.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CN" + "'", str1, "CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test07694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07694");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u30a4\u30ae\u30ea\u30b9)");
    }

    @Test
    public void test07695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07695");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream1.write(byteArray10);
        printStream1.print(false);
        printStream1.println("Italy");
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.println((float) (-1));
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.println();
        java.io.PrintStream printStream24 = printStream21.append('#');
        printStream21.close();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream21.write(byteArray30);
        printStream17.write(byteArray30);
        printStream1.write(byteArray30);
        printStream1.println((double) (-1));
        java.io.PrintStream printStream36 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.lang.CharSequence charSequence37 = null;
        java.io.PrintStream printStream38 = printStream36.append(charSequence37);
        printStream36.println("ANGLAIS");
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream36);
        printWriter41.println(1.237301700029129E-30d);
        printWriter41.println();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream38);
    }

    @Test
    public void test07696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07696");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 1);
        double double13 = hypergeometricDistributionImpl3.probability(0.7008547008546866d);
        double double15 = hypergeometricDistributionImpl3.probability((double) '#');
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability(3, 9);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test07697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07697");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("japonais");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test07698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07698");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream4.println((int) 'a');
        printStream4.print((double) 0L);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        printStream4.println((float) 10L);
        java.io.PrintStream printStream14 = printStream4.append('x');
        printStream4.print('#');
        printStream4.println((long) 17);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            printStream4.write(byteArray21, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 10]");
    }

    @Test
    public void test07699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07699");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println((double) 0L);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter11);
        printWriter12.write("cinese (Taiwan)", 12, 2);
    }

    @Test
    public void test07700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07700");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(1L);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter19.print((long) '#');
        printWriter19.print((long) 117);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test07701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07701");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.println((int) (byte) -1);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter15 = printWriter13.append((java.lang.CharSequence) "ja");
        printWriter15.println(true);
        printWriter15.write("allemand");
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.util.Locale locale26 = locale24.stripExtensions();
        java.util.Set<java.lang.Character> charSet27 = locale24.getExtensionKeys();
        java.lang.String str28 = locale24.getISO3Country();
        java.io.PrintStream printStream32 = new java.io.PrintStream("zh_CN");
        printStream32.print((float) (byte) -1);
        printStream32.println();
        printStream32.print("ita");
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale40 = locale38.stripExtensions();
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = mathException44.getSuppressed();
        java.io.PrintStream printStream47 = printStream32.printf(locale40, "fr", (java.lang.Object[]) throwableArray46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray46);
        java.io.PrintWriter printWriter49 = printWriter15.printf(locale24, "DE", (java.lang.Object[]) throwableArray46);
        java.lang.String str50 = locale24.getDisplayLanguage();
        java.util.Locale.setDefault(locale24);
        boolean boolean52 = locale24.hasExtensions();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CAN" + "'", str28, "CAN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printWriter49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "inglese" + "'", str50, "inglese");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test07702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07702");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter11 = printWriter9.append(' ');
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("fr");
        printWriter14.print("it_IT");
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale17.getDisplayCountry(locale21);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        java.io.PrintWriter printWriter28 = printWriter14.printf(locale21, "it_IT", objArray26);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintWriter printWriter42 = printWriter31.printf(locale35, "it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter43 = printWriter14.format("it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter44 = printWriter11.format("zh_CN", (java.lang.Object[]) throwableArray41);
        java.io.PrintStream printStream46 = new java.io.PrintStream("zh_CN");
        printStream46.print((float) (byte) -1);
        char[] charArray51 = new char[] { 'x', 'u' };
        printStream46.println(charArray51);
        printWriter44.print(charArray51);
        printStream1.print(charArray51);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream57 = new java.io.PrintStream("zh_CN");
        printStream57.println();
        java.io.PrintStream printStream60 = printStream57.append('#');
        printStream57.close();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream57.write(byteArray65);
        printStream1.write(byteArray65);
        printStream1.println();
        printStream1.println(35);
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder72 = builder71.clearExtensions();
        java.util.Locale locale73 = builder72.build();
        java.util.Locale.Builder builder76 = builder72.setExtension('x', "italien");
        java.util.Locale.Builder builder78 = builder72.setVariant("");
        java.util.Locale locale79 = builder72.build();
        printStream1.print((java.lang.Object) builder72);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[x, u]");
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
    }

    @Test
    public void test07703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07703");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("zh_CN", objArray17);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl24 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int25 = hypergeometricDistributionImpl24.getPopulationSize();
        double double27 = hypergeometricDistributionImpl24.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl24.setSampleSize(0);
        printWriter1.print((java.lang.Object) hypergeometricDistributionImpl24);
        int int31 = hypergeometricDistributionImpl24.getSampleSize();
        double double33 = hypergeometricDistributionImpl24.probability((int) (short) 0);
        int int34 = hypergeometricDistributionImpl24.getSampleSize();
        int int35 = hypergeometricDistributionImpl24.getPopulationSize();
        int int36 = hypergeometricDistributionImpl24.getSampleSize();
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 117 + "'", int35 == 117);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test07704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07704");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(10);
        java.io.PrintWriter printWriter22 = printWriter1.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(false);
        java.io.PrintWriter printWriter30 = printWriter1.append((java.lang.CharSequence) "Italy", 0, 0);
        printWriter30.flush();
        printWriter30.print(false);
        printWriter30.print((int) (byte) 0);
        java.io.PrintWriter printWriter37 = printWriter30.append((java.lang.CharSequence) "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale38.getScript();
        java.lang.String str40 = locale38.getDisplayScript();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("fr");
        printWriter43.print("it_IT");
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter48 = printWriter43.printf("fr", objArray47);
        printWriter48.print((float) (byte) 100);
        java.io.PrintWriter printWriter52 = printWriter48.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter54 = printWriter52.append((java.lang.CharSequence) "German");
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter58 = printWriter56.append(' ');
        char[] charArray61 = new char[] { 'x', 'a' };
        printWriter58.print(charArray61);
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        java.lang.Throwable[] throwableArray68 = mathException67.getSuppressed();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter70 = printWriter58.printf("en-GB", (java.lang.Object[]) throwableArray68);
        printWriter58.println();
        printWriter52.println((java.lang.Object) printWriter58);
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        java.lang.Object[] objArray79 = mathException77.getArguments();
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("fr-CA");
        java.lang.Object[] objArray83 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("hi!", objArray83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        mathException81.addSuppressed((java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\u5fb7\u6587", objArray79, (java.lang.Throwable) mathException81);
        java.lang.String str89 = mathException88.getPattern();
        java.lang.Object[] objArray90 = mathException88.getArguments();
        java.io.PrintWriter printWriter91 = printWriter58.printf("Franz\366sisch", objArray90);
        java.io.PrintWriter printWriter92 = printWriter37.printf(locale38, "de_DE", objArray90);
        printWriter92.print((long) (short) 100);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[x, a]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u5fb7\u6587" + "'", str89, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertNotNull(printWriter91);
        org.junit.Assert.assertNotNull(printWriter92);
    }

    @Test
    public void test07705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07705");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("italien (Italie)");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("Japanese (ja)", (java.lang.Object[]) throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test07706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07706");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = new java.util.Locale("Italy", "anglais");
        java.lang.String str7 = locale1.getDisplayName(locale6);
        java.lang.String str8 = locale1.getDisplayName();
        java.lang.String str9 = locale1.getLanguage();
        java.util.Locale locale13 = new java.util.Locale("", "", "");
        java.util.Locale locale16 = new java.util.Locale("hi!", "Italy");
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.lang.String str20 = locale16.getScript();
        java.util.Set<java.lang.String> strSet21 = locale16.getUnicodeLocaleAttributes();
        java.io.PrintStream printStream23 = new java.io.PrintStream("zh_CN");
        printStream23.print((float) (byte) -1);
        printStream23.println();
        printStream23.println();
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream23, true);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale34 = java.util.Locale.ROOT;
        boolean boolean35 = locale34.hasExtensions();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale34.getDisplayName(locale36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale34.getDisplayCountry(locale38);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.io.PrintWriter printWriter45 = printWriter31.printf(locale38, "it_IT", objArray43);
        printStream29.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream48 = printStream29.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        printStream29.println("");
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder52.clearExtensions();
        java.util.Locale.Builder builder55 = builder53.setLanguageTag("fr");
        java.util.Locale locale56 = builder55.build();
        java.util.Locale.Builder builder57 = builder55.clearExtensions();
        printStream29.print((java.lang.Object) builder57);
        java.util.Locale.Builder builder59 = builder57.clear();
        java.util.Locale.Builder builder60 = builder59.clear();
        java.util.Locale locale61 = builder60.build();
        java.util.Locale locale62 = builder60.build();
        java.lang.String str63 = locale16.getDisplayVariant(locale62);
        java.lang.String str64 = locale1.getDisplayLanguage(locale16);
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italy" + "'", str3, "Italy");
        org.junit.Assert.assertEquals(locale6.toString(), "italy_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi! (ITALY)" + "'", str19, "hi! (ITALY)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test07707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07707");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("IT");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
    }

    @Test
    public void test07708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07708");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        printStream1.println(0L);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println(false);
        java.io.PrintStream printStream20 = new java.io.PrintStream("zh_CN");
        printStream20.println();
        java.io.PrintStream printStream23 = printStream20.append('#');
        printStream20.close();
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream20.write(byteArray29);
        printStream20.print(false);
        printStream20.print("org.apache.commons.math.MathException: fr");
        printStream20.println(0.0f);
        java.io.PrintStream printStream38 = new java.io.PrintStream("zh_CN");
        printStream38.println();
        java.io.PrintStream printStream41 = printStream38.append('#');
        printStream38.close();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream38.write(byteArray46);
        printStream38.write((int) 'a');
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream38);
        java.io.PrintStream printStream52 = printStream38.append((java.lang.CharSequence) "italiano (Italia)");
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream52);
        printStream52.flush();
        printStream52.println((-1));
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) -1, (byte) -1, (byte) -1, (byte) 0 };
        printStream52.write(byteArray62, (int) (short) 0, 31);
        printStream20.write(byteArray62, (int) ' ', (int) (short) 100);
        printStream1.write(byteArray62);
        java.io.PrintStream printStream70 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, -1, -1, -1, 0]");
    }

    @Test
    public void test07709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07709");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream1.write(byteArray10);
        printStream1.print(false);
        printStream1.println("Italy");
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.println((float) (-1));
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.println();
        java.io.PrintStream printStream24 = printStream21.append('#');
        printStream21.close();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream21.write(byteArray30);
        printStream17.write(byteArray30);
        printStream1.write(byteArray30);
        printStream1.write(10);
        printStream1.println(false);
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale.Builder builder41 = builder39.setLanguageTag("fr");
        java.util.Locale.Builder builder43 = builder41.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale.Builder builder45 = builder41.clear();
        java.util.Locale locale46 = builder41.build();
        java.util.Locale locale47 = builder41.build();
        java.util.Locale.Builder builder48 = builder41.clearExtensions();
        printStream1.println((java.lang.Object) builder48);
        printStream1.println();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "org.apache.commons.math.MathException: italien (Italie)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: italien (Italie)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test07710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07710");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("francese (Canada)");
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale15 = new java.util.Locale("English", "", "chinois");
        java.lang.String str16 = locale11.getDisplayName(locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str22 = locale15.getDisplayName(locale21);
        java.util.Locale.setDefault(category0, locale15);
        java.lang.String str24 = locale15.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FR" + "'", str6, "FR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale15.toString(), "english__chinois");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italian (Italy)" + "'", str16, "Italian (Italy)");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "english (chinois)" + "'", str22, "english (chinois)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test07711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07711");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("CN");
        printWriter1.println();
        java.util.Locale locale5 = new java.util.Locale("fr", "fr");
        java.lang.String str6 = locale5.getDisplayScript();
        boolean boolean7 = locale5.hasExtensions();
        java.io.PrintStream printStream10 = new java.io.PrintStream("zh_CN");
        printStream10.print((float) (byte) -1);
        printStream10.println();
        printStream10.println();
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream10, true);
        printStream10.println();
        printStream10.print((-1));
        printStream10.print((double) '#');
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.print("it_IT");
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale28.getDisplayCountry(locale32);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.io.PrintWriter printWriter39 = printWriter25.printf(locale32, "it_IT", objArray37);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("", objArray37);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException40);
        java.lang.Object[] objArray42 = mathException40.getArguments();
        java.io.PrintStream printStream43 = printStream10.format("italiano (Italia)", objArray42);
        java.io.PrintStream printStream45 = printStream10.append('a');
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray50);
        java.lang.Object[] objArray52 = mathException51.getArguments();
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        java.lang.Throwable[] throwableArray56 = mathException55.getSuppressed();
        mathException51.addSuppressed((java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray58 = mathException51.getSuppressed();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException();
        java.lang.String str60 = mathException59.getPattern();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray58, (java.lang.Throwable) mathException59);
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("fr", objArray64);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("it_IT", (java.lang.Object[]) throwableArray58, (java.lang.Throwable) mathException66);
        java.io.PrintStream printStream68 = printStream10.format("", (java.lang.Object[]) throwableArray58);
        java.io.PrintWriter printWriter69 = printWriter1.printf(locale5, "it_it", (java.lang.Object[]) throwableArray58);
        printWriter69.print((double) 100.0f);
        printWriter69.flush();
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test07712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07712");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.println(0.0f);
        printWriter1.write("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.print((float) (byte) -1);
        printStream11.println();
        printStream11.println();
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream11, true);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("fr");
        printWriter19.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale22.getDisplayCountry(locale26);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.io.PrintWriter printWriter33 = printWriter19.printf(locale26, "it_IT", objArray31);
        printStream17.println((java.lang.Object) "it_IT");
        printStream17.print((float) (byte) 1);
        printStream17.println((double) (short) 0);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream17, false);
        printWriter1.print((java.lang.Object) false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        // The following exception was thrown during execution in test generation
        try {
            printWriter42.write("English", 35, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 70");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(printWriter33);
    }

    @Test
    public void test07713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07713");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getCountry();
        java.util.Locale locale4 = new java.util.Locale("org.apache.commons.math.MathException");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.lang.String str7 = locale4.getDisplayName();
        java.lang.String str8 = locale4.getCountry();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale9.getDisplayCountry(locale10);
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale9.getDisplayScript(locale13);
        java.lang.String str15 = locale4.getDisplayVariant(locale9);
        java.util.Locale locale19 = new java.util.Locale("eng", "ITALIANO (ITALIA)", "ANGLAIS");
        java.lang.String str20 = locale9.getDisplayScript(locale19);
        java.lang.String str21 = locale9.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "org.apache.commons.math.mathexception");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.math.mathexception" + "'", str7, "org.apache.commons.math.mathexception");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale19.toString(), "eng_ITALIANO (ITALIA)_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test07714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07714");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        printStream1.println(0);
        java.io.PrintStream printStream11 = printStream1.append('x');
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getVariant();
        java.lang.String str17 = locale15.toLanguageTag();
        java.lang.String str18 = locale14.getDisplayName(locale15);
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("ita");
        printStream11.print((java.lang.Object) "ita");
        printStream11.println(false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "de" + "'", str17, "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinesisch (Taiwan)" + "'", str18, "Chinesisch (Taiwan)");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test07715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07715");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        printStream1.print((-1));
        java.io.PrintStream printStream12 = new java.io.PrintStream("zh_CN");
        printStream12.println();
        java.io.PrintStream printStream15 = printStream12.append('#');
        printStream12.close();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream12.write(byteArray20);
        printStream1.write(byteArray20);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("italien");
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("fr");
        printWriter28.print("it_IT");
        java.util.Locale locale31 = java.util.Locale.ROOT;
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale31.getDisplayName(locale33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale31.getDisplayCountry(locale35);
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        java.io.PrintWriter printWriter42 = printWriter28.printf(locale35, "it_IT", objArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", objArray40);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException43);
        java.lang.Object[] objArray45 = mathException43.getArguments();
        java.io.PrintStream printStream46 = printStream1.printf(locale24, "it_IT", objArray45);
        java.lang.String str47 = locale24.getDisplayScript();
        boolean boolean48 = locale24.hasExtensions();
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "italien");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07716");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.print(10);
        java.io.PrintWriter printWriter22 = printWriter1.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(false);
        java.io.PrintWriter printWriter30 = printWriter1.append((java.lang.CharSequence) "Italy", 0, 0);
        printWriter1.println((double) (short) 0);
        printWriter1.write("english", (int) (short) 10, 0);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.lang.String str39 = locale37.getDisplayVariant();
        java.lang.String str40 = locale37.getDisplayName();
        java.io.PrintStream printStream43 = new java.io.PrintStream("zh_CN");
        printStream43.println();
        java.io.PrintStream printStream46 = printStream43.append('#');
        printStream43.close();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream43.write(byteArray51);
        printStream43.write((int) 'a');
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream43);
        java.io.PrintStream printStream57 = printStream43.append((java.lang.CharSequence) "italiano (Italia)");
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter((java.io.OutputStream) printStream57, false);
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", objArray62);
        java.lang.Throwable[] throwableArray64 = mathException63.getSuppressed();
        java.io.PrintStream printStream65 = printStream57.printf("en-gb", (java.lang.Object[]) throwableArray64);
        java.io.PrintWriter printWriter66 = printWriter1.printf(locale37, "Chinesisch (Taiwan)", (java.lang.Object[]) throwableArray64);
        printWriter1.flush();
        printWriter1.print((double) 100L);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Korean" + "'", str40, "Korean");
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(printWriter66);
    }

    @Test
    public void test07717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07717");
        java.util.Locale locale3 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        printWriter7.print("it_IT");
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = mathException15.getSuppressed();
        java.io.PrintWriter printWriter18 = printWriter7.printf(locale11, "it_IT", (java.lang.Object[]) throwableArray17);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.print("it_IT");
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale24.getDisplayCountry(locale28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.io.PrintWriter printWriter35 = printWriter21.printf(locale28, "it_IT", objArray33);
        java.io.PrintWriter printWriter36 = printWriter5.printf(locale11, "fr", objArray33);
        java.lang.String str37 = locale3.getDisplayVariant(locale11);
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale3.getDisplayVariant(locale38);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale41.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale41.getDisplayCountry(locale45);
        java.lang.String str48 = locale3.getDisplayScript(locale41);
        java.lang.String str49 = locale41.getDisplayCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "chinois" + "'", str37, "chinois");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "chinois" + "'", str40, "chinois");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test07718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07718");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.write((int) (short) -1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream14 = printStream1.append((java.lang.CharSequence) "italie", (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07719");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        printStream26.print(false);
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale34 = new java.util.Locale("zh_CN", "English", "it_IT");
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = locale36.toLanguageTag();
        java.lang.String str38 = locale34.getDisplayVariant(locale36);
        java.lang.String str39 = locale29.getDisplayCountry(locale36);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        java.io.PrintStream printStream44 = printStream26.printf(locale36, "Japanisch", objArray42);
        printStream26.print((long) (-1));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Italian (Italy)" + "'", str30, "Italian (Italy)");
        org.junit.Assert.assertEquals(locale34.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en-GB" + "'", str37, "en-GB");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it,IT" + "'", str38, "it,IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Italy" + "'", str39, "Italy");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(printStream44);
    }

    @Test
    public void test07720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07720");
        java.util.Locale locale1 = new java.util.Locale("ANGLAIS");
        java.lang.String str2 = locale1.getVariant();
        java.lang.String str3 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "anglais");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test07721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07721");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        printStream1.print((float) 'u');
        printStream1.println((long) '#');
        java.lang.CharSequence charSequence10 = null;
        java.io.PrintStream printStream11 = printStream1.append(charSequence10);
        printStream11.println(1.0f);
        java.io.PrintStream printStream15 = printStream11.append('x');
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        printStream16.println("franz\366sisch (frankreich) (Korean)");
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16, false);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test07722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07722");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.print((float) 117);
        printStream1.flush();
        org.junit.Assert.assertNotNull(printStream4);
    }

    @Test
    public void test07723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07723");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(117);
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, 0.0d);
        double double11 = hypergeometricDistributionImpl3.probability((double) (byte) 10);
        int int13 = hypergeometricDistributionImpl3.inverseCumulativeProbability(7.009401437221889E-12d);
        int int14 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.7008547008546866d + "'", double9 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
    }

    @Test
    public void test07724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07724");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println((int) (short) 0);
        printWriter30.print(1L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter30, false);
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("fr");
        printWriter39.write("hi!");
        printWriter39.println((java.lang.Object) (-1L));
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getDisplayName();
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.lang.Object[] objArray50 = mathException49.getArguments();
        java.io.PrintWriter printWriter51 = printWriter39.format(locale44, "anglais", objArray50);
        java.util.Locale.setDefault(category37, locale44);
        java.util.Locale locale53 = java.util.Locale.getDefault(category37);
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter62 = printWriter60.append(' ');
        char[] charArray65 = new char[] { 'x', 'a' };
        printWriter62.print(charArray65);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter("fr");
        printWriter69.println();
        printWriter69.write("Italy", 0, (int) (short) -1);
        printWriter69.print((long) '4');
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException(throwable78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException79);
        java.lang.Throwable[] throwableArray81 = mathException79.getSuppressed();
        java.io.PrintWriter printWriter82 = printWriter69.format("\u82f1\u8a9e", (java.lang.Object[]) throwableArray81);
        java.io.PrintWriter printWriter83 = printWriter62.format("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray81);
        java.io.PrintWriter printWriter84 = printWriter36.format(locale53, "de_DE", (java.lang.Object[]) throwableArray81);
        java.lang.String str85 = locale53.getDisplayName();
        java.lang.String str86 = locale53.toString();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + category37 + "' != '" + java.util.Locale.Category.FORMAT + "'", category37.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian (Italy)" + "'", str45, "Italian (Italy)");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str57, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[x, a]");
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(printWriter84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Italian (Italy)" + "'", str85, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "it_IT" + "'", str86, "it_IT");
    }

    @Test
    public void test07725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07725");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("anglais (Canada)", "France");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: France");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07726");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = mathException13.getSuppressed();
        java.io.PrintStream printStream16 = printStream1.printf(locale9, "fr", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("zh_CN");
        printStream18.print((float) (byte) -1);
        char[] charArray23 = new char[] { 'x', 'u' };
        printStream18.println(charArray23);
        printStream18.println(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 10 };
        printStream18.write(byteArray31);
        printStream16.write(byteArray31);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream35.print((double) (-1L));
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream35);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream42 = printStream38.append((java.lang.CharSequence) "ZH", 17, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 35");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[x, u]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 0, 10]");
    }

    @Test
    public void test07727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07727");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        printStream1.print((-1));
        printStream1.print((double) '#');
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        printWriter16.print("it_IT");
        java.util.Locale locale19 = java.util.Locale.ROOT;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale19.getDisplayName(locale21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale19.getDisplayCountry(locale23);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.io.PrintWriter printWriter30 = printWriter16.printf(locale23, "it_IT", objArray28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", objArray28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Object[] objArray33 = mathException31.getArguments();
        java.io.PrintStream printStream34 = printStream1.format("italiano (Italia)", objArray33);
        java.io.PrintStream printStream36 = printStream1.append('a');
        printStream1.println((long) (byte) 1);
        printStream1.println("Italy");
        java.io.PrintStream printStream42 = printStream1.append('u');
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream42);
        printWriter43.print((-1L));
        printWriter43.print('u');
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream42);
    }

    @Test
    public void test07728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07728");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("CHN");
        java.lang.Object obj2 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "chn");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "chn");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "chn");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "chn");
    }

    @Test
    public void test07729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07729");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((double) 0, (double) (short) 10);
        int int11 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double13 = hypergeometricDistributionImpl3.probability(10);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(0.1409979688501311d, (double) 10.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2991452991453134d + "'", double16 == 0.2991452991453134d);
    }

    @Test
    public void test07730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07730");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        printStream1.print((java.lang.Object) locale11);
        printStream1.write(3);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test07731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07731");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.print("it_IT");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter7 = printWriter2.printf("fr", objArray6);
        printWriter7.print((float) (byte) 100);
        printWriter7.print("Italy");
        printWriter7.close();
        printWriter7.println(0);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter22 = printWriter17.printf("fr", objArray21);
        printWriter22.print((float) (byte) 100);
        printWriter22.write("zh");
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray33);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Object[] objArray38 = mathException37.getArguments();
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        mathException37.addSuppressed((java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("tedesco", (java.lang.Object[]) throwableArray33, (java.lang.Throwable) mathException44);
        java.io.PrintWriter printWriter46 = printWriter22.printf("org.apache.commons.math.mathexception", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter47 = printWriter7.format("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", (java.lang.Object[]) throwableArray33);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("francese (Francia)", (java.lang.Object[]) throwableArray33);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(printWriter7);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test07732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07732");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        printWriter1.println((float) (short) 1);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder8.setLanguage("ja");
        java.util.Locale.Builder builder13 = builder8.setExtension('u', "zh_CN");
        java.util.Locale.Builder builder14 = builder8.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.setDefault(locale15);
        printWriter1.println((java.lang.Object) locale15);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
    }

    @Test
    public void test07733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07733");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setSampleSize((int) (byte) 100);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) 10L);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test07734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07734");
        java.util.Locale locale3 = new java.util.Locale("italien (Italie)", "allemand (Allemagne)", "\uc601\uc5b4");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for italien (italie)");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test07735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07735");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream1.write(byteArray10);
        printStream1.print(false);
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.print((float) (byte) -1);
        printStream17.println();
        printStream17.print("ita");
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.util.Locale locale25 = locale23.stripExtensions();
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.lang.Throwable[] throwableArray30 = mathException29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = mathException29.getSuppressed();
        java.io.PrintStream printStream32 = printStream17.printf(locale25, "fr", (java.lang.Object[]) throwableArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray31);
        java.io.PrintStream printStream34 = printStream1.format("it_IT", (java.lang.Object[]) throwableArray31);
        printStream34.close();
        java.io.PrintStream printStream37 = printStream34.append((java.lang.CharSequence) "und");
        printStream37.println((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream37, true, "Cina");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Cina");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printStream37);
    }

    @Test
    public void test07736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07736");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("CHN");
        printWriter1.println(31);
    }

    @Test
    public void test07737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07737");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale10.getCountry();
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale10, locale13, locale14, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Collection<java.util.Locale> localeCollection26 = null;
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection26);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.String str32 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale33.getCountry();
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Locale locale41 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale33, locale36, locale37, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap47);
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strSet50);
        java.util.Collection<java.lang.String> strCollection52 = null;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags(languageRangeList48, strCollection52);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList53);
    }

    @Test
    public void test07738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07738");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter15.print((double) 100L);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale18.getVariant();
        java.lang.String str22 = locale18.getCountry();
        java.io.PrintStream printStream25 = new java.io.PrintStream("zh_CN");
        printStream25.print((float) (byte) -1);
        printStream25.println();
        printStream25.print("ita");
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale33 = locale31.stripExtensions();
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.io.PrintStream printStream40 = printStream25.printf(locale33, "fr", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter41 = printWriter15.format(locale18, "fra", (java.lang.Object[]) throwableArray39);
        printWriter15.print((double) '#');
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter15, true);
        printWriter15.println((double) 32);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
    }

    @Test
    public void test07739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07739");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        printStream1.print((int) (short) 0);
        printStream1.println((float) ' ');
        printStream1.println(0.9760159905433325d);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
    }

    @Test
    public void test07740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07740");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println("hi!");
        printStream1.print(false);
        printStream1.write((int) 'a');
        printStream1.println((java.lang.Object) 'x');
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.println();
        java.io.PrintStream printStream20 = printStream17.append('#');
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        printStream20.println('#');
        printStream20.println();
        printStream20.print("italien (Italie)");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        printStream20.print(1.0d);
        printStream20.write((int) '4');
        printStream20.println(0.7008547008546866d);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        java.io.PrintStream printStream36 = new java.io.PrintStream("zh_CN");
        printStream36.println();
        java.io.PrintStream printStream39 = printStream36.append('#');
        printStream39.println((int) 'a');
        printStream39.print(' ');
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter48 = printWriter46.append(' ');
        printWriter46.println(false);
        printWriter46.println('x');
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("fr");
        printWriter55.write("hi!");
        printWriter55.println((java.lang.Object) (-1L));
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.lang.String str61 = locale60.getDisplayName();
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        java.lang.Object[] objArray66 = mathException65.getArguments();
        java.io.PrintWriter printWriter67 = printWriter55.format(locale60, "anglais", objArray66);
        java.io.PrintWriter printWriter68 = printWriter46.format("italiano (Italia)", objArray66);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter72 = printWriter70.append(' ');
        printWriter72.println((double) '4');
        char[] charArray80 = new char[] { '4', ' ', 'x', 'u', 'a' };
        printWriter72.print(charArray80);
        printWriter68.println(charArray80);
        printWriter44.print(charArray80);
        printStream20.print(charArray80);
        printStream1.print(charArray80);
        java.io.PrintWriter printWriter87 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.print("en-US");
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u610f\u5927\u5229\u6587\u610f\u5927\u5229)" + "'", str61, "\u610f\u5927\u5229\u6587\u610f\u5927\u5229)");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "4 xua");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "4 xua");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[4,  , x, u, a]");
    }

    @Test
    public void test07741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07741");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u52a0\u62ff\u5927 (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FR,german)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???(org.apache.commons.math.mathexception:fr");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07742");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException(throwable1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException(throwable1);
        java.lang.String str4 = mathException3.getPattern();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: English", (java.lang.Throwable) mathException3);
        java.lang.String str6 = mathException5.getPattern();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.Throwable[] throwableArray8 = mathException5.getSuppressed();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.MathException: English" + "'", str6, "org.apache.commons.math.MathException: English");
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test07743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07743");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italienisch", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=italienisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07744");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        boolean boolean9 = printWriter1.checkError();
        printWriter1.println();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07745");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ita");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter6 = printWriter4.append(' ');
        printWriter4.println(false);
        printWriter4.println('x');
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        printWriter13.write("hi!");
        printWriter13.println((java.lang.Object) (-1L));
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        java.io.PrintWriter printWriter25 = printWriter13.format(locale18, "anglais", objArray24);
        java.io.PrintWriter printWriter26 = printWriter4.format("italiano (Italia)", objArray24);
        java.io.PrintStream printStream27 = printStream1.printf("it_IT", objArray24);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        mathException38.addSuppressed((java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("tedesco", (java.lang.Object[]) throwableArray34, (java.lang.Throwable) mathException45);
        java.lang.Object[] objArray47 = mathException46.getArguments();
        java.io.PrintStream printStream48 = printStream27.format("Frankreich", objArray47);
        printStream48.print((long) 2);
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u610f\u5927\u5229\u6587\u610f\u5927\u5229)" + "'", str19, "\u610f\u5927\u5229\u6587\u610f\u5927\u5229)");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test07746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07746");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        int int9 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 10);
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability(100.0d);
        int int14 = hypergeometricDistributionImpl3.getSampleSize();
        double double17 = hypergeometricDistributionImpl3.cumulativeProbability((double) 1.0f, (double) 117);
        hypergeometricDistributionImpl3.setSampleSize(120);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9760159905433325d + "'", double17 == 0.9760159905433325d);
    }

    @Test
    public void test07747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07747");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("english");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Collection<java.util.Locale> localeCollection5 = null;
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, localeCollection5);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Collection<java.util.Locale> localeCollection17 = null;
        java.util.Locale locale18 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, localeCollection17);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.lang.String str23 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale24.getCountry();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.util.Locale locale32 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale24, locale27, locale28, locale32 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList34);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Collection<java.util.Locale> localeCollection40 = null;
        java.util.Locale locale41 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, localeCollection40);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str49 = locale47.getCountry();
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.util.Locale locale55 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale47, locale50, locale51, locale55 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter(languageRangeList13, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale locale62 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap63);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertNotNull(languageRangeList64);
    }

    @Test
    public void test07748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07748");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        double double14 = hypergeometricDistributionImpl3.probability((int) '4');
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d);
        hypergeometricDistributionImpl3.setPopulationSize((int) '4');
        int int19 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int20 = hypergeometricDistributionImpl3.getSampleSize();
        double double22 = hypergeometricDistributionImpl3.probability(0.1409979688501311d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.1709401709401705d + "'", double16 == 0.1709401709401705d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test07749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07749");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getDisplayLanguage();
        boolean boolean4 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = locale0.stripExtensions();
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test07750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07750");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("zh_CN", 0.8547008547008546d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=zh_cn");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07751");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter5 = printWriter3.append(' ');
        char[] charArray8 = new char[] { 'x', 'a' };
        printWriter5.print(charArray8);
        printStream1.print(charArray8);
        printStream1.println(false);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter13.println(true);
        printWriter13.write((int) (byte) 1);
        printWriter13.print(2.43567216663487E-5d);
        printWriter13.print((long) (short) 0);
        org.junit.Assert.assertNotNull(printWriter5);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[x, a]");
    }

    @Test
    public void test07752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07752");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 10);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) -1);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(117);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability(0);
        int int19 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.023984009456667447d + "'", double18 == 0.023984009456667447d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
    }

    @Test
    public void test07753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07753");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 1);
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0, (int) (byte) 1);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 100);
        int int18 = hypergeometricDistributionImpl3.getSampleSize();
        double double20 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'a');
        double double22 = hypergeometricDistributionImpl3.cumulativeProbability(34);
        double double24 = hypergeometricDistributionImpl3.cumulativeProbability(2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9986450715497108d + "'", double22 == 0.9986450715497108d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test07754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07754");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        printStream7.println("");
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale.Builder builder33 = builder31.setLanguageTag("fr");
        java.util.Locale locale34 = builder33.build();
        java.util.Locale.Builder builder35 = builder33.clearExtensions();
        printStream7.print((java.lang.Object) builder35);
        java.util.Locale.Builder builder37 = builder35.clear();
        java.util.Locale.Builder builder38 = builder37.clear();
        java.util.Locale.Builder builder40 = builder37.setRegion("FR");
        java.util.Locale.Builder builder41 = builder37.clear();
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder41.removeUnicodeLocaleAttribute("org.apache.commons.math.MathException: China");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.MathException: China [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test07755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07755");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("ITALY");
        java.util.Locale.Builder builder5 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("Italienisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Italienisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test07756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07756");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ja");
        java.util.Locale locale7 = builder3.build();
        java.util.Locale.setDefault(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.lang.String str10 = locale7.getVariant();
        java.util.Set<java.lang.Character> charSet11 = locale7.getExtensionKeys();
        java.lang.Class<?> wildcardClass12 = charSet11.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test07757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07757");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.println((int) (byte) -1);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Locale locale15 = new java.util.Locale("jpn");
        java.io.PrintStream printStream18 = new java.io.PrintStream("zh_CN");
        printStream18.print((float) (byte) -1);
        printStream18.println();
        printStream18.println();
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream18, true);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("fr");
        printWriter26.print("it_IT");
        java.util.Locale locale29 = java.util.Locale.ROOT;
        boolean boolean30 = locale29.hasExtensions();
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale29.getDisplayName(locale31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale29.getDisplayCountry(locale33);
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.io.PrintWriter printWriter40 = printWriter26.printf(locale33, "it_IT", objArray38);
        printStream24.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream43 = printStream24.append((java.lang.CharSequence) "fr");
        printStream43.println((float) 117);
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.lang.String str49 = locale46.getVariant();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale46.getDisplayScript(locale50);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("fr");
        printWriter54.print("it_IT");
        java.util.Locale locale57 = java.util.Locale.ROOT;
        boolean boolean58 = locale57.hasExtensions();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale57.getDisplayName(locale59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        boolean boolean62 = locale61.hasExtensions();
        java.lang.String str63 = locale57.getDisplayCountry(locale61);
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        java.io.PrintWriter printWriter68 = printWriter54.printf(locale61, "it_IT", objArray66);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter("fr");
        printWriter71.print("it_IT");
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = mathException79.getSuppressed();
        java.io.PrintWriter printWriter82 = printWriter71.printf(locale75, "it_IT", (java.lang.Object[]) throwableArray81);
        java.io.PrintWriter printWriter83 = printWriter54.format("it_IT", (java.lang.Object[]) throwableArray81);
        java.io.PrintStream printStream84 = printStream43.format(locale50, "italien (Italie)", (java.lang.Object[]) throwableArray81);
        java.io.PrintWriter printWriter85 = printWriter13.format(locale15, "ITALY", (java.lang.Object[]) throwableArray81);
        java.lang.String str86 = locale15.toString();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertEquals(locale15.toString(), "jpn");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertNotNull(printWriter85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "jpn" + "'", str86, "jpn");
    }

    @Test
    public void test07758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07758");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream10 = printStream4.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray9);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        printStream11.println((double) 1L);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale14.getDisplayScript(locale18);
        java.util.Locale locale22 = new java.util.Locale("Italy", "Italy");
        java.lang.String str23 = locale18.getDisplayLanguage(locale22);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(throwable25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintStream printStream29 = printStream11.format(locale18, "anglais", (java.lang.Object[]) throwableArray28);
        printStream29.close();
        printStream29.write((int) '4');
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale22.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test07759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07759");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println((double) 0L);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter11.println(10.0f);
        printWriter11.println((double) 'a');
        printWriter11.print(100.0d);
        boolean boolean18 = printWriter11.checkError();
        printWriter11.println("fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07760");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        java.io.PrintStream printStream7 = printStream1.append('a');
        printStream7.println(10.0f);
        printStream7.println((float) 100);
        printStream7.print('u');
        printStream7.print(1.847264056867191E-7d);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printStream7);
    }

    @Test
    public void test07761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07761");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayVariant();
        java.io.PrintStream printStream6 = new java.io.PrintStream("zh_CN");
        printStream6.println();
        java.io.PrintStream printStream9 = printStream6.append('#');
        printStream6.close();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream6.write(byteArray14);
        printStream6.write((int) 'a');
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream6);
        printStream18.print(false);
        java.util.Locale locale23 = new java.util.Locale("hi!", "Italy");
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getVariant();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter30 = printWriter28.append(' ');
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("fr");
        printWriter33.print("it_IT");
        java.util.Locale locale36 = java.util.Locale.ROOT;
        boolean boolean37 = locale36.hasExtensions();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale36.getDisplayName(locale38);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str42 = locale36.getDisplayCountry(locale40);
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.io.PrintWriter printWriter47 = printWriter33.printf(locale40, "it_IT", objArray45);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter("fr");
        printWriter50.print("it_IT");
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        java.lang.Throwable[] throwableArray59 = mathException58.getSuppressed();
        java.lang.Throwable[] throwableArray60 = mathException58.getSuppressed();
        java.io.PrintWriter printWriter61 = printWriter50.printf(locale54, "it_IT", (java.lang.Object[]) throwableArray60);
        java.io.PrintWriter printWriter62 = printWriter33.format("it_IT", (java.lang.Object[]) throwableArray60);
        java.io.PrintWriter printWriter63 = printWriter30.format("zh_CN", (java.lang.Object[]) throwableArray60);
        java.io.PrintStream printStream64 = printStream18.format(locale23, "zh_CN", (java.lang.Object[]) throwableArray60);
        java.lang.String str65 = locale1.getDisplayLanguage(locale23);
        java.lang.String str67 = locale23.getExtension('a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, -1]");
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_ITALY");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Japanese" + "'", str65, "Japanese");
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test07762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07762");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ita", (double) 0L);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        java.lang.String str5 = languageRange2.getRange();
        double double6 = languageRange2.getWeight();
        double double7 = languageRange2.getWeight();
        java.lang.Object obj8 = null;
        boolean boolean9 = languageRange2.equals(obj8);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ita" + "'", str4, "ita");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ita" + "'", str5, "ita");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07763");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream7.println('u');
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException();
        java.lang.String str13 = mathException12.getPattern();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException12);
        java.lang.Object[] objArray15 = mathException12.getArguments();
        java.io.PrintStream printStream16 = printStream7.format("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)", objArray15);
        printStream16.println((long) 117);
        printStream16.print('4');
        java.util.Locale locale24 = new java.util.Locale("ja", "", "ja");
        java.lang.String str25 = locale24.getScript();
        java.util.Locale.setDefault(locale24);
        java.util.Locale locale27 = locale24.stripExtensions();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("fr");
        printWriter30.println();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("fr");
        printWriter34.print("it_IT");
        java.util.Locale locale37 = java.util.Locale.ROOT;
        boolean boolean38 = locale37.hasExtensions();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale37.getDisplayName(locale39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        boolean boolean42 = locale41.hasExtensions();
        java.lang.String str43 = locale37.getDisplayCountry(locale41);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        java.io.PrintWriter printWriter48 = printWriter34.printf(locale41, "it_IT", objArray46);
        java.io.PrintWriter printWriter49 = printWriter30.printf("zh_CN", objArray46);
        java.io.PrintStream printStream50 = printStream16.printf(locale24, "italiano (Italia)", objArray46);
        java.io.PrintStream printStream52 = printStream16.append('#');
        printStream52.print(10.0f);
        printStream52.print(32);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertEquals(locale24.toString(), "ja__ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printStream52);
    }

    @Test
    public void test07764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07764");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.setLanguageTag("JA");
        java.util.Locale.Builder builder7 = builder1.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("italien");
        java.util.Locale.Builder builder10 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setLanguage("ja_jp");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ja_jp [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test07765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07765");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.toLanguageTag();
        java.lang.Object obj6 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ja" + "'", str5, "ja");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "ja");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "ja");
    }

    @Test
    public void test07766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07766");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.lang.String str4 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "US" + "'", str4, "US");
    }

    @Test
    public void test07767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07767");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ita-FR");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("CN");
        printWriter3.println();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("Deutschland");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("fr");
        printWriter8.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = mathException16.getSuppressed();
        java.io.PrintWriter printWriter19 = printWriter8.printf(locale12, "it_IT", (java.lang.Object[]) throwableArray18);
        printWriter8.println((float) (byte) 10);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.write("hi!");
        printWriter8.println((java.lang.Object) printWriter23);
        java.io.PrintWriter printWriter28 = printWriter8.append('#');
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter32 = printWriter30.append(' ');
        printWriter30.write("chinois");
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale35.getCountry();
        java.lang.String str38 = locale35.getDisplayLanguage();
        java.lang.String str39 = locale35.getISO3Country();
        java.util.Set<java.lang.Character> charSet40 = locale35.getExtensionKeys();
        java.io.PrintStream printStream43 = new java.io.PrintStream("zh_CN");
        printStream43.print((float) (byte) -1);
        char[] charArray48 = new char[] { 'x', 'u' };
        printStream43.println(charArray48);
        java.util.Locale locale52 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str53 = locale52.getCountry();
        java.io.PrintStream printStream56 = new java.io.PrintStream("zh_CN");
        printStream56.print((float) (byte) -1);
        printStream56.println();
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException(throwable61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException62);
        java.lang.Throwable[] throwableArray64 = mathException62.getSuppressed();
        java.io.PrintStream printStream65 = printStream56.format("italien (Italie)", (java.lang.Object[]) throwableArray64);
        java.io.PrintStream printStream66 = printStream43.printf(locale52, "fr-CA", (java.lang.Object[]) throwableArray64);
        java.io.PrintWriter printWriter67 = printWriter30.printf(locale35, "italiano", (java.lang.Object[]) throwableArray64);
        java.io.PrintStream printStream69 = new java.io.PrintStream("zh_CN");
        printStream69.println();
        java.io.PrintStream printStream72 = printStream69.append('#');
        printStream69.close();
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter77 = printWriter75.append(' ');
        char[] charArray80 = new char[] { 'x', 'a' };
        printWriter77.print(charArray80);
        printStream69.println(charArray80);
        printWriter30.print(charArray80);
        printWriter8.println(charArray80);
        printWriter6.println(charArray80);
        printWriter3.println(charArray80);
        printWriter1.write(charArray80);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[x, u]");
        org.junit.Assert.assertEquals(locale52.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ITALY" + "'", str53, "ITALY");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[x, a]");
    }

    @Test
    public void test07768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07768");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) 0L);
        double double12 = hypergeometricDistributionImpl3.probability((int) 'a');
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        int int16 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 0L);
        hypergeometricDistributionImpl3.setSampleSize((int) ' ');
        int int19 = hypergeometricDistributionImpl3.getSampleSize();
        int int20 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.7008547008546866d + "'", double10 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
    }

    @Test
    public void test07769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07769");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', 97, 10);
        hypergeometricDistributionImpl3.setPopulationSize((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double8 = hypergeometricDistributionImpl3.cumulativeProbability(119, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07770");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setVariant("anglais");
        java.util.Locale locale9 = builder8.build();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        printWriter13.print("it_IT");
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String str22 = locale16.getDisplayCountry(locale20);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.io.PrintWriter printWriter27 = printWriter13.printf(locale20, "it_IT", objArray25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray25);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.lang.Throwable[] throwableArray30 = mathException28.getSuppressed();
        java.io.PrintWriter printWriter31 = printWriter1.printf(locale9, "de", (java.lang.Object[]) throwableArray30);
        printWriter31.print(false);
        printWriter31.flush();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printWriter31);
    }

    @Test
    public void test07771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07771");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability((int) ' ');
        hypergeometricDistributionImpl3.setSampleSize((int) 'x');
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10, 117);
        double double19 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) 119);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test07772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07772");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.clearExtensions();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("ita");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getVariant();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale12.getDisplayScript(locale16);
        boolean boolean18 = locale12.hasExtensions();
        java.util.Locale.Builder builder19 = builder9.setLocale(locale12);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.util.Locale locale28 = new java.util.Locale("Italy", "Italy");
        java.lang.String str29 = locale24.getDisplayLanguage(locale28);
        boolean boolean30 = locale24.hasExtensions();
        java.lang.String str31 = locale24.getISO3Language();
        boolean boolean32 = locale24.hasExtensions();
        java.util.Locale.Builder builder33 = builder9.setLocale(locale24);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale24);
        java.util.Locale.Builder builder35 = builder3.clear();
        java.util.Locale.Builder builder36 = builder3.clear();
        java.util.Locale.Builder builder38 = builder36.setLanguage("CAN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder36.setExtension('a', "\u610f\u5927\u5229\u6587\u610f\u5927\u5229)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ???? (???) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test07773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07773");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        printWriter7.write("hi!");
        printWriter7.println((java.lang.Object) (-1L));
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.lang.Object[] objArray18 = mathException17.getArguments();
        java.io.PrintWriter printWriter19 = printWriter7.format(locale12, "anglais", objArray18);
        java.util.Locale.setDefault(category5, locale12);
        java.util.Locale locale21 = java.util.Locale.getDefault(category5);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.util.Locale locale26 = locale21.stripExtensions();
        java.util.Locale.setDefault(locale26);
        java.util.Locale locale29 = new java.util.Locale("it_IT");
        java.lang.String str30 = locale26.getDisplayName(locale29);
        java.util.Locale.Builder builder31 = builder1.setLocale(locale26);
        java.util.Locale.Builder builder33 = builder1.setLanguage("Korean");
        java.util.Locale.Builder builder36 = builder1.setExtension('x', "coreano");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder36.setRegion("france");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: france [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str13, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str25, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale29.toString(), "it_it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Italian (Italy)" + "'", str30, "Italian (Italy)");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test07774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07774");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale5.getCountry();
        java.lang.String str8 = locale5.getDisplayLanguage();
        boolean boolean9 = locale5.hasExtensions();
        java.util.Set<java.lang.String> strSet10 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = locale5.stripExtensions();
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.Builder builder13 = builder3.setLocale(locale11);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("English (Canada)");
        java.util.Locale.Builder builder16 = builder3.setLocale(locale15);
        java.lang.String str17 = locale15.getISO3Language();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test07775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07775");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.probability(1);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(10);
        double double15 = hypergeometricDistributionImpl3.probability(0.0d);
        double double17 = hypergeometricDistributionImpl3.probability((int) (short) 100);
        double double20 = hypergeometricDistributionImpl3.cumulativeProbability((double) (-1L), 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistributionImpl3.setSampleSize((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: sample size must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2991452991452851d + "'", double11 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.023984009456667447d + "'", double15 == 0.023984009456667447d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test07776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07776");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("anglais", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray11 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap15);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet18, filteringMode19);
        java.lang.String str21 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.LanguageRange languageRange23 = new java.util.Locale.LanguageRange("en-GB");
        java.util.Locale.LanguageRange languageRange26 = new java.util.Locale.LanguageRange("English", (double) 0);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] { languageRange23, languageRange26 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Collection<java.util.Locale> localeCollection35 = null;
        java.util.Locale locale36 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, localeCollection35);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Collection<java.util.Locale> localeCollection52 = null;
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, localeCollection52);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strList56);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = locale59.getCountry();
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.util.Locale locale67 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale59, locale62, locale63, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Collection<java.util.Locale> localeCollection75 = null;
        java.util.Locale locale76 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, localeCollection75);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        java.lang.String str81 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strList79);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        boolean boolean83 = locale82.hasExtensions();
        java.lang.String str84 = locale82.getCountry();
        java.util.Locale locale85 = java.util.Locale.JAPAN;
        java.util.Locale locale86 = java.util.Locale.FRENCH;
        java.util.Locale locale90 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray91 = new java.util.Locale[] { locale82, locale85, locale86, locale90 };
        java.util.ArrayList<java.util.Locale> localeList92 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList92, localeArray91);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList94);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList95);
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList95);
        java.lang.Class<?> wildcardClass98 = localeList95.getClass();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(locale76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr");
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertNotNull(localeArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNotNull(localeList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test07777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07777");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter32 = printWriter1.append('u');
        printWriter1.print((long) (short) 100);
        printWriter1.println((int) (byte) -1);
        printWriter1.println(false);
        printWriter1.flush();
        printWriter1.write(0);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.lang.Class<?> wildcardClass43 = printWriter42.getClass();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test07778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07778");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale5 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = mathException17.getSuppressed();
        java.io.PrintWriter printWriter20 = printWriter9.printf(locale13, "it_IT", (java.lang.Object[]) throwableArray19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale26.getDisplayCountry(locale30);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.io.PrintWriter printWriter37 = printWriter23.printf(locale30, "it_IT", objArray35);
        java.io.PrintWriter printWriter38 = printWriter7.printf(locale13, "fr", objArray35);
        java.lang.String str39 = locale5.getDisplayVariant(locale13);
        java.lang.String str40 = locale0.getDisplayVariant(locale13);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getVariant();
        java.lang.String str43 = locale41.toLanguageTag();
        java.lang.String str45 = locale41.getUnicodeLocaleType("CA");
        java.lang.String str46 = locale41.getDisplayName();
        boolean boolean47 = locale41.hasExtensions();
        java.lang.String str48 = locale0.getDisplayName(locale41);
        java.util.Locale locale49 = locale0.stripExtensions();
        java.lang.String str50 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet51 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale5.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "chinois" + "'", str39, "chinois");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de" + "'", str43, "de");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tedesco" + "'", str46, "tedesco");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Italienisch (Italien)" + "'", str48, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test07779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07779");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream26, false);
        printStream26.println();
        printStream26.print('a');
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test07780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07780");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder7 = builder3.setRegion("ja");
        java.util.Locale.Builder builder10 = builder3.setExtension('u', "it_IT");
        java.util.Locale.Builder builder11 = builder3.clearExtensions();
        java.util.Locale.Builder builder12 = builder3.clearExtensions();
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        printWriter16.print("it_IT");
        java.util.Locale locale19 = java.util.Locale.ROOT;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale19.getDisplayName(locale21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale19.getDisplayCountry(locale23);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.io.PrintWriter printWriter30 = printWriter16.printf(locale23, "it_IT", objArray28);
        java.util.Locale.setDefault(category13, locale23);
        java.util.Locale locale32 = java.util.Locale.getDefault(category13);
        java.util.Locale locale33 = java.util.Locale.getDefault(category13);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("fr");
        printWriter35.print("it_IT");
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = mathException43.getSuppressed();
        java.io.PrintWriter printWriter46 = printWriter35.printf(locale39, "it_IT", (java.lang.Object[]) throwableArray45);
        java.lang.String str47 = locale33.getDisplayName(locale39);
        java.util.Set<java.lang.String> strSet48 = locale33.getUnicodeLocaleKeys();
        java.lang.String str49 = locale33.getISO3Language();
        java.util.Locale.Builder builder50 = builder12.setLocale(locale33);
        java.util.Locale locale51 = locale33.stripExtensions();
        boolean boolean52 = locale33.hasExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test07781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07781");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder7 = builder3.setRegion("ja");
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "italien");
        java.util.Locale.Builder builder12 = builder7.setLanguage("jpn");
        java.util.Locale.Builder builder14 = builder12.setLanguage("");
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("kor");
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale23 = java.util.Locale.getDefault(category19);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale.setDefault(category19, locale24);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("fr");
        printWriter28.print("it_IT");
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        java.lang.Throwable[] throwableArray38 = mathException36.getSuppressed();
        java.io.PrintWriter printWriter39 = printWriter28.printf(locale32, "it_IT", (java.lang.Object[]) throwableArray38);
        printWriter28.println((float) (byte) 10);
        printWriter28.print(true);
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.lang.String str47 = locale44.getVariant();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale44.getDisplayScript(locale48);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("fr");
        printWriter52.write("hi!");
        printWriter52.println((java.lang.Object) (-1L));
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale57.getDisplayName();
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        java.lang.Object[] objArray63 = mathException62.getArguments();
        java.io.PrintWriter printWriter64 = printWriter52.format(locale57, "anglais", objArray63);
        java.io.PrintWriter printWriter65 = printWriter28.format(locale48, "Italy", objArray63);
        java.lang.String str66 = locale48.getDisplayLanguage();
        java.lang.String str67 = locale24.getDisplayVariant(locale48);
        java.util.Locale.Builder builder68 = builder16.setLocale(locale48);
        java.util.Locale locale69 = builder16.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "FR" + "'", str25, "FR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "italiano (Italia)" + "'", str58, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "inglese" + "'", str66, "inglese");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
    }

    @Test
    public void test07782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07782");
        java.util.Locale locale2 = new java.util.Locale("en_US", "Chinesisch (Taiwan)");
        org.junit.Assert.assertEquals(locale2.toString(), "en_us_CHINESISCH (TAIWAN)");
    }

    @Test
    public void test07783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07783");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println((double) '4');
        char[] charArray11 = new char[] { '4', ' ', 'x', 'u', 'a' };
        printWriter3.print(charArray11);
        printWriter3.println("FR");
        printWriter3.print((long) 4);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 xua");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 xua");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , x, u, a]");
    }

    @Test
    public void test07784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07784");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = hypergeometricDistributionImpl3.cumulativeProbability((double) 1L, 0.023984009456667447d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
    }

    @Test
    public void test07785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07785");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.print((long) 1);
        java.util.Locale locale8 = new java.util.Locale("fr", "fr");
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale.setDefault(locale8);
        java.util.Locale locale14 = new java.util.Locale("", "", "");
        java.lang.String str15 = locale8.getDisplayVariant(locale14);
        java.util.Locale locale16 = locale8.stripExtensions();
        java.lang.String str17 = locale8.toLanguageTag();
        java.lang.Object[] objArray19 = null;
        java.io.PrintWriter printWriter20 = printWriter1.printf(locale8, "deu", objArray19);
        java.lang.String str21 = locale8.getLanguage();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fr-FR" + "'", str17, "fr-FR");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr" + "'", str21, "fr");
    }

    @Test
    public void test07786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07786");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale.Builder builder8 = builder1.setExtension('a', "jpn");
        java.util.Locale.Builder builder9 = builder1.clear();
        java.util.Locale.Builder builder10 = builder1.clearExtensions();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale15 = java.util.Locale.getDefault(category11);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale.setDefault(category11, locale16);
        java.util.Locale locale22 = new java.util.Locale("tedesco", "ja", "italien (Italie)");
        java.lang.String str23 = locale22.getScript();
        java.util.Locale.setDefault(category11, locale22);
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("fr");
        printWriter28.print("it_IT");
        java.util.Locale locale31 = java.util.Locale.ROOT;
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale31.getDisplayName(locale33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale31.getDisplayCountry(locale35);
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        java.io.PrintWriter printWriter42 = printWriter28.printf(locale35, "it_IT", objArray40);
        java.util.Locale.setDefault(category25, locale35);
        java.util.Locale locale44 = java.util.Locale.getDefault(category25);
        java.util.Locale locale45 = java.util.Locale.getDefault(category25);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        java.lang.Throwable[] throwableArray56 = mathException55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = mathException55.getSuppressed();
        java.io.PrintWriter printWriter58 = printWriter47.printf(locale51, "it_IT", (java.lang.Object[]) throwableArray57);
        java.lang.String str59 = locale45.getDisplayName(locale51);
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale60.getDisplayCountry(locale61);
        boolean boolean63 = locale61.hasExtensions();
        java.util.Locale.setDefault(locale61);
        java.lang.String str65 = locale61.getLanguage();
        java.lang.String str67 = locale61.getExtension('u');
        java.lang.String str68 = locale51.getDisplayScript(locale61);
        java.lang.String str69 = locale51.toLanguageTag();
        java.util.Locale.setDefault(category11, locale51);
        java.util.Locale.Builder builder71 = builder10.setLocale(locale51);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder73 = builder10.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FR" + "'", str17, "FR");
        org.junit.Assert.assertEquals(locale22.toString(), "tedesco_JA_italien (Italie)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "tedesco_JA_italien (Italie)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ja" + "'", str65, "ja");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "und" + "'", str69, "und");
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test07787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07787");
        java.io.PrintStream printStream3 = new java.io.PrintStream("zh_CN");
        printStream3.print((float) (byte) -1);
        printStream3.println();
        printStream3.print("ita");
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale11 = locale9.stripExtensions();
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = mathException15.getSuppressed();
        java.io.PrintStream printStream18 = printStream3.printf(locale11, "fr", (java.lang.Object[]) throwableArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.lang.Object[] objArray22 = mathException21.getArguments();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) mathException21);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Object[] objArray27 = mathException26.getArguments();
        mathException21.addSuppressed((java.lang.Throwable) mathException26);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException(throwable29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        mathException21.addSuppressed((java.lang.Throwable) mathException32);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        mathException38.addSuppressed((java.lang.Throwable) mathException42);
        java.lang.Throwable[] throwableArray45 = mathException38.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException();
        java.lang.String str47 = mathException46.getPattern();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray45, (java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray45);
        mathException21.addSuppressed((java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("anglais", (java.lang.Throwable) mathException49);
        java.lang.String str52 = mathException49.getPattern();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException49);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test07788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07788");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'u');
        int int13 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 1);
        int int14 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setSampleSize(31);
        double double18 = hypergeometricDistributionImpl3.probability(0.0d);
        double double21 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1, (int) (byte) 100);
        int int23 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.11499182616210182d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test07789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07789");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        char[] charArray31 = new char[] { 'a', '4', '4', 'x' };
        printStream26.println(charArray31);
        printStream26.print((float) 100L);
        printStream26.print(0.08547008547008297d);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl40 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int41 = hypergeometricDistributionImpl40.getPopulationSize();
        double double43 = hypergeometricDistributionImpl40.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl40.setNumberOfSuccesses(0);
        int int46 = hypergeometricDistributionImpl40.getPopulationSize();
        double double49 = hypergeometricDistributionImpl40.cumulativeProbability(0, 1);
        printStream26.println((java.lang.Object) 1);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a44x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a44x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, 4, 4, x]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 117 + "'", int41 == 117);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 117 + "'", int46 == 117);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test07790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07790");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 1);
        double double13 = hypergeometricDistributionImpl3.probability(0.7008547008546866d);
        double double15 = hypergeometricDistributionImpl3.probability((int) (byte) 100);
        int int16 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test07791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07791");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder7.setVariant("german");
        java.util.Locale.Builder builder12 = builder7.setExtension('x', "Italy");
        java.util.Locale locale13 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder7.setUnicodeLocaleKeyword("Chinese", "it-IT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Chinese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
    }

    @Test
    public void test07792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07792");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        printStream1.print((float) 'u');
        printStream1.println(35);
        printStream1.println(0.0d);
        printStream1.println((float) 34);
        printStream1.println((float) 34);
        org.junit.Assert.assertNotNull(printStream4);
    }

    @Test
    public void test07793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07793");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("zh_TW", "\uc774\ud0c8\ub9ac\uc544\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ???????????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07794");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        printStream1.print((-1));
        printStream1.write((int) (byte) 1);
        printStream1.print(true);
        printStream1.println(false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream20 = printStream1.append((java.lang.CharSequence) "Japanese (ja)", (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07795");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test07796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07796");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getDisplayLanguage();
        boolean boolean4 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale0.getISO3Language();
        java.lang.String str7 = locale0.getDisplayScript();
        java.lang.String str8 = locale0.getDisplayCountry();
        java.lang.String str9 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test07797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07797");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter6.print((float) (byte) 100);
        java.io.PrintWriter printWriter10 = printWriter6.append((java.lang.CharSequence) "ja");
        java.util.Locale locale13 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = locale15.getVariant();
        java.lang.String str19 = locale13.getDisplayVariant(locale15);
        java.lang.String str20 = locale15.getVariant();
        java.util.Locale locale21 = locale15.stripExtensions();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.print("it_IT");
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale28.getDisplayCountry(locale32);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.io.PrintWriter printWriter39 = printWriter25.printf(locale32, "it_IT", objArray37);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("fr");
        printWriter42.print("it_IT");
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        java.lang.Throwable[] throwableArray51 = mathException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = mathException50.getSuppressed();
        java.io.PrintWriter printWriter53 = printWriter42.printf(locale46, "it_IT", (java.lang.Object[]) throwableArray52);
        java.io.PrintWriter printWriter54 = printWriter25.format("it_IT", (java.lang.Object[]) throwableArray52);
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        java.lang.String str58 = locale55.getVariant();
        java.lang.String str59 = locale55.getCountry();
        java.lang.String[] strArray61 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter62 = printWriter25.format(locale55, "fr-CA", (java.lang.Object[]) strArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray61);
        java.io.PrintWriter printWriter64 = printWriter6.printf(locale15, "org.apache.commons.math.MathException", (java.lang.Object[]) strArray61);
        printWriter64.print(' ');
        printWriter64.println("\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertEquals(locale13.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printWriter64);
    }

    @Test
    public void test07798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07798");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ENGLISH");
        java.io.PrintStream printStream3 = new java.io.PrintStream("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.io.PrintStream printStream5 = printStream3.append((java.lang.CharSequence) "fra");
        java.io.PrintStream printStream7 = new java.io.PrintStream("fran\347ais (France)");
        java.io.PrintStream printStream9 = new java.io.PrintStream("zh_CN");
        printStream9.print((float) (byte) -1);
        printStream9.println();
        printStream9.println();
        java.io.PrintStream printStream15 = new java.io.PrintStream((java.io.OutputStream) printStream9, true);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        printStream15.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream34 = printStream15.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream36 = new java.io.PrintStream("zh_CN");
        printStream36.println();
        java.io.PrintStream printStream39 = printStream36.append('#');
        printStream36.close();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream36.write(byteArray45);
        printStream36.print(false);
        printStream36.println("Italy");
        java.io.PrintStream printStream52 = new java.io.PrintStream("zh_CN");
        printStream52.println((float) (-1));
        java.io.PrintStream printStream56 = new java.io.PrintStream("zh_CN");
        printStream56.println();
        java.io.PrintStream printStream59 = printStream56.append('#');
        printStream56.close();
        byte[] byteArray65 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream56.write(byteArray65);
        printStream52.write(byteArray65);
        printStream36.write(byteArray65);
        printStream34.write(byteArray65);
        printStream7.write(byteArray65);
        printStream3.write(byteArray65);
        printStream1.write(byteArray65);
        printStream1.print("");
        org.junit.Assert.assertNotNull(printStream5);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 100, -1, -1]");
    }

    @Test
    public void test07799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07799");
        java.util.Locale locale3 = new java.util.Locale("", "hi!_ITALY", "zh_cn");
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale.setDefault(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!_ITALY_zh_cn");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test07800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07800");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double5 = hypergeometricDistributionImpl3.probability((double) 100.0f);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) 'u');
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((double) 52);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability(0.14529914529914542d, (double) ' ');
        double double14 = hypergeometricDistributionImpl3.probability(0.2991452991452851d);
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(32);
        int int18 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
    }

    @Test
    public void test07801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07801");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.print("ita");
        java.util.Locale locale28 = new java.util.Locale("Italy");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream21.printf(locale28, "chinois", (java.lang.Object[]) throwableArray34);
        java.util.Locale.setDefault(category0, locale28);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter38.printf(locale42, "it_IT", (java.lang.Object[]) throwableArray48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale42.getDisplayScript(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        java.lang.String str57 = locale54.getVariant();
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.lang.String str59 = locale54.getDisplayScript(locale58);
        java.util.Locale locale62 = new java.util.Locale("Italy", "Italy");
        java.lang.String str63 = locale58.getDisplayLanguage(locale62);
        java.lang.String str64 = locale50.getDisplayScript(locale62);
        java.lang.String str65 = locale62.getDisplayScript();
        java.util.Set<java.lang.Character> charSet66 = locale62.getExtensionKeys();
        java.util.Set<java.lang.String> strSet67 = locale62.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "_HI!_ITALY_zh_cn");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals(locale62.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English" + "'", str63, "English");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertNotNull(strSet67);
    }

    @Test
    public void test07802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07802");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        printWriter1.println();
        printWriter1.flush();
        java.io.PrintWriter printWriter24 = printWriter1.append('a');
        printWriter24.print("\u4e2d\u56fd\u8a9e");
        printWriter24.println((double) 100);
        java.util.Locale locale30 = new java.util.Locale("giapponese");
        java.io.PrintStream printStream33 = new java.io.PrintStream("zh_CN");
        printStream33.print((float) (byte) -1);
        printStream33.println();
        printStream33.println();
        printStream33.println((float) ' ');
        printStream33.println((double) 0L);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream33, true);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray59);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = mathException62.getSuppressed();
        java.io.PrintWriter printWriter65 = printWriter43.printf("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray64);
        java.io.PrintWriter printWriter66 = printWriter24.format(locale30, "de_DE", (java.lang.Object[]) throwableArray64);
        printWriter24.write("coreano");
        printWriter24.println('#');
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertEquals(locale30.toString(), "giapponese");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter66);
    }

    @Test
    public void test07803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07803");
        java.util.Locale locale1 = new java.util.Locale("IT");
        java.lang.String str2 = locale1.getDisplayName();
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Italian" + "'", str2, "Italian");
    }

    @Test
    public void test07804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07804");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.println();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("fr");
        printWriter6.print("it_IT");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray18);
        java.io.PrintWriter printWriter20 = printWriter6.printf(locale13, "it_IT", objArray18);
        java.io.PrintWriter printWriter21 = printWriter2.printf("English", objArray18);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter2, false);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl27 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int28 = hypergeometricDistributionImpl27.getPopulationSize();
        double double30 = hypergeometricDistributionImpl27.cumulativeProbability((double) (short) -1);
        double double32 = hypergeometricDistributionImpl27.probability((double) (short) 100);
        double double34 = hypergeometricDistributionImpl27.cumulativeProbability((double) 117);
        printWriter2.print((java.lang.Object) 117);
        java.io.PrintWriter printWriter37 = printWriter2.append('4');
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("fr", objArray41);
        java.io.PrintWriter printWriter44 = printWriter37.format("en-GB", objArray41);
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", objArray47);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        mathException48.addSuppressed((java.lang.Throwable) mathException52);
        java.lang.Object[] objArray55 = mathException48.getArguments();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("Chinese", (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("deu-x-lvariant-CA", objArray41, (java.lang.Throwable) mathException56);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 117 + "'", int28 == 117);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
    }

    @Test
    public void test07805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07805");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter5 = printWriter3.append(' ');
        char[] charArray8 = new char[] { 'x', 'a' };
        printWriter5.print(charArray8);
        printStream1.print(charArray8);
        printStream1.println(false);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("fr");
        printWriter14.println();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale21.getDisplayName(locale23);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = locale21.getDisplayCountry(locale25);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", objArray30);
        java.io.PrintWriter printWriter32 = printWriter18.printf(locale25, "it_IT", objArray30);
        java.io.PrintWriter printWriter33 = printWriter14.printf("English", objArray30);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter14, false);
        printWriter35.write((int) (byte) 100);
        java.io.PrintStream printStream39 = new java.io.PrintStream("zh_CN");
        printStream39.print((float) (byte) -1);
        printStream39.println();
        printStream39.println();
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream39, true);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        printStream45.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream64 = printStream45.append((java.lang.CharSequence) "fr");
        char[] charArray69 = new char[] { 'a', '4', '4', 'x' };
        printStream64.println(charArray69);
        printWriter35.print(charArray69);
        printStream1.print(charArray69);
        java.io.PrintStream printStream74 = printStream1.append((java.lang.CharSequence) "cor\351en");
        org.junit.Assert.assertNotNull(printWriter5);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[x, a]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a44x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a44x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a, 4, 4, x]");
        org.junit.Assert.assertNotNull(printStream74);
    }

    @Test
    public void test07806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07806");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        printWriter1.write("Italy", 0, (int) (short) -1);
        printWriter1.print(0);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("zh_CN");
        printStream11.println();
        java.io.PrintStream printStream14 = printStream11.append('#');
        printStream11.close();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream11.write(byteArray19);
        printStream11.println((int) (byte) -1);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        printWriter23.print((long) 97);
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getCountry();
        java.lang.String str31 = locale28.getDisplayLanguage();
        java.lang.String str32 = locale28.getISO3Country();
        java.lang.String str33 = locale26.getDisplayScript(locale28);
        java.io.PrintStream printStream36 = new java.io.PrintStream("zh_CN");
        printStream36.println();
        java.io.PrintStream printStream39 = printStream36.append('#');
        printStream36.close();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream36.write(byteArray44);
        printStream36.write((int) 'a');
        java.io.PrintStream printStream48 = new java.io.PrintStream((java.io.OutputStream) printStream36);
        printStream48.print(false);
        printStream48.print(false);
        java.util.Locale locale55 = new java.util.Locale("hi!", "Italy");
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale55.getVariant();
        java.util.Locale.setDefault(locale55);
        java.io.PrintStream printStream61 = new java.io.PrintStream("zh_CN");
        printStream61.print((float) (byte) -1);
        printStream61.println();
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException(throwable66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException67);
        java.lang.Throwable[] throwableArray69 = mathException67.getSuppressed();
        java.io.PrintStream printStream70 = printStream61.format("italien (Italie)", (java.lang.Object[]) throwableArray69);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.Object[] objArray74 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray74);
        java.lang.Throwable[] throwableArray76 = mathException75.getSuppressed();
        java.io.PrintStream printStream77 = printStream61.printf(locale71, "ja", (java.lang.Object[]) throwableArray76);
        java.io.PrintStream printStream78 = printStream48.printf(locale55, "CN", (java.lang.Object[]) throwableArray76);
        java.io.PrintWriter printWriter79 = printWriter23.printf(locale26, "Regno Unito", (java.lang.Object[]) throwableArray76);
        printWriter9.print((java.lang.Object) printWriter79);
        printWriter79.println((int) 'u');
        printWriter79.print("fr-ca");
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, -1]");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!_ITALY");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(printStream77);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printWriter79);
    }

    @Test
    public void test07807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07807");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        char[] charArray6 = new char[] { 'x', 'u' };
        printStream1.println(charArray6);
        printStream1.println(0);
        printStream1.flush();
        printStream1.println((float) ' ');
        java.io.PrintStream printStream14 = printStream1.append(' ');
        printStream1.println("org.apache.commons.math.MathException: fr");
        printStream1.print((float) '#');
        java.io.PrintStream printStream20 = printStream1.append((java.lang.CharSequence) "Korean");
        printStream1.println();
        printStream1.println(99);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ?????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, u]");
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test07808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07808");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "tedesco");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: tedesco");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07809");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream13.print(false);
        printStream13.print(false);
        java.util.Locale locale20 = new java.util.Locale("hi!", "Italy");
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String str22 = locale20.getVariant();
        java.util.Locale.setDefault(locale20);
        java.io.PrintStream printStream26 = new java.io.PrintStream("zh_CN");
        printStream26.print((float) (byte) -1);
        printStream26.println();
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream26.format("italien (Italie)", (java.lang.Object[]) throwableArray34);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.io.PrintStream printStream42 = printStream26.printf(locale36, "ja", (java.lang.Object[]) throwableArray41);
        java.io.PrintStream printStream43 = printStream13.printf(locale20, "CN", (java.lang.Object[]) throwableArray41);
        printStream13.println(true);
        java.io.PrintStream printStream47 = printStream13.append('4');
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale48.getDisplayCountry(locale49);
        java.lang.String str51 = locale48.getVariant();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale48.getDisplayScript(locale52);
        java.util.Set<java.lang.Character> charSet54 = locale52.getExtensionKeys();
        java.lang.String str55 = locale52.getDisplayLanguage();
        java.lang.String str56 = locale52.getDisplayCountry();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi! (ITALY)");
        java.lang.Throwable[] throwableArray60 = mathException59.getSuppressed();
        java.io.PrintStream printStream61 = printStream47.printf(locale52, "English (Canada)", (java.lang.Object[]) throwableArray60);
        printStream61.print((long) 97);
        printStream61.println((long) 117);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_ITALY");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Canada" + "'", str56, "Canada");
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(printStream61);
    }

    @Test
    public void test07810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07810");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability(35, 35);
        hypergeometricDistributionImpl3.setSampleSize(10);
        double double22 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test07811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07811");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getSampleSize();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) 100, 1.000000000000053d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test07812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07812");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.print((long) 1);
        printWriter1.println(0);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("fr");
        printWriter11.print("it_IT");
        java.util.Locale locale14 = java.util.Locale.ROOT;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale14.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale14.getDisplayCountry(locale18);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        java.io.PrintWriter printWriter25 = printWriter11.printf(locale18, "it_IT", objArray23);
        java.util.Locale.setDefault(category8, locale18);
        java.util.Locale locale27 = java.util.Locale.getDefault(category8);
        java.io.PrintStream printStream29 = new java.io.PrintStream("zh_CN");
        printStream29.print((float) (byte) -1);
        printStream29.println();
        printStream29.print("ita");
        java.util.Locale locale36 = new java.util.Locale("Italy");
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        java.io.PrintStream printStream43 = printStream29.printf(locale36, "chinois", (java.lang.Object[]) throwableArray42);
        java.util.Locale.setDefault(category8, locale36);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter("fr");
        printWriter46.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.lang.Throwable[] throwableArray55 = mathException54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = mathException54.getSuppressed();
        java.io.PrintWriter printWriter57 = printWriter46.printf(locale50, "it_IT", (java.lang.Object[]) throwableArray56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale50.getDisplayScript(locale58);
        java.lang.String str60 = locale58.getVariant();
        java.util.Locale.setDefault(category8, locale58);
        java.util.Locale locale62 = java.util.Locale.getDefault(category8);
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("ITALY");
        java.util.Locale.setDefault(category8, locale64);
        java.util.Locale locale66 = java.util.Locale.getDefault(category8);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException();
        java.lang.String str69 = mathException68.getPattern();
        java.lang.Object[] objArray70 = mathException68.getArguments();
        java.io.PrintWriter printWriter71 = printWriter1.format(locale66, "org.apache.commons.math.MathException: ja", objArray70);
        // The following exception was thrown during execution in test generation
        try {
            printWriter71.write("deu", (int) (byte) 10, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 19");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_ITALY");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "italy");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "italy");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(printWriter71);
    }

    @Test
    public void test07813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07813");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.String str2 = locale0.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getUnicodeLocaleType("Taiwan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Taiwan");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English" + "'", str2, "English");
    }

    @Test
    public void test07814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07814");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray9 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList18, strMap19);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.parse("tedesco");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Collection<java.util.Locale> localeCollection26 = null;
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection26);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList34);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Collection<java.util.Locale> localeCollection40 = null;
        java.util.Locale locale41 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, localeCollection40);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Collection<java.util.Locale> localeCollection50 = null;
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, localeCollection50);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.lang.String str56 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList54);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        boolean boolean58 = locale57.hasExtensions();
        java.lang.String str59 = locale57.getCountry();
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.util.Locale locale65 = new java.util.Locale("", "", "");
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale57, locale60, locale61, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale72 = java.util.Locale.lookup(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale73 = java.util.Locale.lookup(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNull(locale73);
    }

    @Test
    public void test07815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07815");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = new java.io.PrintStream("zh_CN");
        printStream4.print((float) (byte) -1);
        printStream4.println();
        printStream4.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream4, true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter14 = printWriter12.append(' ');
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("fr");
        printWriter34.print("it_IT");
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        java.io.PrintWriter printWriter45 = printWriter34.printf(locale38, "it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter46 = printWriter17.format("it_IT", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter47 = printWriter14.format("zh_CN", (java.lang.Object[]) throwableArray44);
        java.io.PrintStream printStream49 = new java.io.PrintStream("zh_CN");
        printStream49.print((float) (byte) -1);
        char[] charArray54 = new char[] { 'x', 'u' };
        printStream49.println(charArray54);
        printWriter47.print(charArray54);
        printStream4.print(charArray54);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("fr");
        printWriter62.print("it_IT");
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.io.PrintWriter printWriter73 = printWriter62.printf(locale66, "it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream74 = printStream4.format(locale58, "hi!", (java.lang.Object[]) throwableArray72);
        java.lang.String str75 = locale58.getLanguage();
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray78);
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = mathException79.getSuppressed();
        java.io.PrintStream printStream82 = printStream1.printf(locale58, "", (java.lang.Object[]) throwableArray81);
        java.io.PrintStream printStream84 = printStream82.append((java.lang.CharSequence) "fra");
        printStream84.write((int) (short) 100);
        printStream84.print(0L);
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream84);
        printWriter89.write("italie");
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[x, u]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printStream84);
    }

    @Test
    public void test07816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07816");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        printWriter31.print((double) 100L);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getVariant();
        java.lang.String str38 = locale34.getCountry();
        java.io.PrintStream printStream41 = new java.io.PrintStream("zh_CN");
        printStream41.print((float) (byte) -1);
        printStream41.println();
        printStream41.print("ita");
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.util.Locale locale49 = locale47.stripExtensions();
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = mathException53.getSuppressed();
        java.io.PrintStream printStream56 = printStream41.printf(locale49, "fr", (java.lang.Object[]) throwableArray55);
        java.io.PrintWriter printWriter57 = printWriter31.format(locale34, "fra", (java.lang.Object[]) throwableArray55);
        char[] charArray58 = new char[] {};
        printWriter31.print(charArray58);
        printWriter15.println(charArray58);
        java.io.PrintWriter printWriter62 = printWriter15.append('a');
        printWriter15.println(0);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("italien (Italie)");
        java.lang.Object[] objArray68 = mathException67.getArguments();
        java.io.PrintWriter printWriter69 = printWriter15.format("chinois", objArray68);
        printWriter15.close();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test07817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07817");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("fra");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setRegion("de");
        java.util.Locale locale7 = builder0.build();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.lang.String str12 = locale10.getScript();
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale10.getScript();
        java.util.Locale.Builder builder15 = builder0.setLocale(locale10);
        java.util.Locale.Builder builder17 = builder0.setLanguageTag("fr-FR");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "_DE");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test07818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07818");
        java.util.Locale locale3 = new java.util.Locale("\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)", "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", "german");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale9 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        printWriter13.print("it_IT");
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.lang.Throwable[] throwableArray22 = mathException21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = mathException21.getSuppressed();
        java.io.PrintWriter printWriter24 = printWriter13.printf(locale17, "it_IT", (java.lang.Object[]) throwableArray23);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("fr");
        printWriter27.print("it_IT");
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale30.getDisplayName(locale32);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String str36 = locale30.getDisplayCountry(locale34);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        java.io.PrintWriter printWriter41 = printWriter27.printf(locale34, "it_IT", objArray39);
        java.io.PrintWriter printWriter42 = printWriter11.printf(locale17, "fr", objArray39);
        java.lang.String str43 = locale9.getDisplayVariant(locale17);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale9.getDisplayVariant(locale44);
        java.lang.String str47 = locale44.getVariant();
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("hi!");
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.lang.String str51 = locale49.toLanguageTag();
        java.lang.String str52 = locale44.getDisplayVariant(locale49);
        java.lang.String str53 = locale3.getDisplayCountry(locale44);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)_german");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str4, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und-german" + "'", str5, "und-german");
        org.junit.Assert.assertEquals(locale9.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "chinois" + "'", str43, "chinois");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "chinois" + "'", str46, "chinois");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str53, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
    }

    @Test
    public void test07819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07819");
        java.util.Locale locale2 = new java.util.Locale("cinese (Taiwan)", "IT_IT");
        org.junit.Assert.assertEquals(locale2.toString(), "cinese (taiwan)_IT_IT");
    }

    @Test
    public void test07820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07820");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.println(0.0f);
        printWriter1.write("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter12.print('#');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test07821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07821");
        java.util.Locale locale3 = new java.util.Locale("fra", "it_IT", "fran\347ais (France)");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        boolean boolean5 = locale3.hasExtensions();
        java.util.Locale locale9 = new java.util.Locale("en_CA", "fran\347ais (france) (ITALIANO (ITALIA))", "ja");
        java.lang.String str10 = locale3.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "fra_IT_IT_fran\347ais (France)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "en_ca_FRAN\347AIS (FRANCE) (ITALIANO (ITALIA))_ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
    }

    @Test
    public void test07822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07822");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', 0, (int) (short) 100);
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double8 = hypergeometricDistributionImpl3.cumulativeProbability((double) (-1L), (double) 96);
        double double10 = hypergeometricDistributionImpl3.probability((double) (short) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test07823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07823");
        java.io.PrintStream printStream2 = new java.io.PrintStream("zh_CN");
        printStream2.print((float) (byte) -1);
        printStream2.println();
        printStream2.println();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream2, true);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale13.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String str19 = locale13.getDisplayCountry(locale17);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray22);
        java.io.PrintWriter printWriter24 = printWriter10.printf(locale17, "it_IT", objArray22);
        printStream8.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream27 = printStream8.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream28);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream29);
        printStream29.println("fr-CA");
        boolean boolean33 = printStream29.checkError();
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", objArray41);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        mathException38.addSuppressed((java.lang.Throwable) mathException42);
        java.lang.Throwable[] throwableArray45 = mathException38.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("English", (java.lang.Object[]) throwableArray45);
        java.io.PrintStream printStream47 = printStream29.printf("hi!", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("fr-CA");
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        mathException49.addSuppressed((java.lang.Throwable) mathException54);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException58);
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", objArray62);
        java.lang.Throwable[] throwableArray64 = mathException63.getSuppressed();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray64);
        mathException58.addSuppressed((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException58);
        mathException49.addSuppressed((java.lang.Throwable) mathException58);
        java.lang.String str69 = mathException58.getPattern();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray45, (java.lang.Throwable) mathException58);
        java.lang.String str71 = mathException70.toString();
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str71, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test07824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07824");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Japanese (Japan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=japanese (japan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07825");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.write("it_IT");
        java.io.PrintWriter printWriter12 = printWriter1.append((java.lang.CharSequence) "fr_FR");
        printWriter1.println();
        printWriter1.flush();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test07826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07826");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException(throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray9 = mathException7.getSuppressed();
        java.io.PrintStream printStream10 = printStream1.format("italien (Italie)", (java.lang.Object[]) throwableArray9);
        printStream10.close();
        printStream10.print('x');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream10, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream19 = printStream10.append((java.lang.CharSequence) "deu", (int) '#', 17);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 17");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test07827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07827");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.write("hi!");
        printWriter2.println((java.lang.Object) (-1L));
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Object[] objArray13 = mathException12.getArguments();
        java.io.PrintWriter printWriter14 = printWriter2.format(locale7, "anglais", objArray13);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.util.Locale locale22 = new java.util.Locale("fr-ca", "\u52a0\u62ff\u5927", "francese");
        java.lang.String str23 = locale17.getDisplayCountry(locale22);
        java.lang.String str24 = locale17.getLanguage();
        java.util.Locale locale25 = locale17.stripExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Italian (Italy)" + "'", str8, "Italian (Italy)");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet18);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "\u52a0\u62ff\u5927_francese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italy" + "'", str23, "Italy");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
    }

    @Test
    public void test07828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07828");
        java.util.Locale locale3 = new java.util.Locale("ja", "", "ja");
        java.lang.String str4 = locale3.getScript();
        java.util.Locale.setDefault(locale3);
        java.util.Locale locale6 = locale3.stripExtensions();
        boolean boolean7 = locale3.hasExtensions();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("fr");
        printWriter10.write("hi!");
        printWriter10.println((java.lang.Object) (-1L));
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray19);
        java.lang.Object[] objArray21 = mathException20.getArguments();
        java.io.PrintWriter printWriter22 = printWriter10.format(locale15, "anglais", objArray21);
        java.util.Locale.setDefault(category8, locale15);
        java.util.Locale locale24 = java.util.Locale.getDefault(category8);
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale24.getDisplayName(locale26);
        java.util.Locale locale29 = locale24.stripExtensions();
        java.lang.String str30 = locale24.toLanguageTag();
        java.lang.String str31 = locale24.getDisplayCountry();
        java.lang.String str32 = locale3.getDisplayLanguage(locale24);
        org.junit.Assert.assertEquals(locale3.toString(), "ja__ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja__ja");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str16, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str28, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "it-IT" + "'", str30, "it-IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u30a4\u30bf\u30ea\u30a2" + "'", str31, "\u30a4\u30bf\u30ea\u30a2");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "giapponese" + "'", str32, "giapponese");
    }

    @Test
    public void test07829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07829");
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("hi!", objArray1);
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = mathException2.getSuppressed();
        java.lang.Object[] objArray5 = mathException2.getArguments();
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Object[] objArray10 = mathException9.getArguments();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        mathException9.addSuppressed((java.lang.Throwable) mathException13);
        java.lang.Throwable[] throwableArray16 = mathException9.getSuppressed();
        java.lang.Object[] objArray17 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("Chinese (Taiwan)", objArray17);
        mathException2.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.String str21 = mathException2.getPattern();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test07830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07830");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter3.printf(locale7, "it_IT", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter32 = printWriter1.printf(locale7, "fr", objArray29);
        char[] charArray36 = new char[] { '#', ' ', 'x' };
        printWriter1.write(charArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("zh_CN");
        printStream39.print((float) (byte) -1);
        printStream39.println();
        printStream39.println();
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream39, true);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        printStream45.println((java.lang.Object) "it_IT");
        printStream45.println(1.0d);
        java.io.PrintStream printStream66 = new java.io.PrintStream("zh_CN");
        printStream66.println();
        java.io.PrintStream printStream69 = printStream66.append('#');
        printStream66.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter74 = printWriter72.append(' ');
        char[] charArray77 = new char[] { 'x', 'a' };
        printWriter74.print(charArray77);
        printStream66.println(charArray77);
        printStream45.print(charArray77);
        printWriter1.print(charArray77);
        printWriter1.println((long) 32);
        printWriter1.println();
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#,  , x]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[x, a]");
    }

    @Test
    public void test07831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07831");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        printStream26.println((float) 117);
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.lang.String str32 = locale29.getVariant();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale29.getDisplayScript(locale33);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("fr");
        printWriter37.print("it_IT");
        java.util.Locale locale40 = java.util.Locale.ROOT;
        boolean boolean41 = locale40.hasExtensions();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale40.getDisplayName(locale42);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.lang.String str46 = locale40.getDisplayCountry(locale44);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        java.io.PrintWriter printWriter51 = printWriter37.printf(locale44, "it_IT", objArray49);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("fr");
        printWriter54.print("it_IT");
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = mathException62.getSuppressed();
        java.io.PrintWriter printWriter65 = printWriter54.printf(locale58, "it_IT", (java.lang.Object[]) throwableArray64);
        java.io.PrintWriter printWriter66 = printWriter37.format("it_IT", (java.lang.Object[]) throwableArray64);
        java.io.PrintStream printStream67 = printStream26.format(locale33, "italien (Italie)", (java.lang.Object[]) throwableArray64);
        printStream26.print("\u4e2d\u56fd");
        printStream26.println();
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test07832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07832");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ita");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException(throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray9 = mathException7.getSuppressed();
        java.io.PrintStream printStream12 = new java.io.PrintStream("zh_CN");
        printStream12.print((float) (byte) -1);
        printStream12.println();
        printStream12.print("ita");
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.util.Locale locale20 = locale18.stripExtensions();
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        java.lang.Throwable[] throwableArray25 = mathException24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = mathException24.getSuppressed();
        java.io.PrintStream printStream27 = printStream12.printf(locale20, "fr", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) mathException28);
        java.io.PrintStream printStream30 = printStream3.printf("ita", (java.lang.Object[]) throwableArray9);
        java.io.PrintStream printStream33 = new java.io.PrintStream("zh_CN");
        printStream33.print((float) (byte) -1);
        printStream33.println();
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException(throwable38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException39);
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintStream printStream42 = printStream33.format("italien (Italie)", (java.lang.Object[]) throwableArray41);
        java.io.PrintStream printStream43 = printStream3.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray41);
        printStream43.close();
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter("fr");
        printWriter46.print("it_IT");
        java.util.Locale locale49 = java.util.Locale.ROOT;
        boolean boolean50 = locale49.hasExtensions();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale49.getDisplayName(locale51);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        boolean boolean54 = locale53.hasExtensions();
        java.lang.String str55 = locale49.getDisplayCountry(locale53);
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray58);
        java.io.PrintWriter printWriter60 = printWriter46.printf(locale53, "it_IT", objArray58);
        printStream43.print((java.lang.Object) objArray58);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException(throwable64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray67, throwable68);
        java.lang.Object[] objArray70 = mathException69.getArguments();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("de", objArray58, (java.lang.Throwable) mathException71);
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter("fr");
        printWriter75.print("it_IT");
        java.util.Locale locale78 = java.util.Locale.ROOT;
        boolean boolean79 = locale78.hasExtensions();
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.lang.String str81 = locale78.getDisplayName(locale80);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        boolean boolean83 = locale82.hasExtensions();
        java.lang.String str84 = locale78.getDisplayCountry(locale82);
        java.lang.Object[] objArray87 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("hi!", objArray87);
        java.io.PrintWriter printWriter89 = printWriter75.printf(locale82, "it_IT", objArray87);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("", objArray87);
        java.lang.Object[] objArray91 = mathException90.getArguments();
        java.lang.Throwable[] throwableArray92 = mathException90.getSuppressed();
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ANGLAIS", objArray58, (java.lang.Throwable) mathException90);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertNotNull(printWriter89);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test07833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07833");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        printWriter1.println();
        printWriter1.print((double) (-1));
        printWriter1.print(0.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter29 = printWriter1.append((java.lang.CharSequence) "x-lvariant-it-IT", 12, 117);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 117");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test07834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07834");
        java.util.Locale locale3 = new java.util.Locale("italy", "zh_CN", "it_IT");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ZH_CN");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "italy_ZH_CN_it_IT");
    }

    @Test
    public void test07835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07835");
        java.util.Locale locale3 = new java.util.Locale("", "", "");
        java.io.PrintStream printStream5 = new java.io.PrintStream("zh_CN");
        printStream5.print((float) (byte) -1);
        printStream5.println();
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("fr");
        printWriter13.print("it_IT");
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String str22 = locale16.getDisplayCountry(locale20);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.io.PrintWriter printWriter27 = printWriter13.printf(locale20, "it_IT", objArray25);
        printStream11.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream30 = printStream11.append((java.lang.CharSequence) "fr");
        printStream30.print(false);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.getDefault(category33);
        printStream30.println((java.lang.Object) category33);
        java.util.Locale locale37 = java.util.Locale.getDefault(category33);
        java.util.Locale locale38 = java.util.Locale.getDefault(category33);
        java.util.Locale locale42 = new java.util.Locale("zh_CN", "English", "it_IT");
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale.setDefault(category33, locale42);
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale45);
        java.util.Locale locale50 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("fr");
        printWriter54.print("it_IT");
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", objArray61);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = mathException62.getSuppressed();
        java.io.PrintWriter printWriter65 = printWriter54.printf(locale58, "it_IT", (java.lang.Object[]) throwableArray64);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("fr");
        printWriter68.print("it_IT");
        java.util.Locale locale71 = java.util.Locale.ROOT;
        boolean boolean72 = locale71.hasExtensions();
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.lang.String str74 = locale71.getDisplayName(locale73);
        java.util.Locale locale75 = java.util.Locale.ROOT;
        boolean boolean76 = locale75.hasExtensions();
        java.lang.String str77 = locale71.getDisplayCountry(locale75);
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray80);
        java.io.PrintWriter printWriter82 = printWriter68.printf(locale75, "it_IT", objArray80);
        java.io.PrintWriter printWriter83 = printWriter52.printf(locale58, "fr", objArray80);
        java.lang.String str84 = locale50.getDisplayVariant(locale58);
        java.lang.String str85 = locale45.getDisplayVariant(locale58);
        java.util.Locale.setDefault(category33, locale45);
        java.lang.String str87 = locale3.getDisplayCountry(locale45);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category33.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja__ja");
        org.junit.Assert.assertEquals(locale42.toString(), "zh_cn_ENGLISH_it_IT");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale50.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "chinois" + "'", str84, "chinois");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test07836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07836");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        printStream1.print((float) 'u');
        printStream1.println(35);
        printStream1.println(0.0d);
        java.io.PrintStream printStream13 = new java.io.PrintStream("zh_CN");
        printStream13.println();
        java.io.PrintStream printStream16 = printStream13.append('#');
        printStream13.close();
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream13.write(byteArray22);
        printStream1.write(byteArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream27 = printStream25.append('a');
        java.lang.Object[] objArray29 = null;
        java.io.PrintStream printStream30 = printStream27.format("German (Germany)", objArray29);
        printStream27.println();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream27);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream30);
    }

    @Test
    public void test07837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07837");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        char[] charArray6 = new char[] { 'x', 'a' };
        printWriter3.print(charArray6);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter15 = printWriter3.printf("en-GB", (java.lang.Object[]) throwableArray13);
        printWriter15.println(1L);
        printWriter15.println((int) (short) 0);
        printWriter15.println(0.0f);
        printWriter15.write(3);
        printWriter15.print(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter29 = printWriter15.append((java.lang.CharSequence) "\u82f1\u6587\u52a0\u62ff\u5927)", (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, a]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test07838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07838");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', 0, (int) (short) 100);
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) '4');
        hypergeometricDistributionImpl3.setSampleSize(35);
        int int10 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.8547008547008489d);
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability(0.11499182616210182d, (double) '#');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 17 + "'", int10 == 17);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9999999999962769d + "'", double13 == 0.9999999999962769d);
    }

    @Test
    public void test07839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07839");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale6.getDisplayCountry(locale10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.io.PrintWriter printWriter17 = printWriter3.printf(locale10, "it_IT", objArray15);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream21 = new java.io.PrintStream("zh_CN");
        printStream21.print((float) (byte) -1);
        printStream21.println();
        printStream21.print("ita");
        java.util.Locale locale28 = new java.util.Locale("Italy");
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream21.printf(locale28, "chinois", (java.lang.Object[]) throwableArray34);
        java.util.Locale.setDefault(category0, locale28);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("fr");
        printWriter38.print("it_IT");
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter38.printf(locale42, "it_IT", (java.lang.Object[]) throwableArray48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale42.getDisplayScript(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.util.Locale locale54 = java.util.Locale.getDefault(category0);
        java.util.Locale locale55 = java.util.Locale.getDefault(category0);
        java.lang.String str56 = locale55.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale28.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "kor" + "'", str56, "kor");
    }

    @Test
    public void test07840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07840");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl5 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int6 = hypergeometricDistributionImpl5.getPopulationSize();
        double double8 = hypergeometricDistributionImpl5.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl5.setNumberOfSuccesses((int) (short) 1);
        int int11 = hypergeometricDistributionImpl5.getSampleSize();
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.lang.Object[] objArray15 = mathException14.getArguments();
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        mathException14.addSuppressed((java.lang.Throwable) mathException18);
        java.lang.Throwable[] throwableArray21 = mathException14.getSuppressed();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter28 = printWriter23.printf("fr", objArray27);
        printWriter28.print((float) (byte) 100);
        java.io.PrintWriter printWriter32 = printWriter28.append((java.lang.CharSequence) "ja");
        java.lang.Object[] objArray33 = new java.lang.Object[] { int11, throwableArray21, printWriter32 };
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException();
        java.lang.String str35 = mathException34.getPattern();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray21, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException39);
        java.lang.String str42 = mathException41.getPattern();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 117 + "'", int6 == 117);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "de_DE" + "'", str42, "de_DE");
    }

    @Test
    public void test07841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07841");
        java.util.Locale locale1 = new java.util.Locale("zh_CN");
        java.lang.String str2 = locale1.getISO3Country();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        printWriter4.write("hi!");
        printWriter4.println((java.lang.Object) (-1L));
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.lang.String str10 = locale9.getDisplayName();
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.lang.Object[] objArray15 = mathException14.getArguments();
        java.io.PrintWriter printWriter16 = printWriter4.format(locale9, "anglais", objArray15);
        java.util.Locale locale20 = new java.util.Locale("deu", "anglais", "CA");
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter25 = printWriter23.append(' ');
        char[] charArray28 = new char[] { 'x', 'a' };
        printWriter25.print(charArray28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.lang.Throwable[] throwableArray35 = mathException34.getSuppressed();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter37 = printWriter25.printf("en-GB", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter38 = printWriter16.printf(locale20, "italien (Italie)", (java.lang.Object[]) throwableArray35);
        java.lang.String str39 = locale1.getDisplayCountry(locale20);
        java.lang.String str40 = locale1.getCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "zh_cn");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "italiano (Italia)" + "'", str10, "italiano (Italia)");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertEquals(locale20.toString(), "deu_ANGLAIS_CA");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[x, a]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test07842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07842");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException(throwable1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.Throwable[] throwableArray4 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!");
        mathException5.addSuppressed((java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.String str10 = mathException7.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str10, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test07843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07843");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter3.printf(locale7, "it_IT", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter32 = printWriter1.printf(locale7, "fr", objArray29);
        char[] charArray36 = new char[] { '#', ' ', 'x' };
        printWriter1.write(charArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("zh_CN");
        printStream39.print((float) (byte) -1);
        printStream39.println();
        printStream39.println();
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream39, true);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        printStream45.println((java.lang.Object) "it_IT");
        printStream45.println(1.0d);
        java.io.PrintStream printStream66 = new java.io.PrintStream("zh_CN");
        printStream66.println();
        java.io.PrintStream printStream69 = printStream66.append('#');
        printStream66.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter74 = printWriter72.append(' ');
        char[] charArray77 = new char[] { 'x', 'a' };
        printWriter74.print(charArray77);
        printStream66.println(charArray77);
        printStream45.print(charArray77);
        printWriter1.print(charArray77);
        printWriter1.println((long) 32);
        printWriter1.println("Japanese");
        printWriter1.print(0.7008547008546866d);
        printWriter1.print('a');
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "# x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#,  , x]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[x, a]");
    }

    @Test
    public void test07844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07844");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        printStream28.print("org.apache.commons.math.MathException");
        printStream28.println("FR");
        printStream28.print(true);
        printStream28.print(31);
        printStream28.println(false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test07845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07845");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.println(0.0f);
        printWriter1.write("fr");
        printWriter1.print((float) (byte) -1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter10.println();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test07846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07846");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter1.close();
        java.io.PrintStream printStream15 = new java.io.PrintStream("zh_CN");
        printStream15.println();
        java.io.PrintStream printStream18 = printStream15.append('#');
        printStream18.println((int) 'a');
        printStream18.println(0.0d);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale23.getDisplayName(locale25);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale23.getDisplayCountry(locale27);
        java.io.PrintStream printStream32 = new java.io.PrintStream("zh_CN");
        printStream32.println();
        java.io.PrintStream printStream35 = printStream32.append('#');
        printStream32.close();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream32.write(byteArray40);
        printStream32.write((int) 'a');
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream32);
        printStream44.print(false);
        printStream44.print(false);
        java.util.Locale locale51 = new java.util.Locale("hi!", "Italy");
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale51.getVariant();
        java.util.Locale.setDefault(locale51);
        java.io.PrintStream printStream57 = new java.io.PrintStream("zh_CN");
        printStream57.print((float) (byte) -1);
        printStream57.println();
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException(throwable62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException63);
        java.lang.Throwable[] throwableArray65 = mathException63.getSuppressed();
        java.io.PrintStream printStream66 = printStream57.format("italien (Italie)", (java.lang.Object[]) throwableArray65);
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray70);
        java.lang.Throwable[] throwableArray72 = mathException71.getSuppressed();
        java.io.PrintStream printStream73 = printStream57.printf(locale67, "ja", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream74 = printStream44.printf(locale51, "CN", (java.lang.Object[]) throwableArray72);
        printStream44.println(true);
        java.io.PrintStream printStream78 = printStream44.append('4');
        java.util.Locale locale79 = java.util.Locale.JAPANESE;
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        java.lang.String str81 = locale79.getDisplayCountry(locale80);
        java.lang.String str82 = locale79.getVariant();
        java.util.Locale locale83 = java.util.Locale.CANADA;
        java.lang.String str84 = locale79.getDisplayScript(locale83);
        java.util.Set<java.lang.Character> charSet85 = locale83.getExtensionKeys();
        java.lang.String str86 = locale83.getDisplayLanguage();
        java.lang.String str87 = locale83.getDisplayCountry();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("hi! (ITALY)");
        java.lang.Throwable[] throwableArray91 = mathException90.getSuppressed();
        java.io.PrintStream printStream92 = printStream78.printf(locale83, "English (Canada)", (java.lang.Object[]) throwableArray91);
        java.io.PrintStream printStream93 = printStream18.printf(locale27, "en-US", (java.lang.Object[]) throwableArray91);
        printStream93.println('4');
        printStream93.println((float) 120);
        printWriter1.print((java.lang.Object) 120);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, -1]");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_ITALY");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(charSet85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "English" + "'", str86, "English");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Canada" + "'", str87, "Canada");
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(printStream92);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test07847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07847");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        printStream4.println();
        printStream4.print("italien (Italie)");
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream4);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("fr");
        printWriter14.println();
        java.lang.Object obj16 = null;
        printWriter14.print(obj16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("fr", objArray21);
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.io.PrintWriter printWriter25 = printWriter14.printf("ita", (java.lang.Object[]) throwableArray24);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category26, locale27);
        java.util.Locale locale30 = java.util.Locale.getDefault(category26);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ita");
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException(throwable36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.io.PrintStream printStream42 = new java.io.PrintStream("zh_CN");
        printStream42.print((float) (byte) -1);
        printStream42.println();
        printStream42.print("ita");
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleKeys();
        java.util.Locale locale50 = locale48.stripExtensions();
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.lang.Throwable[] throwableArray55 = mathException54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = mathException54.getSuppressed();
        java.io.PrintStream printStream57 = printStream42.printf(locale50, "fr", (java.lang.Object[]) throwableArray56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray39, (java.lang.Throwable) mathException58);
        java.io.PrintStream printStream60 = printStream33.printf("ita", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter61 = printWriter25.format(locale30, "italien (Italie)", (java.lang.Object[]) throwableArray39);
        printWriter25.print(' ');
        printStream11.println((java.lang.Object) printWriter25);
        printWriter25.println(31);
        printWriter25.println(0);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(printWriter61);
    }

    @Test
    public void test07848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07848");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        boolean boolean9 = locale3.hasExtensions();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder11 = builder0.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder13.build();
        java.util.Locale.Builder builder15 = builder13.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.addUnicodeLocaleAttribute("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test07849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07849");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "italiano (Italia)");
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.lang.Throwable[] throwableArray22 = mathException21.getSuppressed();
        java.io.PrintStream printStream23 = printStream15.printf("en-gb", (java.lang.Object[]) throwableArray22);
        printStream23.print('#');
        printStream23.println("japonais");
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream23);
        java.io.PrintStream printStream31 = new java.io.PrintStream("zh_CN");
        printStream31.println();
        java.io.PrintStream printStream34 = printStream31.append('#');
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream34);
        printStream34.println('#');
        printStream34.println();
        printStream34.print("italien (Italie)");
        java.io.PrintStream printStream41 = new java.io.PrintStream((java.io.OutputStream) printStream34);
        printStream34.println('4');
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleKeys();
        java.lang.String str50 = locale47.getDisplayVariant(locale48);
        java.lang.String str51 = locale47.getDisplayLanguage();
        java.lang.String str52 = locale44.getDisplayVariant(locale47);
        java.io.PrintStream printStream55 = new java.io.PrintStream("zh_CN");
        printStream55.print((float) (byte) -1);
        printStream55.println();
        printStream55.print("ita");
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleKeys();
        java.util.Locale locale63 = locale61.stripExtensions();
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        java.lang.Throwable[] throwableArray68 = mathException67.getSuppressed();
        java.lang.Throwable[] throwableArray69 = mathException67.getSuppressed();
        java.io.PrintStream printStream70 = printStream55.printf(locale63, "fr", (java.lang.Object[]) throwableArray69);
        java.io.PrintStream printStream71 = printStream34.printf(locale47, "JA", (java.lang.Object[]) throwableArray69);
        java.io.PrintWriter printWriter72 = printWriter28.format("Canada", (java.lang.Object[]) throwableArray69);
        java.io.PrintWriter printWriter74 = printWriter28.append(' ');
        printWriter74.write("org.apache.commons.math.MathException: de");
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese" + "'", str51, "Chinese");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter74);
    }

    @Test
    public void test07850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07850");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("japonais");
    }

    @Test
    public void test07851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07851");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.setVariant("anglais");
        java.util.Locale.Builder builder7 = builder2.setExtension('a', "IT");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setExtension('u', "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ????? (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test07852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07852");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("Chinese", "United Kingdom");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: United Kingdom");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07853");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println("hi!");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.close();
        printStream1.print('#');
        java.io.PrintStream printStream15 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print("giapponese");
        printStream1.print(false);
    }

    @Test
    public void test07854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07854");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter1.write("chinois");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getCountry();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale6.getISO3Country();
        java.util.Set<java.lang.Character> charSet11 = locale6.getExtensionKeys();
        java.io.PrintStream printStream14 = new java.io.PrintStream("zh_CN");
        printStream14.print((float) (byte) -1);
        char[] charArray19 = new char[] { 'x', 'u' };
        printStream14.println(charArray19);
        java.util.Locale locale23 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str24 = locale23.getCountry();
        java.io.PrintStream printStream27 = new java.io.PrintStream("zh_CN");
        printStream27.print((float) (byte) -1);
        printStream27.println();
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException(throwable32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray35 = mathException33.getSuppressed();
        java.io.PrintStream printStream36 = printStream27.format("italien (Italie)", (java.lang.Object[]) throwableArray35);
        java.io.PrintStream printStream37 = printStream14.printf(locale23, "fr-CA", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter38 = printWriter1.printf(locale6, "italiano", (java.lang.Object[]) throwableArray35);
        printWriter1.flush();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.print("it_IT");
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale44.getDisplayName(locale46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.lang.String str50 = locale44.getDisplayCountry(locale48);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.io.PrintWriter printWriter55 = printWriter41.printf(locale48, "it_IT", objArray53);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("fr");
        printWriter58.print("it_IT");
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("hi!", objArray65);
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = mathException66.getSuppressed();
        java.io.PrintWriter printWriter69 = printWriter58.printf(locale62, "it_IT", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter70 = printWriter41.format("it_IT", (java.lang.Object[]) throwableArray68);
        printWriter70.println();
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale72.getDisplayCountry(locale73);
        java.lang.String str75 = locale72.getVariant();
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.lang.String str77 = locale72.getDisplayScript(locale76);
        java.util.Locale locale80 = new java.util.Locale("Italy", "Italy");
        java.lang.String str81 = locale76.getDisplayLanguage(locale80);
        boolean boolean82 = locale76.hasExtensions();
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException();
        java.lang.String str86 = mathException85.getPattern();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException85);
        java.lang.Object[] objArray88 = mathException85.getArguments();
        java.io.PrintWriter printWriter89 = printWriter70.format(locale76, "cinese", objArray88);
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.Writer) printWriter89);
        java.lang.Object[] objArray92 = null;
        java.io.PrintWriter printWriter93 = printWriter90.format("", objArray92);
        char[] charArray94 = new char[] {};
        printWriter93.println(charArray94);
        printWriter1.write(charArray94);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[x, u]");
        org.junit.Assert.assertEquals(locale23.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITALY" + "'", str24, "ITALY");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals(locale80.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "English" + "'", str81, "English");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(printWriter89);
        org.junit.Assert.assertNotNull(printWriter93);
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray94), "[]");
    }

    @Test
    public void test07855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07855");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(117);
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, 0.0d);
        double double11 = hypergeometricDistributionImpl3.probability((double) (byte) 10);
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.7008547008546866d + "'", double9 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test07856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07856");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("fr");
        printWriter8.print("it_IT");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale11.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = locale11.getDisplayCountry(locale15);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.io.PrintWriter printWriter22 = printWriter8.printf(locale15, "it_IT", objArray20);
        printWriter8.println();
        printWriter8.print(10);
        java.io.PrintWriter printWriter29 = printWriter8.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter8, true);
        printWriter8.println(false);
        java.io.PrintStream printStream37 = new java.io.PrintStream("zh_CN");
        printStream37.print((float) (byte) -1);
        printStream37.println();
        printStream37.print("ita");
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.util.Locale locale45 = locale43.stripExtensions();
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = mathException49.getSuppressed();
        java.io.PrintStream printStream52 = printStream37.printf(locale45, "fr", (java.lang.Object[]) throwableArray51);
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        java.lang.Object[] objArray56 = mathException55.getArguments();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray51, (java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray58 = mathException55.getSuppressed();
        java.io.PrintWriter printWriter59 = printWriter8.printf("chinois", (java.lang.Object[]) throwableArray58);
        java.io.PrintWriter printWriter60 = printWriter5.format("italien (Italie)", (java.lang.Object[]) throwableArray58);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter60);
        boolean boolean62 = printWriter61.checkError();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test07857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07857");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        hypergeometricDistributionImpl3.setSampleSize((int) '4');
        int int11 = hypergeometricDistributionImpl3.getPopulationSize();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = hypergeometricDistributionImpl3.inverseCumulativeProbability((double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0 and 1.0 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
    }

    @Test
    public void test07858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07858");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        printStream1.println((float) 97);
        printStream1.print(false);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream11, true);
        printStream11.flush();
        org.junit.Assert.assertNotNull(printStream4);
    }

    @Test
    public void test07859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07859");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "\u4e2d\u56fd\u8a9e_IT_IT");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ???_IT_IT");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07860");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream10 = printStream4.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray9);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        printStream11.println((double) 1L);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale14.getDisplayScript(locale18);
        java.util.Locale locale22 = new java.util.Locale("Italy", "Italy");
        java.lang.String str23 = locale18.getDisplayLanguage(locale22);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(throwable25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintStream printStream29 = printStream11.format(locale18, "anglais", (java.lang.Object[]) throwableArray28);
        java.util.Set<java.lang.Character> charSet30 = locale18.getExtensionKeys();
        java.lang.String str31 = locale18.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.getCountry();
        java.lang.String str35 = locale32.getDisplayLanguage();
        java.lang.String str36 = locale32.getISO3Country();
        java.util.Set<java.lang.Character> charSet37 = locale32.getExtensionKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.lang.String str39 = locale18.getDisplayLanguage(locale32);
        java.util.Set<java.lang.Character> charSet40 = locale32.getExtensionKeys();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale22.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English" + "'", str39, "English");
        org.junit.Assert.assertNotNull(charSet40);
    }

    @Test
    public void test07861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07861");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) 'x');
        double double14 = hypergeometricDistributionImpl3.upperCumulativeProbability(100);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        hypergeometricDistributionImpl3.setSampleSize((int) ' ');
        int int19 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double22 = hypergeometricDistributionImpl3.cumulativeProbability(10.0d, (double) 10L);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(4);
        int int25 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        // The following exception was thrown during execution in test generation
        try {
            double double28 = hypergeometricDistributionImpl3.cumulativeProbability((double) 32, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120 + "'", int19 == 120);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test07862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07862");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("chinois", 0.0d);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        double double7 = languageRange2.getWeight();
        double double8 = languageRange2.getWeight();
        java.io.PrintStream printStream10 = new java.io.PrintStream("zh_CN");
        printStream10.println();
        java.io.PrintStream printStream13 = printStream10.append('#');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream10, true);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream10, false);
        printWriter17.println(10.0d);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        printWriter21.print("it_IT");
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale24.getDisplayCountry(locale28);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray33);
        java.io.PrintWriter printWriter35 = printWriter21.printf(locale28, "it_IT", objArray33);
        printWriter21.println();
        printWriter21.print(10);
        java.io.PrintWriter printWriter42 = printWriter21.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter21, true);
        printWriter17.print((java.lang.Object) printWriter44);
        boolean boolean46 = languageRange2.equals((java.lang.Object) printWriter44);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "chinois" + "'", str4, "chinois");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07863");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.write("en-GB");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl14 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int15 = hypergeometricDistributionImpl14.getSampleSize();
        int int16 = hypergeometricDistributionImpl14.getPopulationSize();
        double double18 = hypergeometricDistributionImpl14.upperCumulativeProbability((int) '#');
        int int19 = hypergeometricDistributionImpl14.getPopulationSize();
        int int20 = hypergeometricDistributionImpl14.getNumberOfSuccesses();
        hypergeometricDistributionImpl14.setNumberOfSuccesses((int) (byte) 10);
        printWriter1.print((java.lang.Object) hypergeometricDistributionImpl14);
        double double25 = hypergeometricDistributionImpl14.probability((double) (byte) 1);
        double double27 = hypergeometricDistributionImpl14.cumulativeProbability((int) ' ');
        double double29 = hypergeometricDistributionImpl14.cumulativeProbability(0.11499182616210182d);
        int int30 = hypergeometricDistributionImpl14.getNumberOfSuccesses();
        double double33 = hypergeometricDistributionImpl14.cumulativeProbability(35, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = hypergeometricDistributionImpl14.cumulativeProbability(0.999999999999992d, 3.72317234707988E-12d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.11499182616210182d + "'", double25 == 0.11499182616210182d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.023984009456667447d + "'", double29 == 0.023984009456667447d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test07864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07864");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.println("English");
        printWriter1.write((int) (byte) 1);
        printWriter1.print((long) 34);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
    }

    @Test
    public void test07865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07865");
        java.util.Locale locale2 = new java.util.Locale("hi!", "Italy");
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale2.getVariant();
        java.io.PrintStream printStream6 = new java.io.PrintStream("zh_CN");
        printStream6.print((float) (byte) -1);
        printStream6.println();
        printStream6.print("ita");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("italy");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        printWriter18.close();
        java.io.PrintWriter printWriter23 = printWriter18.append((java.lang.CharSequence) "\u65e5\u672c\u8a9e");
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = locale24.getCountry();
        java.io.PrintStream printStream29 = new java.io.PrintStream("China");
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.print("it_IT");
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter37 = printWriter32.printf("fr", objArray36);
        printWriter37.write((int) 'x');
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("fr-CA");
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        java.io.PrintWriter printWriter44 = printWriter37.printf("\u30ab\u30ca\u30c0", (java.lang.Object[]) throwableArray43);
        java.io.PrintStream printStream45 = printStream29.printf("english", (java.lang.Object[]) throwableArray43);
        java.io.PrintWriter printWriter46 = printWriter18.format(locale24, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)", (java.lang.Object[]) throwableArray43);
        java.io.PrintWriter printWriter47 = printWriter13.format(locale15, "", (java.lang.Object[]) throwableArray43);
        java.lang.String str49 = locale15.getUnicodeLocaleType("it");
        java.util.Locale.setDefault(locale15);
        java.lang.String str51 = locale2.getDisplayCountry(locale15);
        java.lang.String str52 = locale15.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_ITALY");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "italy");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ITALY" + "'", str51, "ITALY");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "italy" + "'", str52, "italy");
    }

    @Test
    public void test07866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07866");
        java.io.PrintStream printStream2 = new java.io.PrintStream("zh_CN");
        printStream2.print((float) (byte) -1);
        printStream2.println();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException(throwable7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        java.lang.Throwable[] throwableArray10 = mathException8.getSuppressed();
        java.io.PrintStream printStream11 = printStream2.format("italien (Italie)", (java.lang.Object[]) throwableArray10);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", objArray15);
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        java.io.PrintStream printStream18 = printStream2.printf(locale12, "ja", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("DE", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException19);
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test07867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07867");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream10 = printStream4.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray9);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        printStream11.println((double) 1L);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale14.getDisplayScript(locale18);
        java.util.Locale locale22 = new java.util.Locale("Italy", "Italy");
        java.lang.String str23 = locale18.getDisplayLanguage(locale22);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(throwable25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintStream printStream29 = printStream11.format(locale18, "anglais", (java.lang.Object[]) throwableArray28);
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        boolean boolean33 = locale30.hasExtensions();
        java.lang.Object[] objArray35 = null;
        java.io.PrintStream printStream36 = printStream11.format(locale30, "Chinesisch (Taiwan)", objArray35);
        java.io.PrintStream printStream38 = printStream11.append(' ');
        printStream11.println("\u5fb7\u6587");
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale22.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream38);
    }

    @Test
    public void test07868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07868");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.MathException", "chinois (Taiwan)");
        java.util.Locale locale3 = java.util.Locale.ROOT;
        boolean boolean4 = locale3.hasExtensions();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale3.getDisplayName(locale5);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("fr");
        printWriter8.print("it_IT");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale11.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = locale11.getDisplayCountry(locale15);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray20);
        java.io.PrintWriter printWriter22 = printWriter8.printf(locale15, "it_IT", objArray20);
        printWriter22.print((double) 100L);
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale25.getVariant();
        java.lang.String str29 = locale25.getCountry();
        java.io.PrintStream printStream32 = new java.io.PrintStream("zh_CN");
        printStream32.print((float) (byte) -1);
        printStream32.println();
        printStream32.print("ita");
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale40 = locale38.stripExtensions();
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = mathException44.getSuppressed();
        java.io.PrintStream printStream47 = printStream32.printf(locale40, "fr", (java.lang.Object[]) throwableArray46);
        java.io.PrintWriter printWriter48 = printWriter22.format(locale25, "fra", (java.lang.Object[]) throwableArray46);
        java.util.Set<java.lang.String> strSet49 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale25.toLanguageTag();
        java.lang.String str51 = locale5.getDisplayLanguage(locale25);
        java.util.Locale locale54 = new java.util.Locale("en-GB", "Italy");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str56 = locale5.getDisplayVariant(locale54);
        java.lang.String str57 = locale2.getDisplayCountry(locale5);
        java.util.Locale.setDefault(locale5);
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.mathexception_CHINOIS (TAIWAN)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja" + "'", str50, "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(locale54.toString(), "en-gb_ITALY");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "CHINOIS (TAIWAN)" + "'", str57, "CHINOIS (TAIWAN)");
    }

    @Test
    public void test07869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07869");
        java.util.Locale locale2 = new java.util.Locale("TW", "chn");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale2.toString(), "tw_CHN");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test07870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07870");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.setLanguageTag("JA");
        java.util.Locale.Builder builder7 = builder1.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("und");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test07871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07871");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter15.close();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.println();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        printWriter22.print("it_IT");
        java.util.Locale locale25 = java.util.Locale.ROOT;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale25.getDisplayName(locale27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale25.getDisplayCountry(locale29);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        java.io.PrintWriter printWriter36 = printWriter22.printf(locale29, "it_IT", objArray34);
        java.io.PrintWriter printWriter37 = printWriter18.printf("English", objArray34);
        java.io.PrintStream printStream39 = new java.io.PrintStream("zh_CN");
        printStream39.print((float) (byte) -1);
        printStream39.println();
        printStream39.println();
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream39, true);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter49 = printWriter47.append(' ');
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("fr");
        printWriter52.print("it_IT");
        java.util.Locale locale55 = java.util.Locale.ROOT;
        boolean boolean56 = locale55.hasExtensions();
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale55.getDisplayName(locale57);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = locale55.getDisplayCountry(locale59);
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        java.io.PrintWriter printWriter66 = printWriter52.printf(locale59, "it_IT", objArray64);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter("fr");
        printWriter69.print("it_IT");
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray76);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = mathException77.getSuppressed();
        java.io.PrintWriter printWriter80 = printWriter69.printf(locale73, "it_IT", (java.lang.Object[]) throwableArray79);
        java.io.PrintWriter printWriter81 = printWriter52.format("it_IT", (java.lang.Object[]) throwableArray79);
        java.io.PrintWriter printWriter82 = printWriter49.format("zh_CN", (java.lang.Object[]) throwableArray79);
        java.io.PrintStream printStream84 = new java.io.PrintStream("zh_CN");
        printStream84.print((float) (byte) -1);
        char[] charArray89 = new char[] { 'x', 'u' };
        printStream84.println(charArray89);
        printWriter82.print(charArray89);
        printStream39.print(charArray89);
        printWriter37.write(charArray89);
        printWriter15.write(charArray89);
        printWriter15.print(' ');
        printWriter15.write("FRA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[x, u]");
    }

    @Test
    public void test07872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07872");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl(35, 2, 31);
        int int4 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test07873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07873");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        printStream1.println(0L);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("fr");
        printWriter20.print("it_IT");
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale23.getDisplayName(locale25);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale23.getDisplayCountry(locale27);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", objArray32);
        java.io.PrintWriter printWriter34 = printWriter20.printf(locale27, "it_IT", objArray32);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("fr");
        printWriter37.print("it_IT");
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.lang.Throwable[] throwableArray46 = mathException45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = mathException45.getSuppressed();
        java.io.PrintWriter printWriter48 = printWriter37.printf(locale41, "it_IT", (java.lang.Object[]) throwableArray47);
        java.io.PrintWriter printWriter49 = printWriter20.format("it_IT", (java.lang.Object[]) throwableArray47);
        java.io.PrintWriter printWriter51 = printWriter20.append('u');
        printWriter20.print("zh_CN");
        printStream1.println((java.lang.Object) "zh_CN");
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println((long) 120);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test07874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07874");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder7 = builder3.setRegion("ja");
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "italien");
        java.util.Locale locale11 = builder7.build();
        java.util.Locale locale14 = new java.util.Locale("fr", "fr");
        java.lang.String str15 = locale14.getDisplayScript();
        java.util.Locale.setDefault(locale14);
        java.util.Locale locale20 = new java.util.Locale("", "", "");
        java.lang.String str21 = locale14.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.lang.String str25 = locale22.getVariant();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale22.getDisplayScript(locale26);
        java.util.Locale locale30 = new java.util.Locale("Italy", "Italy");
        java.lang.String str31 = locale26.getDisplayLanguage(locale30);
        boolean boolean32 = locale26.hasExtensions();
        java.lang.String str33 = locale26.getISO3Language();
        java.lang.String str34 = locale20.getDisplayScript(locale26);
        java.lang.String str35 = locale11.getDisplayVariant(locale26);
        java.util.Set<java.lang.Character> charSet36 = locale11.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = locale11.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "_JA_#a-italien");
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale30.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(charSet36);
    }

    @Test
    public void test07875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07875");
        java.io.PrintStream printStream1 = new java.io.PrintStream("en-GB");
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream3.println((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream3, false, "japonais (Japon)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: japonais (Japon)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07876");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("ITALY");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.setScript("");
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder11 = builder8.clearExtensions();
        java.util.Locale.Builder builder12 = builder8.clear();
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setLanguageTag("ita");
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale17.getDisplayScript(locale21);
        boolean boolean23 = locale17.hasExtensions();
        java.util.Locale.Builder builder24 = builder14.setLocale(locale17);
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale25.getVariant();
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = locale25.getDisplayScript(locale29);
        java.util.Locale locale33 = new java.util.Locale("Italy", "Italy");
        java.lang.String str34 = locale29.getDisplayLanguage(locale33);
        boolean boolean35 = locale29.hasExtensions();
        java.lang.String str36 = locale29.getISO3Language();
        boolean boolean37 = locale29.hasExtensions();
        java.util.Locale.Builder builder38 = builder14.setLocale(locale29);
        java.util.Locale.Builder builder39 = builder8.setLocale(locale29);
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale40.getDisplayScript(locale44);
        java.util.Locale locale46 = locale44.stripExtensions();
        java.util.Set<java.lang.Character> charSet47 = locale44.getExtensionKeys();
        java.lang.String str48 = locale29.getDisplayCountry(locale44);
        java.util.Locale.Builder builder49 = builder4.setLocale(locale44);
        java.util.Locale.Builder builder50 = builder49.clearExtensions();
        java.util.Locale locale51 = builder50.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(locale33.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English" + "'", str34, "English");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Canada" + "'", str48, "Canada");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
    }

    @Test
    public void test07877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07877");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale1.getVariant();
        java.lang.String str3 = locale1.toLanguageTag();
        java.lang.String str5 = locale1.getUnicodeLocaleType("CA");
        java.util.Locale locale6 = locale1.stripExtensions();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = new java.util.Locale("fran\347ais (France)");
        java.util.Locale.setDefault(category8, locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        java.lang.String str16 = locale15.getDisplayVariant();
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "de" + "'", str3, "de");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals(locale12.toString(), "fran\347ais (france)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fran\347ais (france)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test07878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07878");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.println((int) (byte) -1);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter13.print((long) 97);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getCountry();
        java.lang.String str21 = locale18.getDisplayLanguage();
        java.lang.String str22 = locale18.getISO3Country();
        java.lang.String str23 = locale16.getDisplayScript(locale18);
        java.io.PrintStream printStream26 = new java.io.PrintStream("zh_CN");
        printStream26.println();
        java.io.PrintStream printStream29 = printStream26.append('#');
        printStream26.close();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream26.write(byteArray34);
        printStream26.write((int) 'a');
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream26);
        printStream38.print(false);
        printStream38.print(false);
        java.util.Locale locale45 = new java.util.Locale("hi!", "Italy");
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getVariant();
        java.util.Locale.setDefault(locale45);
        java.io.PrintStream printStream51 = new java.io.PrintStream("zh_CN");
        printStream51.print((float) (byte) -1);
        printStream51.println();
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException(throwable56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException57);
        java.lang.Throwable[] throwableArray59 = mathException57.getSuppressed();
        java.io.PrintStream printStream60 = printStream51.format("italien (Italie)", (java.lang.Object[]) throwableArray59);
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        java.lang.Throwable[] throwableArray66 = mathException65.getSuppressed();
        java.io.PrintStream printStream67 = printStream51.printf(locale61, "ja", (java.lang.Object[]) throwableArray66);
        java.io.PrintStream printStream68 = printStream38.printf(locale45, "CN", (java.lang.Object[]) throwableArray66);
        java.io.PrintWriter printWriter69 = printWriter13.printf(locale16, "Regno Unito", (java.lang.Object[]) throwableArray66);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter("fr");
        printWriter71.print("it_IT");
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter76 = printWriter71.printf("fr", objArray75);
        printWriter76.print((float) (byte) 100);
        java.io.PrintWriter printWriter80 = printWriter76.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.Writer) printWriter76);
        printWriter81.println((long) 117);
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter87 = printWriter85.append(' ');
        char[] charArray90 = new char[] { 'x', 'a' };
        printWriter87.print(charArray90);
        printWriter81.println(charArray90);
        printWriter69.println(charArray90);
        boolean boolean94 = printWriter69.checkError();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, -1]");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_ITALY");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[x, a]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test07879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07879");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("zh_CN", objArray17);
        printWriter1.print('u');
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter26 = printWriter24.append(' ');
        printWriter26.println((double) '4');
        char[] charArray34 = new char[] { '4', ' ', 'x', 'u', 'a' };
        printWriter26.print(charArray34);
        printWriter1.println(charArray34);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale.Builder builder40 = builder38.clear();
        printWriter1.println((java.lang.Object) builder38);
        printWriter1.print(0.0d);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4 xua");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4 xua");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4,  , x, u, a]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test07880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07880");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.setExtension('x', "italien");
        java.util.Locale.Builder builder7 = builder1.setVariant("");
        java.util.Locale.Builder builder8 = builder1.clearExtensions();
        java.util.Locale.Builder builder10 = builder1.setLanguage("Italian");
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("chn");
        java.util.Locale locale13 = builder12.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "italian");
    }

    @Test
    public void test07881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07881");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getCountry();
        boolean boolean3 = locale0.hasExtensions();
        java.lang.String str4 = locale0.getVariant();
        java.io.PrintStream printStream6 = new java.io.PrintStream("zh_CN");
        printStream6.print((float) (byte) -1);
        printStream6.println();
        printStream6.print("ita");
        printStream6.println('#');
        java.io.PrintStream printStream15 = new java.io.PrintStream("zh_CN");
        printStream15.println();
        java.io.PrintStream printStream18 = printStream15.append('#');
        printStream15.close();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream15.write(byteArray23);
        printStream15.println((int) (byte) -1);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter29 = printWriter27.append((java.lang.CharSequence) "ja");
        printWriter29.println(true);
        printWriter29.write("allemand");
        printWriter29.write(52);
        printWriter29.println(0.8547008547008489d);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.print("it_IT");
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = mathException49.getSuppressed();
        java.io.PrintWriter printWriter52 = printWriter41.printf(locale45, "it_IT", (java.lang.Object[]) throwableArray51);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("fr");
        printWriter55.print("it_IT");
        java.util.Locale locale58 = java.util.Locale.ROOT;
        boolean boolean59 = locale58.hasExtensions();
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale58.getDisplayName(locale60);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        boolean boolean63 = locale62.hasExtensions();
        java.lang.String str64 = locale58.getDisplayCountry(locale62);
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", objArray67);
        java.io.PrintWriter printWriter69 = printWriter55.printf(locale62, "it_IT", objArray67);
        java.io.PrintWriter printWriter70 = printWriter39.printf(locale45, "fr", objArray67);
        char[] charArray74 = new char[] { '#', ' ', 'x' };
        printWriter39.write(charArray74);
        printWriter29.println(charArray74);
        printStream6.print(charArray74);
        boolean boolean78 = locale0.equals((java.lang.Object) charArray74);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Italian" + "'", str1, "Italian");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "# x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "# x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#,  , x]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test07882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07882");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter6.write((int) 'x');
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("fr-CA");
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter13 = printWriter6.printf("\u30ab\u30ca\u30c0", (java.lang.Object[]) throwableArray12);
        printWriter13.println('#');
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test07883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07883");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 1);
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'a', (int) 'u');
        hypergeometricDistributionImpl3.setSampleSize((int) (short) 0);
        hypergeometricDistributionImpl3.setSampleSize(120);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test07884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07884");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getUnicodeLocaleType("FR");
        java.lang.String str4 = locale0.getISO3Language();
        java.util.Locale locale5 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fra" + "'", str4, "fra");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FR" + "'", str7, "FR");
    }

    @Test
    public void test07885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07885");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter1.println();
        printWriter1.println('x');
        printWriter1.println(' ');
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println((long) 'a');
        printWriter1.print(1.0f);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test07886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07886");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.println(0.0f);
        printWriter1.write("fr");
        printWriter1.println((int) 'u');
        java.io.PrintStream printStream13 = new java.io.PrintStream("zh_CN");
        printStream13.print((float) (byte) -1);
        printStream13.println();
        printStream13.println();
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream13, true);
        printStream13.println();
        printStream13.print((-1));
        printStream13.write((int) (byte) 1);
        printStream13.print(true);
        java.io.PrintStream printStream29 = new java.io.PrintStream("zh_CN");
        printStream29.println();
        java.io.PrintStream printStream32 = printStream29.append('#');
        printStream29.close();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream29.write(byteArray37);
        printStream29.write((int) 'a');
        printStream29.println((int) (short) 100);
        printStream29.print(1L);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("fr");
        printWriter64.print("it_IT");
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray71 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        java.lang.Throwable[] throwableArray74 = mathException72.getSuppressed();
        java.io.PrintWriter printWriter75 = printWriter64.printf(locale68, "it_IT", (java.lang.Object[]) throwableArray74);
        java.io.PrintWriter printWriter76 = printWriter47.format("it_IT", (java.lang.Object[]) throwableArray74);
        printWriter76.println();
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException(throwable80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        java.lang.Throwable[] throwableArray83 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray83);
        java.io.PrintWriter printWriter85 = printWriter76.format("Royaume-Uni", (java.lang.Object[]) throwableArray83);
        java.io.PrintStream printStream86 = printStream29.printf("Chinese (China)", (java.lang.Object[]) throwableArray83);
        java.io.PrintStream printStream87 = printStream13.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray83);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException");
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray83, (java.lang.Throwable) mathException89);
        java.io.PrintWriter printWriter91 = printWriter1.format("fr-CA", (java.lang.Object[]) throwableArray83);
        java.io.PrintWriter printWriter93 = printWriter1.append((java.lang.CharSequence) "GERMAN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(printWriter85);
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printWriter91);
        org.junit.Assert.assertNotNull(printWriter93);
    }

    @Test
    public void test07887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07887");
        java.io.PrintStream printStream1 = new java.io.PrintStream("canada_CHINESE_Canada");
        java.io.PrintStream printStream3 = printStream1.append(' ');
        printStream1.close();
        org.junit.Assert.assertNotNull(printStream3);
    }

    @Test
    public void test07888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07888");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("eng");
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("it");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.addUnicodeLocaleAttribute("fran\347ais (France)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: franc?ais (France) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test07889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07889");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0, (int) '4');
        double double17 = hypergeometricDistributionImpl3.probability((double) (byte) -1);
        double double19 = hypergeometricDistributionImpl3.probability((int) '#');
        int int21 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.1794871794871778d);
        double double24 = hypergeometricDistributionImpl3.cumulativeProbability(7.009401437221889E-12d, (double) (short) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.8290598290598294d + "'", double24 == 0.8290598290598294d);
    }

    @Test
    public void test07890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07890");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        hypergeometricDistributionImpl3.setPopulationSize(117);
        int int6 = hypergeometricDistributionImpl3.getSampleSize();
        int int7 = hypergeometricDistributionImpl3.getSampleSize();
        double double9 = hypergeometricDistributionImpl3.probability((double) '4');
        double double11 = hypergeometricDistributionImpl3.probability((int) (short) 100);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) 100L);
        int int15 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
    }

    @Test
    public void test07891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07891");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println();
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException(throwable34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray37 = mathException35.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter39 = printWriter30.format("Royaume-Uni", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter41 = printWriter39.append((java.lang.CharSequence) "\uc601\uc5b4");
        boolean boolean42 = printWriter41.checkError();
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("fr");
        printWriter44.print("it_IT");
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter49 = printWriter44.printf("fr", objArray48);
        printWriter49.print((float) (byte) 100);
        java.io.PrintWriter printWriter53 = printWriter49.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter55 = printWriter53.append('4');
        printWriter41.print((java.lang.Object) printWriter53);
        printWriter53.println((float) 4);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter55);
    }

    @Test
    public void test07892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07892");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale4 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.lang.String str7 = locale4.getDisplayCountry(locale5);
        java.lang.String str8 = locale0.getDisplayVariant(locale5);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        boolean boolean10 = locale9.hasExtensions();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale9.getDisplayCountry(locale13);
        java.lang.String str16 = locale0.getDisplayCountry(locale13);
        java.util.Locale locale17 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet18 = locale0.getUnicodeLocaleKeys();
        java.lang.String str19 = locale0.getDisplayCountry();
        java.lang.String str21 = locale0.getExtension('a');
        java.lang.String str22 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "China" + "'", str16, "China");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "China" + "'", str19, "China");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CN" + "'", str22, "CN");
    }

    @Test
    public void test07893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07893");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale locale3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setVariant("tedesco-JA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: tedesco-JA [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ita");
    }

    @Test
    public void test07894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07894");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException(throwable9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        printStream1.println((java.lang.Object) throwableArray12);
        printStream1.println('x');
        boolean boolean16 = printStream1.checkError();
        java.io.PrintStream printStream20 = new java.io.PrintStream("zh_CN");
        printStream20.print((float) (byte) -1);
        printStream20.println();
        printStream20.print("ita");
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.util.Locale locale28 = locale26.stripExtensions();
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray31);
        java.lang.Throwable[] throwableArray33 = mathException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = mathException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream20.printf(locale28, "fr", (java.lang.Object[]) throwableArray34);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", objArray37);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray34, (java.lang.Throwable) mathException38);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        java.lang.Object[] objArray44 = mathException43.getArguments();
        mathException38.addSuppressed((java.lang.Throwable) mathException43);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException(throwable46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException48);
        mathException38.addSuppressed((java.lang.Throwable) mathException49);
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        java.lang.Object[] objArray56 = mathException55.getArguments();
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", objArray58);
        java.lang.Throwable[] throwableArray60 = mathException59.getSuppressed();
        mathException55.addSuppressed((java.lang.Throwable) mathException59);
        java.lang.Throwable[] throwableArray62 = mathException55.getSuppressed();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException();
        java.lang.String str64 = mathException63.getPattern();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray62, (java.lang.Throwable) mathException63);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray62);
        mathException38.addSuppressed((java.lang.Throwable) mathException66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("eng", (java.lang.Throwable) mathException38);
        java.lang.String str69 = mathException38.getPattern();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray71 = mathException38.getSuppressed();
        printStream1.println((java.lang.Object) throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test07895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07895");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.println((int) (short) 100);
        printStream1.print(false);
        printStream1.flush();
        printStream1.print((double) '#');
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream20.close();
        java.io.PrintStream printStream23 = new java.io.PrintStream("zh_CN");
        printStream23.println();
        java.io.PrintStream printStream26 = printStream23.append('#');
        printStream23.close();
        printStream23.print((float) 'u');
        printStream23.println(35);
        printStream23.println(0.0d);
        java.io.PrintStream printStream35 = new java.io.PrintStream("zh_CN");
        printStream35.println();
        java.io.PrintStream printStream38 = printStream35.append('#');
        printStream35.close();
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream35.write(byteArray44);
        printStream23.write(byteArray44);
        printStream20.write(byteArray44, (-1), 0);
        printStream20.println('a');
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100, -1, -1]");
    }

    @Test
    public void test07896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07896");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream1.write(byteArray10);
        printStream1.print(false);
        printStream1.println("Italy");
        printStream1.print((float) (byte) 100);
        java.io.PrintStream printStream19 = printStream1.append((java.lang.CharSequence) "zh_cn");
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream19, true);
        printWriter21.print((long) 34);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(printStream19);
    }

    @Test
    public void test07897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07897");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.setLanguageTag("JA");
        java.util.Locale.Builder builder7 = builder1.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("anglais");
        java.util.Locale.Builder builder10 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setLanguage("org.apache.commons.math.MathException: italien");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.MathException: italien [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test07898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07898");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(0);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double11 = hypergeometricDistributionImpl3.cumulativeProbability((int) 'u');
        int int12 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
    }

    @Test
    public void test07899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07899");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        printWriter1.close();
        java.io.PrintWriter printWriter6 = printWriter1.append((java.lang.CharSequence) "\u65e5\u672c\u8a9e");
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.setLanguage("de");
        java.util.Locale.Builder builder12 = builder8.clearExtensions();
        java.util.Locale.Builder builder14 = builder8.setLanguageTag("ita");
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder14.clearExtensions();
        printWriter6.println((java.lang.Object) builder16);
        java.util.Locale.Builder builder18 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder16.setLanguageTag("franz\366sisch (frankreich) (Korean)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: franzo?sisch (frankreich) (Korean) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ita");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test07900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07900");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException(throwable9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        java.io.PrintWriter printWriter13 = printWriter1.format(locale5, "Italy", (java.lang.Object[]) throwableArray12);
        printWriter13.println(1.0d);
        printWriter13.close();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.println();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("fr");
        printWriter22.print("it_IT");
        java.util.Locale locale25 = java.util.Locale.ROOT;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale25.getDisplayName(locale27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = locale25.getDisplayCountry(locale29);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("hi!", objArray34);
        java.io.PrintWriter printWriter36 = printWriter22.printf(locale29, "it_IT", objArray34);
        java.io.PrintWriter printWriter37 = printWriter18.printf("English", objArray34);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter18, false);
        printWriter18.print(true);
        java.io.PrintWriter printWriter43 = printWriter18.append((java.lang.CharSequence) "Canada");
        java.io.PrintStream printStream45 = new java.io.PrintStream("zh_CN");
        printStream45.print((float) (byte) -1);
        printStream45.println();
        printStream45.print("ita");
        printStream45.println('#');
        printStream45.println('u');
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter58 = printWriter56.append(' ');
        char[] charArray61 = new char[] { 'x', 'a' };
        printWriter58.print(charArray61);
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        java.lang.Throwable[] throwableArray68 = mathException67.getSuppressed();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter70 = printWriter58.printf("en-GB", (java.lang.Object[]) throwableArray68);
        char[] charArray75 = new char[] { 'a', ' ', 'u', 'x' };
        printWriter70.write(charArray75);
        printStream45.print(charArray75);
        printWriter43.write(charArray75);
        printWriter13.println(charArray75);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[x, a]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "a ux");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "a ux");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[a,  , u, x]");
    }

    @Test
    public void test07901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07901");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.print((long) 'u');
        printStream1.print(true);
        printStream1.print('4');
        java.io.PrintStream printStream15 = printStream1.append('x');
        printStream15.print(100L);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test07902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07902");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale3.getDisplayScript(locale6);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale12 = new java.util.Locale("\uc77c\ubcf8\uc5b4", "ko", "org.apache.commons.math.MathException: anglais");
        java.lang.String str13 = locale3.getDisplayVariant(locale12);
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale3.getDisplayCountry(locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale12.toString(), "\uc77c\ubcf8\uc5b4_KO_org.apache.commons.math.MathException: anglais");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test07903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07903");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = printWriter7.append(' ');
        char[] charArray12 = new char[] { 'x', 'a' };
        printWriter9.print(charArray12);
        printStream1.println(charArray12);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter20 = printWriter18.append(' ');
        char[] charArray23 = new char[] { 'x', 'a' };
        printWriter20.print(charArray23);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.lang.Throwable[] throwableArray30 = mathException29.getSuppressed();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray30);
        java.io.PrintWriter printWriter32 = printWriter20.printf("en-GB", (java.lang.Object[]) throwableArray30);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str37 = locale34.getDisplayLanguage();
        java.io.PrintStream printStream40 = new java.io.PrintStream("zh_CN");
        printStream40.print((float) (byte) -1);
        printStream40.println();
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException(throwable45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintStream printStream49 = printStream40.format("italien (Italie)", (java.lang.Object[]) throwableArray48);
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.lang.Throwable[] throwableArray55 = mathException54.getSuppressed();
        java.io.PrintStream printStream56 = printStream40.printf(locale50, "ja", (java.lang.Object[]) throwableArray55);
        java.io.PrintWriter printWriter57 = printWriter20.printf(locale34, "Chinesisch (Taiwan)", (java.lang.Object[]) throwableArray55);
        printStream1.println((java.lang.Object) "Chinesisch (Taiwan)");
        java.io.PrintStream printStream60 = new java.io.PrintStream("zh_CN");
        printStream60.print((float) (byte) -1);
        printStream60.println();
        printStream60.print("ita");
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.util.Locale locale68 = locale66.stripExtensions();
        java.lang.Object[] objArray71 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        java.lang.Throwable[] throwableArray74 = mathException72.getSuppressed();
        java.io.PrintStream printStream75 = printStream60.printf(locale68, "fr", (java.lang.Object[]) throwableArray74);
        java.io.PrintStream printStream77 = new java.io.PrintStream("zh_CN");
        printStream77.print((float) (byte) -1);
        char[] charArray82 = new char[] { 'x', 'u' };
        printStream77.println(charArray82);
        printStream77.println(0);
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 10 };
        printStream77.write(byteArray90);
        printStream75.write(byteArray90);
        printStream1.write(byteArray90, (int) (byte) 0, (int) (byte) 10);
        printStream1.print((double) 10.0f);
        printStream1.write((int) (short) 10);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[x, a]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[x, a]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japanese" + "'", str37, "Japanese");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[x, u]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[0, 100, 0, 10]");
    }

    @Test
    public void test07904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07904");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter3.println(false);
        printWriter3.println(5.836992974634979E-6d);
        printWriter3.write("giapponese");
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test07905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07905");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clear();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayScript();
        java.util.Locale.Builder builder12 = builder7.setLocale(locale9);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale13.getLanguage();
        boolean boolean16 = locale13.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder12.setLocale(locale13);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_ITALY");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_ITALY");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07906");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double5 = hypergeometricDistributionImpl3.probability((double) 100.0f);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) 'u');
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) -1, 117);
        int int11 = hypergeometricDistributionImpl3.getPopulationSize();
        int int12 = hypergeometricDistributionImpl3.getPopulationSize();
        hypergeometricDistributionImpl3.setNumberOfSuccesses(10);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability(4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.8612455479443302d + "'", double18 == 0.8612455479443302d);
    }

    @Test
    public void test07907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07907");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray9 = new java.lang.String[] { "fr", "", "Italy", "", "fr" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap17);
        java.util.Locale locale19 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str22 = java.util.Locale.lookupTag(languageRangeList18, (java.util.Collection<java.lang.String>) strSet21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test07908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07908");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter11 = printWriter9.append(' ');
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("fr");
        printWriter14.print("it_IT");
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale17.getDisplayCountry(locale21);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        java.io.PrintWriter printWriter28 = printWriter14.printf(locale21, "it_IT", objArray26);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = mathException39.getSuppressed();
        java.io.PrintWriter printWriter42 = printWriter31.printf(locale35, "it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter43 = printWriter14.format("it_IT", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter44 = printWriter11.format("zh_CN", (java.lang.Object[]) throwableArray41);
        java.io.PrintStream printStream46 = new java.io.PrintStream("zh_CN");
        printStream46.print((float) (byte) -1);
        char[] charArray51 = new char[] { 'x', 'u' };
        printStream46.println(charArray51);
        printWriter44.print(charArray51);
        printStream1.print(charArray51);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter("fr");
        printWriter59.print("it_IT");
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("hi!", objArray66);
        java.lang.Throwable[] throwableArray68 = mathException67.getSuppressed();
        java.lang.Throwable[] throwableArray69 = mathException67.getSuppressed();
        java.io.PrintWriter printWriter70 = printWriter59.printf(locale63, "it_IT", (java.lang.Object[]) throwableArray69);
        java.io.PrintStream printStream71 = printStream1.format(locale55, "hi!", (java.lang.Object[]) throwableArray69);
        java.lang.String str72 = locale55.getLanguage();
        java.util.Set<java.lang.String> strSet73 = locale55.getUnicodeLocaleKeys();
        java.util.Locale locale74 = java.util.Locale.ROOT;
        boolean boolean75 = locale74.hasExtensions();
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = locale74.getDisplayName(locale76);
        java.util.Locale locale78 = java.util.Locale.ROOT;
        boolean boolean79 = locale78.hasExtensions();
        java.lang.String str80 = locale74.getDisplayCountry(locale78);
        java.lang.String str81 = locale74.getDisplayCountry();
        java.lang.String str82 = locale55.getDisplayScript(locale74);
        java.lang.Object obj83 = locale55.clone();
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[x, u]");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "");
    }

    @Test
    public void test07909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07909");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        int int5 = hypergeometricDistributionImpl3.getPopulationSize();
        double double7 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) '#');
        int int8 = hypergeometricDistributionImpl3.getPopulationSize();
        int int9 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double11 = hypergeometricDistributionImpl3.probability((double) 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 117 + "'", int5 == 117);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test07910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07910");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter1.println((float) (byte) 10);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        printWriter16.write("hi!");
        printWriter1.println((java.lang.Object) printWriter16);
        java.io.PrintWriter printWriter21 = printWriter1.append('#');
        printWriter1.print(false);
        boolean boolean24 = printWriter1.checkError();
        printWriter1.print((long) 35);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07911");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: fr-ca", "Italia");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Italia");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07912");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println((double) 0L);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter11.println(10.0f);
        printWriter11.println((double) 'a');
        printWriter11.print(100.0d);
        printWriter11.println(false);
        java.io.PrintWriter printWriter21 = printWriter11.append((java.lang.CharSequence) "zh");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("fr");
        printWriter24.print("it_IT");
        java.util.Locale locale27 = java.util.Locale.ROOT;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale27.getDisplayName(locale29);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale27.getDisplayCountry(locale31);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.io.PrintWriter printWriter38 = printWriter24.printf(locale31, "it_IT", objArray36);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.print("it_IT");
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = mathException49.getSuppressed();
        java.io.PrintWriter printWriter52 = printWriter41.printf(locale45, "it_IT", (java.lang.Object[]) throwableArray51);
        java.io.PrintWriter printWriter53 = printWriter24.format("it_IT", (java.lang.Object[]) throwableArray51);
        printWriter53.println();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        java.lang.String str58 = locale55.getVariant();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.lang.String str60 = locale55.getDisplayScript(locale59);
        java.util.Locale locale63 = new java.util.Locale("Italy", "Italy");
        java.lang.String str64 = locale59.getDisplayLanguage(locale63);
        boolean boolean65 = locale59.hasExtensions();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException();
        java.lang.String str69 = mathException68.getPattern();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("italien", (java.lang.Throwable) mathException68);
        java.lang.Object[] objArray71 = mathException68.getArguments();
        java.io.PrintWriter printWriter72 = printWriter53.format(locale59, "cinese", objArray71);
        java.io.PrintWriter printWriter73 = printWriter11.printf("deu", objArray71);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals(locale63.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English" + "'", str64, "English");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter73);
    }

    @Test
    public void test07913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07913");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("fra");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder0.setRegion("CN");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("Germany");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test07914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07914");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 10);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 1);
        int int15 = hypergeometricDistributionImpl3.getSampleSize();
        int int16 = hypergeometricDistributionImpl3.getSampleSize();
        int int17 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double19 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (byte) 1);
        double double21 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.2991452991452851d + "'", double19 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test07915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07915");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        printStream1.println((float) ' ');
        printStream1.println("hi!");
        printStream1.println('4');
        printStream1.println(true);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        printWriter16.write("hi!");
        printWriter16.println((java.lang.Object) (-1L));
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Object[] objArray27 = mathException26.getArguments();
        java.io.PrintWriter printWriter28 = printWriter16.format(locale21, "anglais", objArray27);
        java.util.Locale.setDefault(category14, locale21);
        java.util.Locale locale30 = java.util.Locale.getDefault(category14);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.util.Locale locale35 = locale30.stripExtensions();
        java.lang.String str36 = locale30.toLanguageTag();
        java.io.PrintStream printStream39 = new java.io.PrintStream("zh_CN");
        printStream39.print((float) (byte) -1);
        printStream39.println();
        printStream39.println();
        printStream39.println((float) ' ');
        printStream39.println("hi!");
        printStream39.println('4');
        printStream39.println(true);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException(throwable54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("anglais", (java.lang.Object[]) throwableArray57, throwable58);
        java.lang.Object[] objArray60 = mathException59.getArguments();
        java.io.PrintStream printStream61 = printStream39.format("org.apache.commons.math.MathException", objArray60);
        java.io.PrintStream printStream62 = printStream1.printf(locale30, "org.apache.commons.math.MathException: English", objArray60);
        printStream1.println('x');
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian (Italy)" + "'", str22, "Italian (Italy)");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str34, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it-IT" + "'", str36, "it-IT");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(printStream62);
    }

    @Test
    public void test07916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07916");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("chinois (chine) (TEDESCO)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinois(chine)(tedesco)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07917");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double7 = hypergeometricDistributionImpl3.cumulativeProbability(10);
        double double9 = hypergeometricDistributionImpl3.probability((double) (byte) 1);
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability(1.6083206916363773E-10d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2991452991452851d + "'", double9 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.7008547008546866d + "'", double12 == 0.7008547008546866d);
    }

    @Test
    public void test07918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07918");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getUnicodeLocaleType("\uce90\ub098\ub2e4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ??????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en" + "'", str1, "en");
    }

    @Test
    public void test07919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07919");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguage("ja");
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("anglais");
        java.util.Locale.Builder builder8 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension('u', "Italienisch (Italien)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: Italienisch (Italien) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test07920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07920");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale5 = new java.util.Locale("English", "", "chinois");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray16);
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = mathException17.getSuppressed();
        java.io.PrintWriter printWriter20 = printWriter9.printf(locale13, "it_IT", (java.lang.Object[]) throwableArray19);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("fr");
        printWriter23.print("it_IT");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale26.getDisplayCountry(locale30);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", objArray35);
        java.io.PrintWriter printWriter37 = printWriter23.printf(locale30, "it_IT", objArray35);
        java.io.PrintWriter printWriter38 = printWriter7.printf(locale13, "fr", objArray35);
        java.lang.String str39 = locale5.getDisplayVariant(locale13);
        java.lang.String str40 = locale0.getDisplayVariant(locale13);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.lang.String str43 = locale41.getDisplayVariant();
        java.lang.String str44 = locale13.getDisplayScript(locale41);
        java.lang.String str45 = locale13.getISO3Language();
        java.lang.String str46 = locale13.getDisplayLanguage();
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str50 = locale47.getUnicodeLocaleType("FR");
        java.lang.String str51 = locale47.getISO3Language();
        java.util.Locale locale52 = locale47.stripExtensions();
        java.lang.String str53 = locale47.getISO3Country();
        java.util.Locale locale54 = locale47.stripExtensions();
        java.lang.String str55 = locale13.getDisplayName(locale47);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale5.toString(), "english__chinois");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "chinois" + "'", str39, "chinois");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "FRA" + "'", str53, "FRA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test07921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07921");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("de", "fra");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.util.Locale locale13 = new java.util.Locale("en-GB", "\u4e2d\u56fd\u8a9e", "zh_TW");
        java.lang.String str14 = locale7.getDisplayLanguage(locale13);
        java.lang.String str15 = locale7.getDisplayLanguage();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getCountry();
        java.lang.String str19 = locale16.getLanguage();
        java.lang.String str20 = locale7.getDisplayScript(locale16);
        java.util.Locale.Builder builder21 = builder6.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("hi! (italy) (ALLEMAND (ALLEMAGNE))");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: hi! (italy) (ALLEMAND (ALLEMAGNE)) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "\u4e2d\u56fd\u8a9e_zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "francese" + "'", str15, "francese");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "italiano" + "'", str17, "italiano");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test07922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07922");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) ' ', (int) ' ', 0);
        double double5 = hypergeometricDistributionImpl3.cumulativeProbability((-1));
        double double8 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1, 4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test07923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07923");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = mathException13.getSuppressed();
        java.io.PrintStream printStream16 = printStream1.printf(locale9, "fr", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("zh_CN");
        printStream18.print((float) (byte) -1);
        char[] charArray23 = new char[] { 'x', 'u' };
        printStream18.println(charArray23);
        printStream18.println(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 10 };
        printStream18.write(byteArray31);
        printStream16.write(byteArray31);
        java.io.PrintStream printStream35 = new java.io.PrintStream("zh_CN");
        printStream35.println();
        java.io.PrintStream printStream38 = printStream35.append('#');
        printStream35.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter43 = printWriter41.append(' ');
        char[] charArray46 = new char[] { 'x', 'a' };
        printWriter43.print(charArray46);
        printStream35.println(charArray46);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream35, false);
        printStream35.print((double) (byte) 10);
        java.io.PrintStream printStream54 = new java.io.PrintStream("zh_CN");
        printStream54.println((float) (-1));
        printStream35.println((java.lang.Object) (-1));
        java.io.PrintStream printStream59 = new java.io.PrintStream("zh_CN");
        printStream59.print((float) (byte) -1);
        printStream59.println();
        printStream59.println();
        java.io.PrintStream printStream65 = new java.io.PrintStream((java.io.OutputStream) printStream59, true);
        printStream59.println();
        java.io.PrintStream printStream68 = new java.io.PrintStream("zh_CN");
        printStream68.print((float) (byte) -1);
        printStream68.println();
        printStream68.println(0);
        java.io.PrintStream printStream75 = new java.io.PrintStream((java.io.OutputStream) printStream68, false);
        byte[] byteArray77 = new byte[] { (byte) -1 };
        printStream68.write(byteArray77);
        printStream59.write(byteArray77);
        printStream35.write(byteArray77, (int) (short) 10, 32);
        // The following exception was thrown during execution in test generation
        try {
            printStream16.write(byteArray77, 0, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[x, u]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 0, 10]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[x, a]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
    }

    @Test
    public void test07924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07924");
        java.util.Locale locale1 = new java.util.Locale("");
        java.lang.String str3 = locale1.getExtension('a');
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test07925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07925");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en-GB");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        java.lang.Object obj9 = null;
        boolean boolean10 = languageRange1.equals(obj9);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en-gb" + "'", str4, "en-gb");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en-gb" + "'", str5, "en-gb");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en-gb" + "'", str7, "en-gb");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en-gb" + "'", str8, "en-gb");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07926");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)", "english");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: english");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07927");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        printStream1.write(byteArray10);
        printStream1.print(false);
        java.io.PrintStream printStream17 = new java.io.PrintStream("zh_CN");
        printStream17.print((float) (byte) -1);
        printStream17.println();
        printStream17.print("ita");
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.util.Locale locale25 = locale23.stripExtensions();
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.lang.Throwable[] throwableArray30 = mathException29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = mathException29.getSuppressed();
        java.io.PrintStream printStream32 = printStream17.printf(locale25, "fr", (java.lang.Object[]) throwableArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray31);
        java.io.PrintStream printStream34 = printStream1.format("it_IT", (java.lang.Object[]) throwableArray31);
        printStream34.write((int) '4');
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(printStream34);
    }

    @Test
    public void test07928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07928");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.lang.String str4 = locale0.getISO3Country();
        java.lang.String str5 = locale0.getDisplayScript();
        java.util.Locale.setDefault(locale0);
        java.lang.String str7 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test07929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07929");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        char[] charArray6 = new char[] { 'x', 'a' };
        printWriter3.print(charArray6);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter15 = printWriter3.printf("en-GB", (java.lang.Object[]) throwableArray13);
        boolean boolean16 = printWriter15.checkError();
        printWriter15.print("ZH");
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "xa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[x, a]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07930");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.lang.Object obj3 = null;
        printWriter1.print(obj3);
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("fr", objArray8);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf("ita", (java.lang.Object[]) throwableArray11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale locale17 = java.util.Locale.getDefault(category13);
        java.io.PrintStream printStream20 = new java.io.PrintStream("ita");
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException24);
        java.lang.Throwable[] throwableArray26 = mathException24.getSuppressed();
        java.io.PrintStream printStream29 = new java.io.PrintStream("zh_CN");
        printStream29.print((float) (byte) -1);
        printStream29.println();
        printStream29.print("ita");
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale37 = locale35.stripExtensions();
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray40);
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = mathException41.getSuppressed();
        java.io.PrintStream printStream44 = printStream29.printf(locale37, "fr", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) mathException45);
        java.io.PrintStream printStream47 = printStream20.printf("ita", (java.lang.Object[]) throwableArray26);
        java.io.PrintWriter printWriter48 = printWriter12.format(locale17, "italien (Italie)", (java.lang.Object[]) throwableArray26);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("fr");
        printWriter52.print("it_IT");
        java.util.Locale locale55 = java.util.Locale.ROOT;
        boolean boolean56 = locale55.hasExtensions();
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale55.getDisplayName(locale57);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = locale55.getDisplayCountry(locale59);
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        java.io.PrintWriter printWriter66 = printWriter52.printf(locale59, "it_IT", objArray64);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("", objArray64);
        java.lang.Throwable[] throwableArray68 = mathException67.getSuppressed();
        java.io.PrintWriter printWriter69 = printWriter12.format("\u30a4\u30bf\u30ea\u30a2", (java.lang.Object[]) throwableArray68);
        printWriter12.println();
        java.lang.Object[] objArray72 = null;
        java.io.PrintWriter printWriter73 = printWriter12.format("org.apache.commons.math.MathException", objArray72);
        java.util.Locale locale75 = new java.util.Locale("ja__ja");
        printWriter12.println((java.lang.Object) locale75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = locale75.getUnicodeLocaleType("org.apache.commons.math.MathException: TWN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException: TWN");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertEquals(locale75.toString(), "ja__ja");
    }

    @Test
    public void test07931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07931");
        java.io.PrintStream printStream6 = new java.io.PrintStream("zh_CN");
        printStream6.print((float) (byte) -1);
        printStream6.println();
        printStream6.print("ita");
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale locale14 = locale12.stripExtensions();
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = mathException18.getSuppressed();
        java.io.PrintStream printStream21 = printStream6.printf(locale14, "fr", (java.lang.Object[]) throwableArray20);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        java.lang.Object[] objArray25 = mathException24.getArguments();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("italien (Italie)", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) mathException24);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.lang.Object[] objArray30 = mathException29.getArguments();
        mathException24.addSuppressed((java.lang.Throwable) mathException29);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException(throwable32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException34);
        mathException24.addSuppressed((java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("deu", (java.lang.Throwable) mathException35);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", objArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException40);
        mathException35.addSuppressed((java.lang.Throwable) mathException40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("cinese", (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("FR", (java.lang.Throwable) mathException44);
        java.lang.String str46 = mathException44.getPattern();
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese" + "'", str46, "cinese");
    }

    @Test
    public void test07932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07932");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "inglese (Canada)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: inglese (Canada)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07933");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl3.setSampleSize((int) 'a');
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0, (int) '4');
        int int16 = hypergeometricDistributionImpl3.getPopulationSize();
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((-1));
        int int20 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.0d);
        double double23 = hypergeometricDistributionImpl3.cumulativeProbability(3, 96);
        double double25 = hypergeometricDistributionImpl3.probability(0.44444444444442294d);
        int int26 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test07934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07934");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((double) 117);
        hypergeometricDistributionImpl3.setSampleSize(97);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 0);
        int int15 = hypergeometricDistributionImpl3.getPopulationSize();
        double double17 = hypergeometricDistributionImpl3.cumulativeProbability((double) 1.0f);
        double double19 = hypergeometricDistributionImpl3.probability((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            double double22 = hypergeometricDistributionImpl3.cumulativeProbability(0.999999999999992d, 0.9368413983102586d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.1709401709401705d + "'", double14 == 0.1709401709401705d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test07935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07935");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        printStream1.close();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream1.write(byteArray9);
        printStream1.write((int) 'a');
        printStream1.println((int) (short) 100);
        printStream1.print(false);
        printStream1.flush();
        printStream1.print((double) '#');
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream20.write((int) 'u');
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        printStream23.close();
        printStream23.println("\u6cd5\u6587");
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1]");
    }

    @Test
    public void test07936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07936");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printStream4.println('#');
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream10 = printStream4.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) strArray9);
        printStream4.flush();
        printStream4.print((float) (byte) 10);
        java.io.PrintStream printStream15 = printStream4.append((java.lang.CharSequence) "\u6cd5\u570b");
        printStream15.print("org.apache.commons.math.MathException: hi!");
        printStream15.close();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test07937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07937");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (byte) 10);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) -1);
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability(117);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability(0);
        double double20 = hypergeometricDistributionImpl3.probability((int) (byte) -1);
        int int22 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.9986450715497108d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.023984009456667447d + "'", double18 == 0.023984009456667447d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
    }

    @Test
    public void test07938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07938");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("", "HI!_ITALY (zh,cn)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: HI!_ITALY (zh,cn)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07939");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter3.printf(locale7, "it_IT", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter32 = printWriter1.printf(locale7, "fr", objArray29);
        java.io.PrintWriter printWriter34 = printWriter32.append((java.lang.CharSequence) "italien");
        printWriter32.println("ITALIANO (ITALIA)");
        // The following exception was thrown during execution in test generation
        try {
            printWriter32.write("italy_ITALY", 10, 120);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 130");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printWriter34);
    }

    @Test
    public void test07940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07940");
        java.util.Locale locale3 = new java.util.Locale("deu", "anglais", "CA");
        java.lang.String str4 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("allemand");
        java.lang.String str7 = locale3.getDisplayCountry(locale6);
        java.lang.String str8 = locale3.getDisplayCountry();
        java.lang.Object obj9 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "deu_ANGLAIS_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu-x-lvariant-CA" + "'", str4, "deu-x-lvariant-CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "allemand");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ANGLAIS" + "'", str7, "ANGLAIS");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ANGLAIS" + "'", str8, "ANGLAIS");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "deu_ANGLAIS_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "deu_ANGLAIS_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "deu_ANGLAIS_CA");
    }

    @Test
    public void test07941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07941");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1);
        double double11 = hypergeometricDistributionImpl3.probability((double) 10L);
        hypergeometricDistributionImpl3.setSampleSize((int) (byte) 0);
        int int14 = hypergeometricDistributionImpl3.getPopulationSize();
        double double16 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 1);
        int int18 = hypergeometricDistributionImpl3.inverseCumulativeProbability(1.847264056867191E-7d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test07942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07942");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("ita");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        boolean boolean9 = locale3.hasExtensions();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale3);
        java.util.Locale locale13 = new java.util.Locale("French", "org.apache.commons.math.MathException: China");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder0.setLocale(locale13);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: CHINA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale13.toString(), "french_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: CHINA");
    }

    @Test
    public void test07943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07943");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str3 = locale1.getScript();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.setLanguageTag("fr");
        java.util.Locale locale8 = builder7.build();
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = locale1.getDisplayScript(locale8);
        java.lang.String str11 = locale8.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str11, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test07944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07944");
        java.util.Locale locale2 = new java.util.Locale("Italy", "Italy");
        java.lang.String str3 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "italy_ITALY");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "italy_ITALY" + "'", str3, "italy_ITALY");
    }

    @Test
    public void test07945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07945");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguage("ja");
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale8 = builder7.build();
        java.lang.String str9 = locale8.getDisplayCountry();
        java.lang.String str10 = locale8.getCountry();
        java.util.Set<java.lang.Character> charSet11 = locale8.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja__#u-anglais");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
    }

    @Test
    public void test07946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07946");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fran\347ais", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07947");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        printStream7.println("");
        printStream7.println("fr");
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream7, false);
        java.io.PrintStream printStream35 = printStream7.append('a');
        printStream7.print('#');
        printStream7.write((int) 'x');
        printStream7.println(true);
        printStream7.println(true);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Collection<java.util.Locale> localeCollection47 = null;
        java.util.Locale locale48 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, localeCollection47);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "it_IT", "Italy", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList55);
        printStream7.print((java.lang.Object) languageRangeList45);
        printStream7.print("german (germany)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
    }

    @Test
    public void test07948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07948");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, 2.0581548335510597E-6d);
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability((double) 'u', (double) 117);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = hypergeometricDistributionImpl3.cumulativeProbability(1.9394889923397905E-4d, 2.6106672925738774E-19d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.7008547008546866d + "'", double12 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test07949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07949");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("fr");
        printWriter11.print("it_IT");
        java.util.Locale locale14 = java.util.Locale.ROOT;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale14.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale14.getDisplayCountry(locale18);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray23);
        java.io.PrintWriter printWriter25 = printWriter11.printf(locale18, "it_IT", objArray23);
        printWriter25.print((double) 100L);
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getVariant();
        java.lang.String str32 = locale28.getCountry();
        java.io.PrintStream printStream35 = new java.io.PrintStream("zh_CN");
        printStream35.print((float) (byte) -1);
        printStream35.println();
        printStream35.print("ita");
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale43 = locale41.stripExtensions();
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = mathException47.getSuppressed();
        java.io.PrintStream printStream50 = printStream35.printf(locale43, "fr", (java.lang.Object[]) throwableArray49);
        java.io.PrintWriter printWriter51 = printWriter25.format(locale28, "fra", (java.lang.Object[]) throwableArray49);
        java.util.Set<java.lang.String> strSet52 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale28.toLanguageTag();
        java.lang.String str54 = locale8.getDisplayLanguage(locale28);
        java.util.Locale.Builder builder55 = builder3.setLocale(locale28);
        java.util.Locale.Builder builder56 = builder3.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ja" + "'", str53, "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test07950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07950");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 0, (int) (byte) 0);
        int int11 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability(21, 120);
        // The following exception was thrown during execution in test generation
        try {
            hypergeometricDistributionImpl3.setNumberOfSuccesses((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.7008547008546866d + "'", double10 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test07951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07951");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        java.io.PrintWriter printWriter12 = printWriter1.printf(locale5, "it_IT", (java.lang.Object[]) throwableArray11);
        printWriter12.println("ja");
        printWriter12.println(' ');
        printWriter12.write("\u82f1\u8a9e");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test07952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07952");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("fr");
        printWriter3.print("it_IT");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        java.io.PrintWriter printWriter14 = printWriter3.printf(locale7, "it_IT", (java.lang.Object[]) throwableArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("fr");
        printWriter17.print("it_IT");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale20.getDisplayCountry(locale24);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", objArray29);
        java.io.PrintWriter printWriter31 = printWriter17.printf(locale24, "it_IT", objArray29);
        java.io.PrintWriter printWriter32 = printWriter1.printf(locale7, "fr", objArray29);
        printWriter32.close();
        printWriter32.write("hi! (italy) (ALLEMAND (ALLEMAGNE))");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
    }

    @Test
    public void test07953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07953");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("inglese (Stati Uniti)", "org.apache.commons.math.MathException: hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07954");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.io.PrintWriter printWriter19 = printWriter5.printf(locale12, "it_IT", objArray17);
        java.io.PrintWriter printWriter20 = printWriter1.printf("English", objArray17);
        printWriter1.println();
        printWriter1.flush();
        java.io.PrintWriter printWriter24 = printWriter1.append('a');
        printWriter24.print("\u4e2d\u56fd\u8a9e");
        printWriter24.println((double) 100);
        java.util.Locale locale30 = new java.util.Locale("giapponese");
        java.io.PrintStream printStream33 = new java.io.PrintStream("zh_CN");
        printStream33.print((float) (byte) -1);
        printStream33.println();
        printStream33.println();
        printStream33.println((float) ' ');
        printStream33.println((double) 0L);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream33, true);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray59);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = mathException62.getSuppressed();
        java.io.PrintWriter printWriter65 = printWriter43.printf("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray64);
        java.io.PrintWriter printWriter66 = printWriter24.format(locale30, "de_DE", (java.lang.Object[]) throwableArray64);
        java.lang.String str67 = locale30.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertEquals(locale30.toString(), "giapponese");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test07955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07955");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ita");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException(throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.Throwable[] throwableArray7 = mathException5.getSuppressed();
        java.io.PrintStream printStream10 = new java.io.PrintStream("zh_CN");
        printStream10.print((float) (byte) -1);
        printStream10.println();
        printStream10.print("ita");
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.util.Locale locale18 = locale16.stripExtensions();
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.lang.Throwable[] throwableArray23 = mathException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = mathException22.getSuppressed();
        java.io.PrintStream printStream25 = printStream10.printf(locale18, "fr", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) mathException26);
        java.io.PrintStream printStream28 = printStream1.printf("ita", (java.lang.Object[]) throwableArray7);
        java.io.PrintStream printStream31 = new java.io.PrintStream("zh_CN");
        printStream31.print((float) (byte) -1);
        printStream31.println();
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException(throwable36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.io.PrintStream printStream40 = printStream31.format("italien (Italie)", (java.lang.Object[]) throwableArray39);
        java.io.PrintStream printStream41 = printStream1.printf("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray39);
        printStream41.close();
        java.io.PrintStream printStream44 = printStream41.append((java.lang.CharSequence) "und");
        printStream41.println();
        byte[] byteArray46 = null;
        printStream41.write(byteArray46, (int) (short) 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream44);
    }

    @Test
    public void test07956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07956");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        printWriter15.print((double) 100L);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale18.getVariant();
        java.lang.String str22 = locale18.getCountry();
        java.io.PrintStream printStream25 = new java.io.PrintStream("zh_CN");
        printStream25.print((float) (byte) -1);
        printStream25.println();
        printStream25.print("ita");
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale33 = locale31.stripExtensions();
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("hi!", objArray36);
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        java.io.PrintStream printStream40 = printStream25.printf(locale33, "fr", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter41 = printWriter15.format(locale18, "fra", (java.lang.Object[]) throwableArray39);
        printWriter15.print((float) 'u');
        printWriter15.println("Italian");
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter15.print('4');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
    }

    @Test
    public void test07957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07957");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de-DE");
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write("ko", (int) 'u', 12);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 129");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07958");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale7);
        java.util.Locale locale12 = builder3.build();
        java.util.Locale.Builder builder13 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setVariant("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test07959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07959");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder6 = builder0.setExtension('a', "cinese");
        java.util.Locale.Builder builder7 = builder6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setLanguage("en-GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: en-GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test07960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07960");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.setLanguageTag("JA");
        java.util.Locale locale7 = builder1.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
    }

    @Test
    public void test07961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07961");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0, (int) 'a');
        int int11 = hypergeometricDistributionImpl3.getSampleSize();
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize(117);
        double double17 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (byte) 100);
        int int19 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.2991452991453134d);
        double double22 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, 0.9368413983102586d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7008547008546866d + "'", double22 == 0.7008547008546866d);
    }

    @Test
    public void test07962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07962");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException(throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray9 = mathException7.getSuppressed();
        java.io.PrintStream printStream10 = printStream1.format("italien (Italie)", (java.lang.Object[]) throwableArray9);
        printStream10.close();
        printStream10.print('x');
        printStream10.print(1.0d);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test07963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07963");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        printWriter1.write("chinois");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getCountry();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale6.getISO3Country();
        java.util.Set<java.lang.Character> charSet11 = locale6.getExtensionKeys();
        java.io.PrintStream printStream14 = new java.io.PrintStream("zh_CN");
        printStream14.print((float) (byte) -1);
        char[] charArray19 = new char[] { 'x', 'u' };
        printStream14.println(charArray19);
        java.util.Locale locale23 = new java.util.Locale("en-GB", "Italy");
        java.lang.String str24 = locale23.getCountry();
        java.io.PrintStream printStream27 = new java.io.PrintStream("zh_CN");
        printStream27.print((float) (byte) -1);
        printStream27.println();
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException(throwable32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray35 = mathException33.getSuppressed();
        java.io.PrintStream printStream36 = printStream27.format("italien (Italie)", (java.lang.Object[]) throwableArray35);
        java.io.PrintStream printStream37 = printStream14.printf(locale23, "fr-CA", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter38 = printWriter1.printf(locale6, "italiano", (java.lang.Object[]) throwableArray35);
        printWriter1.write("jpn");
        printWriter1.write((int) '#');
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[x, u]");
        org.junit.Assert.assertEquals(locale23.toString(), "en-gb_ITALY");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITALY" + "'", str24, "ITALY");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test07964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07964");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.upperCumulativeProbability((int) (short) 0);
        hypergeometricDistributionImpl3.setPopulationSize((int) 'u');
        int int9 = hypergeometricDistributionImpl3.getPopulationSize();
        int int10 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9999999999999717d + "'", double6 == 0.9999999999999717d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 117 + "'", int10 == 117);
    }

    @Test
    public void test07965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07965");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream26 = printStream7.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        printStream28.println("fr-CA");
        printStream28.write((int) (byte) 1);
        printStream28.print(120);
        printStream28.println("Vereinigtes K\366nigreich");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test07966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07966");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja__ja");
    }

    @Test
    public void test07967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07967");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en-GB");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-gb" + "'", str6, "en-gb");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en-gb" + "'", str7, "en-gb");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en-gb" + "'", str8, "en-gb");
    }

    @Test
    public void test07968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07968");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        int int7 = hypergeometricDistributionImpl3.getPopulationSize();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) '4');
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 100);
        double double15 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(35);
        hypergeometricDistributionImpl3.setPopulationSize((int) (short) 10);
        int int20 = hypergeometricDistributionImpl3.getSampleSize();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    }

    @Test
    public void test07969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07969");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ALLEMAND", 0.5555555555555439d);
    }

    @Test
    public void test07970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07970");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.lang.String str6 = locale4.getVariant();
        java.lang.String str7 = locale0.getDisplayCountry(locale4);
        java.util.Locale locale11 = new java.util.Locale("DE", "Italienisch (Italien)", "");
        java.lang.String str12 = locale4.getDisplayCountry(locale11);
        java.util.Set<java.lang.String> strSet13 = locale4.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale4.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "japonais" + "'", str3, "japonais");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale11.toString(), "de_ITALIENISCH (ITALIEN)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test07971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07971");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("fr");
        printWriter5.print("it_IT");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter10 = printWriter5.printf("fr", objArray9);
        printWriter5.println((float) 'u');
        printStream1.print((java.lang.Object) 'u');
        printStream1.println(0L);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.util.Locale locale22 = new java.util.Locale("zh", "zh", "\u30a4\u30ae\u30ea\u30b9");
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("fr", objArray26);
        java.io.PrintStream printStream29 = printStream1.printf(locale22, "ita", objArray26);
        java.lang.String str30 = locale22.getDisplayScript();
        java.lang.Object obj31 = locale22.clone();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(printWriter10);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "\u30a4\u30ae\u30ea\u30b9");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "\u30a4\u30ae\u30ea\u30b9");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "\u30a4\u30ae\u30ea\u30b9");
    }

    @Test
    public void test07972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07972");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setPopulationSize((int) 'u');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability(35);
        int int10 = hypergeometricDistributionImpl3.getSampleSize();
        hypergeometricDistributionImpl3.setSampleSize(0);
        double double14 = hypergeometricDistributionImpl3.cumulativeProbability((double) 97);
        hypergeometricDistributionImpl3.setSampleSize(0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test07973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07973");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.write((int) (byte) 0);
        printWriter30.println("org.apache.commons.math.MathException: anglais");
        printWriter30.close();
        printWriter30.print('#');
        java.io.PrintWriter printWriter39 = printWriter30.append('a');
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("fr");
        printWriter41.print("it_IT");
        java.util.Locale locale44 = java.util.Locale.ROOT;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale44.getDisplayName(locale46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.lang.String str50 = locale44.getDisplayCountry(locale48);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray53);
        java.io.PrintWriter printWriter55 = printWriter41.printf(locale48, "it_IT", objArray53);
        printWriter41.println();
        printWriter41.print(10);
        java.io.PrintWriter printWriter62 = printWriter41.append((java.lang.CharSequence) "fr", (int) (short) 0, (int) (byte) 1);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.Writer) printWriter41, true);
        printWriter41.println(false);
        java.io.PrintWriter printWriter70 = printWriter41.append((java.lang.CharSequence) "Italy", 0, 0);
        printWriter70.flush();
        java.io.PrintStream printStream73 = new java.io.PrintStream("zh_CN");
        printStream73.print((float) (byte) -1);
        printStream73.println();
        printStream73.println();
        printStream73.println((float) ' ');
        printStream73.println("hi!");
        printStream73.print(false);
        java.io.PrintStream printStream85 = new java.io.PrintStream("zh_CN");
        printStream85.print((float) (byte) -1);
        char[] charArray90 = new char[] { 'x', 'u' };
        printStream85.println(charArray90);
        printStream73.println(charArray90);
        printWriter70.print(charArray90);
        printWriter30.print(charArray90);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[x, u]");
    }

    @Test
    public void test07974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07974");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("fr");
        printWriter2.write("hi!");
        printWriter2.println((java.lang.Object) (-1L));
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Object[] objArray13 = mathException12.getArguments();
        java.io.PrintWriter printWriter14 = printWriter2.format(locale7, "anglais", objArray13);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale locale18 = locale16.stripExtensions();
        java.lang.String str19 = locale18.getDisplayCountry();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale18);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "italien (Italie)" + "'", str8, "italien (Italie)");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Italie" + "'", str19, "Italie");
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test07975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07975");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale8 = new java.util.Locale("Italy");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = mathException12.getSuppressed();
        java.io.PrintStream printStream15 = printStream1.printf(locale8, "chinois", (java.lang.Object[]) throwableArray14);
        java.io.PrintStream printStream17 = printStream15.append((java.lang.CharSequence) "cinese");
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter21 = printWriter19.append(' ');
        printWriter19.println(false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("fr");
        printWriter25.write("hi!");
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("fr");
        printWriter29.print("it_IT");
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter34 = printWriter29.printf("fr", objArray33);
        printWriter34.print((float) (byte) 100);
        java.io.PrintWriter printWriter38 = printWriter34.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter42 = printWriter40.append(' ');
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("fr");
        printWriter45.print("it_IT");
        java.util.Locale locale48 = java.util.Locale.ROOT;
        boolean boolean49 = locale48.hasExtensions();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale48.getDisplayName(locale50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale48.getDisplayCountry(locale52);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", objArray57);
        java.io.PrintWriter printWriter59 = printWriter45.printf(locale52, "it_IT", objArray57);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("fr");
        printWriter62.print("it_IT");
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", objArray69);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = mathException70.getSuppressed();
        java.io.PrintWriter printWriter73 = printWriter62.printf(locale66, "it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintWriter printWriter74 = printWriter45.format("it_IT", (java.lang.Object[]) throwableArray72);
        java.io.PrintWriter printWriter75 = printWriter42.format("zh_CN", (java.lang.Object[]) throwableArray72);
        java.io.PrintStream printStream77 = new java.io.PrintStream("zh_CN");
        printStream77.print((float) (byte) -1);
        char[] charArray82 = new char[] { 'x', 'u' };
        printStream77.println(charArray82);
        printWriter75.print(charArray82);
        printWriter38.write(charArray82);
        printWriter25.println(charArray82);
        printWriter19.write(charArray82);
        printStream15.print(charArray82);
        java.lang.Object obj89 = null;
        printStream15.println(obj89);
        org.junit.Assert.assertEquals(locale8.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[x, u]");
    }

    @Test
    public void test07976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07976");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.print("ita");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = mathException13.getSuppressed();
        java.io.PrintStream printStream16 = printStream1.printf(locale9, "fr", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("zh_CN");
        printStream18.print((float) (byte) -1);
        char[] charArray23 = new char[] { 'x', 'u' };
        printStream18.println(charArray23);
        printStream18.println(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 0, (byte) 10 };
        printStream18.write(byteArray31);
        printStream16.write(byteArray31);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl39 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int40 = hypergeometricDistributionImpl39.getPopulationSize();
        double double42 = hypergeometricDistributionImpl39.cumulativeProbability((int) (short) 100);
        int int43 = hypergeometricDistributionImpl39.getPopulationSize();
        double double46 = hypergeometricDistributionImpl39.cumulativeProbability(0, (int) 'a');
        hypergeometricDistributionImpl39.setSampleSize((int) 'a');
        double double50 = hypergeometricDistributionImpl39.probability((int) '4');
        hypergeometricDistributionImpl39.setPopulationSize(1);
        printStream35.println((java.lang.Object) hypergeometricDistributionImpl39);
        int int54 = hypergeometricDistributionImpl39.getPopulationSize();
        int int55 = hypergeometricDistributionImpl39.getSampleSize();
        double double57 = hypergeometricDistributionImpl39.probability(0.0d);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[x, u]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 0, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 117 + "'", int40 == 117);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 117 + "'", int43 == 117);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test07977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07977");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        int int10 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability(100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses(52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test07978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07978");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((double) (short) -1);
        double double8 = hypergeometricDistributionImpl3.probability((double) (short) 100);
        double double10 = hypergeometricDistributionImpl3.cumulativeProbability(0);
        double double12 = hypergeometricDistributionImpl3.cumulativeProbability(0);
        double double14 = hypergeometricDistributionImpl3.upperCumulativeProbability(99);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.7008547008546866d + "'", double10 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.7008547008546866d + "'", double12 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test07979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07979");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        printWriter30.println();
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException(throwable34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray37 = mathException35.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter39 = printWriter30.format("Royaume-Uni", (java.lang.Object[]) throwableArray37);
        printWriter30.print((long) (short) 0);
        printWriter30.close();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test07980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07980");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale4 = new java.util.Locale("ja", "", "ja");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.lang.String str7 = locale4.getDisplayCountry(locale5);
        java.lang.String str8 = locale0.getDisplayVariant(locale5);
        java.lang.String str9 = locale0.getLanguage();
        java.util.Locale.setDefault(locale0);
        java.lang.String str11 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "ja__ja");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd" + "'", str11, "\u4e2d\u56fd");
    }

    @Test
    public void test07981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07981");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("fra");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder0.setRegion("CN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setRegion("Italien");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Italien [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test07982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07982");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("GB");
        java.util.Locale locale2 = java.util.Locale.ROOT;
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale2.getCountry();
        java.lang.String str5 = locale2.getDisplayLanguage();
        boolean boolean6 = locale2.hasExtensions();
        java.util.Set<java.lang.String> strSet7 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale2.getDisplayCountry();
        java.util.Locale locale9 = locale2.stripExtensions();
        boolean boolean10 = languageRange1.equals((java.lang.Object) locale9);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07983");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability(0.0d, (double) '4');
        int int7 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        double double9 = hypergeometricDistributionImpl3.cumulativeProbability((int) (byte) 1);
        double double11 = hypergeometricDistributionImpl3.probability((double) 10L);
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        int int13 = hypergeometricDistributionImpl3.getPopulationSize();
        double double15 = hypergeometricDistributionImpl3.probability((int) (byte) 10);
        int int17 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.0d);
        double double19 = hypergeometricDistributionImpl3.probability(52);
        int int21 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.2991452991452851d);
        int int22 = hypergeometricDistributionImpl3.getPopulationSize();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 117 + "'", int22 == 117);
    }

    @Test
    public void test07984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07984");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale4.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.io.PrintWriter printWriter15 = printWriter1.printf(locale8, "it_IT", objArray13);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("fr");
        printWriter18.print("it_IT");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = mathException26.getSuppressed();
        java.io.PrintWriter printWriter29 = printWriter18.printf(locale22, "it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format("it_IT", (java.lang.Object[]) throwableArray28);
        java.io.PrintWriter printWriter32 = printWriter1.append('u');
        printWriter1.print((long) (short) 100);
        printWriter1.println((int) (byte) -1);
        boolean boolean37 = printWriter1.checkError();
        printWriter1.println('4');
        printWriter1.println(7.009401437221889E-12d);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07985");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.println(0.0f);
        printWriter1.write("fr");
        printWriter1.print((float) (byte) -1);
        printWriter1.println('x');
        java.io.PrintStream printStream14 = new java.io.PrintStream("zh_CN");
        printStream14.println();
        java.io.PrintStream printStream17 = printStream14.append('#');
        printStream14.close();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        printStream14.write(byteArray22);
        printStream14.write((int) 'a');
        printStream14.println((int) (short) 100);
        printStream14.print(1L);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.print("it_IT");
        java.util.Locale locale35 = java.util.Locale.ROOT;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale35.getDisplayName(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        java.io.PrintWriter printWriter46 = printWriter32.printf(locale39, "it_IT", objArray44);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("fr");
        printWriter49.print("it_IT");
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray56);
        java.lang.Throwable[] throwableArray58 = mathException57.getSuppressed();
        java.lang.Throwable[] throwableArray59 = mathException57.getSuppressed();
        java.io.PrintWriter printWriter60 = printWriter49.printf(locale53, "it_IT", (java.lang.Object[]) throwableArray59);
        java.io.PrintWriter printWriter61 = printWriter32.format("it_IT", (java.lang.Object[]) throwableArray59);
        printWriter61.println();
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException(throwable65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException66);
        java.lang.Throwable[] throwableArray68 = mathException66.getSuppressed();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter70 = printWriter61.format("Royaume-Uni", (java.lang.Object[]) throwableArray68);
        java.io.PrintStream printStream71 = printStream14.printf("Chinese (China)", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter72 = printWriter1.format("italy_ITALY", (java.lang.Object[]) throwableArray68);
        printWriter1.println(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 10, -1]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printWriter72);
    }

    @Test
    public void test07986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07986");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getSampleSize();
        double double6 = hypergeometricDistributionImpl3.probability(0);
        double double8 = hypergeometricDistributionImpl3.probability((double) 0.0f);
        double double10 = hypergeometricDistributionImpl3.probability((double) (short) -1);
        double double13 = hypergeometricDistributionImpl3.cumulativeProbability(10.0d, (double) (short) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.7008547008546866d + "'", double6 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.7008547008546866d + "'", double8 == 0.7008547008546866d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test07987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07987");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.println();
        java.io.PrintStream printStream4 = printStream1.append('#');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintStream printStream7 = new java.io.PrintStream("zh_CN");
        printStream7.print((float) (byte) -1);
        printStream7.println();
        printStream7.println();
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream7, true);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("fr");
        printWriter15.print("it_IT");
        java.util.Locale locale18 = java.util.Locale.ROOT;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale18.getDisplayName(locale20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale18.getDisplayCountry(locale22);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", objArray27);
        java.io.PrintWriter printWriter29 = printWriter15.printf(locale22, "it_IT", objArray27);
        printStream13.println((java.lang.Object) "it_IT");
        java.io.PrintStream printStream32 = printStream13.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream13);
        printStream13.println("");
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clearExtensions();
        java.util.Locale.Builder builder39 = builder37.setLanguageTag("fr");
        java.util.Locale locale40 = builder39.build();
        java.util.Locale.Builder builder41 = builder39.clearExtensions();
        printStream13.print((java.lang.Object) builder41);
        java.util.Locale.Builder builder43 = builder41.clear();
        java.util.Locale.Builder builder44 = builder43.clear();
        java.util.Locale locale45 = builder44.build();
        java.lang.String[] strArray47 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream48 = printStream4.printf(locale45, "zh_CN", (java.lang.Object[]) strArray47);
        java.lang.String str49 = locale45.getVariant();
        java.lang.String str50 = locale45.getDisplayVariant();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test07988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07988");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Royaume-Uni");
        java.io.PrintStream printStream3 = new java.io.PrintStream("zh_CN");
        printStream3.print((float) (byte) -1);
        printStream3.println();
        printStream3.print("ita");
        java.util.Locale locale10 = new java.util.Locale("Italy");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray13);
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = mathException14.getSuppressed();
        java.io.PrintStream printStream17 = printStream3.printf(locale10, "chinois", (java.lang.Object[]) throwableArray16);
        java.io.PrintStream printStream19 = printStream17.append((java.lang.CharSequence) "cinese");
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter23 = printWriter21.append(' ');
        printWriter21.println(false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("fr");
        printWriter27.write("hi!");
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("fr");
        printWriter31.print("it_IT");
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter36 = printWriter31.printf("fr", objArray35);
        printWriter36.print((float) (byte) 100);
        java.io.PrintWriter printWriter40 = printWriter36.append((java.lang.CharSequence) "ja");
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter44 = printWriter42.append(' ');
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("fr");
        printWriter47.print("it_IT");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", objArray59);
        java.io.PrintWriter printWriter61 = printWriter47.printf(locale54, "it_IT", objArray59);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("fr");
        printWriter64.print("it_IT");
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("");
        java.lang.Object[] objArray71 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("hi!", objArray71);
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        java.lang.Throwable[] throwableArray74 = mathException72.getSuppressed();
        java.io.PrintWriter printWriter75 = printWriter64.printf(locale68, "it_IT", (java.lang.Object[]) throwableArray74);
        java.io.PrintWriter printWriter76 = printWriter47.format("it_IT", (java.lang.Object[]) throwableArray74);
        java.io.PrintWriter printWriter77 = printWriter44.format("zh_CN", (java.lang.Object[]) throwableArray74);
        java.io.PrintStream printStream79 = new java.io.PrintStream("zh_CN");
        printStream79.print((float) (byte) -1);
        char[] charArray84 = new char[] { 'x', 'u' };
        printStream79.println(charArray84);
        printWriter77.print(charArray84);
        printWriter40.write(charArray84);
        printWriter27.println(charArray84);
        printWriter21.write(charArray84);
        printStream17.print(charArray84);
        printStream1.println(charArray84);
        printStream1.print("italiano (Italia)");
        printStream1.println('a');
        printStream1.print(52);
        org.junit.Assert.assertEquals(locale10.toString(), "italy");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "xu");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "xu");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[x, u]");
    }

    @Test
    public void test07989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07989");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("fr", objArray3);
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray7);
        java.lang.Throwable[] throwableArray9 = mathException8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = mathException8.getSuppressed();
        java.lang.Object[] objArray11 = mathException8.getArguments();
        mathException5.addSuppressed((java.lang.Throwable) mathException8);
        java.lang.Object[] objArray13 = mathException8.getArguments();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: italien (Italie)", (java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException14);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test07990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07990");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("fr");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("fr-CA");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale7);
        java.lang.String str12 = locale7.getISO3Language();
        java.lang.String str13 = locale7.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet14 = locale7.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "jpn" + "'", str12, "jpn");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(charSet14);
    }

    @Test
    public void test07991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07991");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println();
        printStream1.print((-1));
        printStream1.print((double) '#');
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("fr");
        printWriter16.print("it_IT");
        java.util.Locale locale19 = java.util.Locale.ROOT;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale19.getDisplayName(locale21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale19.getDisplayCountry(locale23);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", objArray28);
        java.io.PrintWriter printWriter30 = printWriter16.printf(locale23, "it_IT", objArray28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", objArray28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Object[] objArray33 = mathException31.getArguments();
        java.io.PrintStream printStream34 = printStream1.format("italiano (Italia)", objArray33);
        java.io.PrintStream printStream36 = printStream1.append('a');
        printStream1.println((long) (byte) 1);
        printStream1.println("Italy");
        java.io.PrintStream printStream42 = printStream1.append('u');
        java.io.PrintStream printStream46 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: Chinese (Taiwan)", 1, (int) (byte) 1);
        java.io.PrintStream printStream48 = printStream1.append('u');
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test07992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07992");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("FRA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fra");
    }

    @Test
    public void test07993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07993");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.println();
        boolean boolean3 = printWriter1.checkError();
        printWriter1.println(0.0f);
        printWriter1.write("fr");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter9, false);
        printWriter13.println('4');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test07994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07994");
        java.util.Locale locale2 = new java.util.Locale("fr_CA", "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale2.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for fr_ca");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
    }

    @Test
    public void test07995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07995");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Italy");
        java.util.Locale.Builder builder7 = builder3.setRegion("ja");
        java.util.Locale.Builder builder10 = builder3.setExtension('u', "it_IT");
        java.util.Locale.Builder builder11 = builder3.clearExtensions();
        java.util.Locale.Builder builder12 = builder3.clearExtensions();
        java.util.Locale.Builder builder13 = builder3.clearExtensions();
        java.util.Locale.Builder builder15 = builder3.removeUnicodeLocaleAttribute("CHN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder15.setUnicodeLocaleKeyword("ja-JP", "JA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ja-JP [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test07996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07996");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl3 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int4 = hypergeometricDistributionImpl3.getPopulationSize();
        double double6 = hypergeometricDistributionImpl3.cumulativeProbability((int) (short) 100);
        hypergeometricDistributionImpl3.setNumberOfSuccesses((int) (short) 1);
        int int9 = hypergeometricDistributionImpl3.getSampleSize();
        double double11 = hypergeometricDistributionImpl3.upperCumulativeProbability(1);
        int int12 = hypergeometricDistributionImpl3.getNumberOfSuccesses();
        hypergeometricDistributionImpl3.setSampleSize((int) '#');
        int int16 = hypergeometricDistributionImpl3.inverseCumulativeProbability(0.023984009456667447d);
        double double18 = hypergeometricDistributionImpl3.cumulativeProbability((double) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2991452991452851d + "'", double11 == 0.2991452991452851d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test07997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07997");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        printStream1.print((float) (byte) -1);
        printStream1.println();
        printStream1.println();
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("fr");
        printWriter9.print("it_IT");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        java.io.PrintWriter printWriter23 = printWriter9.printf(locale16, "it_IT", objArray21);
        printStream7.println((java.lang.Object) "it_IT");
        printStream7.print((float) (byte) 1);
        printStream7.println((double) (short) 0);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream7, false);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("fr");
        printWriter32.println();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("fr");
        printWriter36.print("it_IT");
        java.util.Locale locale39 = java.util.Locale.ROOT;
        boolean boolean40 = locale39.hasExtensions();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale39.getDisplayName(locale41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale39.getDisplayCountry(locale43);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray48);
        java.io.PrintWriter printWriter50 = printWriter36.printf(locale43, "it_IT", objArray48);
        java.io.PrintWriter printWriter51 = printWriter32.printf("English", objArray48);
        printWriter32.println();
        printWriter32.write("ja");
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.Writer) printWriter32, false);
        printWriter32.print((int) (short) -1);
        printStream30.println((java.lang.Object) printWriter32);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test07998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07998");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        printWriter1.print("it_IT");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter6 = printWriter1.printf("fr", objArray5);
        printWriter1.println((float) 'u');
        printWriter1.write("en-GB");
        org.apache.commons.math.distribution.HypergeometricDistributionImpl hypergeometricDistributionImpl14 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl((int) 'u', (int) (byte) 1, (int) '#');
        int int15 = hypergeometricDistributionImpl14.getSampleSize();
        int int16 = hypergeometricDistributionImpl14.getPopulationSize();
        double double18 = hypergeometricDistributionImpl14.upperCumulativeProbability((int) '#');
        int int19 = hypergeometricDistributionImpl14.getPopulationSize();
        int int20 = hypergeometricDistributionImpl14.getNumberOfSuccesses();
        hypergeometricDistributionImpl14.setNumberOfSuccesses((int) (byte) 10);
        printWriter1.print((java.lang.Object) hypergeometricDistributionImpl14);
        boolean boolean24 = printWriter1.checkError();
        java.io.PrintWriter printWriter26 = printWriter1.append('u');
        java.io.PrintWriter printWriter28 = printWriter1.append((java.lang.CharSequence) "\u5fb7\u6587");
        printWriter28.print('x');
        printWriter28.println();
        printWriter28.flush();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter28);
    }

    @Test
    public void test07999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07999");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u4e2d\u56fd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test08000");
        java.util.Locale locale3 = new java.util.Locale("ITA", "fr-CA", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "ita_FR-CA_hi!");
    }
}

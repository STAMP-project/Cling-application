import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest33 {

    public static boolean debug = false;

    @Test
    public void test16501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16501");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isIf();
        boolean boolean13 = node11.isBreak();
        boolean boolean14 = node11.isComma();
        boolean boolean15 = node11.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16502");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        boolean boolean16 = strSet12.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int27 = strList25.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int38 = strList36.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList57 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList25, (java.lang.Iterable<java.lang.String>) strList36, (java.lang.Iterable<java.lang.String>) strList47, (java.lang.Iterable<java.lang.String>) strList56);
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int68 = strList66.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator69 = strList66.spliterator();
        boolean boolean70 = strList36.equals((java.lang.Object) strList66);
        boolean boolean71 = strSet12.addAll((java.util.Collection<java.lang.String>) strList66);
        boolean boolean72 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet12);
        jSDocInfoBuilder1.markText("NUMBER 0.0 [directives: []]", 32, 26, 35, (int) (short) 0);
        boolean boolean79 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj85 = node83.getProp(43);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int90 = node89.getSourceOffset();
        com.google.javascript.rhino.Node node91 = node83.useSourceInfoIfMissingFromForTree(node89);
        boolean boolean92 = node91.isAssignAdd();
        boolean boolean93 = node91.isScript();
        boolean boolean94 = node91.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = jSDocInfoBuilder1.build(node91);
        boolean boolean96 = jSDocInfo95.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression97 = jSDocInfo95.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection98 = jSDocInfo95.getTypeNodes();
        int int99 = jSDocInfo95.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strIterableList57);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jSDocInfo95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(jSTypeExpression97);
        org.junit.Assert.assertNotNull(nodeCollection98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test16503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16503");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 44, 39);
        boolean boolean4 = node3.isVoid();
        com.google.javascript.rhino.Node node5 = node3.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test16504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16504");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean3 = jSDocInfoBuilder1.recordOverride();
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThisType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet15);
        java.lang.Object[] objArray18 = strSet15.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        java.lang.Object[] objArray28 = strSet25.toArray();
        boolean boolean29 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet25);
        strSet25.clear();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder32.markName("hi!", staticSourceFile36, (int) (short) 0, (int) (short) 100);
        boolean boolean40 = jSDocInfoBuilder32.recordNoTypeCheck();
        boolean boolean41 = jSDocInfoBuilder32.recordExpose();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node45.addChildrenToFront(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = jSDocInfoBuilder32.build(node49);
        boolean boolean52 = jSDocInfo51.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection53 = jSDocInfo51.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList54 = jSDocInfo51.getExtendedInterfaces();
        boolean boolean55 = jSDocInfo51.hasEnumParameterType();
        boolean boolean56 = strSet25.remove((java.lang.Object) jSDocInfo51);
        java.lang.Object[] objArray57 = strSet25.toArray();
        boolean boolean58 = strSet25.isEmpty();
        boolean boolean59 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeCollection53);
        org.junit.Assert.assertNotNull(jSTypeExpressionList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test16505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16505");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        java.lang.String str16 = jSDocInfo14.getMeaning();
        boolean boolean17 = jSDocInfo14.isJavaDispatch();
        boolean boolean19 = jSDocInfo14.hasDescriptionForParameter("TYPEOF");
        boolean boolean21 = jSDocInfo14.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean22 = jSDocInfo14.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test16506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16506");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo42.getReturnType();
        java.lang.String str50 = jSDocInfo42.getVersion();
        java.lang.String str51 = jSDocInfo42.getDescription();
        boolean boolean52 = jSDocInfo42.hasThisType();
        boolean boolean53 = jSDocInfo42.hasEnumParameterType();
        boolean boolean54 = jSDocInfo42.isExpose();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test16507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16507");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean32 = node31.isAssignAdd();
        boolean boolean33 = node31.isFromExterns();
        com.google.javascript.rhino.Node node34 = node18.copyInformationFromForTree(node31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node18.getJSDocInfo();
        boolean boolean36 = node18.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test16508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16508");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        com.google.javascript.rhino.Node node77 = node70.getChildAtIndex(0);
        java.lang.String str78 = node77.toString();
        boolean boolean79 = node77.isExprResult();
        boolean boolean80 = node77.isCall();
        com.google.javascript.rhino.Node node81 = node62.srcrefTree(node77);
        int int82 = node81.getCharno();
        boolean boolean83 = node81.isGetElem();
        node81.setLength(52);
        node81.setLength(54);
        boolean boolean88 = node81.isInc();
        com.google.javascript.rhino.Node node89 = node81.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "STRING  43" + "'", str78, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test16509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16509");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        stringPosition14.setItem("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        stringPosition14.setItem("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        int int35 = stringPosition14.getStartLine();
        int int36 = stringPosition14.getPositionOnStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test16510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16510");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        node32.detachChildren();
        boolean boolean37 = node32.isSyntheticBlock();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(51, node32, 2, 12);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean45 = node44.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node46 = node44.cloneNode();
        boolean boolean47 = node46.isGetElem();
        node46.addSuppression("");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int54 = node53.getSourceOffset();
        boolean boolean55 = node53.isBreak();
        int int56 = node53.getSourcePosition();
        com.google.javascript.rhino.Node node57 = node46.useSourceInfoFrom(node53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node53.getJSDocInfo();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node62.addChildrenToFront(node66);
        boolean boolean69 = node62.getBooleanProp(8);
        com.google.javascript.rhino.Node node70 = node53.clonePropsFrom(node62);
        com.google.javascript.rhino.InputId inputId71 = node70.getInputId();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj77 = node75.getProp(43);
        boolean boolean78 = node75.isCall();
        boolean boolean79 = node75.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = new com.google.javascript.rhino.JSTypeExpression(node75, "STRING ");
        boolean boolean82 = node75.isDo();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node86.addChildrenToFront(node90);
        boolean boolean92 = node90.isComma();
        com.google.javascript.rhino.Node node93 = node75.useSourceInfoFromForTree(node90);
        boolean boolean94 = node93.isAssignAdd();
        com.google.javascript.rhino.Node node95 = node93.getLastSibling();
        boolean boolean96 = node93.isNot();
        node70.addChildrenToBack(node93);
        com.google.javascript.rhino.Node node98 = node32.useSourceInfoIfMissingFrom(node93);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 176129 + "'", int56 == 176129);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(inputId71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node98);
    }

    @Test
    public void test16511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16511");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = jSDocInfo20.getVisibility();
        boolean boolean26 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean27 = jSDocInfo20.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + visibility25 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility25.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test16512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16512");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        boolean boolean22 = node18.isGetProp();
        boolean boolean23 = node18.isExprResult();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node18.getAncestors();
        boolean boolean25 = node18.isBreak();
        int int26 = node18.getSourcePosition();
        com.google.javascript.rhino.Node node27 = node18.getLastSibling();
        boolean boolean28 = node27.isSwitch();
        boolean boolean29 = node27.isNE();
        boolean boolean30 = node27.isReturn();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ancestorIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 176180 + "'", int26 == 176180);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test16513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16513");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        int int9 = node5.getType();
        boolean boolean10 = node5.isInc();
        boolean boolean11 = node5.isNE();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.Node node42 = node30.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean43 = node42.isContinue();
        boolean boolean44 = node42.isOnlyModifiesThisCall();
        boolean boolean45 = node42.isDefaultCase();
        boolean boolean46 = node15.hasChild(node42);
        java.lang.String str50 = node15.toString(false, true, true);
        com.google.javascript.rhino.Node node51 = node5.copyInformationFrom(node15);
        int int52 = node5.getType();
        boolean boolean53 = node5.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 0.0 [directives: []]" + "'", str50, "NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 40 + "'", int52 == 40);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test16514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16514");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet16.toArray();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object[] objArray41 = strSet38.toArray();
        boolean boolean42 = strSet28.retainAll((java.util.Collection<java.lang.String>) strSet38);
        java.lang.Object[] objArray43 = strSet28.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet28.spliterator();
        boolean boolean46 = strSet28.add("STRING ");
        java.util.stream.Stream<java.lang.String> strStream47 = strSet28.stream();
        int int48 = strSet28.size();
        int int49 = strSet28.size();
        boolean boolean50 = strSet16.removeAll((java.util.Collection<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node54.addChildrenToFront(node58);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node54.siblings();
        node54.setDouble((double) 10);
        boolean boolean63 = strSet16.contains((java.lang.Object) node54);
        com.google.javascript.rhino.Node node64 = null;
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int69 = node68.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType70 = node68.getJSType();
        boolean boolean71 = node68.isWith();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition72 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean73 = typePosition72.hasBrackets();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean78 = node77.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        node82.setDirectives((java.util.Set<java.lang.String>) strSet85);
        java.lang.Object obj89 = node82.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node90 = node77.copyInformationFrom(node82);
        typePosition72.setItem(node90);
        int int92 = typePosition72.getStartLine();
        com.google.javascript.rhino.Node node93 = typePosition72.getItem();
        node93.removeProp(39);
        boolean boolean96 = node68.isEquivalentToTyped(node93);
        boolean boolean97 = node93.isBlock();
        boolean boolean98 = node93.isSetterDef();
        // The following exception was thrown during execution in test generation
        try {
            node54.replaceChildAfter(node64, node93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test16515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16515");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 43);
        boolean boolean2 = node1.isTry();
        node1.detachChildren();
        node1.setCharno(38);
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isWhile();
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node1.getIndexOfChild(node8);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test16516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16516");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isBreak();
        int int15 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFrom(node12);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean21 = node20.isNull();
        boolean boolean22 = node20.isLabelName();
        com.google.javascript.rhino.Node node23 = node12.useSourceInfoFrom(node20);
        java.lang.Appendable appendable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            node23.appendStringTree(appendable24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test16517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16517");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getReturnType();
        boolean boolean28 = jSDocInfo20.isNoTypeCheck();
        boolean boolean29 = jSDocInfo20.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16518");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        java.lang.String str10 = node7.getSourceFileName();
        boolean boolean11 = node7.isFunction();
        boolean boolean12 = node7.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16519");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        jSDocInfoBuilder1.markAnnotation("STRING  43\n    NUMBER 0.0 43\n        STRING  43\n", 167974, (int) (short) -1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.isInterfaceRecorded();
        jSDocInfoBuilder14.recordOriginalCommentString("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.isInterfaceRecorded();
        boolean boolean23 = jSDocInfoBuilder20.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = jSTypeExpression38.equals((java.lang.Object) node49);
        boolean boolean51 = jSDocInfoBuilder20.recordTypedef(jSTypeExpression38);
        boolean boolean52 = jSDocInfoBuilder14.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", jSTypeExpression38);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node56.addChildrenToFront(node60);
        boolean boolean62 = node56.isGetterDef();
        boolean boolean63 = node56.isQuotedString();
        boolean boolean64 = node56.isAdd();
        com.google.javascript.rhino.Node node66 = node56.getAncestor((int) '4');
        boolean boolean67 = jSTypeExpression38.equals((java.lang.Object) node66);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node71.addChildrenToFront(node75);
        boolean boolean77 = node71.isGetterDef();
        boolean boolean78 = node71.isQuotedString();
        boolean boolean79 = node71.isSwitch();
        boolean boolean80 = jSTypeExpression38.equals((java.lang.Object) boolean79);
        boolean boolean81 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test16520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16520");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>>();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList1 = strListBuilder0.build();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        boolean boolean6 = strList4.isEmpty();
        java.util.Iterator<java.lang.String> strItor7 = strList4.iterator();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder8 = strListBuilder0.add(strList4);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder10.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder10.markName("hi!", staticSourceFile14, (int) (short) 0, (int) (short) 100);
        boolean boolean18 = jSDocInfoBuilder10.recordNoTypeCheck();
        boolean boolean19 = jSDocInfoBuilder10.recordExpose();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node23.addChildrenToFront(node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = jSDocInfoBuilder10.build(node27);
        java.lang.String str30 = jSDocInfo29.getMeaning();
        boolean boolean31 = jSDocInfo29.hasFileOverview();
        boolean boolean33 = jSDocInfo29.hasParameter("");
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = jSDocInfo29.getTemplateTypeNames();
        java.lang.String str35 = strList34.toString();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean40 = node39.isVar();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node45 = node39.copyInformationFromForTree(node44);
        com.google.javascript.rhino.Node node46 = node39.cloneTree();
        boolean boolean47 = strList34.equals((java.lang.Object) node46);
        boolean boolean48 = strList4.addAll((java.util.Collection<java.lang.String>) strList34);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = strList34.asList();
        java.util.Iterator<java.lang.String> strItor50 = strList49.iterator();
        org.junit.Assert.assertNotNull(strListList1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strListBuilder8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSDocInfo29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strItor50);
    }

    @Test
    public void test16521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16521");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        boolean boolean13 = strList8.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int24 = strList22.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator25 = strList22.spliterator();
        boolean boolean26 = strList22.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean33 = typePosition32.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList34 = com.google.common.collect.ImmutableList.of(typePosition27, typePosition28, typePosition29, typePosition30, typePosition31, typePosition32);
        int int35 = strList22.indexOf((java.lang.Object) typePosition32);
        boolean boolean36 = strList8.containsAll((java.util.Collection<java.lang.String>) strList22);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList22.reverse();
        java.lang.String str39 = strList22.get(4);
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList22.spliterator();
        int int41 = strList22.size();
        // The following exception was thrown during execution in test generation
        try {
            strList22.add(147494, "NUMBER 10.0 43\n    STRING  43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typePositionList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
    }

    @Test
    public void test16522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16522");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.setIsSyntheticBlock(true);
        boolean boolean7 = node4.isReturn();
        boolean boolean8 = node4.isCatch();
        boolean boolean9 = node4.isStringKey();
        boolean boolean10 = node4.isBlock();
        boolean boolean11 = node4.isBlock();
        boolean boolean12 = node4.isFor();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj18 = node16.getProp(43);
        boolean boolean19 = node16.isCall();
        int int20 = node16.getSourcePosition();
        node16.setWasEmptyNode(true);
        node4.addChildrenToBack(node16);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        boolean boolean30 = node27.isCall();
        boolean boolean31 = node27.isQuotedString();
        boolean boolean32 = node27.isObjectLit();
        boolean boolean33 = node27.isOr();
        boolean boolean34 = node27.isNull();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int39 = node38.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType40 = node38.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder41 = node38.getJsDocBuilderForNode();
        node38.putBooleanProp(30, false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node38.getJsDocBuilderForNode();
        java.lang.String str46 = node27.checkTreeEquals(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        int int54 = node50.getSourcePosition();
        java.lang.String str58 = node50.toString(false, true, false);
        boolean boolean59 = node50.isNot();
        boolean boolean60 = node50.isString();
        com.google.javascript.rhino.Node node61 = node50.getLastSibling();
        boolean boolean62 = node50.isParamList();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(46, node4, node38, node50, 39, 35);
        boolean boolean66 = node38.isDo();
        int int67 = node38.getCharno();
        boolean boolean68 = node38.isParamList();
        com.google.javascript.rhino.Node node69 = null;
        // The following exception was thrown during execution in test generation
        try {
            node38.addChildToBack(node69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 176180 + "'", int20 == 176180);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder41);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str46, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 176180 + "'", int54 == 176180);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "STRING " + "'", str58, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test16523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16523");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean7 = jSDocInfoBuilder1.recordVisibility(visibility6);
        boolean boolean8 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder10.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder10.markName("hi!", staticSourceFile14, (int) (short) 0, (int) (short) 100);
        boolean boolean18 = jSDocInfoBuilder10.recordNoTypeCheck();
        boolean boolean19 = jSDocInfoBuilder10.recordExpose();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node23.addChildrenToFront(node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = jSDocInfoBuilder10.build(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj35 = node33.getProp(43);
        boolean boolean36 = node33.isCall();
        boolean boolean37 = node33.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = new com.google.javascript.rhino.JSTypeExpression(node33, "STRING ");
        boolean boolean40 = jSDocInfoBuilder10.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 52, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node45, "NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression47);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder1.recordType(jSTypeExpression48);
        boolean boolean51 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSDocInfo29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeExpression48);
        org.junit.Assert.assertNotNull(jSTypeExpression49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test16524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16524");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str24 = jSDocInfo20.getDescription();
        java.lang.String str25 = jSDocInfo20.getLicense();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder27.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder27.markName("hi!", staticSourceFile31, (int) (short) 0, (int) (short) 100);
        boolean boolean35 = jSDocInfoBuilder27.recordNoTypeCheck();
        boolean boolean36 = jSDocInfoBuilder27.recordExpose();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node40.addChildrenToFront(node44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = jSDocInfoBuilder27.build(node44);
        boolean boolean47 = jSDocInfo46.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo46.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo46.setVisibility(visibility49);
        boolean boolean51 = jSDocInfo46.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList52 = jSDocInfo46.getImplementedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection53 = jSDocInfo46.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = jSDocInfo46.getVisibility();
        jSDocInfo20.setVisibility(visibility54);
        boolean boolean56 = jSDocInfo20.containsDeclaration();
        boolean boolean57 = jSDocInfo20.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList52);
        org.junit.Assert.assertNotNull(nodeCollection53);
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test16525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16525");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        int int17 = typePosition2.getStartLine();
        com.google.javascript.rhino.Node node18 = typePosition2.getItem();
        boolean boolean19 = node18.isLabel();
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node21 = node18.removeChildren();
        node18.putIntProp(52, 12);
        int int25 = node18.getLength();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
    }

    @Test
    public void test16526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16526");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        boolean boolean36 = node33.getBooleanProp(43);
        boolean boolean37 = node33.isIn();
        boolean boolean38 = node33.isFor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        jSDocInfoBuilder40.markName("hi!", staticSourceFile44, (int) (short) 0, (int) (short) 100);
        boolean boolean48 = jSDocInfoBuilder40.recordNoTypeCheck();
        boolean boolean49 = jSDocInfoBuilder40.recordExpose();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node53.addChildrenToFront(node57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = jSDocInfoBuilder40.build(node57);
        java.lang.String str60 = jSDocInfo59.getMeaning();
        boolean boolean61 = jSDocInfo59.isDefine();
        boolean boolean62 = jSDocInfo59.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = jSDocInfo59.getEnumParameterType();
        jSDocInfo59.addSuppression("");
        java.lang.String str66 = jSDocInfo59.getDescription();
        boolean boolean67 = jSDocInfo59.isExport();
        boolean boolean68 = jSDocInfo59.isExpose();
        boolean boolean69 = jSDocInfo59.hasReturnType();
        boolean boolean70 = jSDocInfo59.hasBaseType();
        node33.setJSDocInfo(jSDocInfo59);
        boolean boolean72 = node33.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSDocInfo59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSTypeExpression63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test16527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16527");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isNoAlias();
        boolean boolean19 = jSDocInfo14.isNoSideEffects();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo14.getModifies();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder21 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isVar();
        node25.putBooleanProp(30, false);
        boolean boolean30 = node25.isSwitch();
        boolean boolean31 = node25.isIn();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object[] objArray41 = strSet38.toArray();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.lang.Object[] objArray51 = strSet48.toArray();
        boolean boolean52 = strSet38.retainAll((java.util.Collection<java.lang.String>) strSet48);
        strSet48.clear();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet60);
        java.lang.Object[] objArray63 = strSet60.toArray();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        node67.setDirectives((java.util.Set<java.lang.String>) strSet70);
        java.lang.Object[] objArray73 = strSet70.toArray();
        boolean boolean74 = strSet60.retainAll((java.util.Collection<java.lang.String>) strSet70);
        boolean boolean75 = strSet48.removeAll((java.util.Collection<java.lang.String>) strSet60);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet60);
        int int77 = strSet60.size();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder78 = new com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>>();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList79 = strListBuilder78.build();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        boolean boolean84 = strList82.isEmpty();
        java.util.Iterator<java.lang.String> strItor85 = strList82.iterator();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder86 = strListBuilder78.add(strList82);
        boolean boolean87 = strSet60.containsAll((java.util.Collection<java.lang.String>) strList82);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder88 = strListBuilder21.add(strList82);
        boolean boolean89 = strSet20.retainAll((java.util.Collection<java.lang.String>) strList82);
        int int90 = strSet20.size();
        strSet20.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strListBuilder21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(strListList79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strItor85);
        org.junit.Assert.assertNotNull(strListBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strListBuilder88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test16528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16528");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.Node node27 = jSDocInfo20.getAssociatedNode();
        node27.putBooleanProp(35, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test16529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16529");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(45055, "NUMBER 12.0 0 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test16530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16530");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10L, 48, 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test16531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16531");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean4 = jSDocInfoBuilder1.isPopulated();
        boolean boolean5 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.recordJavaDispatch();
        boolean boolean9 = jSDocInfoBuilder7.recordNoCompile();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        boolean boolean17 = node14.isCall();
        boolean boolean18 = node14.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = new com.google.javascript.rhino.JSTypeExpression(node14, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder21 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray23 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray24 = (java.util.ArrayList<java.lang.String>[]) arrayListArray23;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = strListBuilder21.add((java.util.ArrayList<java.lang.String>[]) arrayListArray23);
        boolean boolean26 = jSTypeExpression20.equals((java.lang.Object) arrayListArray23);
        boolean boolean27 = jSDocInfoBuilder7.recordParameter("", jSTypeExpression20);
        boolean boolean28 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression20);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strListBuilder21);
        org.junit.Assert.assertNotNull(arrayListArray23);
        org.junit.Assert.assertNotNull(strListArray24);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression29);
    }

    @Test
    public void test16532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16532");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        java.lang.String str51 = jSDocInfo42.getVersion();
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = jSDocInfo42.getTemplateTypeNames();
        boolean boolean53 = jSDocInfo42.isDefine();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test16533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16533");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node6.addChildrenToFront(node10);
        boolean boolean12 = node6.isGetterDef();
        boolean boolean13 = node6.isEmpty();
        typePosition0.setItem(node6);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node6.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node20.addChildrenToFront(node24);
        boolean boolean26 = node20.isGetterDef();
        boolean boolean27 = node20.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(32, node20, node37);
        boolean boolean51 = node20.isComma();
        com.google.javascript.rhino.Node node52 = node6.srcref(node20);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        node56.detachChildren();
        boolean boolean59 = node56.wasEmptyNode();
        boolean boolean60 = node56.isRegExp();
        node56.setSourceEncodedPosition((int) (short) 1);
        com.google.javascript.rhino.Node node63 = node52.clonePropsFrom(node56);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder64 = node63.getJsDocBuilderForNode();
        boolean boolean65 = node63.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test16534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16534");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        int int7 = node4.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node4.siblings();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        int int16 = node12.getSourcePosition();
        java.lang.String str20 = node12.toString(false, true, false);
        boolean boolean21 = node12.isNot();
        boolean boolean22 = node12.isDelProp();
        boolean boolean23 = node12.isIf();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder25.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        jSDocInfoBuilder25.markName("hi!", staticSourceFile29, (int) (short) 0, (int) (short) 100);
        boolean boolean33 = jSDocInfoBuilder25.recordNoTypeCheck();
        boolean boolean34 = jSDocInfoBuilder25.recordExpose();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node38.addChildrenToFront(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = jSDocInfoBuilder25.build(node42);
        boolean boolean45 = node42.isOptionalArg();
        com.google.javascript.rhino.Node node46 = node42.getParent();
        node12.addChildrenToBack(node46);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(2, node4, node12, 54, 1);
        com.google.javascript.rhino.Node node51 = node12.getFirstChild();
        boolean boolean52 = node12.isObjectLit();
        boolean boolean53 = node12.isRegExp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 176180 + "'", int16 == 176180);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING " + "'", str20, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test16535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16535");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        boolean boolean6 = jSDocInfoBuilder1.recordReturnDescription("STRING ");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder8.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = null;
        jSDocInfoBuilder8.markName("hi!", staticSourceFile12, (int) (short) 0, (int) (short) 100);
        boolean boolean16 = jSDocInfoBuilder8.recordNoTypeCheck();
        boolean boolean17 = jSDocInfoBuilder8.recordExpose();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node21.addChildrenToFront(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = jSDocInfoBuilder8.build(node25);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.isInterfaceRecorded();
        boolean boolean35 = jSDocInfoBuilder32.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj41 = node39.getProp(43);
        boolean boolean42 = node39.isCall();
        boolean boolean43 = node39.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = new com.google.javascript.rhino.JSTypeExpression(node39, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder46 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray48 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray49 = (java.util.ArrayList<java.lang.String>[]) arrayListArray48;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = strListBuilder46.add((java.util.ArrayList<java.lang.String>[]) arrayListArray48);
        boolean boolean51 = jSTypeExpression45.equals((java.lang.Object) arrayListArray48);
        boolean boolean52 = jSDocInfoBuilder32.recordDefineType(jSTypeExpression45);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition53 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int54 = namePosition53.getEndLine();
        int int55 = namePosition53.getStartLine();
        com.google.javascript.rhino.Node node56 = namePosition53.getItem();
        boolean boolean57 = jSTypeExpression45.equals((java.lang.Object) node56);
        boolean boolean58 = jSDocInfoBuilder29.recordExtendedInterface(jSTypeExpression45);
        boolean boolean59 = jSDocInfoBuilder8.recordExtendedInterface(jSTypeExpression45);
        boolean boolean61 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression45, "hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder64.isInterfaceRecorded();
        boolean boolean67 = jSDocInfoBuilder64.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj73 = node71.getProp(43);
        boolean boolean74 = node71.isCall();
        boolean boolean75 = node71.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = new com.google.javascript.rhino.JSTypeExpression(node71, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder78 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray80 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray81 = (java.util.ArrayList<java.lang.String>[]) arrayListArray80;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder82 = strListBuilder78.add((java.util.ArrayList<java.lang.String>[]) arrayListArray80);
        boolean boolean83 = jSTypeExpression77.equals((java.lang.Object) arrayListArray80);
        boolean boolean84 = jSDocInfoBuilder64.recordDefineType(jSTypeExpression77);
        com.google.javascript.rhino.Node node85 = jSTypeExpression77.getRoot();
        boolean boolean86 = jSDocInfoBuilder1.recordParameter("[, hi!, , , hi!, , hi!, ]", jSTypeExpression77);
        boolean boolean88 = jSDocInfoBuilder1.recordBlockDescription("NUMBER 12.0 0 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strListBuilder46);
        org.junit.Assert.assertNotNull(arrayListArray48);
        org.junit.Assert.assertNotNull(strListArray49);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strListBuilder78);
        org.junit.Assert.assertNotNull(arrayListArray80);
        org.junit.Assert.assertNotNull(strListArray81);
        org.junit.Assert.assertNotNull(strListBuilder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test16536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16536");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", (int) (short) 10, 48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder10.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder10.markName("hi!", staticSourceFile14, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder10.recordEnumParameterType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder10.recordConstructor();
        boolean boolean21 = jSDocInfoBuilder10.recordNoTypeCheck();
        boolean boolean22 = jSDocInfoBuilder10.isConstructorRecorded();
        boolean boolean23 = jSDocInfoBuilder10.isDescriptionRecorded();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        boolean boolean35 = jSDocInfoBuilder10.recordParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder1.recordType(jSTypeExpression34);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.isInterfaceRecorded();
        boolean boolean44 = jSDocInfoBuilder41.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj50 = node48.getProp(43);
        boolean boolean51 = node48.isCall();
        boolean boolean52 = node48.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node48, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder55 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray57 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray58 = (java.util.ArrayList<java.lang.String>[]) arrayListArray57;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder59 = strListBuilder55.add((java.util.ArrayList<java.lang.String>[]) arrayListArray57);
        boolean boolean60 = jSTypeExpression54.equals((java.lang.Object) arrayListArray57);
        boolean boolean61 = jSDocInfoBuilder41.recordDefineType(jSTypeExpression54);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition62 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int63 = namePosition62.getEndLine();
        int int64 = namePosition62.getStartLine();
        com.google.javascript.rhino.Node node65 = namePosition62.getItem();
        boolean boolean66 = jSTypeExpression54.equals((java.lang.Object) node65);
        boolean boolean67 = jSDocInfoBuilder38.recordExtendedInterface(jSTypeExpression54);
        boolean boolean68 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression54);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean72 = jSDocInfoBuilder70.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        jSDocInfoBuilder70.markName("hi!", staticSourceFile74, (int) (short) 0, (int) (short) 100);
        boolean boolean78 = jSDocInfoBuilder70.recordNoTypeCheck();
        boolean boolean79 = jSDocInfoBuilder70.recordExterns();
        boolean boolean80 = jSDocInfoBuilder70.recordConstructor();
        boolean boolean81 = jSDocInfoBuilder70.recordNoCompile();
        boolean boolean82 = jSTypeExpression54.equals((java.lang.Object) jSDocInfoBuilder70);
        com.google.javascript.rhino.Node node83 = jSTypeExpression54.getRoot();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj89 = node87.getProp(43);
        boolean boolean90 = node87.isCall();
        boolean boolean91 = node87.isQuotedString();
        boolean boolean92 = jSTypeExpression54.equals((java.lang.Object) boolean91);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strListBuilder55);
        org.junit.Assert.assertNotNull(arrayListArray57);
        org.junit.Assert.assertNotNull(strListArray58);
        org.junit.Assert.assertNotNull(strListBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test16537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16537");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        stringPosition0.setItem("[]");
        int int7 = stringPosition0.getStartLine();
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnEndLine();
        int int10 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test16538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16538");
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = com.google.common.collect.ImmutableList.of("STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "", "STRING ", "STRING ", "hi!");
        java.lang.Object[] objArray10 = strList9.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = strList9.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = strList11.asList();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor13 = strList11.listIterator();
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strItor13);
    }

    @Test
    public void test16539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16539");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setSourceEncodedPositionForTree((int) (byte) -1);
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isVar();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node37 = node31.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node38 = node19.copyInformationFromForTree(node37);
        boolean boolean39 = node10.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node19.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test16540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16540");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo14.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo14.getSuppressions();
        java.lang.String str21 = jSDocInfo14.getMeaning();
        boolean boolean22 = jSDocInfo14.shouldPreserveTry();
        boolean boolean23 = jSDocInfo14.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test16541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16541");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker72 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker72.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker74 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = marker74.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = marker74.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition77 = marker74.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker78 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = marker78.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker80 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition81 = marker80.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition82 = marker80.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition83 = marker80.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker84 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition85 = marker84.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition86 = marker84.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition87 = marker84.getName();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList88 = com.google.common.collect.ImmutableList.of(marker66, marker72, marker74, marker78, marker80, marker84);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition89 = marker84.getAnnotation();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(stringPosition71);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNull(typePosition75);
        org.junit.Assert.assertNull(typePosition76);
        org.junit.Assert.assertNull(stringPosition77);
        org.junit.Assert.assertNull(typePosition79);
        org.junit.Assert.assertNull(typePosition81);
        org.junit.Assert.assertNull(stringPosition82);
        org.junit.Assert.assertNull(typePosition83);
        org.junit.Assert.assertNull(typePosition85);
        org.junit.Assert.assertNull(typePosition86);
        org.junit.Assert.assertNull(stringPosition87);
        org.junit.Assert.assertNotNull(markerList88);
        org.junit.Assert.assertNull(stringPosition89);
    }

    @Test
    public void test16542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16542");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        boolean boolean24 = jSDocInfo20.isNoTypeCheck();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
    }

    @Test
    public void test16543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16543");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        strSet16.clear();
        boolean boolean22 = strSet16.isEmpty();
        int int23 = strSet16.size();
        java.lang.Object[] objArray24 = strSet16.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet16.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet16.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(strSpliterator26);
    }

    @Test
    public void test16544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16544");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isVar();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node22 = node16.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node23 = node4.copyInformationFromForTree(node22);
        boolean boolean24 = node4.isFalse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isNull();
        boolean boolean30 = node28.isSyntheticBlock();
        boolean boolean31 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = node28.removeChildren();
        java.util.Set<java.lang.String> strSet33 = node28.getDirectives();
        boolean boolean34 = node28.isQualifiedName();
        boolean boolean35 = node28.isContinue();
        boolean boolean36 = node28.isTry();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean41 = node40.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node42 = node40.cloneNode();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj48 = node46.getProp(43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        com.google.javascript.rhino.Node node54 = node46.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean55 = node54.isIf();
        boolean boolean56 = node54.isAnd();
        node54.detachChildren();
        com.google.javascript.rhino.Node node58 = node42.useSourceInfoIfMissingFromForTree(node54);
        node42.setOptionalArg(true);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean66 = node65.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node67 = node65.cloneNode();
        boolean boolean68 = node67.isGetElem();
        node67.addSuppression("");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int75 = node74.getSourceOffset();
        boolean boolean76 = node74.isBreak();
        int int77 = node74.getSourcePosition();
        com.google.javascript.rhino.Node node78 = node67.useSourceInfoFrom(node74);
        com.google.javascript.rhino.Node node79 = node74.getFirstChild();
        boolean boolean80 = node74.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(16, node74, 0, 176129);
        boolean boolean84 = node83.isNumber();
        com.google.javascript.rhino.Node node85 = node42.copyInformationFrom(node83);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(47, node4, node28, node85);
        boolean boolean87 = node28.isHook();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 176129 + "'", int77 == 176129);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test16545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16545");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getReturnType();
        java.lang.String str25 = jSDocInfo20.getSourceName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection26 = jSDocInfo20.getMarkers();
        boolean boolean27 = jSDocInfo20.isNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getTypedefType();
        boolean boolean29 = jSDocInfo20.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(markerCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16546");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        int int52 = strList49.size();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray56 = strList49.toArray(strArray55);
        java.lang.String[] strArray57 = strList8.toArray(strArray55);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = strList8.add("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTHROW 53\n\n\nSubtree1: STRING  43\n\n\nSubtree2: THROW 53\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test16547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16547");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        int int9 = typePosition2.getStartLine();
        com.google.javascript.rhino.Node node10 = typePosition2.getItem();
        int int11 = typePosition2.getStartLine();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj28 = node21.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean34 = node33.isNull();
        boolean boolean35 = node33.isSyntheticBlock();
        com.google.javascript.rhino.Node node36 = node33.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean41 = node40.isDebugger();
        com.google.javascript.rhino.Node node42 = node40.getFirstChild();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj48 = node46.getProp(43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        com.google.javascript.rhino.Node node54 = node46.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(38, node21, node33, node40, node46);
        java.lang.String str56 = node46.getQualifiedName();
        node46.setType((int) (short) 100);
        typePosition2.setItem(node46);
        boolean boolean60 = typePosition2.hasBrackets();
        typePosition2.setPositionInformation(41, 9, 51, 41);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test16548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16548");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(40, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", (int) (short) 1, 23);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node4.setStaticSourceFile(staticSourceFile5);
        java.lang.String str10 = node4.toString(false, false, true);
        node4.setSourceEncodedPosition((int) '4');
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str10, "STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
    }

    @Test
    public void test16549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16549");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(42, nodeArray8, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(49, nodeArray8, 53, 43);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(176180, nodeArray8, 41, 38);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray8);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(37, nodeArray8, 43, 16);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(49, nodeArray8, (int) (short) 100, (int) '#');
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(48, nodeArray8, 100, 30);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(18, nodeArray8, 18, 176129);
        boolean boolean31 = node30.isRegExp();
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16550");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.rhino.Node node36 = node15.getChildBefore(node35);
        boolean boolean37 = node15.isVarArgs();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        node45.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node45.setJSType(jSType48);
        java.lang.String str50 = node45.getString();
        boolean boolean51 = node45.isName();
        int int52 = node45.getLength();
        com.google.javascript.rhino.Node node53 = node15.copyInformationFrom(node45);
        boolean boolean54 = node15.isLocalResultCall();
        node15.setDouble((double) 176180);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test16551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16551");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        node21.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node26 = node21.cloneNode();
        java.util.Set<java.lang.String> strSet27 = node26.getDirectives();
        int int29 = node26.getIntProp(221199);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test16552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16552");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        boolean boolean23 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean24 = jSDocInfo20.isIdGenerator();
        boolean boolean25 = jSDocInfo20.isInterface();
        boolean boolean26 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
    }

    @Test
    public void test16553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16553");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        boolean boolean18 = node17.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(26, node17, 24, 49);
        node17.setWasEmptyNode(false);
        java.lang.String str24 = node17.toString();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        boolean boolean35 = strSet31.contains((java.lang.Object) 10.0d);
        java.util.Iterator<java.lang.String> strItor36 = strSet31.iterator();
        java.lang.Object[] objArray37 = strSet31.toArray();
        strSet31.clear();
        int int39 = strSet31.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.recordNoTypeCheck();
        boolean boolean43 = jSDocInfoBuilder41.isInterfaceRecorded();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj49 = node47.getProp(43);
        int int50 = node47.getType();
        boolean boolean51 = node47.isGetterDef();
        node47.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = jSDocInfoBuilder41.build(node47);
        boolean boolean55 = jSDocInfo54.isNoSideEffects();
        java.lang.String str56 = jSDocInfo54.getMeaning();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo54.getModifies();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.recordNoTypeCheck();
        boolean boolean61 = jSDocInfoBuilder59.isInterfaceRecorded();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        int int68 = node65.getType();
        boolean boolean69 = node65.isGetterDef();
        node65.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = jSDocInfoBuilder59.build(node65);
        boolean boolean73 = jSDocInfo72.isNoSideEffects();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo72.setAssociatedNode(node75);
        boolean boolean77 = jSDocInfo72.hasBaseType();
        java.lang.String str78 = jSDocInfo72.getSourceName();
        boolean boolean79 = jSDocInfo72.hasType();
        boolean boolean80 = strSet57.contains((java.lang.Object) jSDocInfo72);
        boolean boolean81 = strSet31.removeAll((java.util.Collection<java.lang.String>) strSet57);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet31);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "STRING  43" + "'", str24, "STRING  43");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 40 + "'", int68 == 40);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test16554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16554");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isString();
        boolean boolean14 = node3.isInc();
        boolean boolean15 = node3.isEmpty();
        boolean boolean16 = node3.isGetElem();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder18.markName("hi!", staticSourceFile22, (int) (short) 0, (int) (short) 100);
        boolean boolean26 = jSDocInfoBuilder18.recordNoTypeCheck();
        boolean boolean27 = jSDocInfoBuilder18.recordExpose();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node31.addChildrenToFront(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = jSDocInfoBuilder18.build(node35);
        java.lang.String str38 = jSDocInfo37.getMeaning();
        boolean boolean39 = jSDocInfo37.isExport();
        int int40 = jSDocInfo37.getParameterCount();
        boolean boolean41 = jSDocInfo37.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo37.getTypedefType();
        node3.setJSDocInfo(jSDocInfo37);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = new com.google.javascript.rhino.JSTypeExpression(node3, "GETELEM\n");
        boolean boolean46 = node3.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSDocInfo37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test16555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16555");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        boolean boolean13 = strList8.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int24 = strList22.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator25 = strList22.spliterator();
        boolean boolean26 = strList22.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean33 = typePosition32.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList34 = com.google.common.collect.ImmutableList.of(typePosition27, typePosition28, typePosition29, typePosition30, typePosition31, typePosition32);
        int int35 = strList22.indexOf((java.lang.Object) typePosition32);
        boolean boolean36 = strList8.containsAll((java.util.Collection<java.lang.String>) strList22);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList22.reverse();
        java.lang.String str39 = strList22.get(4);
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = strList22.subList((int) (short) 1, 3);
        boolean boolean43 = strList22.isEmpty();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet50);
        java.lang.Object[] objArray53 = strSet50.toArray();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet60);
        java.lang.Object[] objArray63 = strSet60.toArray();
        boolean boolean64 = strSet50.retainAll((java.util.Collection<java.lang.String>) strSet60);
        java.lang.Object[] objArray65 = strSet50.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder67.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        jSDocInfoBuilder67.markName("hi!", staticSourceFile71, (int) (short) 0, (int) (short) 100);
        boolean boolean75 = jSDocInfoBuilder67.recordNoTypeCheck();
        boolean boolean76 = jSDocInfoBuilder67.recordExpose();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node80.addChildrenToFront(node84);
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = jSDocInfoBuilder67.build(node84);
        java.lang.String str87 = jSDocInfo86.getMeaning();
        boolean boolean88 = jSDocInfo86.isExport();
        boolean boolean89 = strSet50.equals((java.lang.Object) jSDocInfo86);
        boolean boolean90 = jSDocInfo86.isNoAlias();
        java.lang.String str91 = jSDocInfo86.getMeaning();
        java.lang.String str92 = jSDocInfo86.getMeaning();
        boolean boolean93 = jSDocInfo86.isNoTypeCheck();
        java.lang.String str94 = jSDocInfo86.getReturnDescription();
        boolean boolean95 = jSDocInfo86.hasBaseType();
        int int96 = strList22.indexOf((java.lang.Object) jSDocInfo86);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typePositionList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(jSDocInfo86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test16556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16556");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean7 = node6.isNull();
        boolean boolean8 = node6.isSyntheticBlock();
        namePosition0.setItem(node6);
        com.google.javascript.rhino.Node node10 = namePosition0.getItem();
        boolean boolean11 = node10.isSyntheticBlock();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16557");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("NUMBER 0.0 43\n    STRING  43\n", "GETELEM  43\n", "NAME\n", "STRING ", "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nTYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nTYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n");
        boolean boolean7 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder9.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        jSDocInfoBuilder9.markName("hi!", staticSourceFile13, (int) (short) 0, (int) (short) 100);
        boolean boolean17 = jSDocInfoBuilder9.recordNoTypeCheck();
        boolean boolean18 = jSDocInfoBuilder9.recordExpose();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node22.addChildrenToFront(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = jSDocInfoBuilder9.build(node26);
        boolean boolean29 = jSDocInfo28.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo28.getTypedefType();
        java.util.Collection<java.lang.String> strCollection31 = jSDocInfo28.getAuthors();
        boolean boolean32 = jSDocInfo28.isNoTypeCheck();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo28.getThrownTypes();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo28.getParameterNames();
        jSDocInfo28.addSuppression("GETELEM 43");
        java.lang.String str37 = jSDocInfo28.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo28.getThisType();
        boolean boolean39 = strList6.equals((java.lang.Object) jSTypeExpression38);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(strCollection31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test16558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16558");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isDelProp();
        boolean boolean14 = node3.isIf();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder16.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        jSDocInfoBuilder16.markName("hi!", staticSourceFile20, (int) (short) 0, (int) (short) 100);
        boolean boolean24 = jSDocInfoBuilder16.recordNoTypeCheck();
        boolean boolean25 = jSDocInfoBuilder16.recordExpose();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = jSDocInfoBuilder16.build(node33);
        boolean boolean36 = node33.isOptionalArg();
        com.google.javascript.rhino.Node node37 = node33.getParent();
        node3.addChildrenToBack(node37);
        boolean boolean39 = node37.isName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node37.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
    }

    @Test
    public void test16559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16559");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        com.google.javascript.rhino.Node node6 = node3.removeChildren();
        com.google.javascript.rhino.InputId inputId7 = null;
        node3.setInputId(inputId7);
        int int9 = node3.getType();
        node3.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node15.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = new com.google.javascript.rhino.JSTypeExpression(node15, "STRING ");
        boolean boolean22 = node15.isDo();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        int int35 = node26.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node26.getJSDocInfo();
        boolean boolean37 = node26.isIn();
        node15.addChildrenToFront(node26);
        node15.putIntProp(48, 15);
        boolean boolean42 = node3.hasChild(node15);
        boolean boolean43 = node15.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 39 + "'", int9 == 39);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test16560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16560");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        boolean boolean36 = node19.isDelProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        boolean boolean42 = node40.isFor();
        java.lang.Object obj44 = node40.getProp(49);
        java.util.Set<java.lang.String> strSet45 = node40.getDirectives();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordNoTypeCheck();
        boolean boolean49 = jSDocInfoBuilder47.isInterfaceRecorded();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        int int56 = node53.getType();
        boolean boolean57 = node53.isGetterDef();
        node53.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = jSDocInfoBuilder47.build(node53);
        boolean boolean61 = jSDocInfo60.isNoSideEffects();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo60.setAssociatedNode(node63);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(49, node19, node40, node63, (int) (short) 0, 36);
        java.lang.Object obj69 = node40.getProp(43);
        com.google.javascript.rhino.Node node70 = node40.removeChildren();
        java.lang.String str71 = node40.getSourceFileName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSDocInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test16561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16561");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo20.hasThisType();
        java.lang.String str25 = jSDocInfo20.getBlockDescription();
        boolean boolean26 = jSDocInfo20.isNoCompile();
        boolean boolean27 = jSDocInfo20.isHidden();
        boolean boolean28 = jSDocInfo20.isOverride();
        java.lang.String str29 = jSDocInfo20.getLicense();
        java.lang.String str30 = jSDocInfo20.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test16562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16562");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet9);
        java.lang.Object[] objArray12 = strSet9.toArray();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        boolean boolean23 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet9.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder26.markName("hi!", staticSourceFile30, (int) (short) 0, (int) (short) 100);
        boolean boolean34 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean35 = jSDocInfoBuilder26.recordExpose();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node39.addChildrenToFront(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = jSDocInfoBuilder26.build(node43);
        java.lang.String str46 = jSDocInfo45.getMeaning();
        boolean boolean47 = jSDocInfo45.isExport();
        boolean boolean48 = strSet9.equals((java.lang.Object) jSDocInfo45);
        boolean boolean49 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet9);
        int int50 = strSet9.size();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags52 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags52.clearAllFlags();
        sideEffectFlags52.clearSideEffectFlags();
        boolean boolean55 = strSet9.contains((java.lang.Object) sideEffectFlags52);
        sideEffectFlags52.setReturnsTainted();
        sideEffectFlags52.clearAllFlags();
        sideEffectFlags52.setThrows();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSDocInfo45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test16563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16563");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.hasParameter("STRING ");
        int int29 = jSDocInfo20.getParameterCount();
        java.lang.String str30 = jSDocInfo20.getReturnDescription();
        java.util.Set<java.lang.String> strSet31 = jSDocInfo20.getParameterNames();
        boolean boolean32 = jSDocInfo20.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test16564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16564");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test16565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16565");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        double double6 = node4.getDouble();
        boolean boolean7 = node4.isFor();
        java.util.Set<java.lang.String> strSet8 = node4.getDirectives();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, node4);
        boolean boolean10 = node9.isEmpty();
        boolean boolean11 = node9.isDebugger();
        boolean boolean12 = node9.isQuotedString();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder14.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        jSDocInfoBuilder14.markName("hi!", staticSourceFile18, (int) (short) 0, (int) (short) 100);
        boolean boolean22 = jSDocInfoBuilder14.recordNoTypeCheck();
        boolean boolean23 = jSDocInfoBuilder14.recordExpose();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node27.addChildrenToFront(node31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = jSDocInfoBuilder14.build(node31);
        boolean boolean34 = jSDocInfo33.isConstructor();
        boolean boolean35 = jSDocInfo33.isDefine();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo33.getParameterNames();
        jSDocInfo33.setDeprecated(true);
        boolean boolean39 = jSDocInfo33.isIdGenerator();
        node9.setJSDocInfo(jSDocInfo33);
        boolean boolean41 = jSDocInfo33.isJavaDispatch();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo33.getParameterNames();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet42);
    }

    @Test
    public void test16566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16566");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '#');
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj8 = node6.getProp(43);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        com.google.javascript.rhino.Node node14 = node6.useSourceInfoIfMissingFromForTree(node12);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        com.google.javascript.rhino.Node node24 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj53 = node51.getProp(43);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int58 = node57.getSourceOffset();
        com.google.javascript.rhino.Node node59 = node51.useSourceInfoIfMissingFromForTree(node57);
        boolean boolean60 = node59.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean65 = node64.isVar();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) ' ', node18, node46, node59, node64, 1, 100);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node72.addChildrenToFront(node76);
        node76.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        node76.setJSType(jSType79);
        com.google.javascript.rhino.Node node81 = node68.useSourceInfoIfMissingFromForTree(node76);
        boolean boolean82 = node68.isLocalResultCall();
        boolean boolean83 = node68.isFunction();
        com.google.javascript.rhino.Node node84 = node1.copyInformationFromForTree(node68);
        boolean boolean85 = node68.isBlock();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test16567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16567");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.stream.Stream<java.lang.String> strStream9 = strList8.stream();
        java.util.ListIterator<java.lang.String> strItor10 = strList8.listIterator();
        java.lang.Object[] objArray11 = strList8.toArray();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        java.lang.Object[] objArray21 = strSet18.toArray();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        boolean boolean32 = strSet18.retainAll((java.util.Collection<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        boolean boolean42 = strSet28.containsAll((java.util.Collection<java.lang.String>) strSet39);
        boolean boolean44 = strSet28.add("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder46.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder46.recordParameter("hi!", jSTypeExpression49);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean52 = jSDocInfoBuilder46.recordVisibility(visibility51);
        boolean boolean53 = strSet28.contains((java.lang.Object) jSDocInfoBuilder46);
        boolean boolean55 = jSDocInfoBuilder46.recordLends("TYPEOF");
        boolean boolean56 = jSDocInfoBuilder46.recordExterns();
        boolean boolean57 = jSDocInfoBuilder46.recordConstructor();
        boolean boolean58 = jSDocInfoBuilder46.recordJavaDispatch();
        boolean boolean60 = jSDocInfoBuilder46.hasParameter("OR  54\n");
        int int61 = strList8.lastIndexOf((java.lang.Object) jSDocInfoBuilder46);
        boolean boolean63 = jSDocInfoBuilder46.addAuthor("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 49.0\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 49.0\n");
        boolean boolean64 = jSDocInfoBuilder46.recordNoSideEffects();
        boolean boolean66 = jSDocInfoBuilder46.recordBlockDescription("NUMBER 53.0 42\n");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test16568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16568");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        boolean boolean32 = jSDocInfo20.hasParameter("hi!");
        jSDocInfo20.setDeprecated(false);
        boolean boolean35 = jSDocInfo20.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16569");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        boolean boolean42 = strList39.contains((java.lang.Object) (short) -1);
        com.google.javascript.rhino.JSDocInfo.Marker marker43 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = marker43.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = marker43.getAnnotation();
        boolean boolean46 = strList39.equals((java.lang.Object) marker43);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition47 = marker43.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition48 = marker43.getNameNode();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(typePosition44);
        org.junit.Assert.assertNull(stringPosition45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(stringPosition47);
        org.junit.Assert.assertNull(nodeSourcePosition48);
    }

    @Test
    public void test16570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16570");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExterns();
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        jSDocInfoBuilder1.recordOriginalCommentString("TYPEOF");
        boolean boolean14 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.recordOriginalCommentString("OR  54\n");
        boolean boolean17 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder1.recordOverride();
        boolean boolean19 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean20 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node33 = node25.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet40);
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj49 = node47.getProp(43);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int54 = node53.getSourceOffset();
        com.google.javascript.rhino.Node node55 = node47.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node59.setDirectives((java.util.Set<java.lang.String>) strSet62);
        com.google.javascript.rhino.Node node65 = node53.useSourceInfoIfMissingFromForTree(node59);
        boolean boolean66 = node65.isContinue();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj72 = node70.getProp(43);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int77 = node76.getSourceOffset();
        com.google.javascript.rhino.Node node78 = node70.useSourceInfoIfMissingFromForTree(node76);
        boolean boolean79 = node78.isAssignAdd();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean84 = node83.isVar();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) ' ', node37, node65, node78, node83, 1, 100);
        int int88 = node78.getSideEffectFlags();
        boolean boolean89 = node78.isDelProp();
        node78.setCharno(0);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = new com.google.javascript.rhino.JSTypeExpression(node78, "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean94 = jSTypeExpression93.isVarArgs();
        com.google.javascript.rhino.Node node95 = jSTypeExpression93.getRoot();
        boolean boolean96 = jSTypeExpression93.isOptionalArg();
        boolean boolean97 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression93);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test16571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16571");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        java.lang.String str25 = jSDocInfo20.getBlockDescription();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getParameterType("GETELEM  43\n");
        java.util.Set<java.lang.String> strSet29 = jSDocInfo20.getModifies();
        boolean boolean30 = jSDocInfo20.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test16572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16572");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.hasParameter("STRING ");
        int int29 = jSDocInfo20.getParameterCount();
        boolean boolean30 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = jSDocInfo20.getVisibility();
        boolean boolean32 = jSDocInfo20.hasFileOverview();
        jSDocInfo20.setLicense("STRING  43 [jsdoc_info: JSDocInfo]\n");
        java.lang.String str35 = jSDocInfo20.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test16573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16573");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        int int4 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        boolean boolean11 = node8.isCall();
        int int12 = node8.getSourcePosition();
        java.lang.String str16 = node8.toString(false, true, false);
        boolean boolean17 = node8.isExprResult();
        int int18 = node8.getSideEffectFlags();
        com.google.javascript.rhino.Node node19 = node8.removeChildren();
        namePosition0.setItem(node8);
        boolean boolean21 = node8.isHook();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 176180 + "'", int12 == 176180);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "STRING " + "'", str16, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test16574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16574");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile11, (int) (short) 100, 8);
        boolean boolean15 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean16 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test16575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16575");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        int int8 = node4.getSourcePosition();
        java.lang.String str12 = node4.toString(false, true, false);
        boolean boolean13 = node4.isExprResult();
        com.google.javascript.rhino.InputId inputId14 = null;
        node4.setInputId(inputId14);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node20.addChildrenToFront(node24);
        boolean boolean26 = node20.isGetterDef();
        boolean boolean27 = node20.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(32, node20, node37);
        boolean boolean51 = node50.isExprResult();
        boolean boolean52 = node50.isFunction();
        boolean boolean53 = node50.isDec();
        boolean boolean54 = node50.isLabelName();
        java.lang.String str58 = node50.toString(true, true, true);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(18, node4, node50, 41, 37);
        boolean boolean62 = node50.isAssignAdd();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean68 = node67.isVar();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray86 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        node84.setDirectives((java.util.Set<java.lang.String>) strSet87);
        com.google.javascript.rhino.Node node90 = node78.useSourceInfoIfMissingFromForTree(node84);
        boolean boolean91 = node84.isThrow();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(35, node67, node84);
        java.lang.String str93 = node92.toString();
        boolean boolean94 = node92.isUnscopedQualifiedName();
        node50.addChildToBack(node92);
        boolean boolean96 = node50.isObjectLit();
        com.google.javascript.rhino.Node node97 = node50.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 176180 + "'", int8 == 176180);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING " + "'", str12, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "TYPEOF" + "'", str58, "TYPEOF");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "GETELEM" + "'", str93, "GETELEM");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(node97);
    }

    @Test
    public void test16576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16576");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        node62.setWasEmptyNode(true);
        boolean boolean69 = node62.isQuotedString();
        boolean boolean71 = node62.getBooleanProp((int) (byte) 0);
        boolean boolean72 = node62.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = node62.cloneTree();
        int int74 = node62.getLength();
        node62.setSourceFileForTesting("OR ");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test16577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16577");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
        int int8 = sideEffectFlags1.valueOf();
        boolean boolean9 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test16578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16578");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        int int5 = strList2.size();
        java.lang.Object[] objArray6 = strList2.toArray();
        boolean boolean8 = strList2.add("NUMBER 0.0 43 [opt_arg: 1]");
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test16579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16579");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        boolean boolean13 = node3.isWith();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node3.isEquivalentTo(node17);
        int int26 = node17.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean35 = node34.isOptionalArg();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        boolean boolean47 = node41.isGetterDef();
        boolean boolean48 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int59 = node58.getSourceOffset();
        com.google.javascript.rhino.Node node60 = node52.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet67);
        com.google.javascript.rhino.Node node70 = node58.useSourceInfoIfMissingFromForTree(node64);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(32, node41, node58);
        boolean boolean72 = node71.isExprResult();
        boolean boolean73 = node71.isFunction();
        com.google.javascript.rhino.Node node74 = node34.srcrefTree(node71);
        com.google.javascript.rhino.Node node75 = node30.srcrefTree(node71);
        boolean boolean76 = node30.isIn();
        boolean boolean77 = node30.isGetterDef();
        node30.setType(53);
        com.google.javascript.rhino.InputId inputId80 = node30.getInputId();
        boolean boolean81 = node30.isIf();
        boolean boolean82 = node30.isThrow();
        boolean boolean83 = node30.isName();
        com.google.javascript.rhino.Node node84 = node17.copyInformationFromForTree(node30);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(inputId80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test16580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16580");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", (int) (byte) -1, 31, 49, 12);
        boolean boolean12 = jSDocInfoBuilder1.recordInterface();
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test16581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16581");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean9 = jSDocInfoBuilder1.recordNoSideEffects();
        jSDocInfoBuilder1.markName("NUMBER 0.0", 4095, 51);
        boolean boolean14 = jSDocInfoBuilder1.recordExterns();
        boolean boolean15 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16582");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnStartLine();
        int int8 = stringPosition0.getPositionOnEndLine();
        int int9 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test16583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16583");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        boolean boolean27 = jSDocInfo20.isConstructor();
        boolean boolean28 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean29 = jSDocInfo20.hasModifies();
        jSDocInfo20.setDeprecated(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16584");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putIntProp((int) (short) 1, 24);
        int int8 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node9 = node3.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test16585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16585");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100, 7, 11);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node8.addChildrenToFront(node12);
        boolean boolean14 = node8.isGetterDef();
        boolean boolean15 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(32, node8, node25);
        boolean boolean39 = node38.isExprResult();
        boolean boolean40 = node38.isFunction();
        boolean boolean41 = node38.isDec();
        boolean boolean42 = node38.isLabelName();
        java.lang.String str46 = node38.toString(true, true, true);
        com.google.javascript.rhino.Node node47 = node3.copyInformationFromForTree(node38);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "TYPEOF" + "'", str46, "TYPEOF");
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test16586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16586");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 43);
        boolean boolean2 = node1.isTry();
        node1.detachChildren();
        node1.setCharno(38);
        boolean boolean6 = node1.isTrue();
        boolean boolean7 = node1.isNoSideEffectsCall();
        int int8 = node1.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test16587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16587");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo20.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.lang.String str25 = jSDocInfo20.getSourceName();
        int int26 = jSDocInfo20.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getParameterType("STRING  43");
        java.lang.String str29 = jSDocInfo20.getSourceName();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo20.getParameterNames();
        java.lang.String str31 = jSDocInfo20.getReturnDescription();
        java.lang.String str32 = jSDocInfo20.getSourceName();
        java.lang.String str33 = jSDocInfo20.getVersion();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test16588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16588");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        java.lang.String str24 = jSDocInfo20.getReturnDescription();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean28 = jSDocInfo20.isDefine();
        boolean boolean29 = jSDocInfo20.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test16589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16589");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.containsDeclaration();
        boolean boolean19 = jSDocInfo14.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo14.getVisibility();
        boolean boolean21 = jSDocInfo14.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo14.getThisType();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo14.getModifies();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder26.markName("hi!", staticSourceFile30, (int) (short) 0, (int) (short) 100);
        boolean boolean34 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean35 = jSDocInfoBuilder26.recordExpose();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node39.addChildrenToFront(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = jSDocInfoBuilder26.build(node43);
        java.lang.String str46 = jSDocInfo45.getMeaning();
        boolean boolean47 = jSDocInfo45.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo45.getExtendedInterfaces();
        boolean boolean49 = jSDocInfo45.isImplicitCast();
        boolean boolean50 = jSDocInfo45.hasEnumParameterType();
        boolean boolean52 = jSDocInfo45.hasParameter("NUMBER 0.0");
        java.util.Set<java.lang.String> strSet53 = jSDocInfo45.getModifies();
        boolean boolean54 = strSet24.containsAll((java.util.Collection<java.lang.String>) strSet53);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        jSDocInfoBuilder56.markName("hi!", staticSourceFile60, (int) (short) 0, (int) (short) 100);
        boolean boolean64 = jSDocInfoBuilder56.recordNoTypeCheck();
        boolean boolean65 = jSDocInfoBuilder56.recordExpose();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node69.addChildrenToFront(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = jSDocInfoBuilder56.build(node73);
        java.lang.String str76 = jSDocInfo75.getMeaning();
        boolean boolean77 = jSDocInfo75.hasType();
        boolean boolean78 = jSDocInfo75.isConsistentIdGenerator();
        java.lang.String str79 = jSDocInfo75.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo75.getParameterType("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection82 = jSDocInfo75.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo75.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo75.getType();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo75.getSuppressions();
        boolean boolean86 = strSet53.retainAll((java.util.Collection<java.lang.String>) strSet85);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSDocInfo45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSDocInfo75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertNotNull(nodeCollection82);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test16590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16590");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj73 = node71.getProp(43);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int78 = node77.getSourceOffset();
        com.google.javascript.rhino.Node node79 = node71.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean80 = node79.isAssignAdd();
        boolean boolean81 = node57.isEquivalentTo(node79);
        boolean boolean82 = node57.isTry();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test16591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16591");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, 47, 44);
        boolean boolean4 = node3.isObjectLit();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder7.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder7.markName("hi!", staticSourceFile11, (int) (short) 0, (int) (short) 100);
        boolean boolean15 = jSDocInfoBuilder7.recordNoTypeCheck();
        boolean boolean16 = jSDocInfoBuilder7.recordExpose();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node20.addChildrenToFront(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = jSDocInfoBuilder7.build(node24);
        java.lang.String str27 = jSDocInfo26.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo26.getTemplateTypeNames();
        java.util.ListIterator<java.lang.String> strItor30 = strList29.listIterator();
        java.util.stream.Stream<java.lang.String> strStream31 = strList29.parallelStream();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node35.addChildrenToFront(node39);
        node39.setQuotedString();
        com.google.javascript.rhino.Node node42 = node39.removeFirstChild();
        int int44 = node39.getIntProp((int) 'a');
        node39.setCharno(47);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node68 = node62.copyInformationFromForTree(node67);
        com.google.javascript.rhino.Node node69 = node50.copyInformationFromForTree(node68);
        boolean boolean70 = node39.hasChild(node69);
        com.google.javascript.rhino.Node node71 = node69.cloneNode();
        java.lang.String str72 = node69.toStringTree();
        int int73 = node69.getSourcePosition();
        boolean boolean74 = strList29.contains((java.lang.Object) node69);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node69.siblings();
        node3.putProp(30, (java.lang.Object) nodeIterable75);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING \n" + "'", str72, "STRING \n");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeIterable75);
    }

    @Test
    public void test16592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16592");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isOr();
        boolean boolean7 = node3.isCatch();
        boolean boolean8 = node3.isTrue();
        java.lang.String str9 = node3.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 0.0 43" + "'", str9, "NUMBER 0.0 43");
    }

    @Test
    public void test16593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16593");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        boolean boolean49 = node10.isInstanceOf();
        boolean boolean50 = node10.isHook();
        boolean boolean51 = node10.isGetProp();
        int int52 = node10.getSourceOffset();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test16594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16594");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        int int7 = node4.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node4.siblings();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        int int16 = node12.getSourcePosition();
        java.lang.String str20 = node12.toString(false, true, false);
        boolean boolean21 = node12.isNot();
        boolean boolean22 = node12.isDelProp();
        boolean boolean23 = node12.isIf();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder25.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        jSDocInfoBuilder25.markName("hi!", staticSourceFile29, (int) (short) 0, (int) (short) 100);
        boolean boolean33 = jSDocInfoBuilder25.recordNoTypeCheck();
        boolean boolean34 = jSDocInfoBuilder25.recordExpose();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node38.addChildrenToFront(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = jSDocInfoBuilder25.build(node42);
        boolean boolean45 = node42.isOptionalArg();
        com.google.javascript.rhino.Node node46 = node42.getParent();
        node12.addChildrenToBack(node46);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(2, node4, node12, 54, 1);
        java.lang.String str51 = node4.getQualifiedName();
        boolean boolean52 = node4.isAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 176180 + "'", int16 == 176180);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING " + "'", str20, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test16595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16595");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        node27.setIsSyntheticBlock(false);
        boolean boolean38 = node27.isNumber();
        boolean boolean39 = strList23.equals((java.lang.Object) boolean38);
        java.util.ListIterator<java.lang.String> strItor40 = strList23.listIterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = strList23.asList();
        int int42 = strList41.size();
        java.lang.String str43 = strList41.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
    }

    @Test
    public void test16596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16596");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        boolean boolean22 = strSet16.add("JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder24.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        jSDocInfoBuilder24.markName("hi!", staticSourceFile28, (int) (short) 0, (int) (short) 100);
        boolean boolean32 = jSDocInfoBuilder24.recordNoTypeCheck();
        boolean boolean33 = jSDocInfoBuilder24.recordExpose();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node37.addChildrenToFront(node41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = jSDocInfoBuilder24.build(node41);
        boolean boolean44 = jSDocInfo43.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo43.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = jSDocInfo43.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = jSDocInfo43.getTemplateTypeNames();
        boolean boolean48 = strSet16.removeAll((java.util.Collection<java.lang.String>) strList47);
        com.google.common.collect.ImmutableList<java.lang.Cloneable> cloneableList49 = com.google.common.collect.ImmutableList.of();
        boolean boolean50 = strList47.contains((java.lang.Object) cloneableList49);
        boolean boolean51 = strList47.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strList47.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(cloneableList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test16597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16597");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        boolean boolean8 = jSDocInfoBuilder5.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node12, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray22 = (java.util.ArrayList<java.lang.String>[]) arrayListArray21;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder23 = strListBuilder19.add((java.util.ArrayList<java.lang.String>[]) arrayListArray21);
        boolean boolean24 = jSTypeExpression18.equals((java.lang.Object) arrayListArray21);
        boolean boolean25 = jSDocInfoBuilder5.recordDefineType(jSTypeExpression18);
        com.google.javascript.rhino.Node node26 = jSTypeExpression18.getRoot();
        boolean boolean28 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression18, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean30 = jSDocInfoBuilder1.recordDeprecationReason("GETELEM");
        boolean boolean31 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean32 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean34 = jSDocInfoBuilder1.addReference("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nTYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n");
        boolean boolean35 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder37.markName("hi!", staticSourceFile41, (int) (short) 0, (int) (short) 100);
        boolean boolean45 = jSDocInfoBuilder37.recordNoTypeCheck();
        boolean boolean46 = jSDocInfoBuilder37.recordExpose();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = jSDocInfoBuilder37.build(node54);
        java.lang.String str57 = jSDocInfo56.getMeaning();
        boolean boolean58 = jSDocInfo56.isExport();
        int int59 = jSDocInfo56.getParameterCount();
        java.lang.String str60 = jSDocInfo56.getLendsName();
        boolean boolean62 = jSDocInfo56.hasParameter("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean64 = jSDocInfo56.hasDescriptionForParameter("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        java.util.Set<java.lang.String> strSet65 = jSDocInfo56.getSuppressions();
        boolean boolean66 = jSDocInfoBuilder1.recordModifies(strSet65);
        boolean boolean67 = strSet65.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(strListArray22);
        org.junit.Assert.assertNotNull(strListBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test16598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16598");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        boolean boolean24 = jSDocInfo20.hasReturnType();
        boolean boolean25 = jSDocInfo20.hasType();
        boolean boolean26 = jSDocInfo20.isOverride();
        java.lang.String str27 = jSDocInfo20.getBlockDescription();
        boolean boolean28 = jSDocInfo20.hasFileOverview();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType35 = node33.getJSType();
        boolean boolean36 = node33.isWith();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        boolean boolean47 = node41.isGetterDef();
        boolean boolean48 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int59 = node58.getSourceOffset();
        com.google.javascript.rhino.Node node60 = node52.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet67);
        com.google.javascript.rhino.Node node70 = node58.useSourceInfoIfMissingFromForTree(node64);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(32, node41, node58);
        boolean boolean72 = node71.isExprResult();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 0, node33, node71);
        node33.removeProp(10);
        node33.setVarArgs(true);
        node33.putBooleanProp(24, true);
        boolean boolean81 = node33.hasMoreThanOneChild();
        jSDocInfo20.setAssociatedNode(node33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test16599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16599");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0);
        jSDocInfo42.setAssociatedNode(node77);
        boolean boolean79 = jSDocInfo42.isNoShadow();
        boolean boolean80 = jSDocInfo42.hasFileOverview();
        int int81 = jSDocInfo42.getExtendedInterfacesCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test16600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16600");
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList1 = com.google.common.collect.ImmutableList.copyOf(typePositionArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16601");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        int int5 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
    }

    @Test
    public void test16602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16602");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean5 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean6 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        com.google.javascript.rhino.Node node19 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.Node node29 = node17.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj35 = node33.getProp(43);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int40 = node39.getSourceOffset();
        com.google.javascript.rhino.Node node41 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        com.google.javascript.rhino.Node node51 = node39.useSourceInfoIfMissingFromForTree(node45);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj58 = node56.getProp(43);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int63 = node62.getSourceOffset();
        com.google.javascript.rhino.Node node64 = node56.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean65 = node64.isAssignAdd();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean70 = node69.isVar();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) ' ', node23, node51, node64, node69, 1, 100);
        java.lang.String str74 = node23.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = jSDocInfoBuilder1.build(node23);
        boolean boolean76 = jSDocInfoBuilder1.recordInterface();
        boolean boolean77 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean79 = jSDocInfoBuilder1.recordBlockDescription("STRING  43 [empty_block: 1]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(jSDocInfo75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test16603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16603");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean9 = typePosition8.hasBrackets();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        typePosition8.setItem(node26);
        int int28 = typePosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean35 = typePosition34.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList36 = com.google.common.collect.ImmutableList.of(typePosition29, typePosition30, typePosition31, typePosition32, typePosition33, typePosition34);
        int int37 = typePosition31.getEndLine();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        boolean boolean44 = node41.hasMoreThanOneChild();
        typePosition31.setItem(node41);
        boolean boolean46 = typePosition31.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition8, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition31);
        int int48 = typePosition4.getStartLine();
        int int49 = typePosition4.getStartLine();
        boolean boolean50 = typePosition4.hasBrackets();
        int int51 = typePosition4.getStartLine();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typePositionList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test16604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16604");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = node1.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test16605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16605");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile11, 0, 0);
        boolean boolean15 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordNoTypeCheck();
        boolean boolean21 = jSDocInfoBuilder18.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder18.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.isInterfaceRecorded();
        boolean boolean26 = jSDocInfoBuilder24.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.isInterfaceRecorded();
        boolean boolean31 = jSDocInfoBuilder28.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj37 = node35.getProp(43);
        boolean boolean38 = node35.isCall();
        boolean boolean39 = node35.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = new com.google.javascript.rhino.JSTypeExpression(node35, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder42 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray44 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray45 = (java.util.ArrayList<java.lang.String>[]) arrayListArray44;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder46 = strListBuilder42.add((java.util.ArrayList<java.lang.String>[]) arrayListArray44);
        boolean boolean47 = jSTypeExpression41.equals((java.lang.Object) arrayListArray44);
        boolean boolean48 = jSDocInfoBuilder28.recordDefineType(jSTypeExpression41);
        com.google.javascript.rhino.Node node49 = jSTypeExpression41.getRoot();
        boolean boolean51 = jSDocInfoBuilder24.recordThrowDescription(jSTypeExpression41, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.isInterfaceRecorded();
        boolean boolean56 = jSDocInfoBuilder53.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj62 = node60.getProp(43);
        boolean boolean63 = node60.isCall();
        boolean boolean64 = node60.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = new com.google.javascript.rhino.JSTypeExpression(node60, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder67 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray69 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray70 = (java.util.ArrayList<java.lang.String>[]) arrayListArray69;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder71 = strListBuilder67.add((java.util.ArrayList<java.lang.String>[]) arrayListArray69);
        boolean boolean72 = jSTypeExpression66.equals((java.lang.Object) arrayListArray69);
        boolean boolean73 = jSDocInfoBuilder53.recordDefineType(jSTypeExpression66);
        boolean boolean74 = jSDocInfoBuilder24.recordEnumParameterType(jSTypeExpression66);
        boolean boolean75 = jSTypeExpression66.isOptionalArg();
        boolean boolean76 = jSTypeExpression66.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression66);
        boolean boolean78 = jSDocInfoBuilder18.recordReturnType(jSTypeExpression77);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean83 = node82.isVar();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node88 = node82.copyInformationFromForTree(node87);
        boolean boolean89 = node82.isIf();
        boolean boolean90 = jSTypeExpression77.equals((java.lang.Object) boolean89);
        boolean boolean91 = jSDocInfoBuilder1.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", jSTypeExpression77);
        com.google.javascript.rhino.Node node92 = jSTypeExpression77.getRoot();
        node92.setLength(0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strListBuilder42);
        org.junit.Assert.assertNotNull(arrayListArray44);
        org.junit.Assert.assertNotNull(strListArray45);
        org.junit.Assert.assertNotNull(strListBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strListBuilder67);
        org.junit.Assert.assertNotNull(arrayListArray69);
        org.junit.Assert.assertNotNull(strListArray70);
        org.junit.Assert.assertNotNull(strListBuilder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test16606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16606");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        int int4 = namePosition0.getStartLine();
        int int5 = namePosition0.getPositionOnEndLine();
        int int6 = namePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test16607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16607");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder12.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.isInterfaceRecorded();
        boolean boolean19 = jSDocInfoBuilder16.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        boolean boolean26 = node23.isCall();
        boolean boolean27 = node23.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = new com.google.javascript.rhino.JSTypeExpression(node23, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder30 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray32 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray33 = (java.util.ArrayList<java.lang.String>[]) arrayListArray32;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder34 = strListBuilder30.add((java.util.ArrayList<java.lang.String>[]) arrayListArray32);
        boolean boolean35 = jSTypeExpression29.equals((java.lang.Object) arrayListArray32);
        boolean boolean36 = jSDocInfoBuilder16.recordDefineType(jSTypeExpression29);
        com.google.javascript.rhino.Node node37 = jSTypeExpression29.getRoot();
        boolean boolean39 = jSDocInfoBuilder12.recordThrowDescription(jSTypeExpression29, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.isInterfaceRecorded();
        boolean boolean44 = jSDocInfoBuilder41.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj50 = node48.getProp(43);
        boolean boolean51 = node48.isCall();
        boolean boolean52 = node48.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node48, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder55 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray57 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray58 = (java.util.ArrayList<java.lang.String>[]) arrayListArray57;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder59 = strListBuilder55.add((java.util.ArrayList<java.lang.String>[]) arrayListArray57);
        boolean boolean60 = jSTypeExpression54.equals((java.lang.Object) arrayListArray57);
        boolean boolean61 = jSDocInfoBuilder41.recordDefineType(jSTypeExpression54);
        boolean boolean62 = jSDocInfoBuilder12.recordEnumParameterType(jSTypeExpression54);
        boolean boolean63 = jSTypeExpression54.isOptionalArg();
        boolean boolean64 = jSTypeExpression54.isVarArgs();
        boolean boolean65 = jSTypeExpression54.isOptionalArg();
        boolean boolean66 = jSTypeExpression54.isVarArgs();
        boolean boolean67 = jSDocInfoBuilder1.recordParameter("STRING  43", jSTypeExpression54);
        boolean boolean68 = jSDocInfoBuilder1.recordConstructor();
        jSDocInfoBuilder1.markAnnotation("NUMBER 0.0 43\n    STRING  43\n", 42, 0);
        boolean boolean74 = jSDocInfoBuilder1.hasParameter("STRING  43 [source_file: NUMBER 40.0]\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strListBuilder30);
        org.junit.Assert.assertNotNull(arrayListArray32);
        org.junit.Assert.assertNotNull(strListArray33);
        org.junit.Assert.assertNotNull(strListBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strListBuilder55);
        org.junit.Assert.assertNotNull(arrayListArray57);
        org.junit.Assert.assertNotNull(strListArray58);
        org.junit.Assert.assertNotNull(strListBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test16608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16608");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("");
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str26 = strList25.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = strList25.reverse();
        int int28 = strList25.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder30.markName("hi!", staticSourceFile34, (int) (short) 0, (int) (short) 100);
        boolean boolean38 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean39 = jSDocInfoBuilder30.recordExpose();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder30.build(node47);
        boolean boolean50 = jSDocInfo49.isExport();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean55 = node54.isOptionalArg();
        com.google.javascript.rhino.Node node56 = node54.getNext();
        jSDocInfo49.setAssociatedNode(node56);
        jSDocInfo49.setLicense("STRING ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo49.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean62 = jSDocInfo49.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility63 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo49.setVisibility(visibility63);
        boolean boolean65 = strList25.equals((java.lang.Object) jSDocInfo49);
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = strList25.reverse();
        // The following exception was thrown during execution in test generation
        try {
            strList25.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + visibility63 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility63.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test16609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16609");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        boolean boolean11 = jSDocInfoBuilder1.addAuthor("NUMBER 0.0 43");
        boolean boolean12 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordJavaDispatch();
        boolean boolean16 = jSDocInfoBuilder14.recordNoCompile();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        boolean boolean24 = node21.isCall();
        boolean boolean25 = node21.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = new com.google.javascript.rhino.JSTypeExpression(node21, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray30 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray31 = (java.util.ArrayList<java.lang.String>[]) arrayListArray30;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder32 = strListBuilder28.add((java.util.ArrayList<java.lang.String>[]) arrayListArray30);
        boolean boolean33 = jSTypeExpression27.equals((java.lang.Object) arrayListArray30);
        boolean boolean34 = jSDocInfoBuilder14.recordParameter("", jSTypeExpression27);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression27);
        boolean boolean36 = jSTypeExpression27.isOptionalArg();
        boolean boolean37 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression27);
        boolean boolean38 = jSTypeExpression27.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertNotNull(arrayListArray30);
        org.junit.Assert.assertNotNull(strListArray31);
        org.junit.Assert.assertNotNull(strListBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test16610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16610");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isSwitch();
        boolean boolean6 = node3.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16611");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        java.lang.String str23 = jSDocInfo20.getVersion();
        java.lang.String str24 = jSDocInfo20.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo20.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(jSTypeExpression25);
    }

    @Test
    public void test16612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16612");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(16, nodeArray6);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(10, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, nodeArray6);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(8, nodeArray6, 3, 37);
        node16.setLineno((int) (byte) 100);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test16613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16613");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, nodeArray6, 40, 4);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(12, nodeArray6, 32, (int) (byte) 0);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray6);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(52, nodeArray6, (-2147483596), 176180);
        boolean boolean21 = node20.isThrow();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test16614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16614");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean23 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean24 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", staticSourceFile26, (int) ' ', 15);
        boolean boolean30 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean32 = jSDocInfoBuilder1.recordLends("NUMBER 10.0 50");
        boolean boolean33 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder35.recordThisType(jSTypeExpression37);
        boolean boolean40 = jSDocInfoBuilder35.addReference("hi!");
        boolean boolean42 = jSDocInfoBuilder35.recordReturnDescription("THROW");
        boolean boolean43 = jSDocInfoBuilder35.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder45.recordNoTypeCheck();
        boolean boolean47 = jSDocInfoBuilder45.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = null;
        boolean boolean52 = jSDocInfoBuilder49.recordThisType(jSTypeExpression51);
        boolean boolean53 = jSDocInfoBuilder49.recordOverride();
        boolean boolean54 = jSDocInfoBuilder49.recordExpose();
        boolean boolean55 = jSDocInfoBuilder49.recordExport();
        boolean boolean56 = jSDocInfoBuilder49.isDescriptionRecorded();
        boolean boolean57 = jSDocInfoBuilder49.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.recordJavaDispatch();
        jSDocInfoBuilder60.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder69 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean70 = jSDocInfoBuilder69.recordJavaDispatch();
        boolean boolean71 = jSDocInfoBuilder69.recordNoCompile();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj78 = node76.getProp(43);
        boolean boolean79 = node76.isCall();
        boolean boolean80 = node76.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = new com.google.javascript.rhino.JSTypeExpression(node76, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder83 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray85 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray86 = (java.util.ArrayList<java.lang.String>[]) arrayListArray85;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder87 = strListBuilder83.add((java.util.ArrayList<java.lang.String>[]) arrayListArray85);
        boolean boolean88 = jSTypeExpression82.equals((java.lang.Object) arrayListArray85);
        boolean boolean89 = jSDocInfoBuilder69.recordParameter("", jSTypeExpression82);
        boolean boolean90 = jSDocInfoBuilder60.recordThrowType(jSTypeExpression82);
        boolean boolean91 = jSTypeExpression82.isVarArgs();
        boolean boolean92 = jSDocInfoBuilder49.recordParameter("STRING \n", jSTypeExpression82);
        boolean boolean93 = jSDocInfoBuilder45.recordThisType(jSTypeExpression82);
        boolean boolean94 = jSDocInfoBuilder35.recordThisType(jSTypeExpression82);
        boolean boolean95 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression82);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strListBuilder83);
        org.junit.Assert.assertNotNull(arrayListArray85);
        org.junit.Assert.assertNotNull(strListArray86);
        org.junit.Assert.assertNotNull(strListBuilder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test16615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16615");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo20.getExtendedInterfaces();
        java.lang.String str28 = jSDocInfo20.toString();
        boolean boolean29 = jSDocInfo20.isExport();
        java.lang.String str30 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.Node node31 = jSDocInfo20.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JSDocInfo" + "'", str28, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test16616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16616");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        boolean boolean26 = jSDocInfo20.isNoCompile();
        int int27 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean28 = jSDocInfo20.isNoCompile();
        boolean boolean29 = jSDocInfo20.containsDeclaration();
        boolean boolean30 = jSDocInfo20.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test16617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16617");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        java.lang.String str27 = jSDocInfo20.getDescription();
        boolean boolean28 = jSDocInfo20.isImplicitCast();
        boolean boolean29 = jSDocInfo20.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16618");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        boolean boolean50 = jSDocInfo42.hasModifies();
        boolean boolean51 = jSDocInfo42.hasModifies();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test16619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16619");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 50);
        boolean boolean2 = node1.isComma();
        node1.setType(176180);
        boolean boolean5 = node1.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16620");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean5 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder8.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = null;
        jSDocInfoBuilder8.markName("hi!", staticSourceFile12, (int) (short) 0, (int) (short) 100);
        boolean boolean16 = jSDocInfoBuilder8.recordNoTypeCheck();
        boolean boolean17 = jSDocInfoBuilder8.recordExpose();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node21.addChildrenToFront(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = jSDocInfoBuilder8.build(node25);
        boolean boolean28 = jSDocInfoBuilder8.shouldParseDocumentation();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean33 = node32.isVar();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node38 = node32.copyInformationFromForTree(node37);
        com.google.javascript.rhino.Node node39 = node32.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = new com.google.javascript.rhino.JSTypeExpression(node39, "STRING  43");
        boolean boolean42 = jSTypeExpression41.isVarArgs();
        boolean boolean43 = jSDocInfoBuilder8.recordBaseType(jSTypeExpression41);
        boolean boolean44 = jSDocInfoBuilder1.recordThisType(jSTypeExpression41);
        com.google.javascript.rhino.Node node45 = jSTypeExpression41.getRoot();
        boolean boolean46 = jSTypeExpression41.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test16621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16621");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        java.util.Iterator<java.lang.String> strItor65 = strList62.iterator();
        java.lang.String str66 = strList62.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str66, "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test16622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16622");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(42, nodeArray7, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray7);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4, nodeArray7, (int) (short) 1, 47);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(51, nodeArray7);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(48, nodeArray7, (int) (short) 0, 26);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((-1), nodeArray7);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(52, nodeArray7, (int) (short) 10, 45055);
        boolean boolean23 = node22.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16623");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        com.google.javascript.rhino.Node node6 = node3.removeChildren();
        com.google.javascript.rhino.InputId inputId7 = null;
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isCall();
        node3.setIsSyntheticBlock(false);
        boolean boolean12 = node3.isGetElem();
        java.lang.String str13 = node3.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test16624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16624");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.equals((java.lang.Object) (-1));
        boolean boolean53 = strSet6.contains((java.lang.Object) (-1));
        boolean boolean55 = strSet6.add("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.lang.Object obj56 = null;
        boolean boolean57 = strSet6.contains(obj56);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.isInterfaceRecorded();
        boolean boolean61 = jSDocInfoBuilder59.isPopulatedWithFileOverview();
        boolean boolean63 = jSDocInfoBuilder59.recordDeprecationReason("hi!");
        boolean boolean64 = strSet6.equals((java.lang.Object) jSDocInfoBuilder59);
        boolean boolean66 = jSDocInfoBuilder59.recordDescription("ERROR  43\n");
        boolean boolean68 = jSDocInfoBuilder59.recordLends("NUMBER 0.0");
        boolean boolean69 = jSDocInfoBuilder59.recordHiddenness();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test16625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16625");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isBreak();
        int int15 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFrom(node12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node12.getJSDocInfo();
        com.google.javascript.rhino.Node node18 = node12.cloneNode();
        boolean boolean19 = node12.isDec();
        boolean boolean20 = node12.wasEmptyNode();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 1L);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        node26.putIntProp(46, 30);
        // The following exception was thrown during execution in test generation
        try {
            node12.addChildAfter(node22, node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test16626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16626");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        int int12 = node3.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node17.hasChildren();
        node17.setCharno(52);
        com.google.javascript.rhino.Node node27 = node3.clonePropsFrom(node17);
        node3.setCharno((int) '#');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test16627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16627");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isInc();
        boolean boolean10 = node3.isEmpty();
        node3.setOptionalArg(true);
        int int13 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node14 = node3.getLastChild();
        boolean boolean15 = node3.isBreak();
        boolean boolean16 = node3.isNumber();
        boolean boolean17 = node3.isFunction();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(42, nodeArray23, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray23);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(36, nodeArray23, 40, 4);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(49, nodeArray23);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(50, nodeArray23, 47, 0);
        boolean boolean35 = node34.isVoid();
        node3.addChildToFront(node34);
        boolean boolean37 = node3.isAnd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test16628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16628");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        boolean boolean25 = jSDocInfo20.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getThisType();
        boolean boolean27 = jSDocInfo20.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test16629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16629");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isNoShadow();
        boolean boolean24 = jSDocInfo20.isInterface();
        boolean boolean25 = jSDocInfo20.hasType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        boolean boolean27 = jSDocInfo20.isIdGenerator();
        boolean boolean28 = jSDocInfo20.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo20.getThisType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
    }

    @Test
    public void test16630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16630");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean30 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean32 = strSet16.add("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder34.recordParameter("hi!", jSTypeExpression37);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean40 = jSDocInfoBuilder34.recordVisibility(visibility39);
        boolean boolean41 = strSet16.contains((java.lang.Object) jSDocInfoBuilder34);
        boolean boolean42 = jSDocInfoBuilder34.recordExport();
        boolean boolean44 = jSDocInfoBuilder34.recordBlockDescription("Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        jSDocInfoBuilder34.recordOriginalCommentString("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nSTRING NUMBER 0.0 43 43\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: STRING NUMBER 0.0 43 43\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test16631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16631");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isIf();
        boolean boolean13 = node11.isBreak();
        boolean boolean14 = node11.isComma();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        boolean boolean20 = node19.isIf();
        boolean boolean21 = node11.isEquivalentToTyped(node19);
        int int22 = node11.getLength();
        boolean boolean23 = node11.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16632");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node28 = node15.useSourceInfoFromForTree(node27);
        boolean boolean29 = node27.isContinue();
        java.lang.Object obj31 = node27.getProp(30);
        node27.setLength(167974);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = new com.google.javascript.rhino.JSTypeExpression(node27, "STRING  [length: 53]\n");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean40 = node39.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node41 = node39.cloneNode();
        boolean boolean42 = node39.hasChildren();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(15);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node44.isComma();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder47 = node44.new FileLevelJsDocBuilder();
        boolean boolean48 = jSTypeExpression35.equals((java.lang.Object) node44);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test16633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16633");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isBreak();
        int int15 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFrom(node12);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean21 = node20.isNull();
        boolean boolean22 = node20.isLabelName();
        com.google.javascript.rhino.Node node23 = node12.useSourceInfoFrom(node20);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        java.lang.Object obj40 = node33.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node41 = node28.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean46 = node45.isNull();
        boolean boolean47 = node45.isSyntheticBlock();
        com.google.javascript.rhino.Node node48 = node45.removeChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean53 = node52.isDebugger();
        com.google.javascript.rhino.Node node54 = node52.getFirstChild();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj60 = node58.getProp(43);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int65 = node64.getSourceOffset();
        com.google.javascript.rhino.Node node66 = node58.useSourceInfoIfMissingFromForTree(node64);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(38, node33, node45, node52, node58);
        node33.setDouble((double) 100);
        com.google.javascript.rhino.Node node70 = node12.copyInformationFrom(node33);
        int int71 = node33.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test16634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16634");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean7 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.markAnnotation("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nSTRING NUMBER 0.0 43 43\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: STRING NUMBER 0.0 43 43\n", (int) (short) 100, (int) (byte) 1);
        boolean boolean12 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean14 = jSDocInfoBuilder1.recordMeaning("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        boolean boolean15 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16635");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList10 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence) "ERROR\n    NUMBER 40.0\n", (java.lang.CharSequence) "NUMBER 40.0 [source_file: hi!]", (java.lang.CharSequence) "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nNUMBER 10.0 52\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: NUMBER 10.0 52\n", (java.lang.CharSequence) "NUMBER 43.0", (java.lang.CharSequence) "FALSE 43", (java.lang.CharSequence) "NUMBER 40.0", (java.lang.CharSequence) "NUMBER 43.0\n", (java.lang.CharSequence) "STRING [, hi!, , , hi!, , hi!, ] 43 [quoted: 1]\n", (java.lang.CharSequence) "[, [STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!], Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n, Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n, OR  54\n, hi!, Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n, [STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!], Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n, [], TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n]", (java.lang.CharSequence) "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        org.junit.Assert.assertNotNull(charSequenceList10);
    }

    @Test
    public void test16636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16636");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder6.markName("hi!", staticSourceFile10, (int) (short) 0, (int) (short) 100);
        boolean boolean14 = jSDocInfoBuilder6.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node19.addChildrenToFront(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder6.build(node23);
        java.lang.String str26 = jSDocInfo25.getMeaning();
        boolean boolean27 = jSDocInfo25.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getExtendedInterfaces();
        java.lang.String str29 = jSDocInfo25.getDescription();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo25.getSuppressions();
        boolean boolean31 = jSDocInfoBuilder1.recordSuppressions(strSet30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder33.markName("hi!", staticSourceFile37, (int) (short) 0, (int) (short) 100);
        boolean boolean41 = jSDocInfoBuilder33.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder33.recordExpose();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = jSDocInfoBuilder33.build(node50);
        java.lang.String str53 = jSDocInfo52.getMeaning();
        boolean boolean54 = jSDocInfo52.isDefine();
        boolean boolean55 = jSDocInfo52.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo52.getEnumParameterType();
        jSDocInfo52.addSuppression("");
        java.lang.String str59 = jSDocInfo52.getDescription();
        boolean boolean60 = jSDocInfo52.isExport();
        boolean boolean61 = jSDocInfo52.isExpose();
        boolean boolean62 = strSet30.equals((java.lang.Object) boolean61);
        java.lang.Object[] objArray63 = strSet30.toArray();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSDocInfo52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
    }

    @Test
    public void test16637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16637");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str25 = jSDocInfo20.getLendsName();
        boolean boolean27 = jSDocInfo20.hasParameter("");
        java.lang.String str28 = jSDocInfo20.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getParameterType("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        boolean boolean31 = jSDocInfo20.containsDeclaration();
        java.lang.String str32 = jSDocInfo20.getOriginalCommentString();
        boolean boolean33 = jSDocInfo20.isDefine();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test16638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16638");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        boolean boolean22 = strSet16.add("JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder24.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        jSDocInfoBuilder24.markName("hi!", staticSourceFile28, (int) (short) 0, (int) (short) 100);
        boolean boolean32 = jSDocInfoBuilder24.recordNoTypeCheck();
        boolean boolean33 = jSDocInfoBuilder24.recordExpose();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node37.addChildrenToFront(node41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = jSDocInfoBuilder24.build(node41);
        boolean boolean44 = jSDocInfo43.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo43.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = jSDocInfo43.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = jSDocInfo43.getTemplateTypeNames();
        boolean boolean48 = strSet16.removeAll((java.util.Collection<java.lang.String>) strList47);
        com.google.common.collect.ImmutableList<java.lang.Cloneable> cloneableList49 = com.google.common.collect.ImmutableList.of();
        boolean boolean50 = strList47.contains((java.lang.Object) cloneableList49);
        boolean boolean51 = strList47.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = strList47.add("STRING ");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(cloneableList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test16639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16639");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        boolean boolean10 = node9.isVarArgs();
        int int11 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node12 = node9.getLastSibling();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node9.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(jSDocInfo13);
    }

    @Test
    public void test16640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16640");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        boolean boolean37 = node34.isDec();
        boolean boolean38 = node34.isLabelName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node34.setStaticSourceFile(staticSourceFile39);
        int int41 = node34.getSideEffectFlags();
        node34.setLineno(46);
        boolean boolean44 = node34.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test16641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16641");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        java.lang.Object[] objArray12 = strList8.toArray();
        int int13 = strList8.size();
        java.lang.Object[] objArray14 = strList8.toArray();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 12);
        node16.setSourceEncodedPositionForTree(4);
        boolean boolean19 = strList8.equals((java.lang.Object) node16);
        java.util.Set<java.lang.String> strSet20 = node16.getDirectives();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(42, nodeArray24, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(44, nodeArray24);
        node16.addChildToBack(node29);
        com.google.javascript.rhino.Node node31 = node16.getFirstChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj38 = node36.getProp(43);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean43 = node42.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj49 = node47.getProp(43);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int54 = node53.getSourceOffset();
        com.google.javascript.rhino.Node node55 = node47.useSourceInfoIfMissingFromForTree(node53);
        boolean boolean56 = node55.isAssignAdd();
        boolean boolean57 = node55.isEmpty();
        node55.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet71);
        java.lang.Object obj75 = node68.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node76 = node63.copyInformationFrom(node68);
        boolean boolean77 = node63.isOr();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(1, node36, node42, node55, node63, 176180, 1);
        boolean boolean81 = node36.isExprResult();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean86 = node85.isOptionalArg();
        boolean boolean87 = node85.isNull();
        com.google.javascript.rhino.Node node88 = node36.srcrefTree(node85);
        com.google.javascript.rhino.Node node89 = node16.copyInformationFromForTree(node88);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable90 = node88.getAncestors();
        java.lang.Appendable appendable91 = null;
        // The following exception was thrown during execution in test generation
        try {
            node88.appendStringTree(appendable91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(ancestorIterable90);
    }

    @Test
    public void test16642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16642");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        node21.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        com.google.javascript.rhino.Node node36 = node29.getChildAtIndex(0);
        java.lang.String str37 = node36.toString();
        node36.setSourceEncodedPositionForTree((int) (byte) -1);
        node36.setOptionalArg(false);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj47 = node45.getProp(43);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int52 = node51.getSourceOffset();
        com.google.javascript.rhino.Node node53 = node45.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node63 = node57.copyInformationFromForTree(node62);
        com.google.javascript.rhino.Node node64 = node45.copyInformationFromForTree(node63);
        boolean boolean65 = node36.isEquivalentToTyped(node45);
        boolean boolean66 = node45.isNew();
        java.lang.String str67 = node45.getString();
        node21.addChildToFront(node45);
        boolean boolean69 = node45.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj75 = node73.getProp(43);
        boolean boolean76 = node73.isCall();
        boolean boolean77 = node73.isGetterDef();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable78 = node73.getAncestors();
        node73.setWasEmptyNode(true);
        java.lang.String str81 = node45.checkTreeEquals(node73);
        com.google.javascript.rhino.InputId inputId82 = null;
        node45.setInputId(inputId82);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int88 = node87.getSourceOffset();
        node87.detachChildren();
        boolean boolean90 = node87.isAnd();
        boolean boolean91 = node87.isSwitch();
        boolean boolean92 = node87.isExprResult();
        node87.addSuppression("JSDocInfo");
        com.google.javascript.rhino.Node node95 = node45.copyInformationFromForTree(node87);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "STRING  43" + "'", str37, "STRING  43");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(ancestorIterable78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test16643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16643");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        boolean boolean22 = node18.isGetProp();
        boolean boolean23 = node18.isExprResult();
        boolean boolean24 = node18.isLabel();
        java.lang.String str25 = node18.getSourceFileName();
        node18.setQuotedString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test16644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16644");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node33 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean34 = node33.isAssignAdd();
        boolean boolean35 = node33.isEmpty();
        java.lang.Object obj37 = node33.getProp((int) '#');
        com.google.javascript.rhino.Node node38 = node5.useSourceInfoIfMissingFrom(node33);
        boolean boolean39 = node5.isTrue();
        boolean boolean40 = node5.isNE();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean45 = node44.isNull();
        boolean boolean46 = node44.isSyntheticBlock();
        boolean boolean47 = node44.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = node44.removeChildren();
        java.util.Set<java.lang.String> strSet49 = node44.getDirectives();
        boolean boolean50 = node44.hasChildren();
        boolean boolean51 = node44.isSetterDef();
        java.lang.Object obj53 = node44.getProp(51);
        boolean boolean54 = node44.isLabel();
        boolean boolean55 = node5.isEquivalentTo(node44);
        boolean boolean56 = node5.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test16645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16645");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        boolean boolean8 = node4.isEmpty();
        boolean boolean9 = node4.isCatch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean12 = node11.isScript();
        node11.putIntProp(0, 32);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(31, node4, node11, 2, 29);
        node18.setSourceFileForTesting("FALSE 43");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16646");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node10 = node4.copyInformationFromForTree(node9);
        boolean boolean11 = node10.hasMoreThanOneChild();
        boolean boolean12 = node10.isQuotedString();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj18 = node16.getProp(43);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int23 = node22.getSourceOffset();
        com.google.javascript.rhino.Node node24 = node16.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node34 = node22.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(8, node10, node34, 32, (int) (short) 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean43 = jSDocInfoBuilder41.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        jSDocInfoBuilder41.markName("hi!", staticSourceFile45, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder41.recordEnumParameterType(jSTypeExpression49);
        node10.putProp((int) (short) 100, (java.lang.Object) jSTypeExpression49);
        boolean boolean52 = node10.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = node10.detachFromParent();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test16647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16647");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.setIsSyntheticBlock(true);
        boolean boolean7 = node4.isReturn();
        boolean boolean8 = node4.isCatch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        com.google.javascript.rhino.Node node20 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean25 = node24.isVar();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node30 = node24.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node31 = node12.copyInformationFromForTree(node30);
        boolean boolean32 = node31.isScript();
        com.google.javascript.rhino.Node node33 = node4.srcrefTree(node31);
        boolean boolean34 = node31.isNE();
        boolean boolean35 = node31.isAnd();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(176180, node31);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16648");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.lang.Object[] objArray31 = strSet16.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder33.markName("hi!", staticSourceFile37, (int) (short) 0, (int) (short) 100);
        boolean boolean41 = jSDocInfoBuilder33.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder33.recordExpose();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = jSDocInfoBuilder33.build(node50);
        java.lang.String str53 = jSDocInfo52.getMeaning();
        boolean boolean54 = jSDocInfo52.isExport();
        boolean boolean55 = strSet16.equals((java.lang.Object) jSDocInfo52);
        boolean boolean56 = jSDocInfo52.isNoAlias();
        java.lang.String str57 = jSDocInfo52.getMeaning();
        java.lang.String str58 = jSDocInfo52.getMeaning();
        boolean boolean59 = jSDocInfo52.isNoTypeCheck();
        java.lang.String str60 = jSDocInfo52.getReturnDescription();
        boolean boolean61 = strSet6.equals((java.lang.Object) jSDocInfo52);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = jSDocInfo52.getTemplateTypeNames();
        boolean boolean63 = jSDocInfo52.isOverride();
        boolean boolean64 = jSDocInfo52.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList65 = jSDocInfo52.getImplementedInterfaces();
        boolean boolean66 = jSDocInfo52.isNoCompile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSDocInfo52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test16649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16649");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.addReference("STRING ");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder1.markName("TYPEOF", staticSourceFile11, 31, 2);
        boolean boolean15 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean17 = jSDocInfoBuilder1.hasParameter("NUMBER 10.0 50");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test16650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16650");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        jSDocInfo42.setLicense("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        boolean boolean51 = jSDocInfo42.isOverride();
        boolean boolean52 = jSDocInfo42.isOverride();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test16651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16651");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.jstype.JSType jSType3 = node1.getJSType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node1.siblings();
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNotNull(nodeIterable4);
    }

    @Test
    public void test16652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16652");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.Node node49 = jSDocInfo42.getAssociatedNode();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection50 = jSDocInfo42.getMarkers();
        com.google.javascript.rhino.Node node51 = jSDocInfo42.getAssociatedNode();
        boolean boolean52 = node51.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(markerCollection50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test16653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16653");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression28);
        boolean boolean36 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression28);
        boolean boolean37 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean38 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean41 = jSDocInfoBuilder1.recordParameterDescription("NUMBER 18.0", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        boolean boolean42 = jSDocInfoBuilder1.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test16654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16654");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.isExpose();
        java.lang.String str49 = jSDocInfo42.getLicense();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test16655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16655");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        java.lang.String str33 = jSDocInfo20.getBlockDescription();
        int int34 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean35 = jSDocInfo20.isJavaDispatch();
        boolean boolean36 = jSDocInfo20.isHidden();
        boolean boolean37 = jSDocInfo20.isExterns();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test16656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16656");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = strList50.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList50.spliterator();
        int int55 = strList50.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder57.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        jSDocInfoBuilder57.markName("hi!", staticSourceFile61, (int) (short) 0, (int) (short) 100);
        boolean boolean65 = jSDocInfoBuilder57.recordNoTypeCheck();
        boolean boolean66 = jSDocInfoBuilder57.recordExpose();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = jSDocInfoBuilder57.build(node74);
        boolean boolean77 = node74.isOptionalArg();
        boolean boolean78 = node74.isOr();
        int int79 = strList50.lastIndexOf((java.lang.Object) node74);
        boolean boolean80 = strList50.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator81 = strList50.spliterator();
        java.lang.Object[] objArray82 = strList50.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strSpliterator81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test16657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16657");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        boolean boolean6 = node3.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        com.google.javascript.rhino.Node node20 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.Node node52 = node40.useSourceInfoIfMissingFromForTree(node46);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj59 = node57.getProp(43);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int64 = node63.getSourceOffset();
        com.google.javascript.rhino.Node node65 = node57.useSourceInfoIfMissingFromForTree(node63);
        boolean boolean66 = node65.isAssignAdd();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean71 = node70.isVar();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) ' ', node24, node52, node65, node70, 1, 100);
        int int75 = node65.getSideEffectFlags();
        int int76 = node65.getSideEffectFlags();
        boolean boolean77 = node65.isRegExp();
        boolean boolean78 = node65.hasChildren();
        com.google.javascript.rhino.Node node79 = node3.useSourceInfoFrom(node65);
        boolean boolean80 = node3.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSDocInfo7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test16658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16658");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        com.google.javascript.rhino.jstype.JSType jSType68 = node57.getJSType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node57.children();
        com.google.javascript.rhino.Node node70 = node57.cloneTree();
        boolean boolean71 = node70.isNot();
        com.google.javascript.rhino.Node node72 = node70.getLastChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test16659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16659");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean4 = node3.isIf();
        boolean boolean5 = node3.isAnd();
        boolean boolean6 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        node10.detachChildren();
        boolean boolean13 = node10.isLabelName();
        int int14 = node10.getSourcePosition();
        boolean boolean15 = node10.isQuotedString();
        node3.addChildToBack(node10);
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj47 = node45.getProp(43);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int52 = node51.getSourceOffset();
        com.google.javascript.rhino.Node node53 = node45.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet60);
        com.google.javascript.rhino.Node node63 = node51.useSourceInfoIfMissingFromForTree(node57);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj70 = node68.getProp(43);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int75 = node74.getSourceOffset();
        com.google.javascript.rhino.Node node76 = node68.useSourceInfoIfMissingFromForTree(node74);
        boolean boolean77 = node76.isAssignAdd();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean82 = node81.isVar();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) ' ', node35, node63, node76, node81, 1, 100);
        boolean boolean86 = node35.isThis();
        boolean boolean87 = node35.isLabel();
        boolean boolean88 = node35.isInstanceOf();
        boolean boolean89 = node35.isLabelName();
        int int90 = node35.getSideEffectFlags();
        boolean boolean91 = node35.isStringKey();
        boolean boolean92 = node3.isEquivalentTo(node35);
        boolean boolean93 = node3.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 176129 + "'", int14 == 176129);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test16660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16660");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        node3.detachChildren();
        boolean boolean6 = node3.isAnd();
        boolean boolean7 = node3.isSwitch();
        boolean boolean8 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = new com.google.javascript.rhino.JSTypeExpression(node3, "JSDocInfo");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test16661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16661");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean10 = node3.getBooleanProp(8);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean33 = node32.isContinue();
        boolean boolean34 = node32.isVoid();
        double double35 = node32.getDouble();
        java.lang.String str36 = node3.checkTreeEquals(node32);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder38.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = null;
        jSDocInfoBuilder38.markName("hi!", staticSourceFile42, (int) (short) 0, (int) (short) 100);
        boolean boolean46 = jSDocInfoBuilder38.recordNoTypeCheck();
        boolean boolean47 = jSDocInfoBuilder38.recordExpose();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node51.addChildrenToFront(node55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = jSDocInfoBuilder38.build(node55);
        java.lang.String str58 = jSDocInfo57.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo57.getTypedefType();
        java.lang.String str60 = jSDocInfo57.getLicense();
        boolean boolean61 = jSDocInfo57.isExport();
        boolean boolean62 = jSDocInfo57.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection63 = jSDocInfo57.getTypeNodes();
        java.lang.String str64 = jSDocInfo57.getLendsName();
        boolean boolean65 = jSDocInfo57.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection66 = jSDocInfo57.getAuthors();
        java.lang.String str67 = jSDocInfo57.getFileOverview();
        node3.setJSDocInfo(jSDocInfo57);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str36, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSDocInfo57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeCollection63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strCollection66);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test16662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16662");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isSyntheticBlock();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int17 = node16.getSourceOffset();
        double double18 = node16.getDouble();
        boolean boolean19 = node16.isFor();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node16.getAncestors();
        com.google.javascript.rhino.Node node21 = node11.clonePropsFrom(node16);
        int int22 = node16.getSourcePosition();
        boolean boolean23 = node16.isOr();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176129 + "'", int22 == 176129);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16663");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isQuotedString();
        boolean boolean8 = node3.isObjectLit();
        boolean boolean9 = node3.isOr();
        boolean boolean10 = node3.isHook();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isGetProp();
        boolean boolean14 = node3.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test16664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16664");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        java.lang.String str27 = jSDocInfo20.getLendsName();
        boolean boolean28 = jSDocInfo20.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        int int30 = jSDocInfo20.getExtendedInterfacesCount();
        java.lang.String str31 = jSDocInfo20.getMeaning();
        int int32 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean33 = jSDocInfo20.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test16665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16665");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isNull();
        boolean boolean6 = node3.isNull();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(42, nodeArray10, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(39, nodeArray10, (int) '4', 32);
        com.google.javascript.rhino.Node node17 = node3.useSourceInfoFromForTree(node16);
        boolean boolean18 = node16.isLabel();
        boolean boolean19 = node16.isSyntheticBlock();
        // The following exception was thrown during execution in test generation
        try {
            node16.setDouble((double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Number node not created with Node.newNumber");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test16666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16666");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        boolean boolean12 = strList8.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean19 = typePosition18.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList20 = com.google.common.collect.ImmutableList.of(typePosition13, typePosition14, typePosition15, typePosition16, typePosition17, typePosition18);
        int int21 = strList8.indexOf((java.lang.Object) typePosition18);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor22 = strList8.listIterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = strList8.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean30 = typePosition29.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList31 = com.google.common.collect.ImmutableList.of(typePosition24, typePosition25, typePosition26, typePosition27, typePosition28, typePosition29);
        int int32 = typePosition26.getEndLine();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean37 = node36.isNull();
        boolean boolean38 = node36.isSyntheticBlock();
        boolean boolean39 = node36.hasMoreThanOneChild();
        typePosition26.setItem(node36);
        com.google.javascript.rhino.Node node41 = node36.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.children();
        boolean boolean43 = node36.isLabelName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node36.getJsDocBuilderForNode();
        boolean boolean45 = node36.isString();
        int int46 = strList8.indexOf((java.lang.Object) boolean45);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typePositionList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(typePositionList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test16667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16667");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean12 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean13 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean14 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean15 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test16668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16668");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isString();
        boolean boolean14 = node3.isInc();
        boolean boolean15 = node3.isEmpty();
        boolean boolean16 = node3.isGetElem();
        boolean boolean17 = node3.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test16669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16669");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        int int23 = strList20.size();
        boolean boolean24 = strList8.containsAll((java.util.Collection<java.lang.String>) strList20);
        java.lang.String str26 = strList20.get((int) (short) 1);
        java.util.stream.Stream<java.lang.String> strStream27 = strList20.stream();
        int int28 = strList20.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = strList20.add("NUMBER 40.0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
    }

    @Test
    public void test16670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16670");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        boolean boolean30 = jSDocInfo20.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection31 = jSDocInfo20.getMarkers();
        java.lang.String str32 = jSDocInfo20.toString();
        boolean boolean33 = jSDocInfo20.isOverride();
        java.lang.String str34 = jSDocInfo20.getVersion();
        java.lang.String str35 = jSDocInfo20.getMeaning();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection36 = jSDocInfo20.getMarkers();
        com.google.javascript.rhino.Node node37 = jSDocInfo20.getAssociatedNode();
        com.google.javascript.rhino.Node node38 = jSDocInfo20.getAssociatedNode();
        boolean boolean39 = jSDocInfo20.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(markerCollection31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSDocInfo" + "'", str32, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(markerCollection36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test16671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16671");
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.String>[]> strCollectionArrayList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(strCollectionArrayList0);
    }

    @Test
    public void test16672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16672");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        int int12 = node3.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        boolean boolean14 = node3.isIn();
        boolean boolean15 = node3.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16673");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.equals((java.lang.Object) (-1));
        boolean boolean53 = strSet6.contains((java.lang.Object) (-1));
        int int54 = strSet6.size();
        int int55 = strSet6.size();
        java.util.stream.Stream<java.lang.String> strStream56 = strSet6.stream();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(strStream56);
    }

    @Test
    public void test16674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16674");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node10.addChildrenToFront(node14);
        boolean boolean16 = node10.isGetterDef();
        boolean boolean17 = node10.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node10, node27);
        boolean boolean41 = node40.isExprResult();
        boolean boolean42 = node40.isFunction();
        com.google.javascript.rhino.Node node43 = node3.srcrefTree(node40);
        boolean boolean44 = node3.isDebugger();
        boolean boolean45 = node3.isFunction();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node3.siblings();
        int int47 = node3.getLength();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable48 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor49 = ancestorIterable48.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor50 = ancestorIterable48.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable48);
        org.junit.Assert.assertNotNull(nodeItor49);
        org.junit.Assert.assertNotNull(nodeItor50);
    }

    @Test
    public void test16675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16675");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo42.getReturnType();
        java.lang.String str50 = jSDocInfo42.getVersion();
        java.lang.String str51 = jSDocInfo42.getDescription();
        boolean boolean52 = jSDocInfo42.hasThisType();
        boolean boolean53 = jSDocInfo42.hasThisType();
        boolean boolean54 = jSDocInfo42.isHidden();
        boolean boolean55 = jSDocInfo42.hasReturnType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test16676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16676");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "STRING  [quoted: 1] [opt_arg: 1]", 1, 2);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test16677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16677");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = jSTypeExpression38.equals((java.lang.Object) node49);
        boolean boolean51 = jSDocInfoBuilder22.recordExtendedInterface(jSTypeExpression38);
        boolean boolean52 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression38);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean57 = jSDocInfoBuilder1.recordParameterDescription("STRING ", "hi!");
        boolean boolean58 = jSDocInfoBuilder1.recordConstancy();
        jSDocInfoBuilder1.markText("NUMBER 0.0 43 [jsdoc_info: JSDocInfo]\n", 1, 37, 23, 100);
        boolean boolean65 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean66 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test16678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16678");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNull();
        boolean boolean6 = node4.isFromExterns();
        boolean boolean7 = node4.isFunction();
        com.google.javascript.rhino.Node node8 = node4.cloneTree();
        boolean boolean9 = node8.isFor();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isOptionalArg();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node24.addChildrenToFront(node28);
        boolean boolean30 = node24.isGetterDef();
        boolean boolean31 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj37 = node35.getProp(43);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int42 = node41.getSourceOffset();
        com.google.javascript.rhino.Node node43 = node35.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet50);
        com.google.javascript.rhino.Node node53 = node41.useSourceInfoIfMissingFromForTree(node47);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(32, node24, node41);
        boolean boolean55 = node54.isExprResult();
        boolean boolean56 = node54.isFunction();
        com.google.javascript.rhino.Node node57 = node17.srcrefTree(node54);
        com.google.javascript.rhino.Node node58 = node13.srcrefTree(node54);
        com.google.javascript.rhino.Node node59 = node8.useSourceInfoFrom(node58);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj65 = node63.getProp(43);
        boolean boolean66 = node63.isParamList();
        boolean boolean67 = node63.isParamList();
        com.google.javascript.rhino.Node node68 = node63.cloneNode();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node81 = node78.cloneNode();
        node78.setSourceFileForTesting("[]");
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(41, node59, node68, node78);
        node59.setSourceEncodedPositionForTree(38);
        boolean boolean87 = node59.isBreak();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test16679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16679");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean22 = node21.isNull();
        boolean boolean23 = node21.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isDebugger();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(38, node9, node21, node28, node34);
        int int44 = node28.getType();
        node28.setType(1);
        boolean boolean47 = node28.isDefaultCase();
        boolean boolean48 = node28.isDo();
        boolean boolean49 = node28.isInc();
        boolean boolean50 = node28.isOptionalArg();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 39 + "'", int44 == 39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test16680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16680");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        int int23 = strList20.size();
        boolean boolean24 = strList8.containsAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        node32.setQuotedString();
        boolean boolean35 = node32.isHook();
        boolean boolean36 = strList20.equals((java.lang.Object) node32);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList20.reverse();
        int int38 = strList20.size();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
    }

    @Test
    public void test16681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16681");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        int int2 = node1.getSourcePosition();
        boolean boolean3 = node1.isAssign();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        com.google.javascript.rhino.Node node35 = node23.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean36 = node35.isContinue();
        boolean boolean37 = node35.isOnlyModifiesThisCall();
        boolean boolean38 = node35.isDefaultCase();
        boolean boolean39 = node8.hasChild(node35);
        java.lang.String str43 = node8.toString(false, true, true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node8.siblings();
        node8.setOptionalArg(false);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean51 = node50.isVar();
        node50.putBooleanProp(30, false);
        boolean boolean55 = node50.isSwitch();
        boolean boolean56 = node50.isIn();
        boolean boolean57 = node50.isFromExterns();
        boolean boolean58 = node50.isNot();
        boolean boolean59 = node50.isNumber();
        int int60 = node50.getSideEffectFlags();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(42, nodeArray66, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(49, nodeArray66, 53, 43);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(176180, nodeArray66, 41, 38);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray66);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(26, nodeArray66);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean82 = node81.isVar();
        node81.putBooleanProp(30, false);
        boolean boolean86 = node81.isSwitch();
        boolean boolean87 = node81.isIn();
        boolean boolean88 = node81.isIn();
        boolean boolean89 = node81.isOr();
        com.google.javascript.rhino.Node node90 = node81.getLastSibling();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(46, node8, node50, node77, node81);
        node8.setType(42);
        boolean boolean94 = node8.isLabel();
        int int95 = node8.getChildCount();
        int int96 = node1.getIndexOfChild(node8);
        boolean boolean97 = node1.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER 0.0 [directives: []]" + "'", str43, "NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test16682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16682");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  43 [source_file: NUMBER 0.0 [directives: []]]\n", 49, 167974);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test16683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16683");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("");
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str26 = strList25.toString();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean31 = node30.isVar();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node36 = node30.copyInformationFromForTree(node35);
        com.google.javascript.rhino.Node node37 = node30.cloneTree();
        boolean boolean38 = strList25.equals((java.lang.Object) node37);
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = strList25.asList();
        // The following exception was thrown during execution in test generation
        try {
            strList39.add(43, "TYPEOF 43");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test16684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16684");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo20.getBaseType();
        boolean boolean32 = jSDocInfo20.hasEnumParameterType();
        boolean boolean33 = jSDocInfo20.isConstructor();
        boolean boolean34 = jSDocInfo20.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16685");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        jSDocInfo42.setLicense("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        boolean boolean51 = jSDocInfo42.isDeprecated();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo42.setVisibility(visibility52);
        java.lang.String str54 = jSDocInfo42.getVersion();
        boolean boolean55 = jSDocInfo42.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility56 = jSDocInfo42.getVisibility();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + visibility52 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility52.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + visibility56 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility56.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
    }

    @Test
    public void test16686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16686");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node7.addChildrenToFront(node11);
        boolean boolean13 = node7.isGetterDef();
        boolean boolean14 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.Node node36 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(32, node7, node24);
        boolean boolean38 = node37.isExprResult();
        boolean boolean39 = node37.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = jSDocInfoBuilder1.build(node37);
        jSDocInfoBuilder1.markName("OR  54\n", 18, (-1));
        boolean boolean46 = jSDocInfoBuilder1.addAuthor("NUMBER 18.0");
        boolean boolean47 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test16687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16687");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo20.getType();
        int int24 = jSDocInfo20.getParameterCount();
        boolean boolean25 = jSDocInfo20.hasReturnType();
        java.lang.String str27 = jSDocInfo20.getDescriptionForParameter("hi!");
        java.lang.String str28 = jSDocInfo20.getLicense();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo20.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test16688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16688");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        boolean boolean15 = jSDocInfoBuilder12.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        boolean boolean22 = node19.isCall();
        boolean boolean23 = node19.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node19, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder26 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray28 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray29 = (java.util.ArrayList<java.lang.String>[]) arrayListArray28;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder30 = strListBuilder26.add((java.util.ArrayList<java.lang.String>[]) arrayListArray28);
        boolean boolean31 = jSTypeExpression25.equals((java.lang.Object) arrayListArray28);
        boolean boolean32 = jSDocInfoBuilder12.recordDefineType(jSTypeExpression25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int34 = namePosition33.getEndLine();
        int int35 = namePosition33.getStartLine();
        com.google.javascript.rhino.Node node36 = namePosition33.getItem();
        boolean boolean37 = jSTypeExpression25.equals((java.lang.Object) node36);
        boolean boolean38 = jSDocInfoBuilder7.recordTypedef(jSTypeExpression25);
        boolean boolean39 = jSDocInfoBuilder1.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", jSTypeExpression25);
        boolean boolean41 = jSDocInfoBuilder1.recordDeprecationReason("JSDocInfo");
        boolean boolean42 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strListBuilder26);
        org.junit.Assert.assertNotNull(arrayListArray28);
        org.junit.Assert.assertNotNull(strListArray29);
        org.junit.Assert.assertNotNull(strListBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test16689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16689");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean23 = jSDocInfo20.isConstant();
        boolean boolean24 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        boolean boolean37 = node28.isDelProp();
        jSDocInfo20.setAssociatedNode(node28);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int43 = node42.getSourceOffset();
        double double44 = node42.getDouble();
        boolean boolean45 = node42.isFalse();
        com.google.javascript.rhino.Node node46 = node28.useSourceInfoFrom(node42);
        java.lang.String str47 = node46.getSourceFileName();
        boolean boolean48 = node46.isName();
        boolean boolean49 = node46.isNot();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test16690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16690");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.isOverride();
        boolean boolean25 = jSDocInfo20.isNoTypeCheck();
        java.lang.String str26 = jSDocInfo20.getBlockDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection27 = jSDocInfo20.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(nodeCollection27);
    }

    @Test
    public void test16691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16691");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        node1.setSourceEncodedPositionForTree(4);
        boolean boolean4 = node1.isBlock();
        boolean boolean5 = node1.isParamList();
        boolean boolean6 = node1.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16692");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        node29.setLength(31);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean36 = node35.isNull();
        boolean boolean37 = node35.isFromExterns();
        boolean boolean38 = node35.isFunction();
        com.google.javascript.rhino.Node node39 = node35.cloneTree();
        boolean boolean40 = node39.isFor();
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node45.children();
        boolean boolean52 = node29.hasChild(node45);
        boolean boolean53 = node45.isFalse();
        node45.addSuppression("GETELEM  43\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test16693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16693");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        java.util.Iterator<java.lang.String> strItor65 = strSet6.iterator();
        strSet6.clear();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.setIsSyntheticBlock(true);
        boolean boolean73 = node70.isReturn();
        boolean boolean74 = node70.isFromExterns();
        boolean boolean75 = node70.isThrow();
        int int76 = node70.getType();
        boolean boolean77 = strSet6.equals((java.lang.Object) node70);
        com.google.javascript.rhino.Node node78 = node70.cloneNode();
        int int79 = node78.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 40 + "'", int76 == 40);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test16694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16694");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getNext();
        int int23 = node18.getSideEffectFlags();
        boolean boolean24 = node18.isNull();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean31 = node30.isVar();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node36 = node30.copyInformationFromForTree(node35);
        boolean boolean37 = node36.isRegExp();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((-1), node36);
        boolean boolean39 = node38.isAssignAdd();
        boolean boolean40 = node18.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 44, 39);
        com.google.javascript.rhino.Node node45 = node44.getFirstChild();
        boolean boolean46 = node44.isName();
        boolean boolean47 = node44.isName();
        com.google.javascript.rhino.Node node48 = node38.srcref(node44);
        int int50 = node38.getIntProp(49);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test16695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16695");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        boolean boolean6 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        java.util.Set<java.lang.String> strSet8 = node3.getDirectives();
        boolean boolean9 = node3.isQualifiedName();
        boolean boolean10 = node3.isContinue();
        boolean boolean11 = node3.isComma();
        boolean boolean12 = node3.isIf();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = node3.getExistingIntProp(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 4");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16696");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.equals((java.lang.Object) (-1));
        boolean boolean53 = strSet6.contains((java.lang.Object) (-1));
        boolean boolean55 = strSet6.add("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.lang.Object obj56 = null;
        boolean boolean57 = strSet6.contains(obj56);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.isInterfaceRecorded();
        boolean boolean61 = jSDocInfoBuilder59.isPopulatedWithFileOverview();
        boolean boolean63 = jSDocInfoBuilder59.recordDeprecationReason("hi!");
        boolean boolean64 = strSet6.equals((java.lang.Object) jSDocInfoBuilder59);
        boolean boolean66 = jSDocInfoBuilder59.recordDescription("ERROR  43\n");
        boolean boolean67 = jSDocInfoBuilder59.isConstructorRecorded();
        boolean boolean68 = jSDocInfoBuilder59.recordConstancy();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test16697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16697");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        boolean boolean49 = node10.isInstanceOf();
        boolean boolean50 = node10.isGetterDef();
        boolean boolean51 = node10.isQualifiedName();
        boolean boolean52 = node10.isTypeOf();
        boolean boolean53 = node10.isInstanceOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test16698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16698");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean10 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean11 = jSDocInfoBuilder1.isPopulated();
        boolean boolean12 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16699");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getReturnType();
        boolean boolean28 = jSDocInfo20.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo20.getParameterNames();
        java.lang.String str30 = jSDocInfo20.getMeaning();
        boolean boolean31 = jSDocInfo20.isExpose();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test16700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16700");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        node19.setCharno((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 10, node19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test16701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16701");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.hasChildren();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(15);
        com.google.javascript.rhino.Node node9 = node3.useSourceInfoIfMissingFrom(node8);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node9.new FileLevelJsDocBuilder();
        node9.setSourceEncodedPositionForTree(4095);
        boolean boolean13 = node9.isDefaultCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16702");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test16703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16703");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.containsDeclaration();
        java.lang.String str19 = jSDocInfo14.getSourceName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean32 = node31.isAssignAdd();
        boolean boolean33 = node31.isScript();
        boolean boolean34 = node31.wasEmptyNode();
        jSDocInfo14.setAssociatedNode(node31);
        java.util.Set<java.lang.String> strSet36 = jSDocInfo14.getParameterNames();
        java.lang.String str37 = jSDocInfo14.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test16704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16704");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        boolean boolean24 = strSet6.add("STRING  43\n    NUMBER 0.0 43\n        STRING  43\n");
        java.util.Iterator<java.lang.String> strItor25 = strSet6.iterator();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        java.lang.Object[] objArray35 = strSet32.toArray();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        java.lang.Object[] objArray45 = strSet42.toArray();
        boolean boolean46 = strSet32.retainAll((java.util.Collection<java.lang.String>) strSet42);
        java.lang.Object[] objArray47 = strSet32.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder49.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        jSDocInfoBuilder49.markName("hi!", staticSourceFile53, (int) (short) 0, (int) (short) 100);
        boolean boolean57 = jSDocInfoBuilder49.recordNoTypeCheck();
        boolean boolean58 = jSDocInfoBuilder49.recordExpose();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node62.addChildrenToFront(node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = jSDocInfoBuilder49.build(node66);
        java.lang.String str69 = jSDocInfo68.getMeaning();
        boolean boolean70 = jSDocInfo68.isExport();
        boolean boolean71 = strSet32.equals((java.lang.Object) jSDocInfo68);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        boolean boolean78 = strSet75.equals((java.lang.Object) (-1));
        boolean boolean79 = strSet32.contains((java.lang.Object) (-1));
        strSet32.clear();
        java.util.Spliterator<java.lang.String> strSpliterator81 = strSet32.spliterator();
        boolean boolean82 = strSet6.removeAll((java.util.Collection<java.lang.String>) strSet32);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(jSDocInfo68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSpliterator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test16705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16705");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        jSDocInfo20.addSuppression("STRING ");
        int int28 = jSDocInfo20.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test16706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16706");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getTypedefType();
        boolean boolean25 = jSDocInfo20.isImplicitCast();
        boolean boolean26 = jSDocInfo20.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test16707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16707");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(30);
        sideEffectFlags1.setMutatesArguments();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test16708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16708");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean30 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean32 = strSet16.add("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder34.recordParameter("hi!", jSTypeExpression37);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean40 = jSDocInfoBuilder34.recordVisibility(visibility39);
        boolean boolean41 = strSet16.contains((java.lang.Object) jSDocInfoBuilder34);
        boolean boolean43 = jSDocInfoBuilder34.recordLends("TYPEOF");
        boolean boolean44 = jSDocInfoBuilder34.recordNoAlias();
        boolean boolean46 = jSDocInfoBuilder34.recordVersion("NUMBER 0.0");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        node54.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node54.setJSType(jSType57);
        java.lang.String str59 = node54.getString();
        boolean boolean60 = node54.isWith();
        java.util.Set<java.lang.String> strSet61 = node54.getDirectives();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node54.children();
        jSDocInfoBuilder34.markTypeNode(node54, 52, 37, 53, 36, false);
        boolean boolean69 = jSDocInfoBuilder34.recordConstancy();
        boolean boolean70 = jSDocInfoBuilder34.isConstructorRecorded();
        boolean boolean71 = jSDocInfoBuilder34.shouldParseDocumentation();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test16709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16709");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getLength();
        com.google.javascript.rhino.InputId inputId5 = node3.getInputId();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean7 = typePosition6.hasBrackets();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean12 = node11.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object obj23 = node16.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node24 = node11.copyInformationFrom(node16);
        typePosition6.setItem(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj31 = node29.getProp(43);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int36 = node35.getSourceOffset();
        com.google.javascript.rhino.Node node37 = node29.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean38 = node37.isAssignAdd();
        boolean boolean39 = node37.isFromExterns();
        com.google.javascript.rhino.Node node40 = node24.copyInformationFromForTree(node37);
        node37.detachChildren();
        boolean boolean42 = node37.isSyntheticBlock();
        boolean boolean43 = node37.isTrue();
        com.google.javascript.rhino.Node node44 = node3.srcref(node37);
        boolean boolean45 = node3.isLabel();
        boolean boolean46 = node3.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(inputId5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test16710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16710");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node3.getJsDocBuilderForNode();
        boolean boolean14 = node3.isSwitch();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor16 = ancestorIterable15.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor17 = ancestorIterable15.iterator();
        com.google.javascript.rhino.Node.AncestorIterable[] ancestorIterableArray18 = new com.google.javascript.rhino.Node.AncestorIterable[] { ancestorIterable15 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.AncestorIterable> ancestorIterableList19 = com.google.common.collect.ImmutableList.copyOf(ancestorIterableArray18);
        java.lang.Class<?> wildcardClass20 = ancestorIterableList19.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(nodeItor16);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNotNull(ancestorIterableArray18);
        org.junit.Assert.assertNotNull(ancestorIterableList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test16711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16711");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean22 = node21.isNull();
        boolean boolean23 = node21.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isDebugger();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(38, node9, node21, node28, node34);
        boolean boolean44 = node21.isNoSideEffectsCall();
        int int45 = node21.getLength();
        boolean boolean46 = node21.isOptionalArg();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test16712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16712");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        boolean boolean10 = node7.isHook();
        int int11 = node7.getType();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        int int18 = node15.getType();
        boolean boolean19 = node15.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node20 = node7.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean21 = node15.isQuotedString();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isVar();
        node25.putBooleanProp(30, false);
        boolean boolean30 = node25.isSwitch();
        boolean boolean31 = node25.isIn();
        com.google.javascript.rhino.Node node32 = node15.srcref(node25);
        boolean boolean33 = node25.isDo();
        boolean boolean34 = node25.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16713");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder6.markName("hi!", staticSourceFile10, (int) (short) 0, (int) (short) 100);
        boolean boolean14 = jSDocInfoBuilder6.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node19.addChildrenToFront(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder6.build(node23);
        java.lang.String str26 = jSDocInfo25.getMeaning();
        boolean boolean27 = jSDocInfo25.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getExtendedInterfaces();
        boolean boolean29 = jSDocInfo25.isImplicitCast();
        node3.setJSDocInfo(jSDocInfo25);
        node3.setType(4);
        int int33 = node3.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
    }

    @Test
    public void test16714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16714");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", 1, 16);
        boolean boolean6 = node5.isDebugger();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(8, node5);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16715");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        boolean boolean25 = jSDocInfo20.hasType();
        boolean boolean26 = jSDocInfo20.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test16716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16716");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean4 = node3.isDo();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node3.siblings();
        boolean boolean6 = node3.isEmpty();
        boolean boolean7 = node3.isNot();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        boolean boolean14 = node11.isCall();
        int int15 = node11.getSourcePosition();
        java.lang.String str19 = node11.toString(false, true, false);
        boolean boolean20 = node11.isThrow();
        com.google.javascript.rhino.Node node21 = node11.cloneNode();
        com.google.javascript.rhino.Node node22 = node11.cloneTree();
        boolean boolean23 = node11.isQualifiedName();
        boolean boolean24 = node3.isEquivalentToTyped(node11);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176180 + "'", int15 == 176180);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING " + "'", str19, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16717");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        int int17 = typePosition2.getStartLine();
        int int18 = typePosition2.getEndLine();
        int int19 = typePosition2.getPositionOnEndLine();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean42 = node35.isThrow();
        boolean boolean43 = node35.isNot();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean48 = node47.isVar();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node53 = node47.copyInformationFromForTree(node52);
        java.lang.String str54 = node35.checkTreeEquals(node53);
        boolean boolean55 = node53.isObjectLit();
        typePosition2.setItem(node53);
        int int57 = typePosition2.getPositionOnEndLine();
        int int58 = typePosition2.getPositionOnEndLine();
        int int59 = typePosition2.getStartLine();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str54, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test16718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16718");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        int int12 = node3.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node17.hasChildren();
        node17.setCharno(52);
        com.google.javascript.rhino.Node node27 = node3.clonePropsFrom(node17);
        node27.putIntProp(42, 46);
        com.google.javascript.rhino.InputId inputId31 = node27.getInputId();
        boolean boolean32 = node27.isTrue();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node27.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(inputId31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(staticSourceFile33);
    }

    @Test
    public void test16719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16719");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isOverride();
        boolean boolean19 = jSDocInfo14.isExport();
        java.lang.String str20 = jSDocInfo14.getLicense();
        boolean boolean21 = jSDocInfo14.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test16720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16720");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.Node node49 = jSDocInfo42.getAssociatedNode();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection50 = jSDocInfo42.getMarkers();
        java.lang.String str51 = jSDocInfo42.getOriginalCommentString();
        boolean boolean52 = jSDocInfo42.containsDeclaration();
        boolean boolean53 = jSDocInfo42.hasType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(markerCollection50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test16721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16721");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        java.lang.String str32 = jSDocInfo20.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean34 = jSDocInfo20.isIdGenerator();
        boolean boolean35 = jSDocInfo20.isOverride();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16722");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        node3.putBooleanProp(30, false);
        boolean boolean10 = node3.isReturn();
        boolean boolean11 = node3.isHook();
        boolean boolean12 = node3.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16723");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        boolean boolean33 = jSDocInfo20.hasThisType();
        boolean boolean34 = jSDocInfo20.isNoTypeCheck();
        java.lang.String str35 = jSDocInfo20.toString();
        boolean boolean36 = jSDocInfo20.isHidden();
        boolean boolean38 = jSDocInfo20.hasParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        java.lang.String str39 = jSDocInfo20.getDescription();
        boolean boolean40 = jSDocInfo20.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JSDocInfo" + "'", str35, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test16724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16724");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        java.lang.String str70 = jSDocInfo69.getMeaning();
        boolean boolean71 = jSDocInfo69.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo69.getExtendedInterfaces();
        java.lang.String str73 = jSDocInfo69.getDescription();
        java.util.Set<java.lang.String> strSet74 = jSDocInfo69.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream75 = strSet74.parallelStream();
        node31.setDirectives(strSet74);
        boolean boolean77 = node31.isGetElem();
        boolean boolean78 = node31.isOnlyModifiesThisCall();
        int int79 = node31.getSourcePosition();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean82 = node81.isFalse();
        boolean boolean83 = node81.isDelProp();
        com.google.javascript.rhino.Node node84 = node81.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = null;
        node84.setStaticSourceFile(staticSourceFile85);
        node84.setCharno(41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = node84.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node90 = node31.clonePropsFrom(node84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Node has existing properties.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 176129 + "'", int79 == 176129);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(jSDocInfo89);
    }

    @Test
    public void test16725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16725");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.isExpose();
        boolean boolean29 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getType();
        int int31 = jSDocInfo20.getExtendedInterfacesCount();
        java.lang.Class<?> wildcardClass32 = jSDocInfo20.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test16726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16726");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.InputId inputId22 = null;
        node15.setInputId(inputId22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node62.setDirectives((java.util.Set<java.lang.String>) strSet65);
        com.google.javascript.rhino.Node node68 = node56.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj75 = node73.getProp(43);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int80 = node79.getSourceOffset();
        com.google.javascript.rhino.Node node81 = node73.useSourceInfoIfMissingFromForTree(node79);
        boolean boolean82 = node81.isAssignAdd();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean87 = node86.isVar();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) ' ', node40, node68, node81, node86, 1, 100);
        node86.setWasEmptyNode(true);
        boolean boolean93 = node86.isQuotedString();
        boolean boolean95 = node86.getBooleanProp((int) (byte) 0);
        boolean boolean96 = node86.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node97 = node15.copyInformationFromForTree(node86);
        boolean boolean98 = node15.isAssignAdd();
        boolean boolean99 = node15.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test16727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16727");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node33 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean34 = node33.isAssignAdd();
        boolean boolean35 = node33.isEmpty();
        java.lang.Object obj37 = node33.getProp((int) '#');
        com.google.javascript.rhino.Node node38 = node5.useSourceInfoIfMissingFrom(node33);
        boolean boolean39 = node5.isTrue();
        boolean boolean40 = node5.isNE();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean45 = node44.isNull();
        boolean boolean46 = node44.isSyntheticBlock();
        boolean boolean47 = node44.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = node44.removeChildren();
        java.util.Set<java.lang.String> strSet49 = node44.getDirectives();
        boolean boolean50 = node44.hasChildren();
        boolean boolean51 = node44.isSetterDef();
        java.lang.Object obj53 = node44.getProp(51);
        boolean boolean54 = node44.isLabel();
        boolean boolean55 = node5.isEquivalentTo(node44);
        node5.putIntProp(48, 30);
        boolean boolean59 = node5.isSwitch();
        boolean boolean60 = node5.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test16728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16728");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        stringPosition0.setItem("JSDocInfo");
        int int4 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        int int7 = stringPosition0.getEndLine();
        int int8 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation((int) (byte) 10, 48, 23, 52);
        int int14 = stringPosition0.getEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
    }

    @Test
    public void test16729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16729");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        boolean boolean23 = jSDocInfo20.isExterns();
        boolean boolean24 = jSDocInfo20.isNoSideEffects();
        boolean boolean25 = jSDocInfo20.isDeprecated();
        java.lang.String str26 = jSDocInfo20.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getTypedefType();
        int int28 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean29 = jSDocInfo20.isExterns();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16730");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        boolean boolean8 = node4.isGetterDef();
        boolean boolean9 = node4.isCase();
        boolean boolean10 = node4.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(0, node4, (-1), 2);
        com.google.javascript.rhino.Node node16 = node14.getAncestor(0);
        node16.setSourceEncodedPosition(41);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test16731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16731");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.hasFileOverview();
        boolean boolean26 = jSDocInfo20.isConstant();
        java.lang.String str27 = jSDocInfo20.getDeprecationReason();
        boolean boolean29 = jSDocInfo20.hasParameterType("[, hi!, , , hi!, , hi!, ]");
        boolean boolean30 = jSDocInfo20.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo20.getBaseType();
        boolean boolean32 = jSDocInfo20.isConstructor();
        boolean boolean33 = jSDocInfo20.isNoShadow();
        java.lang.String str34 = jSDocInfo20.getBlockDescription();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.recordNoTypeCheck();
        boolean boolean38 = jSDocInfoBuilder36.isInterfaceRecorded();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        int int45 = node42.getType();
        boolean boolean46 = node42.isGetterDef();
        node42.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder36.build(node42);
        boolean boolean50 = jSDocInfo49.isNoSideEffects();
        boolean boolean51 = jSDocInfo49.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList52 = jSDocInfo49.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet53 = jSDocInfo49.getParameterNames();
        boolean boolean54 = jSDocInfo49.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo49.getReturnType();
        jSDocInfo49.setLicense("STRING ");
        jSDocInfo49.setDeprecated(false);
        boolean boolean60 = jSDocInfo49.isNoSideEffects();
        boolean boolean62 = jSDocInfo49.hasParameter("STRING  43");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility63 = jSDocInfo49.getVisibility();
        jSDocInfo20.setVisibility(visibility63);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 40 + "'", int45 == 40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + visibility63 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility63.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test16732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16732");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        node3.putIntProp(46, 30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder13.isInterfaceRecorded();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        int int22 = node19.getType();
        boolean boolean23 = node19.isGetterDef();
        node19.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = jSDocInfoBuilder13.build(node19);
        boolean boolean27 = jSDocInfo26.isNoSideEffects();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo26.setAssociatedNode(node29);
        boolean boolean31 = node29.isInc();
        int int32 = node3.getIndexOfChild(node29);
        com.google.javascript.rhino.InputId inputId33 = node3.getInputId();
        boolean boolean34 = node3.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 40 + "'", int22 == 40);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16733");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 43 [opt_arg: 1]");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test16734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16734");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        boolean boolean26 = jSDocInfo20.hasParameter("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean27 = jSDocInfo20.isHidden();
        boolean boolean28 = jSDocInfo20.hasThisType();
        boolean boolean29 = jSDocInfo20.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16735");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        node45.setQuotedString();
        boolean boolean48 = node45.isHook();
        int int49 = node45.getType();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        int int56 = node53.getType();
        boolean boolean57 = node53.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node58 = node45.useSourceInfoIfMissingFromForTree(node53);
        boolean boolean59 = node34.hasChild(node58);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = node58.getJSDocInfo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node58.getJSDocInfo();
        boolean boolean62 = node58.isTrue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TYPEOF" + "'", str37, "TYPEOF");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSDocInfo60);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16736");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        boolean boolean7 = node3.isOr();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node11.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node18 = node11.getChildAtIndex(0);
        boolean boolean19 = node11.isExprResult();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isNull();
        boolean boolean25 = node23.isThis();
        boolean boolean26 = node11.hasChild(node23);
        com.google.javascript.rhino.Node node27 = node3.useSourceInfoIfMissingFromForTree(node11);
        node27.setCharno(39);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        int int34 = node33.getSideEffectFlags();
        node33.setSourceEncodedPositionForTree(43);
        boolean boolean37 = node27.hasChild(node33);
        boolean boolean38 = node33.isReturn();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean43 = node42.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node44 = node42.cloneNode();
        boolean boolean45 = node44.isGetElem();
        node44.addSuppression("");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 44, 39);
        node44.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node33.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean54 = node33.isFalse();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test16737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16737");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo14.getParameterNames();
        boolean boolean19 = jSDocInfo14.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getReturnType();
        java.lang.String str21 = jSDocInfo14.getDescription();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean26 = node25.isNull();
        boolean boolean27 = node25.isSyntheticBlock();
        boolean boolean28 = node25.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node29 = node25.removeChildren();
        java.util.Set<java.lang.String> strSet30 = node25.getDirectives();
        boolean boolean31 = node25.hasChildren();
        boolean boolean32 = node25.isSetterDef();
        java.lang.Object obj34 = node25.getProp(51);
        boolean boolean35 = node25.isLabel();
        boolean boolean36 = node25.isFromExterns();
        node25.setType(37);
        jSDocInfo14.setAssociatedNode(node25);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo14.getType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
    }

    @Test
    public void test16738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16738");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(49, nodeArray6, 53, 43);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(176180, nodeArray6, 41, 38);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray6);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(37, nodeArray6, 43, 16);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(49, nodeArray6, (int) (short) 100, (int) '#');
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node27.addChildrenToFront(node31);
        boolean boolean33 = node27.isGetterDef();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node27.setJSType(jSType34);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(37, node27, 0, 0);
        int int39 = node38.getCharno();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean43 = node41.getBooleanProp(51);
        boolean boolean44 = node41.isExprResult();
        boolean boolean45 = node41.isVar();
        node38.addChildToBack(node41);
        com.google.javascript.rhino.Node node47 = node22.useSourceInfoFromForTree(node38);
        node38.removeProp((int) (byte) 1);
        com.google.javascript.rhino.Node node50 = node38.cloneTree();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test16739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16739");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        int int4 = sideEffectFlags1.valueOf();
        int int5 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test16740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16740");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markAnnotation("TYPEOF", 50, 0);
        boolean boolean58 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean59 = jSDocInfoBuilder1.recordInterface();
        boolean boolean61 = jSDocInfoBuilder1.recordBlockDescription("Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test16741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16741");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo20.getEnumParameterType();
        boolean boolean34 = jSDocInfo20.isJavaDispatch();
        boolean boolean35 = jSDocInfo20.isInterface();
        boolean boolean36 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = jSDocInfo20.getVisibility();
        boolean boolean38 = jSDocInfo20.isConstructor();
        boolean boolean39 = jSDocInfo20.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test16742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16742");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet15);
        java.lang.Object[] objArray18 = strSet15.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        java.lang.Object[] objArray28 = strSet25.toArray();
        boolean boolean29 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.lang.Object[] objArray30 = strSet15.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator31 = strSet15.spliterator();
        boolean boolean32 = strList8.contains((java.lang.Object) strSpliterator31);
        boolean boolean33 = strList8.isEmpty();
        java.lang.String str35 = strList8.get(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = strList8.add("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test16743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16743");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node6.addChildrenToFront(node10);
        boolean boolean12 = node6.isGetterDef();
        boolean boolean13 = node6.isEmpty();
        typePosition0.setItem(node6);
        com.google.javascript.rhino.Node node15 = node6.getParent();
        boolean boolean16 = node6.isAssign();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test16744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16744");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean6 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean7 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean8 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test16745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16745");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean7 = jSDocInfoBuilder1.recordBlockDescription("[, hi!, , , hi!, , hi!, ]");
        boolean boolean8 = jSDocInfoBuilder1.isPopulated();
        boolean boolean9 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean11 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordNoTypeCheck();
        jSDocInfoBuilder13.recordOriginalCommentString("");
        boolean boolean17 = jSDocInfoBuilder13.isJavaDispatch();
        boolean boolean18 = jSDocInfoBuilder13.isPopulatedWithFileOverview();
        boolean boolean19 = jSDocInfoBuilder13.recordOverride();
        boolean boolean21 = jSDocInfoBuilder13.addReference("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder23.recordThisType(jSTypeExpression25);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        jSDocInfoBuilder28.markName("hi!", staticSourceFile32, (int) (short) 0, (int) (short) 100);
        boolean boolean36 = jSDocInfoBuilder28.recordNoTypeCheck();
        boolean boolean37 = jSDocInfoBuilder28.recordExpose();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = jSDocInfoBuilder28.build(node45);
        java.lang.String str48 = jSDocInfo47.getMeaning();
        boolean boolean49 = jSDocInfo47.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo47.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo47.getDescription();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo47.getSuppressions();
        boolean boolean53 = jSDocInfoBuilder23.recordSuppressions(strSet52);
        boolean boolean54 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean56 = jSDocInfoBuilder23.recordVisibility(visibility55);
        boolean boolean57 = jSDocInfoBuilder13.recordVisibility(visibility55);
        boolean boolean58 = jSDocInfoBuilder1.recordVisibility(visibility55);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSDocInfo47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test16746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16746");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo20.getExtendedInterfaces();
        java.lang.String str33 = jSDocInfo20.toString();
        jSDocInfo20.setDeprecated(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JSDocInfo" + "'", str33, "JSDocInfo");
    }

    @Test
    public void test16747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16747");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        boolean boolean33 = jSDocInfo20.hasThisType();
        boolean boolean34 = jSDocInfo20.isNoTypeCheck();
        jSDocInfo20.addSuppression("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        boolean boolean37 = jSDocInfo20.hasType();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = jSDocInfo20.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor39 = strList38.iterator();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean50 = strSet46.contains((java.lang.Object) 10.0d);
        java.util.Iterator<java.lang.String> strItor51 = strSet46.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.AnnotatedElement> annotatedElementList52 = com.google.common.collect.ImmutableList.of();
        boolean boolean53 = strSet46.contains((java.lang.Object) annotatedElementList52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = strList38.addAll((java.util.Collection<java.lang.String>) strSet46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(annotatedElementList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test16748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16748");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = jSTypeExpression38.equals((java.lang.Object) node49);
        boolean boolean51 = jSDocInfoBuilder22.recordExtendedInterface(jSTypeExpression38);
        boolean boolean52 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression38);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean55 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean56 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 10, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", 51, 46);
        boolean boolean62 = node61.isHook();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = jSDocInfoBuilder1.build(node61);
        com.google.javascript.rhino.Node node64 = node61.getFirstChild();
        java.lang.Object obj66 = node61.getProp(29);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSDocInfo63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test16749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16749");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        node4.removeProp(10);
        node4.setVarArgs(true);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int59 = node58.getSourceOffset();
        com.google.javascript.rhino.Node node60 = node52.useSourceInfoIfMissingFromForTree(node58);
        boolean boolean61 = node60.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node60.getStaticSourceFile();
        boolean boolean63 = node60.isDo();
        com.google.javascript.rhino.Node node64 = node4.useSourceInfoFrom(node60);
        node64.setVarArgs(false);
        boolean boolean67 = node64.isFromExterns();
        boolean boolean68 = node64.isVarArgs();
        boolean boolean69 = node64.isOr();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test16750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16750");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        jSDocInfoBuilder1.markText("[]", (int) (byte) 0, 176180, 2, (int) (byte) 100);
        boolean boolean14 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean15 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16751");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean11 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test16752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16752");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        node29.setLength(31);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean36 = node35.isNull();
        boolean boolean37 = node35.isFromExterns();
        boolean boolean38 = node35.isFunction();
        com.google.javascript.rhino.Node node39 = node35.cloneTree();
        boolean boolean40 = node39.isFor();
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node45.children();
        boolean boolean52 = node29.hasChild(node45);
        com.google.javascript.rhino.Node node53 = node29.getFirstChild();
        java.lang.Object obj55 = node29.getProp(46);
        node29.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test16753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16753");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder27.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder27.markName("hi!", staticSourceFile31, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder27.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        boolean boolean47 = node44.isCall();
        int int48 = node44.getSourcePosition();
        java.lang.String str52 = node44.toString(false, true, false);
        boolean boolean53 = node44.isDo();
        boolean boolean54 = node44.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = jSDocInfoBuilder27.build(node44);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder57.recordNoTypeCheck();
        boolean boolean60 = jSDocInfoBuilder57.addAuthor("");
        boolean boolean61 = jSDocInfoBuilder57.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = null;
        jSDocInfoBuilder63.markName("hi!", staticSourceFile67, (int) (short) 0, (int) (short) 100);
        boolean boolean71 = jSDocInfoBuilder63.recordNoTypeCheck();
        boolean boolean72 = jSDocInfoBuilder63.recordExpose();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node76.addChildrenToFront(node80);
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = jSDocInfoBuilder63.build(node80);
        java.lang.String str83 = jSDocInfo82.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo82.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = jSDocInfo82.getTemplateTypeNames();
        java.util.Spliterator<java.lang.String> strSpliterator86 = strList85.spliterator();
        boolean boolean88 = strList85.equals((java.lang.Object) 100.0d);
        boolean boolean89 = jSDocInfoBuilder57.recordTemplateTypeNames((java.util.List<java.lang.String>) strList85);
        boolean boolean90 = jSDocInfoBuilder27.recordTemplateTypeNames((java.util.List<java.lang.String>) strList85);
        boolean boolean91 = strSet25.removeAll((java.util.Collection<java.lang.String>) strList85);
        java.lang.Object[] objArray92 = strList85.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = strList85.add("STRING  43");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 176180 + "'", int48 == 176180);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "STRING " + "'", str52, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(jSDocInfo82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test16754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16754");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node.FileLevelJsDocBuilder[]> fileLevelJsDocBuilderArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArrayBuilder0);
    }

    @Test
    public void test16755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16755");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo20.getAuthors();
        boolean boolean25 = jSDocInfo20.isConstructor();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo20.getParameterNames();
        boolean boolean27 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo20.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
    }

    @Test
    public void test16756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16756");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        boolean boolean11 = jSDocInfoBuilder1.addAuthor("NUMBER 0.0 43");
        boolean boolean12 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean14 = jSDocInfoBuilder1.recordLends("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test16757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16757");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj50 = node48.getProp(43);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int55 = node54.getSourceOffset();
        com.google.javascript.rhino.Node node56 = node48.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.javascript.rhino.Node node66 = node54.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean67 = node66.isContinue();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj73 = node71.getProp(43);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int78 = node77.getSourceOffset();
        com.google.javascript.rhino.Node node79 = node71.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean80 = node79.isAssignAdd();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) ' ', node38, node66, node79, node84, 1, 100);
        node84.setWasEmptyNode(true);
        boolean boolean91 = node84.isQuotedString();
        boolean boolean92 = node84.isScript();
        com.google.javascript.rhino.Node node93 = node15.srcref(node84);
        boolean boolean94 = node15.isUnscopedQualifiedName();
        boolean boolean95 = node15.isNull();
        boolean boolean96 = node15.hasChildren();
        boolean boolean97 = node15.isLocalResultCall();
        boolean boolean98 = node15.isWith();
        boolean boolean99 = node15.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test16758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16758");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.markAnnotation("NUMBER 18.0", 31, 36);
        boolean boolean10 = jSDocInfoBuilder1.recordDeprecated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test16759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16759");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean2 = node1.isFalse();
        node1.setOptionalArg(false);
        boolean boolean5 = node1.isBlock();
        boolean boolean6 = node1.isTrue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16760");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) -1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("JSDocInfo", 10, 0);
        com.google.javascript.rhino.Node node6 = node1.useSourceInfoIfMissingFrom(node5);
        com.google.javascript.rhino.Node node7 = node1.cloneNode();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test16761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16761");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        com.google.javascript.rhino.Node node10 = node7.removeFirstChild();
        boolean boolean11 = node7.isQuotedString();
        boolean boolean12 = node7.isRegExp();
        node7.setCharno((int) '#');
        node7.setSourceFileForTesting("STRING  43 [source_file: NUMBER 0.0 [directives: []]]\n");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node7.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator18 = nodeIterable17.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(nodeSpliterator18);
    }

    @Test
    public void test16762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16762");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isIf();
        boolean boolean13 = node11.isAnd();
        node11.detachChildren();
        boolean boolean15 = node11.isStringKey();
        node11.addSuppression("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean18 = node11.isVar();
        boolean boolean19 = node11.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test16763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16763");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 10, 50, 30);
        boolean boolean4 = node3.isScript();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node8.addChildrenToFront(node12);
        node12.setQuotedString();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node12);
        int int16 = node12.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test16764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16764");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isParamList();
        boolean boolean7 = node3.isParamList();
        com.google.javascript.rhino.Node node8 = node3.cloneNode();
        boolean boolean9 = node3.isVar();
        boolean boolean10 = node3.isName();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean16 = node15.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet23);
        java.lang.Object obj27 = node20.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node15.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean33 = node32.isNull();
        boolean boolean34 = node32.isSyntheticBlock();
        com.google.javascript.rhino.Node node35 = node32.removeChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean40 = node39.isDebugger();
        com.google.javascript.rhino.Node node41 = node39.getFirstChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj47 = node45.getProp(43);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int52 = node51.getSourceOffset();
        com.google.javascript.rhino.Node node53 = node45.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(38, node20, node32, node39, node45);
        com.google.javascript.rhino.Node node55 = node3.srcrefTree(node45);
        boolean boolean56 = node3.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test16765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16765");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        int int26 = jSDocInfo20.getExtendedInterfacesCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection27 = jSDocInfo20.getMarkers();
        java.lang.String str28 = jSDocInfo20.getFileOverview();
        int int29 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(markerCollection27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test16766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16766");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("");
        boolean boolean25 = jSDocInfo20.isImplicitCast();
        boolean boolean26 = jSDocInfo20.hasEnumParameterType();
        boolean boolean27 = jSDocInfo20.isConstant();
        boolean boolean28 = jSDocInfo20.isNoShadow();
        java.lang.String str29 = jSDocInfo20.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
    }

    @Test
    public void test16767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16767");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "NUMBER 0.0 [directives: []]");
        node2.setString("STRING  [length: 53]\n");
        boolean boolean5 = node2.isTrue();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16768");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean11 = jSDocInfoBuilder1.addReference("hi!");
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList52 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList20, (java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList51);
        boolean boolean53 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList42);
        boolean boolean54 = strList42.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = strList42.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder57.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        jSDocInfoBuilder57.markName("hi!", staticSourceFile61, (int) (short) 0, (int) (short) 100);
        boolean boolean65 = jSDocInfoBuilder57.recordNoTypeCheck();
        boolean boolean66 = jSDocInfoBuilder57.recordExpose();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = jSDocInfoBuilder57.build(node74);
        java.lang.String str77 = jSDocInfo76.getMeaning();
        boolean boolean78 = jSDocInfo76.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo76.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = jSDocInfo76.getThisType();
        java.lang.String str81 = jSDocInfo76.getSourceName();
        int int82 = jSDocInfo76.getImplementedInterfaceCount();
        boolean boolean83 = jSDocInfo76.containsDeclaration();
        boolean boolean85 = jSDocInfo76.hasDescriptionForParameter("");
        boolean boolean86 = jSDocInfo76.isDefine();
        boolean boolean87 = jSDocInfo76.shouldPreserveTry();
        boolean boolean88 = strList42.contains((java.lang.Object) jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strIterableList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(jSDocInfo76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNull(jSTypeExpression80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test16769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16769");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        boolean boolean24 = jSDocInfo20.hasReturnType();
        boolean boolean25 = jSDocInfo20.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection26 = jSDocInfo20.getMarkers();
        java.lang.String str27 = jSDocInfo20.getBlockDescription();
        boolean boolean28 = jSDocInfo20.shouldPreserveTry();
        java.lang.String str29 = jSDocInfo20.getLendsName();
        int int30 = jSDocInfo20.getExtendedInterfacesCount();
        int int31 = jSDocInfo20.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(markerCollection26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test16770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16770");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isFromExterns();
        boolean boolean11 = node3.isNot();
        boolean boolean12 = node3.isNumber();
        int int13 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        java.lang.Object[] objArray33 = strSet30.toArray();
        boolean boolean34 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet30);
        java.lang.Object[] objArray35 = strSet20.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder37.markName("hi!", staticSourceFile41, (int) (short) 0, (int) (short) 100);
        boolean boolean45 = jSDocInfoBuilder37.recordNoTypeCheck();
        boolean boolean46 = jSDocInfoBuilder37.recordExpose();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = jSDocInfoBuilder37.build(node54);
        java.lang.String str57 = jSDocInfo56.getMeaning();
        boolean boolean58 = jSDocInfo56.isExport();
        boolean boolean59 = strSet20.equals((java.lang.Object) jSDocInfo56);
        boolean boolean60 = jSDocInfo56.isNoAlias();
        java.lang.String str61 = jSDocInfo56.getMeaning();
        java.lang.String str62 = jSDocInfo56.getMeaning();
        boolean boolean63 = jSDocInfo56.containsDeclaration();
        boolean boolean64 = jSDocInfo56.isExport();
        node3.setJSDocInfo(jSDocInfo56);
        com.google.javascript.rhino.Node node66 = jSDocInfo56.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo56.getReturnType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(jSTypeExpression67);
    }

    @Test
    public void test16771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16771");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        com.google.javascript.rhino.Node node11 = node3.removeChildren();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node33.cloneTree();
        java.lang.String str36 = node35.toString();
        boolean boolean37 = node35.isReturn();
        boolean boolean38 = node35.isEmpty();
        com.google.javascript.rhino.Node node39 = node11.srcref(node35);
        boolean boolean40 = node39.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean47 = typePosition46.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList48 = com.google.common.collect.ImmutableList.of(typePosition41, typePosition42, typePosition43, typePosition44, typePosition45, typePosition46);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean50 = typePosition49.hasBrackets();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean55 = node54.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node59.setDirectives((java.util.Set<java.lang.String>) strSet62);
        java.lang.Object obj66 = node59.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node67 = node54.copyInformationFrom(node59);
        typePosition49.setItem(node67);
        int int69 = typePosition49.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition70 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition72 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition73 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition74 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean76 = typePosition75.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList77 = com.google.common.collect.ImmutableList.of(typePosition70, typePosition71, typePosition72, typePosition73, typePosition74, typePosition75);
        int int78 = typePosition72.getEndLine();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean83 = node82.isNull();
        boolean boolean84 = node82.isSyntheticBlock();
        boolean boolean85 = node82.hasMoreThanOneChild();
        typePosition72.setItem(node82);
        boolean boolean87 = typePosition72.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList88 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition45, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition49, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition72);
        int int89 = typePosition72.getStartLine();
        com.google.javascript.rhino.Node node90 = typePosition72.getItem();
        typePosition72.setPositionInformation((int) (byte) 0, 38, 50, (int) (short) 1);
        boolean boolean96 = typePosition72.hasBrackets();
        com.google.javascript.rhino.Node node97 = typePosition72.getItem();
        com.google.javascript.rhino.Node node98 = node39.copyInformationFromForTree(node97);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER 0.0 43" + "'", str36, "NUMBER 0.0 43");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(typePositionList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(typePositionList77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNotNull(node98);
    }

    @Test
    public void test16772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16772");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setSourceEncodedPositionForTree((int) (byte) -1);
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isVar();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node37 = node31.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node38 = node19.copyInformationFromForTree(node37);
        boolean boolean39 = node10.isEquivalentToTyped(node19);
        boolean boolean40 = node19.isNew();
        node19.setOptionalArg(true);
        boolean boolean43 = node19.isArrayLit();
        node19.setSourceFileForTesting("STRING \n");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node49.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node56 = node49.getChildAtIndex(0);
        java.lang.String str57 = node56.toString();
        node56.setSourceEncodedPositionForTree((int) (byte) -1);
        node56.setOptionalArg(false);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int72 = node71.getSourceOffset();
        com.google.javascript.rhino.Node node73 = node65.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean78 = node77.isVar();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node83 = node77.copyInformationFromForTree(node82);
        com.google.javascript.rhino.Node node84 = node65.copyInformationFromForTree(node83);
        boolean boolean85 = node56.isEquivalentToTyped(node65);
        boolean boolean86 = node65.isNew();
        node65.setOptionalArg(true);
        boolean boolean89 = node65.isArrayLit();
        boolean boolean90 = node65.isEmpty();
        int int91 = node19.getIndexOfChild(node65);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "STRING  43" + "'", str57, "STRING  43");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test16773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16773");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.equals((java.lang.Object) (-1));
        boolean boolean53 = strSet6.contains((java.lang.Object) (-1));
        java.lang.String[] strArray58 = new java.lang.String[] { "[, hi!, , , hi!, , hi!, ]", "", "[, hi!, , , hi!, , hi!, ]", "hi!" };
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.copyOf(strArray58);
        boolean boolean60 = strSet6.addAll((java.util.Collection<java.lang.String>) strList59);
        java.lang.Object[] objArray61 = strList59.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strList59.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[[, hi!, , , hi!, , hi!, ], , [, hi!, , , hi!, , hi!, ], hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[[, hi!, , , hi!, , hi!, ], , [, hi!, , , hi!, , hi!, ], hi!]");
    }

    @Test
    public void test16774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16774");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        node3.putBooleanProp(30, false);
        boolean boolean10 = node3.isReturn();
        boolean boolean11 = node3.isLabel();
        int int12 = node3.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
    }

    @Test
    public void test16775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16775");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo20.getEnumParameterType();
        boolean boolean34 = jSDocInfo20.isJavaDispatch();
        boolean boolean35 = jSDocInfo20.isInterface();
        java.lang.String str36 = jSDocInfo20.getBlockDescription();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo20.getParameterNames();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strSet37);
    }

    @Test
    public void test16776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16776");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        double double5 = node3.getDouble();
        boolean boolean6 = node3.isFor();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node3.getAncestors();
        boolean boolean8 = node3.isCatch();
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node3.setJSType(jSType9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test16777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16777");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        boolean boolean51 = jSDocInfo42.hasType();
        boolean boolean52 = jSDocInfo42.isImplicitCast();
        boolean boolean54 = jSDocInfo42.hasDescriptionForParameter("");
        java.lang.String str55 = jSDocInfo42.getSourceName();
        java.lang.String str56 = jSDocInfo42.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JSDocInfo" + "'", str56, "JSDocInfo");
    }

    @Test
    public void test16778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16778");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isNoAlias();
        boolean boolean19 = jSDocInfo14.isNoSideEffects();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo14.getModifies();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getParameterNames();
        int int22 = jSDocInfo14.getParameterCount();
        boolean boolean23 = jSDocInfo14.isExpose();
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo14.getReferences();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strCollection24);
    }

    @Test
    public void test16779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16779");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.setIsSyntheticBlock(true);
        boolean boolean6 = node3.isReturn();
        boolean boolean7 = node3.isCatch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        com.google.javascript.rhino.Node node19 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isVar();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node29 = node23.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node30 = node11.copyInformationFromForTree(node29);
        boolean boolean31 = node30.isScript();
        com.google.javascript.rhino.Node node32 = node3.srcrefTree(node30);
        boolean boolean33 = node30.isOptionalArg();
        boolean boolean34 = node30.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16780");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo42.getParameterNames();
        java.lang.String str52 = jSDocInfo42.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo42.getParameterType("");
        boolean boolean55 = jSDocInfo42.hasReturnType();
        java.lang.String str57 = jSDocInfo42.getDescriptionForParameter("");
        boolean boolean58 = jSDocInfo42.isNoSideEffects();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test16781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16781");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean9 = node3.isParamList();
        boolean boolean10 = node3.isExprResult();
        boolean boolean11 = node3.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16782");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo14.setAssociatedNode(node17);
        boolean boolean19 = node17.isQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isVar();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node29 = node23.copyInformationFromForTree(node28);
        boolean boolean30 = node29.isVarArgs();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.Node node52 = node40.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder53 = node52.getJsDocBuilderForNode();
        boolean boolean54 = node52.isAnd();
        node29.addChildToBack(node52);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node52.siblings();
        java.lang.String str57 = node17.checkTreeEquals(node52);
        int int58 = node17.getSideEffectFlags();
        boolean boolean59 = node17.isRegExp();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 12.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 12.0\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str57, "Node tree inequality:\nTree1:\nNUMBER 12.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 12.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test16783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16783");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 10, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", 51, 46);
        node4.setSourceEncodedPositionForTree((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean11 = node10.isOptionalArg();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node17.addChildrenToFront(node21);
        boolean boolean23 = node17.isGetterDef();
        boolean boolean24 = node17.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(32, node17, node34);
        boolean boolean48 = node47.isExprResult();
        boolean boolean49 = node47.isFunction();
        com.google.javascript.rhino.Node node50 = node10.srcrefTree(node47);
        boolean boolean51 = node50.isWhile();
        com.google.javascript.rhino.Node node52 = node4.copyInformationFromForTree(node50);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test16784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16784");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        boolean boolean16 = node3.isEquivalentTo(node15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean21 = node20.isNull();
        boolean boolean22 = node20.isFromExterns();
        boolean boolean23 = node20.isFunction();
        com.google.javascript.rhino.Node node24 = node20.cloneTree();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFrom(node20);
        node25.addSuppression("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nSTRING NUMBER 0.0 43 43\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: STRING NUMBER 0.0 43 43\n");
        boolean boolean28 = node25.isRegExp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test16785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16785");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        boolean boolean30 = node29.isString();
        boolean boolean31 = node29.isName();
        boolean boolean32 = node29.isOptionalArg();
        boolean boolean33 = node29.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test16786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16786");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isCase();
        boolean boolean14 = node3.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node3.getJSDocInfo();
        boolean boolean16 = node3.isBlock();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean19 = typePosition18.hasBrackets();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        java.lang.Object obj35 = node28.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node36 = node23.copyInformationFrom(node28);
        typePosition18.setItem(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj43 = node41.getProp(43);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int48 = node47.getSourceOffset();
        com.google.javascript.rhino.Node node49 = node41.useSourceInfoIfMissingFromForTree(node47);
        boolean boolean50 = node49.isAssignAdd();
        boolean boolean51 = node49.isFromExterns();
        com.google.javascript.rhino.Node node52 = node36.copyInformationFromForTree(node49);
        boolean boolean53 = node36.isDelProp();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int58 = node57.getSourceOffset();
        boolean boolean59 = node57.isFor();
        java.lang.Object obj61 = node57.getProp(49);
        java.util.Set<java.lang.String> strSet62 = node57.getDirectives();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder64.recordNoTypeCheck();
        boolean boolean66 = jSDocInfoBuilder64.isInterfaceRecorded();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj72 = node70.getProp(43);
        int int73 = node70.getType();
        boolean boolean74 = node70.isGetterDef();
        node70.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = jSDocInfoBuilder64.build(node70);
        boolean boolean78 = jSDocInfo77.isNoSideEffects();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo77.setAssociatedNode(node80);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(49, node36, node57, node80, (int) (short) 0, 36);
        java.lang.Object obj86 = node57.getProp(43);
        boolean boolean87 = node57.isNumber();
        boolean boolean88 = node57.isThis();
        com.google.javascript.rhino.Node node93 = com.google.javascript.rhino.Node.newString("NUMBER 10.0 50", (int) (byte) 10, 15);
        node57.putProp(35, (java.lang.Object) 15);
        com.google.javascript.rhino.Node node95 = node3.useSourceInfoIfMissingFromForTree(node57);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test16787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16787");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) ' ', 3, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16788");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.Object obj15 = node8.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node8);
        boolean boolean17 = node3.isOr();
        boolean boolean18 = node3.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test16789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16789");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition24.getPositionOnEndLine();
        int int32 = stringPosition24.getStartLine();
        java.lang.String str33 = stringPosition24.getItem();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test16790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16790");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str24 = jSDocInfo20.getDescription();
        boolean boolean25 = jSDocInfo20.isExport();
        boolean boolean26 = jSDocInfo20.isIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.recordNoTypeCheck();
        boolean boolean30 = jSDocInfoBuilder28.isInterfaceRecorded();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        int int37 = node34.getType();
        boolean boolean38 = node34.isGetterDef();
        node34.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = jSDocInfoBuilder28.build(node34);
        boolean boolean42 = jSDocInfo41.isNoSideEffects();
        boolean boolean43 = jSDocInfo41.hasTypedefType();
        boolean boolean44 = jSDocInfo41.isConsistentIdGenerator();
        boolean boolean45 = jSDocInfo41.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = jSDocInfo41.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean49 = jSDocInfoBuilder48.recordJavaDispatch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node54.addChildrenToFront(node58);
        boolean boolean60 = node54.isGetterDef();
        boolean boolean61 = node54.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int72 = node71.getSourceOffset();
        com.google.javascript.rhino.Node node73 = node65.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        node77.setDirectives((java.util.Set<java.lang.String>) strSet80);
        com.google.javascript.rhino.Node node83 = node71.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(32, node54, node71);
        boolean boolean85 = node84.isExprResult();
        boolean boolean86 = node84.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = jSDocInfoBuilder48.build(node84);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility88 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility88);
        jSDocInfo41.setVisibility(visibility88);
        jSDocInfo20.setVisibility(visibility88);
        boolean boolean92 = jSDocInfo20.hasFileOverview();
        boolean boolean94 = jSDocInfo20.hasParameterType("TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n");
        boolean boolean96 = jSDocInfo20.hasParameter("FALSE 43");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(jSDocInfo87);
        org.junit.Assert.assertTrue("'" + visibility88 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility88.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test16791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16791");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean11 = node4.getBooleanProp(8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean34 = node33.isContinue();
        boolean boolean35 = node33.isVoid();
        double double36 = node33.getDouble();
        java.lang.String str37 = node4.checkTreeEquals(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node4.children();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 53, 42, 4);
        boolean boolean43 = node42.isFunction();
        com.google.javascript.rhino.Node node44 = node42.cloneTree();
        java.lang.String str45 = node42.getQualifiedName();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 35);
        node47.setSourceFileForTesting("TYPEOF");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node47.siblings();
        boolean boolean51 = node47.isInstanceOf();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(32, node4, node42, node47, 52, 42);
        node54.setType(16);
        java.lang.String str57 = node54.getQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str37, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test16792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16792");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node3.setJSType(jSType10);
        node3.setSourceEncodedPositionForTree(35);
        boolean boolean14 = node3.isIf();
        boolean boolean15 = node3.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16793");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isDebugger();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder9.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        jSDocInfoBuilder9.markName("hi!", staticSourceFile13, (int) (short) 0, (int) (short) 100);
        boolean boolean17 = jSDocInfoBuilder9.recordNoTypeCheck();
        boolean boolean18 = jSDocInfoBuilder9.recordExpose();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node22.addChildrenToFront(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = jSDocInfoBuilder9.build(node26);
        boolean boolean29 = jSDocInfo28.isConstructor();
        java.util.Collection<java.lang.String> strCollection30 = jSDocInfo28.getAuthors();
        node3.setJSDocInfo(jSDocInfo28);
        java.lang.String str32 = jSDocInfo28.getSourceName();
        int int33 = jSDocInfo28.getExtendedInterfacesCount();
        boolean boolean35 = jSDocInfo28.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.lang.String str36 = jSDocInfo28.getDeprecationReason();
        boolean boolean37 = jSDocInfo28.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo28.getReturnType();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n", (int) (byte) 10, 0);
        jSDocInfo28.setAssociatedNode(node42);
        boolean boolean44 = jSDocInfo28.isJavaDispatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test16794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16794");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        boolean boolean50 = jSDocInfo42.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo42.getParameterNames();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection52 = jSDocInfo42.getMarkers();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(markerCollection52);
    }

    @Test
    public void test16795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16795");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        node21.setDouble((double) 16);
        com.google.javascript.rhino.Node node26 = node21.getLastSibling();
        java.util.Set<java.lang.String> strSet27 = node26.getDirectives();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType33 = node31.getJSType();
        boolean boolean34 = node31.isDelProp();
        java.lang.String str35 = node31.toString();
        java.lang.String str39 = node31.toString(false, false, false);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 39, (int) (byte) 10, (int) 'a');
        boolean boolean44 = node43.isFor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder46.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        jSDocInfoBuilder46.markName("hi!", staticSourceFile50, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder46.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj65 = node63.getProp(43);
        boolean boolean66 = node63.isCall();
        int int67 = node63.getSourcePosition();
        java.lang.String str71 = node63.toString(false, true, false);
        boolean boolean72 = node63.isDo();
        boolean boolean73 = node63.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = jSDocInfoBuilder46.build(node63);
        jSDocInfo74.setLicense("[]");
        boolean boolean77 = jSDocInfo74.isInterface();
        java.lang.String str78 = jSDocInfo74.getVersion();
        boolean boolean79 = jSDocInfo74.isNoAlias();
        node43.setJSDocInfo(jSDocInfo74);
        // The following exception was thrown during execution in test generation
        try {
            node26.replaceChildAfter(node31, node43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 0.0 43" + "'", str35, "NUMBER 0.0 43");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 0.0" + "'", str39, "NUMBER 0.0");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 176180 + "'", int67 == 176180);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "STRING " + "'", str71, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test16796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16796");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(40, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING  43\n\n\nSubtree2: STRING hi!\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test16797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16797");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean2 = node1.isFalse();
        boolean boolean3 = node1.isDelProp();
        com.google.javascript.rhino.Node node4 = node1.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node4.setStaticSourceFile(staticSourceFile5);
        node4.setCharno(41);
        node4.addSuppression("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean11 = node4.isNE();
        int int12 = node4.getChildCount();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node4.setJSType(jSType13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test16798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16798");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        jSDocInfo20.addSuppression("STRING ");
        boolean boolean28 = jSDocInfo20.isExport();
        boolean boolean29 = jSDocInfo20.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getThrownTypes();
        boolean boolean31 = jSDocInfo20.isNoAlias();
        java.lang.String str32 = jSDocInfo20.getBlockDescription();
        java.lang.String str33 = jSDocInfo20.getBlockDescription();
        java.lang.String str34 = jSDocInfo20.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test16799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16799");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet26);
        strSet26.clear();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object[] objArray41 = strSet38.toArray();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.lang.Object[] objArray51 = strSet48.toArray();
        boolean boolean52 = strSet38.retainAll((java.util.Collection<java.lang.String>) strSet48);
        boolean boolean53 = strSet26.removeAll((java.util.Collection<java.lang.String>) strSet38);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet38);
        boolean boolean55 = node3.isGetProp();
        boolean boolean56 = node3.isExprResult();
        node3.setSourceEncodedPosition((int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test16800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16800");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean22 = jSDocInfoBuilder1.recordBlockDescription("[, hi!, , , hi!, , hi!, ]");
        boolean boolean23 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean24 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean25 = jSDocInfoBuilder1.recordExpose();
        boolean boolean26 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test16801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16801");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isFromExterns();
        boolean boolean6 = node3.isFunction();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        boolean boolean8 = node7.isFor();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isOptionalArg();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node23.addChildrenToFront(node27);
        boolean boolean29 = node23.isGetterDef();
        boolean boolean30 = node23.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.Node node52 = node40.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(32, node23, node40);
        boolean boolean54 = node53.isExprResult();
        boolean boolean55 = node53.isFunction();
        com.google.javascript.rhino.Node node56 = node16.srcrefTree(node53);
        com.google.javascript.rhino.Node node57 = node12.srcrefTree(node53);
        com.google.javascript.rhino.Node node58 = node7.useSourceInfoFrom(node57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = node7.getJSDocInfo();
        com.google.javascript.rhino.Node node60 = node7.cloneTree();
        boolean boolean61 = node60.isTrue();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node60.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(jSDocInfo59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
    }

    @Test
    public void test16802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16802");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        boolean boolean26 = jSDocInfo20.hasThisType();
        boolean boolean27 = jSDocInfo20.hasModifies();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test16803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16803");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(52, "Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n", 30, 8);
        node4.setLineno(176180);
        boolean boolean7 = node4.isComma();
        boolean boolean8 = node4.isParamList();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test16804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16804");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList81 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList60, (java.lang.Iterable<java.lang.String>) strList71, (java.lang.Iterable<java.lang.String>) strList80);
        boolean boolean82 = strList30.containsAll((java.util.Collection<java.lang.String>) strList80);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition83 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition84 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition85 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition86 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition87 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition88 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean89 = typePosition88.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList90 = com.google.common.collect.ImmutableList.of(typePosition83, typePosition84, typePosition85, typePosition86, typePosition87, typePosition88);
        int int91 = strList30.lastIndexOf((java.lang.Object) typePosition88);
        boolean boolean92 = strList30.isEmpty();
        java.util.Iterator<java.lang.String> strItor93 = strList30.iterator();
        boolean boolean94 = strList30.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor95 = strList30.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = strList30.remove(47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strIterableList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(typePositionList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strItor93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strItor95);
    }

    @Test
    public void test16805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16805");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        java.lang.String str50 = jSDocInfo42.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList51 = jSDocInfo42.getExtendedInterfaces();
        boolean boolean53 = jSDocInfo42.hasParameter("hi!");
        java.lang.String str54 = jSDocInfo42.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(jSTypeExpressionList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JSDocInfo" + "'", str54, "JSDocInfo");
    }

    @Test
    public void test16806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16806");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        boolean boolean59 = strList49.contains((java.lang.Object) node57);
        int int60 = strList49.size();
        boolean boolean61 = strList49.isEmpty();
        java.lang.Object obj62 = null;
        boolean boolean63 = strList49.equals(obj62);
        java.lang.Object obj64 = null;
        int int65 = strList49.indexOf(obj64);
        boolean boolean66 = strList49.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = strList49.set(37, "STRING  43 [source_file: NUMBER 0.0]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test16807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16807");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        boolean boolean6 = node3.isWith();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean8 = typePosition7.hasBrackets();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean13 = node12.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object obj24 = node17.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node25 = node12.copyInformationFrom(node17);
        typePosition7.setItem(node25);
        int int27 = typePosition7.getStartLine();
        com.google.javascript.rhino.Node node28 = typePosition7.getItem();
        node28.removeProp(39);
        boolean boolean31 = node3.isEquivalentToTyped(node28);
        boolean boolean32 = node3.isFor();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj38 = node36.getProp(43);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int43 = node42.getSourceOffset();
        com.google.javascript.rhino.Node node44 = node36.useSourceInfoIfMissingFromForTree(node42);
        com.google.javascript.rhino.Node node45 = node42.cloneNode();
        node45.setType(0);
        int int48 = node45.getCharno();
        boolean boolean49 = node45.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node50 = node3.srcrefTree(node45);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node51 = node45.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test16808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16808");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        node4.removeProp(10);
        node4.setVarArgs(true);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int59 = node58.getSourceOffset();
        com.google.javascript.rhino.Node node60 = node52.useSourceInfoIfMissingFromForTree(node58);
        boolean boolean61 = node60.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node60.getStaticSourceFile();
        boolean boolean63 = node60.isDo();
        com.google.javascript.rhino.Node node64 = node4.useSourceInfoFrom(node60);
        com.google.javascript.rhino.InputId inputId65 = node64.getInputId();
        com.google.javascript.rhino.Node node66 = node64.getNext();
        boolean boolean67 = node64.isSetterDef();
        boolean boolean68 = node64.isFalse();
        com.google.javascript.rhino.InputId inputId69 = node64.getInputId();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(inputId65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(inputId69);
    }

    @Test
    public void test16809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16809");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getReturnType();
        boolean boolean28 = jSDocInfo20.isNoShadow();
        int int29 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test16810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16810");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder15.recordParameter("", jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder15.recordExterns();
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        boolean boolean22 = jSDocInfoBuilder15.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder15.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordJavaDispatch();
        jSDocInfoBuilder26.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordJavaDispatch();
        boolean boolean37 = jSDocInfoBuilder35.recordNoCompile();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        boolean boolean46 = node42.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node42, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray51 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray52 = (java.util.ArrayList<java.lang.String>[]) arrayListArray51;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = strListBuilder49.add((java.util.ArrayList<java.lang.String>[]) arrayListArray51);
        boolean boolean54 = jSTypeExpression48.equals((java.lang.Object) arrayListArray51);
        boolean boolean55 = jSDocInfoBuilder35.recordParameter("", jSTypeExpression48);
        boolean boolean56 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression48);
        boolean boolean57 = jSDocInfoBuilder15.recordBaseType(jSTypeExpression48);
        boolean boolean58 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression48);
        boolean boolean59 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder62 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean63 = jSDocInfoBuilder62.isInterfaceRecorded();
        boolean boolean64 = jSDocInfoBuilder62.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder66 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean67 = jSDocInfoBuilder66.isInterfaceRecorded();
        boolean boolean69 = jSDocInfoBuilder66.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj75 = node73.getProp(43);
        boolean boolean76 = node73.isCall();
        boolean boolean77 = node73.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = new com.google.javascript.rhino.JSTypeExpression(node73, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder80 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray82 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray83 = (java.util.ArrayList<java.lang.String>[]) arrayListArray82;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder84 = strListBuilder80.add((java.util.ArrayList<java.lang.String>[]) arrayListArray82);
        boolean boolean85 = jSTypeExpression79.equals((java.lang.Object) arrayListArray82);
        boolean boolean86 = jSDocInfoBuilder66.recordDefineType(jSTypeExpression79);
        com.google.javascript.rhino.Node node87 = jSTypeExpression79.getRoot();
        boolean boolean89 = jSDocInfoBuilder62.recordThrowDescription(jSTypeExpression79, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean90 = jSDocInfoBuilder1.recordParameter("OR  54\n", jSTypeExpression79);
        boolean boolean91 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean92 = jSDocInfoBuilder1.isPopulated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(strListArray52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strListBuilder80);
        org.junit.Assert.assertNotNull(arrayListArray82);
        org.junit.Assert.assertNotNull(strListArray83);
        org.junit.Assert.assertNotNull(strListBuilder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test16811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16811");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean9 = jSDocInfoBuilder7.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        com.google.javascript.rhino.Node node32 = jSTypeExpression24.getRoot();
        boolean boolean34 = jSDocInfoBuilder7.recordThrowDescription(jSTypeExpression24, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.isInterfaceRecorded();
        boolean boolean39 = jSDocInfoBuilder36.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        boolean boolean46 = node43.isCall();
        boolean boolean47 = node43.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node43, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray52 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray53 = (java.util.ArrayList<java.lang.String>[]) arrayListArray52;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder54 = strListBuilder50.add((java.util.ArrayList<java.lang.String>[]) arrayListArray52);
        boolean boolean55 = jSTypeExpression49.equals((java.lang.Object) arrayListArray52);
        boolean boolean56 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression49);
        boolean boolean57 = jSDocInfoBuilder7.recordEnumParameterType(jSTypeExpression49);
        boolean boolean58 = jSTypeExpression49.isOptionalArg();
        boolean boolean59 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression49);
        boolean boolean61 = jSDocInfoBuilder1.recordDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean64 = jSDocInfoBuilder63.recordJavaDispatch();
        jSDocInfoBuilder63.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean73 = jSDocInfoBuilder72.recordJavaDispatch();
        boolean boolean74 = jSDocInfoBuilder72.recordNoCompile();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj81 = node79.getProp(43);
        boolean boolean82 = node79.isCall();
        boolean boolean83 = node79.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = new com.google.javascript.rhino.JSTypeExpression(node79, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder86 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray88 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray89 = (java.util.ArrayList<java.lang.String>[]) arrayListArray88;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder90 = strListBuilder86.add((java.util.ArrayList<java.lang.String>[]) arrayListArray88);
        boolean boolean91 = jSTypeExpression85.equals((java.lang.Object) arrayListArray88);
        boolean boolean92 = jSDocInfoBuilder72.recordParameter("", jSTypeExpression85);
        boolean boolean93 = jSDocInfoBuilder63.recordThrowType(jSTypeExpression85);
        boolean boolean94 = jSTypeExpression85.isVarArgs();
        boolean boolean95 = jSTypeExpression85.isOptionalArg();
        boolean boolean96 = jSTypeExpression85.isVarArgs();
        boolean boolean97 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression85);
        boolean boolean98 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean99 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertNotNull(arrayListArray52);
        org.junit.Assert.assertNotNull(strListArray53);
        org.junit.Assert.assertNotNull(strListBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strListBuilder86);
        org.junit.Assert.assertNotNull(arrayListArray88);
        org.junit.Assert.assertNotNull(strListArray89);
        org.junit.Assert.assertNotNull(strListBuilder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test16812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16812");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.hasFileOverview();
        java.lang.String str26 = jSDocInfo20.getBlockDescription();
        boolean boolean27 = jSDocInfo20.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test16813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16813");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 10);
        boolean boolean2 = node1.isInc();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(12, (-1), (int) (short) 10);
        boolean boolean7 = node6.isNot();
        boolean boolean8 = node6.isInstanceOf();
        boolean boolean9 = node6.isNull();
        boolean boolean10 = node6.isString();
        boolean boolean11 = node1.isEquivalentToTyped(node6);
        com.google.javascript.rhino.Node node12 = node6.getNext();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test16814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16814");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition3.getPositionOnStartLine();
        int int32 = stringPosition3.getStartLine();
        stringPosition3.setItem("");
        int int35 = stringPosition3.getPositionOnEndLine();
        stringPosition3.setPositionInformation(35, 7, 37, (int) 'a');
        stringPosition3.setItem("[, [STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!], Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n, Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n, OR  54\n, hi!, Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n, [STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!], Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n, [], TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n]");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test16815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16815");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isFromExterns();
        boolean boolean6 = node3.isFunction();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean12 = node11.isVar();
        node11.putBooleanProp(30, false);
        boolean boolean16 = node11.isSwitch();
        boolean boolean17 = node11.isIn();
        boolean boolean18 = node11.isIn();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node22.addChildrenToFront(node26);
        node26.setQuotedString();
        boolean boolean29 = node26.isHook();
        int int30 = node26.getType();
        com.google.javascript.rhino.Node node31 = node11.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node31.getJSDocInfo();
        node3.addChildToBack(node31);
        boolean boolean34 = node3.isQualifiedName();
        boolean boolean36 = node3.getBooleanProp(54);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 40 + "'", int30 == 40);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test16816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16816");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(12, (-1), (int) (short) 10);
        node3.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean8 = node7.isFalse();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoFrom(node7);
        int int11 = node3.getType();
        int int12 = node3.getCharno();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.siblings();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable13);
    }

    @Test
    public void test16817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16817");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        boolean boolean67 = node16.isThrow();
        int int68 = node16.getLineno();
        node16.setSourceFileForTesting("");
        boolean boolean71 = node16.isNull();
        com.google.javascript.rhino.InputId inputId72 = node16.getInputId();
        boolean boolean73 = node16.isHook();
        boolean boolean74 = node16.isDo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 43 + "'", int68 == 43);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(inputId72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test16818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16818");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        int int2 = namePosition0.getStartLine();
        int int3 = namePosition0.getPositionOnStartLine();
        namePosition0.setPositionInformation((int) (byte) -1, 26, 12, 40);
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test16819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16819");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        boolean boolean11 = node3.isDefaultCase();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node15.addChildrenToFront(node19);
        node19.setQuotedString();
        com.google.javascript.rhino.Node node22 = node19.removeFirstChild();
        int int24 = node19.getIntProp((int) 'a');
        node19.setCharno(47);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int37 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node38 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean43 = node42.isVar();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node48 = node42.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node49 = node30.copyInformationFromForTree(node48);
        boolean boolean50 = node19.hasChild(node49);
        boolean boolean51 = node49.isDec();
        node49.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node54 = node3.srcrefTree(node49);
        java.util.Set<java.lang.String> strSet55 = node49.getDirectives();
        node49.putIntProp(1, 47);
        boolean boolean59 = node49.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test16820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16820");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isLabel();
        node21.removeProp((int) (short) 0);
        boolean boolean25 = node21.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test16821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16821");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordVisibility(visibility6);
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("STRING  43");
        boolean boolean11 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nSTRING  43 [synthetic: 1]\n\n\nTree2:\nEQ  32\n\n\nSubtree1: STRING  43 [synthetic: 1]\n\n\nSubtree2: EQ  32\n");
        boolean boolean12 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16822");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean3 = node1.getBooleanProp(51);
        boolean boolean4 = node1.isAdd();
        boolean boolean5 = node1.isNull();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) '#', "STRING ", (int) (short) 1, (int) (short) 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet17);
        node14.putIntProp(46, 30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordNoTypeCheck();
        boolean boolean26 = jSDocInfoBuilder24.isInterfaceRecorded();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        int int33 = node30.getType();
        boolean boolean34 = node30.isGetterDef();
        node30.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = jSDocInfoBuilder24.build(node30);
        boolean boolean38 = jSDocInfo37.isNoSideEffects();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo37.setAssociatedNode(node40);
        boolean boolean42 = node40.isInc();
        int int43 = node14.getIndexOfChild(node40);
        java.util.Set<java.lang.String> strSet44 = node14.getDirectives();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node14.siblings();
        boolean boolean46 = node14.isLabelName();
        node10.addChildToFront(node14);
        boolean boolean48 = node1.isEquivalentToTyped(node10);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 40 + "'", int33 == 40);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test16823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16823");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.isOverride();
        boolean boolean25 = jSDocInfo20.isNoTypeCheck();
        boolean boolean26 = jSDocInfo20.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo20.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
    }

    @Test
    public void test16824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16824");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        double double5 = node3.getDouble();
        boolean boolean6 = node3.isFalse();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean11 = node10.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = node10.cloneNode();
        boolean boolean13 = node12.isGetElem();
        node12.addSuppression("");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int20 = node19.getSourceOffset();
        boolean boolean21 = node19.isBreak();
        int int22 = node19.getSourcePosition();
        com.google.javascript.rhino.Node node23 = node12.useSourceInfoFrom(node19);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 18, 54, 47);
        com.google.javascript.rhino.Node node28 = node12.useSourceInfoFrom(node27);
        com.google.javascript.rhino.Node node29 = node3.useSourceInfoIfMissingFrom(node27);
        boolean boolean30 = node29.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176129 + "'", int22 == 176129);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test16825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16825");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        node4.setIsSyntheticBlock(true);
        double double47 = node4.getDouble();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test16826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16826");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.Iterator<java.lang.String> strItor9 = strList8.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int20 = strList18.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int31 = strList29.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList50 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList18, (java.lang.Iterable<java.lang.String>) strList29, (java.lang.Iterable<java.lang.String>) strList40, (java.lang.Iterable<java.lang.String>) strList49);
        boolean boolean51 = strList8.containsAll((java.util.Collection<java.lang.String>) strList29);
        java.lang.Object[] objArray52 = strList8.toArray();
        boolean boolean53 = strList8.isEmpty();
        java.lang.Object[] objArray54 = strList8.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = strList8.add("NUMBER 0.0 43 [jsdoc_info: JSDocInfo]\n    STRING \n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strIterableList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test16827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16827");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isVar();
        node5.putBooleanProp(30, false);
        boolean boolean10 = node5.isSwitch();
        boolean boolean11 = node5.isUnscopedQualifiedName();
        boolean boolean12 = node5.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node5.setStaticSourceFile(staticSourceFile13);
        boolean boolean15 = node5.isGetElem();
        namePosition0.setItem(node5);
        boolean boolean17 = node5.isCatch();
        boolean boolean18 = node5.isVar();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder20.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        jSDocInfoBuilder20.markName("hi!", staticSourceFile24, (int) (short) 0, (int) (short) 100);
        boolean boolean28 = jSDocInfoBuilder20.recordNoTypeCheck();
        boolean boolean29 = jSDocInfoBuilder20.recordExpose();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node33.addChildrenToFront(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = jSDocInfoBuilder20.build(node37);
        boolean boolean40 = jSDocInfo39.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo39.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo39.getBaseType();
        java.lang.String str43 = jSDocInfo39.getDescription();
        boolean boolean44 = jSDocInfo39.hasReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo39.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo39.getSuppressions();
        java.lang.String str47 = jSDocInfo39.toString();
        node5.setJSDocInfo(jSDocInfo39);
        boolean boolean49 = node5.isLocalResultCall();
        boolean boolean50 = node5.hasChildren();
        boolean boolean51 = node5.isDo();
        boolean boolean52 = node5.isHook();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "JSDocInfo" + "'", str47, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test16828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16828");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isGetElem();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        node17.detachChildren();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node17);
        boolean boolean21 = node3.isLabelName();
        java.lang.String str22 = node3.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test16829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16829");
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "hi!", "", "NUMBER 0.0 43", "", "[]", "hi!", "[]", "STRING ", "NUMBER 0.0 43");
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor11 = strList10.listIterator();
        java.lang.Object[] objArray12 = strList10.toArray();
        java.lang.Class[][] classArray14 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray15 = (java.lang.Class<?>[][]) classArray14;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?>[][] wildcardClassArray16 = strList10.toArray(wildcardClassArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n, hi!, , NUMBER 0.0 43, , [], hi!, [], STRING , NUMBER 0.0 43]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n, hi!, , NUMBER 0.0 43, , [], hi!, [], STRING , NUMBER 0.0 43]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
    }

    @Test
    public void test16830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16830");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        boolean boolean6 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean8 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test16831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16831");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        boolean boolean10 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean11 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordNoTypeCheck();
        jSDocInfoBuilder13.recordOriginalCommentString("");
        boolean boolean17 = jSDocInfoBuilder13.isJavaDispatch();
        boolean boolean18 = jSDocInfoBuilder13.isPopulatedWithFileOverview();
        boolean boolean19 = jSDocInfoBuilder13.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder21.recordParameter("", jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder21.recordExterns();
        boolean boolean27 = jSDocInfoBuilder21.recordPreserveTry();
        boolean boolean28 = jSDocInfoBuilder21.recordNoCompile();
        boolean boolean30 = jSDocInfoBuilder21.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = null;
        boolean boolean32 = jSDocInfoBuilder21.recordType(jSTypeExpression31);
        boolean boolean33 = jSDocInfoBuilder21.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder35.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        boolean boolean46 = node42.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node42, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray51 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray52 = (java.util.ArrayList<java.lang.String>[]) arrayListArray51;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = strListBuilder49.add((java.util.ArrayList<java.lang.String>[]) arrayListArray51);
        boolean boolean54 = jSTypeExpression48.equals((java.lang.Object) arrayListArray51);
        boolean boolean55 = jSDocInfoBuilder35.recordDefineType(jSTypeExpression48);
        boolean boolean56 = jSDocInfoBuilder21.recordBaseType(jSTypeExpression48);
        boolean boolean57 = jSDocInfoBuilder13.recordBaseType(jSTypeExpression48);
        boolean boolean58 = jSTypeExpression48.isOptionalArg();
        boolean boolean59 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression48);
        boolean boolean61 = jSDocInfoBuilder1.recordLends("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        boolean boolean62 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(strListArray52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16832");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  43", 147494, 12);
        boolean boolean4 = node3.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test16833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16833");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isAdd();
        boolean boolean5 = node3.isFalse();
        boolean boolean6 = node3.isCase();
        node3.setLength(12);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        node3.setStaticSourceFile(staticSourceFile9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16834");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExterns();
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean12 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordDescription("STRING ");
        boolean boolean15 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder17.recordExtendedInterface(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean22 = jSDocInfoBuilder17.isDescriptionRecorded();
        boolean boolean23 = jSDocInfoBuilder17.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordJavaDispatch();
        boolean boolean27 = jSDocInfoBuilder25.recordNoCompile();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordParameter("", jSTypeExpression38);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression38);
        boolean boolean48 = jSDocInfoBuilder17.recordThrowDescription(jSTypeExpression46, "STRING  [length: 53]\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean53 = jSDocInfoBuilder50.addAuthor("");
        boolean boolean54 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean59 = node58.isVar();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node64 = node58.copyInformationFromForTree(node63);
        boolean boolean65 = node64.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = jSDocInfoBuilder50.build(node64);
        int int67 = jSDocInfo66.getImplementedInterfaceCount();
        boolean boolean68 = jSTypeExpression46.equals((java.lang.Object) jSDocInfo66);
        boolean boolean69 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression46);
        boolean boolean70 = jSTypeExpression46.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSDocInfo66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test16835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16835");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo20.isNoSideEffects();
        jSDocInfo20.setDeprecated(true);
        java.lang.String str27 = jSDocInfo20.getSourceName();
        java.lang.String str28 = jSDocInfo20.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test16836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16836");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder10.recordNoCompile();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        boolean boolean20 = node17.isCall();
        boolean boolean21 = node17.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node17, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray26 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray27 = (java.util.ArrayList<java.lang.String>[]) arrayListArray26;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = strListBuilder24.add((java.util.ArrayList<java.lang.String>[]) arrayListArray26);
        boolean boolean29 = jSTypeExpression23.equals((java.lang.Object) arrayListArray26);
        boolean boolean30 = jSDocInfoBuilder10.recordParameter("", jSTypeExpression23);
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression23);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder33.recordParameter("hi!", jSTypeExpression36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder39.isInterfaceRecorded();
        boolean boolean41 = jSDocInfoBuilder39.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.isInterfaceRecorded();
        boolean boolean46 = jSDocInfoBuilder43.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray59 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray60 = (java.util.ArrayList<java.lang.String>[]) arrayListArray59;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray59);
        boolean boolean62 = jSTypeExpression56.equals((java.lang.Object) arrayListArray59);
        boolean boolean63 = jSDocInfoBuilder43.recordDefineType(jSTypeExpression56);
        com.google.javascript.rhino.Node node64 = jSTypeExpression56.getRoot();
        boolean boolean66 = jSDocInfoBuilder39.recordThrowDescription(jSTypeExpression56, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.isInterfaceRecorded();
        boolean boolean71 = jSDocInfoBuilder68.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj77 = node75.getProp(43);
        boolean boolean78 = node75.isCall();
        boolean boolean79 = node75.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = new com.google.javascript.rhino.JSTypeExpression(node75, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder82 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray84 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray85 = (java.util.ArrayList<java.lang.String>[]) arrayListArray84;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder86 = strListBuilder82.add((java.util.ArrayList<java.lang.String>[]) arrayListArray84);
        boolean boolean87 = jSTypeExpression81.equals((java.lang.Object) arrayListArray84);
        boolean boolean88 = jSDocInfoBuilder68.recordDefineType(jSTypeExpression81);
        boolean boolean89 = jSDocInfoBuilder39.recordEnumParameterType(jSTypeExpression81);
        boolean boolean90 = jSTypeExpression81.isOptionalArg();
        boolean boolean91 = jSDocInfoBuilder33.recordEnumParameterType(jSTypeExpression81);
        boolean boolean92 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression81);
        boolean boolean93 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean95 = jSDocInfoBuilder1.addReference("STRING ");
        boolean boolean96 = jSDocInfoBuilder1.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertNotNull(arrayListArray26);
        org.junit.Assert.assertNotNull(strListArray27);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(arrayListArray59);
        org.junit.Assert.assertNotNull(strListArray60);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strListBuilder82);
        org.junit.Assert.assertNotNull(arrayListArray84);
        org.junit.Assert.assertNotNull(strListArray85);
        org.junit.Assert.assertNotNull(strListBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test16837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16837");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        boolean boolean7 = node3.isOr();
        boolean boolean8 = node3.isNot();
        node3.setLength(2);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean15 = node14.isVar();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node20 = node14.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node21 = node14.cloneTree();
        boolean boolean22 = node21.isDefaultCase();
        com.google.javascript.rhino.Node node23 = node3.srcref(node21);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test16838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16838");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean43 = strList19.equals((java.lang.Object) 52);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet50);
        java.lang.Object[] objArray53 = strSet50.toArray();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet60);
        java.lang.Object[] objArray63 = strSet60.toArray();
        boolean boolean64 = strSet50.retainAll((java.util.Collection<java.lang.String>) strSet60);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet71);
        boolean boolean74 = strSet60.containsAll((java.util.Collection<java.lang.String>) strSet71);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        boolean boolean79 = strList77.isEmpty();
        boolean boolean80 = strSet71.containsAll((java.util.Collection<java.lang.String>) strList77);
        boolean boolean81 = strList19.containsAll((java.util.Collection<java.lang.String>) strSet71);
        boolean boolean82 = strList19.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream83 = strList19.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = strList19.set(147494, "STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strStream83);
    }

    @Test
    public void test16839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16839");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isOverride();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection19 = jSDocInfo14.getTypeNodes();
        boolean boolean20 = jSDocInfo14.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test16840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16840");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean3 = node1.getBooleanProp(51);
        boolean boolean4 = node1.isAdd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node1.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node7 = node1.getLastSibling();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node1.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeIterable8);
    }

    @Test
    public void test16841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16841");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList52 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList20, (java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList51);
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator64 = strList61.spliterator();
        boolean boolean65 = strList31.equals((java.lang.Object) strList61);
        int int66 = strList8.indexOf((java.lang.Object) strList61);
        java.lang.String str67 = strList8.toString();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor68 = strList8.listIterator();
        java.lang.String str69 = strList8.toString();
        java.lang.String str70 = strList8.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList79 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int81 = strList79.indexOf((java.lang.Object) 'a');
        int int82 = strList79.size();
        java.lang.String[] strArray85 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray86 = strList79.toArray(strArray85);
        java.lang.CharSequence[] charSequenceArray87 = strList8.toArray((java.lang.CharSequence[]) strArray85);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strIterableList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str67, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str69, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str70, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(charSequenceArray87);
    }

    @Test
    public void test16842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16842");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0);
        jSDocInfo42.setAssociatedNode(node77);
        boolean boolean79 = jSDocInfo42.isNoShadow();
        java.lang.String str80 = jSDocInfo42.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList81 = jSDocInfo42.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(jSTypeExpressionList81);
    }

    @Test
    public void test16843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16843");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        boolean boolean23 = jSDocInfo20.hasEnumParameterType();
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo20.getAuthors();
        java.lang.String str26 = jSDocInfo20.getDescriptionForParameter("NUMBER 40.0");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strCollection24);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test16844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16844");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node2 = node1.cloneTree();
        com.google.javascript.rhino.Node node3 = node2.cloneNode();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean8 = node7.isVar();
        node7.addSuppression("JSDocInfo");
        node2.addChildToBack(node7);
        int int12 = node7.getSourceOffset();
        java.lang.String str13 = node7.getString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test16845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16845");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder1.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        int int22 = node18.getSourcePosition();
        java.lang.String str26 = node18.toString(false, true, false);
        boolean boolean27 = node18.isDo();
        boolean boolean28 = node18.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordNoTypeCheck();
        boolean boolean34 = jSDocInfoBuilder31.addAuthor("");
        boolean boolean35 = jSDocInfoBuilder31.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder37.markName("hi!", staticSourceFile41, (int) (short) 0, (int) (short) 100);
        boolean boolean45 = jSDocInfoBuilder37.recordNoTypeCheck();
        boolean boolean46 = jSDocInfoBuilder37.recordExpose();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = jSDocInfoBuilder37.build(node54);
        java.lang.String str57 = jSDocInfo56.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo56.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = jSDocInfo56.getTemplateTypeNames();
        java.util.Spliterator<java.lang.String> strSpliterator60 = strList59.spliterator();
        boolean boolean62 = strList59.equals((java.lang.Object) 100.0d);
        boolean boolean63 = jSDocInfoBuilder31.recordTemplateTypeNames((java.util.List<java.lang.String>) strList59);
        boolean boolean64 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList59);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean69 = node68.isNull();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        node73.setDirectives((java.util.Set<java.lang.String>) strSet76);
        java.lang.Object[] objArray79 = strSet76.toArray();
        node68.setDirectives((java.util.Set<java.lang.String>) strSet76);
        boolean boolean81 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet76);
        boolean boolean83 = jSDocInfoBuilder1.hasParameter("NUMBER 10.0 50");
        boolean boolean85 = jSDocInfoBuilder1.hasParameter("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = null;
        boolean boolean87 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression86);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176180 + "'", int22 == 176180);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING " + "'", str26, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strSpliterator60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test16846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16846");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        java.util.ListIterator<java.lang.String> strItor24 = strList23.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList27 = strList23.subList(46, 221199);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (46) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strItor24);
    }

    @Test
    public void test16847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16847");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(15, "Node tree inequality:\nTree1:\nNUMBER 12.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 12.0\n\n\nSubtree2: NUMBER 0.0 43\n", (-2147483596), 29);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test16848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16848");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        boolean boolean10 = node9.isVarArgs();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node32.getJsDocBuilderForNode();
        boolean boolean34 = node32.isAnd();
        node9.addChildToBack(node32);
        com.google.javascript.rhino.Node node36 = node32.getLastSibling();
        boolean boolean37 = node32.isContinue();
        boolean boolean38 = node32.isNE();
        node32.setSourceEncodedPosition(221199);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test16849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16849");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        node62.setWasEmptyNode(true);
        boolean boolean69 = node62.isQuotedString();
        boolean boolean71 = node62.getBooleanProp((int) (byte) 0);
        com.google.javascript.rhino.Node node72 = node62.getFirstChild();
        node62.removeProp(15);
        boolean boolean75 = node62.isEmpty();
        com.google.javascript.rhino.InputId inputId76 = node62.getInputId();
        int int77 = node62.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable78 = node62.siblings();
        boolean boolean79 = node62.isFor();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeIterable78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test16850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16850");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        int int9 = node5.getType();
        boolean boolean10 = node5.isInc();
        boolean boolean11 = node5.isNE();
        boolean boolean12 = node5.isName();
        node5.setVarArgs(true);
        boolean boolean15 = node5.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16851");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean10 = strSet6.contains((java.lang.Object) 10.0d);
        java.lang.Object[] objArray11 = strSet6.toArray();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test16852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16852");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        boolean boolean6 = node3.isDelProp();
        boolean boolean7 = node3.isQualifiedName();
        boolean boolean9 = node3.getBooleanProp(15);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean14 = node13.isNull();
        boolean boolean15 = node13.isLabelName();
        int int17 = node13.getIntProp((int) 'a');
        boolean boolean18 = node13.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 50);
        node20.setLength(12);
        com.google.javascript.rhino.Node node23 = node20.cloneTree();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node20);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.Node node26 = node3.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node27 = node26.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = node27.isFalse();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test16853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16853");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        boolean boolean27 = jSDocInfo20.hasThisType();
        java.util.Collection<java.lang.String> strCollection28 = jSDocInfo20.getAuthors();
        boolean boolean29 = jSDocInfo20.isExterns();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strCollection28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16854");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = marker66.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = marker66.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker66.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition74 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition75 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition76 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = marker66.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition78 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition79 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition80 = marker66.getAnnotation();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(typePosition71);
        org.junit.Assert.assertNull(stringPosition72);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNull(stringPosition74);
        org.junit.Assert.assertNull(stringPosition75);
        org.junit.Assert.assertNull(stringPosition76);
        org.junit.Assert.assertNull(typePosition77);
        org.junit.Assert.assertNull(nodeSourcePosition78);
        org.junit.Assert.assertNull(stringPosition79);
        org.junit.Assert.assertNull(stringPosition80);
    }

    @Test
    public void test16855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16855");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList1 = com.google.common.collect.ImmutableList.of(strArray0);
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList2 = com.google.common.collect.ImmutableList.of(strArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[] strArray8 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[][] strArray9 = new java.lang.String[][] { strArray5, strArray8 };
        java.lang.String[] strArray12 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[] strArray15 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[][] strArray16 = new java.lang.String[][] { strArray12, strArray15 };
        java.lang.String[][][] strArray17 = new java.lang.String[][][] { strArray9, strArray16 };
        java.lang.String[] strArray20 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[] strArray23 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[][] strArray24 = new java.lang.String[][] { strArray20, strArray23 };
        java.lang.String[] strArray27 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[] strArray30 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray27, strArray30 };
        java.lang.String[][][] strArray32 = new java.lang.String[][][] { strArray24, strArray31 };
        java.lang.String[] strArray35 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[] strArray38 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[][] strArray39 = new java.lang.String[][] { strArray35, strArray38 };
        java.lang.String[] strArray42 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[] strArray45 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[][] strArray46 = new java.lang.String[][] { strArray42, strArray45 };
        java.lang.String[][][] strArray47 = new java.lang.String[][][] { strArray39, strArray46 };
        java.lang.String[] strArray50 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[] strArray53 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[][] strArray54 = new java.lang.String[][] { strArray50, strArray53 };
        java.lang.String[] strArray57 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[] strArray60 = new java.lang.String[] { "STRING \n", "OR " };
        java.lang.String[][] strArray61 = new java.lang.String[][] { strArray57, strArray60 };
        java.lang.String[][][] strArray62 = new java.lang.String[][][] { strArray54, strArray61 };
        java.lang.String[][][][] strArray63 = new java.lang.String[][][][] { strArray17, strArray32, strArray47, strArray62 };
        java.lang.String[][][][] strArray64 = new java.lang.String[][][][] {};
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList65 = com.google.common.collect.ImmutableList.of(strArray64);
        java.lang.String[][][][] strArray66 = new java.lang.String[][][][] {};
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList67 = com.google.common.collect.ImmutableList.of(strArray66);
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList68 = com.google.common.collect.ImmutableList.of(strArray66);
        java.lang.String[][][][] strArray69 = new java.lang.String[][][][] {};
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList70 = com.google.common.collect.ImmutableList.of(strArray69);
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList71 = com.google.common.collect.ImmutableList.of(strArray69);
        com.google.common.collect.ImmutableList<java.lang.String[][][][]> strArrayList72 = com.google.common.collect.ImmutableList.of(strArray0, strArray63, strArray64, strArray66, strArray69);
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList73 = com.google.common.collect.ImmutableList.copyOf(strArray66);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArrayList65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArrayList67);
        org.junit.Assert.assertNotNull(strArrayList68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArrayList70);
        org.junit.Assert.assertNotNull(strArrayList71);
        org.junit.Assert.assertNotNull(strArrayList72);
        org.junit.Assert.assertNotNull(strArrayList73);
    }

    @Test
    public void test16856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16856");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean10 = node9.isVar();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node15 = node9.copyInformationFromForTree(node14);
        boolean boolean16 = node15.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = jSDocInfoBuilder1.build(node15);
        boolean boolean18 = jSDocInfo17.isExterns();
        java.lang.String str19 = jSDocInfo17.getReturnDescription();
        boolean boolean20 = jSDocInfo17.hasModifies();
        java.lang.String str21 = jSDocInfo17.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test16857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16857");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        node5.setOptionalArg(true);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node30 = node28.cloneNode();
        boolean boolean31 = node30.isGetElem();
        node30.addSuppression("");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        boolean boolean39 = node37.isBreak();
        int int40 = node37.getSourcePosition();
        com.google.javascript.rhino.Node node41 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node42 = node37.getFirstChild();
        boolean boolean43 = node37.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(16, node37, 0, 176129);
        boolean boolean47 = node46.isNumber();
        com.google.javascript.rhino.Node node48 = node5.copyInformationFrom(node46);
        com.google.javascript.rhino.Node node49 = node48.cloneNode();
        boolean boolean50 = node48.isReturn();
        boolean boolean51 = node48.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 176129 + "'", int40 == 176129);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test16858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16858");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(42, nodeArray5, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(36, nodeArray5, 40, 4);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(12, nodeArray5, 32, (int) (byte) 0);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(48, nodeArray5, 50, 8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = node18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test16859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16859");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean5 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean6 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean7 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = null;
        boolean boolean9 = jSDocInfoBuilder1.recordVisibility(visibility8);
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder13.recordThisType(jSTypeExpression15);
        boolean boolean18 = jSDocInfoBuilder13.addReference("hi!");
        boolean boolean19 = jSDocInfoBuilder13.recordPreserveTry();
        boolean boolean21 = jSDocInfoBuilder13.recordMeaning("JSDocInfo");
        boolean boolean22 = jSDocInfoBuilder13.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.isInterfaceRecorded();
        boolean boolean27 = jSDocInfoBuilder24.recordBlockDescription("hi!");
        boolean boolean29 = jSDocInfoBuilder24.recordReturnDescription("STRING ");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder31.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        jSDocInfoBuilder31.markName("hi!", staticSourceFile35, (int) (short) 0, (int) (short) 100);
        boolean boolean39 = jSDocInfoBuilder31.recordNoTypeCheck();
        boolean boolean40 = jSDocInfoBuilder31.recordExpose();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node44.addChildrenToFront(node48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = jSDocInfoBuilder31.build(node48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder52 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder52.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean56 = jSDocInfoBuilder55.isInterfaceRecorded();
        boolean boolean58 = jSDocInfoBuilder55.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj64 = node62.getProp(43);
        boolean boolean65 = node62.isCall();
        boolean boolean66 = node62.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = new com.google.javascript.rhino.JSTypeExpression(node62, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder69 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray71 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray72 = (java.util.ArrayList<java.lang.String>[]) arrayListArray71;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder73 = strListBuilder69.add((java.util.ArrayList<java.lang.String>[]) arrayListArray71);
        boolean boolean74 = jSTypeExpression68.equals((java.lang.Object) arrayListArray71);
        boolean boolean75 = jSDocInfoBuilder55.recordDefineType(jSTypeExpression68);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition76 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int77 = namePosition76.getEndLine();
        int int78 = namePosition76.getStartLine();
        com.google.javascript.rhino.Node node79 = namePosition76.getItem();
        boolean boolean80 = jSTypeExpression68.equals((java.lang.Object) node79);
        boolean boolean81 = jSDocInfoBuilder52.recordExtendedInterface(jSTypeExpression68);
        boolean boolean82 = jSDocInfoBuilder31.recordExtendedInterface(jSTypeExpression68);
        boolean boolean84 = jSDocInfoBuilder24.recordThrowDescription(jSTypeExpression68, "hi!");
        boolean boolean85 = jSTypeExpression68.isOptionalArg();
        boolean boolean86 = jSDocInfoBuilder13.recordImplementedInterface(jSTypeExpression68);
        boolean boolean87 = jSDocInfoBuilder1.recordParameter("STRING  43 [synthetic: 1]", jSTypeExpression68);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strListBuilder69);
        org.junit.Assert.assertNotNull(arrayListArray71);
        org.junit.Assert.assertNotNull(strListArray72);
        org.junit.Assert.assertNotNull(strListBuilder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test16860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16860");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean7 = node6.isNull();
        boolean boolean8 = node6.isSyntheticBlock();
        namePosition0.setItem(node6);
        int int10 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(0, "[]");
        namePosition0.setItem(node13);
        com.google.javascript.rhino.Node node15 = namePosition0.getItem();
        boolean boolean16 = node15.isNoSideEffectsCall();
        boolean boolean17 = node15.isDefaultCase();
        node15.removeProp((int) (short) -1);
        boolean boolean20 = node15.isCatch();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test16861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16861");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        node5.setStaticSourceFile(staticSourceFile9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16862");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression2);
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int14 = strList12.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int25 = strList23.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList44 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList12, (java.lang.Iterable<java.lang.String>) strList23, (java.lang.Iterable<java.lang.String>) strList34, (java.lang.Iterable<java.lang.String>) strList43);
        boolean boolean45 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList12);
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = strList12.asList();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList46.replaceAll(strUnaryOperator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strIterableList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test16863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16863");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node7.addChildrenToFront(node11);
        boolean boolean13 = node7.isGetterDef();
        boolean boolean14 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.Node node36 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(32, node7, node24);
        boolean boolean38 = node37.isExprResult();
        boolean boolean39 = node37.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = jSDocInfoBuilder1.build(node37);
        jSDocInfoBuilder1.markName("OR  54\n", 18, (-1));
        boolean boolean45 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean47 = jSDocInfoBuilder1.recordLends("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test16864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16864");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isVar();
        node5.putBooleanProp(30, false);
        boolean boolean10 = node5.isSwitch();
        boolean boolean11 = node5.isUnscopedQualifiedName();
        boolean boolean12 = node5.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node5.setStaticSourceFile(staticSourceFile13);
        boolean boolean15 = node5.isGetElem();
        namePosition0.setItem(node5);
        boolean boolean17 = node5.isCatch();
        boolean boolean18 = node5.isRegExp();
        boolean boolean19 = node5.isWhile();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        boolean boolean26 = node23.isCall();
        int int27 = node23.getSourcePosition();
        java.lang.String str31 = node23.toString(false, true, false);
        boolean boolean32 = node23.isNot();
        boolean boolean33 = node23.isDelProp();
        boolean boolean34 = node23.isTrue();
        boolean boolean35 = node23.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType36 = node23.getJSType();
        boolean boolean37 = node23.isFromExterns();
        node23.addSuppression("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.Node node41 = node23.getAncestor(0);
        boolean boolean42 = node23.isAssign();
        node23.setCharno(18);
        boolean boolean45 = node23.isEmpty();
        boolean boolean46 = node5.isEquivalentToTyped(node23);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 176180 + "'", int27 == 176180);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "STRING " + "'", str31, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test16865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16865");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        int int12 = node3.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node17.hasChildren();
        node17.setCharno(52);
        com.google.javascript.rhino.Node node27 = node3.clonePropsFrom(node17);
        node27.putIntProp(42, 46);
        boolean boolean31 = node27.isNoSideEffectsCall();
        boolean boolean32 = node27.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test16866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16866");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str24 = jSDocInfo20.getDescription();
        java.lang.String str25 = jSDocInfo20.getLicense();
        boolean boolean26 = jSDocInfo20.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection27 = jSDocInfo20.getMarkers();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder30.markName("hi!", staticSourceFile34, (int) (short) 0, (int) (short) 100);
        boolean boolean38 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean39 = jSDocInfoBuilder30.recordExpose();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder30.build(node47);
        boolean boolean50 = jSDocInfo49.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo49.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo49.setVisibility(visibility52);
        boolean boolean54 = jSDocInfo49.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo49.getImplementedInterfaces();
        java.lang.String str56 = jSDocInfo49.getVersion();
        java.lang.String str57 = jSDocInfo49.getDeprecationReason();
        java.lang.String str58 = jSDocInfo49.getMeaning();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = jSDocInfo49.getVisibility();
        jSDocInfo20.setVisibility(visibility59);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList61 = jSDocInfo20.getThrownTypes();
        java.lang.String str62 = jSDocInfo20.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(markerCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertTrue("'" + visibility52 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility52.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + visibility59 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility59.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(jSTypeExpressionList61);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test16867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16867");
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(42, nodeArray10, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(49, nodeArray10, 53, 43);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(176180, nodeArray10, 41, 38);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(37, nodeArray10, 43, 16);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(49, nodeArray10, (int) (short) 100, (int) '#');
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(0, nodeArray10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100, nodeArray10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(10, nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray10);
    }

    @Test
    public void test16868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16868");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        boolean boolean8 = node3.isInstanceOf();
        boolean boolean9 = node3.isDefaultCase();
        boolean boolean10 = node3.isHook();
        int int11 = node3.getLineno();
        java.lang.String str12 = node3.getString();
        boolean boolean13 = node3.isOr();
        boolean boolean14 = node3.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test16869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16869");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean5 = node4.isNull();
        boolean boolean6 = node4.isSyntheticBlock();
        com.google.javascript.rhino.Node node7 = node4.removeChildren();
        com.google.javascript.rhino.InputId inputId8 = null;
        node4.setInputId(inputId8);
        int int10 = node4.getType();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int15 = node14.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType16 = node14.getJSType();
        boolean boolean17 = node14.isWith();
        boolean boolean18 = node14.isAdd();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFrom(node14);
        int int20 = node14.getChildCount();
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100, node14, node21, 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 39 + "'", int10 == 39);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test16870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16870");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = node4.isParamList();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node14.isGetterDef();
        boolean boolean21 = node14.isEmpty();
        node14.setCharno(31);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType29 = node27.getJSType();
        boolean boolean30 = node27.isDelProp();
        java.lang.String str31 = node27.toString();
        boolean boolean32 = node27.isFunction();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0, node4, node14, node27);
        com.google.javascript.rhino.Node node34 = node4.cloneNode();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.isInterfaceRecorded();
        boolean boolean39 = jSDocInfoBuilder36.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        boolean boolean46 = node43.isCall();
        boolean boolean47 = node43.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node43, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray52 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray53 = (java.util.ArrayList<java.lang.String>[]) arrayListArray52;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder54 = strListBuilder50.add((java.util.ArrayList<java.lang.String>[]) arrayListArray52);
        boolean boolean55 = jSTypeExpression49.equals((java.lang.Object) arrayListArray52);
        boolean boolean56 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression49);
        boolean boolean57 = jSTypeExpression49.isVarArgs();
        com.google.javascript.rhino.Node node58 = jSTypeExpression49.getRoot();
        boolean boolean59 = node58.isArrayLit();
        com.google.javascript.rhino.Node node60 = node58.cloneTree();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder62 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean64 = jSDocInfoBuilder62.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        jSDocInfoBuilder62.markName("hi!", staticSourceFile66, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder62.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj81 = node79.getProp(43);
        boolean boolean82 = node79.isCall();
        int int83 = node79.getSourcePosition();
        java.lang.String str87 = node79.toString(false, true, false);
        boolean boolean88 = node79.isDo();
        boolean boolean89 = node79.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = jSDocInfoBuilder62.build(node79);
        com.google.javascript.rhino.InputId inputId91 = node79.getInputId();
        node79.putIntProp(0, (int) (short) -1);
        com.google.javascript.rhino.Node node95 = node60.copyInformationFrom(node79);
        com.google.javascript.rhino.Node node96 = node4.useSourceInfoFromForTree(node60);
        boolean boolean97 = node4.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 0.0 43" + "'", str31, "NUMBER 0.0 43");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertNotNull(arrayListArray52);
        org.junit.Assert.assertNotNull(strListArray53);
        org.junit.Assert.assertNotNull(strListBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 176180 + "'", int83 == 176180);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "STRING " + "'", str87, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(jSDocInfo90);
        org.junit.Assert.assertNull(inputId91);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test16871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16871");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean25 = jSDocInfo20.isImplicitCast();
        java.lang.String str27 = jSDocInfo20.getDescriptionForParameter("NUMBER 18.0");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test16872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16872");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(49, (int) ' ', 54);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node7 = node6.cloneTree();
        int int8 = node7.getLineno();
        boolean boolean9 = node7.isGetProp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int20 = node19.getSourceOffset();
        com.google.javascript.rhino.Node node21 = node13.useSourceInfoIfMissingFromForTree(node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean32 = node31.isContinue();
        boolean boolean33 = node31.isVoid();
        double double34 = node31.getDouble();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node38.addChildrenToFront(node42);
        node42.setQuotedString();
        boolean boolean45 = node42.isHook();
        int int46 = node42.getType();
        node42.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node50 = node42.getAncestor(10);
        node7.addChildrenAfter(node31, node50);
        node3.putProp(2, (java.lang.Object) node7);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 40 + "'", int46 == 40);
        org.junit.Assert.assertNull(node50);
    }

    @Test
    public void test16873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16873");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        boolean boolean23 = jSDocInfo20.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        jSDocInfo20.addSuppression("STRING  43");
        boolean boolean27 = jSDocInfo20.shouldPreserveTry();
        java.lang.String str28 = jSDocInfo20.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test16874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16874");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = marker66.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = marker66.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker66.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition74 = marker66.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = marker66.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition76 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition77 = marker66.getDescription();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(typePosition71);
        org.junit.Assert.assertNull(stringPosition72);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNull(stringPosition74);
        org.junit.Assert.assertNull(typePosition75);
        org.junit.Assert.assertNull(stringPosition76);
        org.junit.Assert.assertNull(stringPosition77);
    }

    @Test
    public void test16875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16875");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        node45.setQuotedString();
        boolean boolean48 = node45.isHook();
        int int49 = node45.getType();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        int int56 = node53.getType();
        boolean boolean57 = node53.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node58 = node45.useSourceInfoIfMissingFromForTree(node53);
        boolean boolean59 = node34.hasChild(node58);
        boolean boolean60 = node58.isTry();
        com.google.javascript.rhino.InputId inputId61 = null;
        node58.setInputId(inputId61);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TYPEOF" + "'", str37, "TYPEOF");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test16876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16876");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.isEmpty();
        java.lang.Object obj15 = node11.getProp((int) '#');
        boolean boolean16 = node11.isStringKey();
        boolean boolean17 = node11.isCatch();
        boolean boolean18 = node11.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test16877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16877");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(30);
        sideEffectFlags1.setMutatesArguments();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test16878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16878");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean28 = jSDocInfo20.isNoCompile();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo20.getVisibility();
        boolean boolean30 = jSDocInfo20.isImplicitCast();
        boolean boolean31 = jSDocInfo20.hasModifies();
        int int32 = jSDocInfo20.getImplementedInterfaceCount();
        java.lang.String str33 = jSDocInfo20.getVersion();
        boolean boolean34 = jSDocInfo20.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16879");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node6.addChildrenToFront(node10);
        boolean boolean12 = node6.isGetterDef();
        boolean boolean13 = node6.isEmpty();
        typePosition0.setItem(node6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node6.children();
        boolean boolean16 = node6.isHook();
        boolean boolean17 = node6.isWith();
        com.google.javascript.rhino.Node node18 = node6.removeChildren();
        boolean boolean19 = node6.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test16880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16880");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        boolean boolean36 = node19.isDelProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        boolean boolean42 = node40.isFor();
        java.lang.Object obj44 = node40.getProp(49);
        java.util.Set<java.lang.String> strSet45 = node40.getDirectives();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordNoTypeCheck();
        boolean boolean49 = jSDocInfoBuilder47.isInterfaceRecorded();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        int int56 = node53.getType();
        boolean boolean57 = node53.isGetterDef();
        node53.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = jSDocInfoBuilder47.build(node53);
        boolean boolean61 = jSDocInfo60.isNoSideEffects();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo60.setAssociatedNode(node63);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(49, node19, node40, node63, (int) (short) 0, 36);
        java.lang.Object obj69 = node40.getProp(43);
        boolean boolean70 = node40.isNumber();
        boolean boolean71 = node40.isVarArgs();
        boolean boolean72 = node40.isNull();
        boolean boolean73 = node40.isDec();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        node40.setStaticSourceFile(staticSourceFile74);
        boolean boolean76 = node40.isGetterDef();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSDocInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test16881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16881");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet15);
        java.lang.Object[] objArray18 = strSet15.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        java.lang.Object[] objArray28 = strSet25.toArray();
        boolean boolean29 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.lang.Object[] objArray30 = strSet15.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder32.markName("hi!", staticSourceFile36, (int) (short) 0, (int) (short) 100);
        boolean boolean40 = jSDocInfoBuilder32.recordNoTypeCheck();
        boolean boolean41 = jSDocInfoBuilder32.recordExpose();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node45.addChildrenToFront(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = jSDocInfoBuilder32.build(node49);
        java.lang.String str52 = jSDocInfo51.getMeaning();
        boolean boolean53 = jSDocInfo51.isExport();
        boolean boolean54 = strSet15.equals((java.lang.Object) jSDocInfo51);
        boolean boolean55 = jSDocInfo51.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo51.getType();
        boolean boolean57 = jSDocInfo51.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder59.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        jSDocInfoBuilder59.markName("hi!", staticSourceFile63, (int) (short) 0, (int) (short) 100);
        boolean boolean67 = jSDocInfoBuilder59.recordNoTypeCheck();
        boolean boolean68 = jSDocInfoBuilder59.recordExpose();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node72.addChildrenToFront(node76);
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = jSDocInfoBuilder59.build(node76);
        boolean boolean79 = jSDocInfo78.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = jSDocInfo78.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility81 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo78.setVisibility(visibility81);
        jSDocInfo51.setVisibility(visibility81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo51.getThisType();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo51.getModifies();
        node3.setDirectives(strSet85);
        boolean boolean87 = node3.isContinue();
        boolean boolean88 = node3.isFalse();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSDocInfo51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(jSDocInfo78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSTypeExpression80);
        org.junit.Assert.assertTrue("'" + visibility81 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility81.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test16882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16882");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean42 = strList19.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int53 = strList51.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int64 = strList62.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList82 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList83 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList51, (java.lang.Iterable<java.lang.String>) strList62, (java.lang.Iterable<java.lang.String>) strList73, (java.lang.Iterable<java.lang.String>) strList82);
        com.google.common.collect.ImmutableList<java.lang.String> strList92 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int94 = strList92.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator95 = strList92.spliterator();
        boolean boolean96 = strList62.equals((java.lang.Object) strList92);
        boolean boolean97 = strList19.containsAll((java.util.Collection<java.lang.String>) strList92);
        com.google.common.collect.ImmutableList<java.lang.String> strList98 = strList19.asList();
        // The following exception was thrown during execution in test generation
        try {
            strList98.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(strIterableList83);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(strList98);
    }

    @Test
    public void test16883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16883");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        boolean boolean51 = jSDocInfo42.hasType();
        java.lang.String str52 = jSDocInfo42.getDeprecationReason();
        java.lang.String str53 = jSDocInfo42.getLicense();
        jSDocInfo42.setLicense("TYPEOF [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test16884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16884");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        int int12 = node3.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node17.hasChildren();
        node17.setCharno(52);
        com.google.javascript.rhino.Node node27 = node3.clonePropsFrom(node17);
        node27.putIntProp(42, 46);
        node27.setString("STRING  43 [var_args_name: 1]\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test16885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16885");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        jSDocInfo20.addSuppression("STRING ");
        boolean boolean28 = jSDocInfo20.isExport();
        boolean boolean29 = jSDocInfo20.isHidden();
        java.lang.String str30 = jSDocInfo20.getBlockDescription();
        boolean boolean31 = jSDocInfo20.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16886");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder66 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean67 = jSDocInfoBuilder66.recordNoTypeCheck();
        boolean boolean68 = jSDocInfoBuilder66.isInterfaceRecorded();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        int int75 = node72.getType();
        boolean boolean76 = node72.isGetterDef();
        node72.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = jSDocInfoBuilder66.build(node72);
        boolean boolean80 = jSDocInfo79.isNoSideEffects();
        boolean boolean81 = jSDocInfo79.hasTypedefType();
        boolean boolean82 = jSDocInfo79.isConsistentIdGenerator();
        boolean boolean83 = jSDocInfo79.isOverride();
        boolean boolean84 = jSDocInfo79.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList85 = jSDocInfo79.getImplementedInterfaces();
        boolean boolean86 = strSet6.contains((java.lang.Object) jSTypeExpressionList85);
        java.util.Iterator<java.lang.String> strItor87 = strSet6.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 40 + "'", int75 == 40);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strItor87);
    }

    @Test
    public void test16887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16887");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition69 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(stringPosition69);
        org.junit.Assert.assertNull(stringPosition70);
    }

    @Test
    public void test16888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16888");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        boolean boolean10 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordNoTypeCheck();
        boolean boolean14 = jSDocInfoBuilder12.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder16.recordThisType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder16.recordOverride();
        boolean boolean21 = jSDocInfoBuilder16.recordExpose();
        boolean boolean22 = jSDocInfoBuilder16.recordExport();
        boolean boolean23 = jSDocInfoBuilder16.isDescriptionRecorded();
        boolean boolean24 = jSDocInfoBuilder16.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.recordJavaDispatch();
        jSDocInfoBuilder27.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.recordJavaDispatch();
        boolean boolean38 = jSDocInfoBuilder36.recordNoCompile();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        boolean boolean46 = node43.isCall();
        boolean boolean47 = node43.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node43, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray52 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray53 = (java.util.ArrayList<java.lang.String>[]) arrayListArray52;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder54 = strListBuilder50.add((java.util.ArrayList<java.lang.String>[]) arrayListArray52);
        boolean boolean55 = jSTypeExpression49.equals((java.lang.Object) arrayListArray52);
        boolean boolean56 = jSDocInfoBuilder36.recordParameter("", jSTypeExpression49);
        boolean boolean57 = jSDocInfoBuilder27.recordThrowType(jSTypeExpression49);
        boolean boolean58 = jSTypeExpression49.isVarArgs();
        boolean boolean59 = jSDocInfoBuilder16.recordParameter("STRING \n", jSTypeExpression49);
        boolean boolean60 = jSDocInfoBuilder12.recordThisType(jSTypeExpression49);
        boolean boolean61 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression49);
        boolean boolean62 = jSTypeExpression49.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertNotNull(arrayListArray52);
        org.junit.Assert.assertNotNull(strListArray53);
        org.junit.Assert.assertNotNull(strListBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16889");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node18 = jSDocInfo14.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo14.getBaseType();
        boolean boolean20 = jSDocInfo14.isConstructor();
        int int21 = jSDocInfo14.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test16890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16890");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        node21.setDouble((double) 16);
        boolean boolean26 = node21.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test16891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16891");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean7 = jSDocInfoBuilder1.recordBlockDescription("[, hi!, , , hi!, , hi!, ]");
        boolean boolean9 = jSDocInfoBuilder1.recordReturnDescription("NUMBER 0.0 43");
        boolean boolean12 = jSDocInfoBuilder1.recordParameterDescription("OR  54\n", "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = node16.cloneNode();
        boolean boolean19 = node18.isGetElem();
        node18.addSuppression("");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        boolean boolean27 = node25.isBreak();
        int int28 = node25.getSourcePosition();
        com.google.javascript.rhino.Node node29 = node18.useSourceInfoFrom(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node25.getJSDocInfo();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node34.addChildrenToFront(node38);
        boolean boolean41 = node34.getBooleanProp(8);
        com.google.javascript.rhino.Node node42 = node25.clonePropsFrom(node34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = jSDocInfoBuilder1.build(node25);
        java.lang.String str44 = jSDocInfo43.toString();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo43.getModifies();
        java.lang.Object[] objArray46 = strSet45.toArray();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 176129 + "'", int28 == 176129);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSDocInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "JSDocInfo" + "'", str44, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
    }

    @Test
    public void test16892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16892");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo42.getParameterNames();
        boolean boolean52 = jSDocInfo42.isConsistentIdGenerator();
        java.lang.String str53 = jSDocInfo42.getDeprecationReason();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test16893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16893");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        boolean boolean23 = jSDocInfo20.isConsistentIdGenerator();
        java.lang.String str24 = jSDocInfo20.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getParameterType("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection27 = jSDocInfo20.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo20.getType();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo20.getSuppressions();
        java.util.Collection<java.lang.String> strCollection31 = jSDocInfo20.getAuthors();
        jSDocInfo20.setLicense("Node tree inequality:\nTree1:\nSTRING STRING  43 [synthetic: 1] 35\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING STRING  43 [synthetic: 1] 35\n\n\nSubtree2: STRING  43\n");
        boolean boolean34 = jSDocInfo20.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNotNull(nodeCollection27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(strCollection31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16894");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet15);
        java.lang.Object[] objArray18 = strSet15.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        java.lang.Object[] objArray28 = strSet25.toArray();
        boolean boolean29 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.lang.Object[] objArray30 = strSet15.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator31 = strSet15.spliterator();
        boolean boolean32 = strList8.contains((java.lang.Object) strSpliterator31);
        java.util.Iterator<java.lang.String> strItor33 = strList8.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = strList8.set(26, "OR  54\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
    }

    @Test
    public void test16895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16895");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo20.getImplementedInterfaces();
        java.util.Collection<java.lang.String> strCollection28 = jSDocInfo20.getAuthors();
        boolean boolean29 = jSDocInfo20.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNull(strCollection28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16896");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean22 = node21.isNull();
        boolean boolean23 = node21.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isDebugger();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(38, node9, node21, node28, node34);
        com.google.javascript.rhino.Node node44 = node21.getFirstChild();
        boolean boolean45 = node21.isNumber();
        com.google.javascript.rhino.Node node46 = null;
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node62.setDirectives((java.util.Set<java.lang.String>) strSet65);
        com.google.javascript.rhino.Node node68 = node56.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.InputId inputId70 = node68.getInputId();
        com.google.javascript.rhino.Node node71 = node68.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node21.addChildBefore(node46, node68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(inputId70);
        org.junit.Assert.assertNull(node71);
    }

    @Test
    public void test16897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16897");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean9 = typePosition8.hasBrackets();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        typePosition8.setItem(node26);
        int int28 = typePosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean35 = typePosition34.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList36 = com.google.common.collect.ImmutableList.of(typePosition29, typePosition30, typePosition31, typePosition32, typePosition33, typePosition34);
        int int37 = typePosition31.getEndLine();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        boolean boolean44 = node41.hasMoreThanOneChild();
        typePosition31.setItem(node41);
        boolean boolean46 = typePosition31.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition8, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition31);
        int int48 = typePosition31.getStartLine();
        int int49 = typePosition31.getPositionOnStartLine();
        int int50 = typePosition31.getEndLine();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typePositionList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test16898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16898");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        int int35 = node4.getLineno();
        node4.setOptionalArg(true);
        com.google.javascript.rhino.Node node38 = node4.removeFirstChild();
        java.lang.String str39 = node38.toString();
        boolean boolean40 = node38.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 43 + "'", int35 == 43);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "STRING  43" + "'", str39, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test16899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16899");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition8.getEndLine();
        int int32 = stringPosition8.getPositionOnStartLine();
        int int33 = stringPosition8.getStartLine();
        stringPosition8.setItem("GETELEM");
        int int36 = stringPosition8.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test16900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16900");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node5 = node3.getNext();
        boolean boolean6 = node3.isThrow();
        boolean boolean7 = node3.isString();
        boolean boolean8 = node3.isAdd();
        boolean boolean9 = node3.isQualifiedName();
        int int10 = node3.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test16901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16901");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        int int11 = strList8.size();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray15 = strList8.toArray(strArray14);
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = com.google.common.collect.ImmutableList.of(strArray15);
        java.lang.String str17 = strList16.toString();
        int int18 = strList16.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder20.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        jSDocInfoBuilder20.markName("hi!", staticSourceFile24, (int) (short) 0, (int) (short) 100);
        boolean boolean28 = jSDocInfoBuilder20.recordNoTypeCheck();
        boolean boolean29 = jSDocInfoBuilder20.recordExpose();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node33.addChildrenToFront(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = jSDocInfoBuilder20.build(node37);
        boolean boolean40 = jSDocInfo39.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo39.getTypedefType();
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo39.getAuthors();
        boolean boolean43 = jSDocInfo39.hasReturnType();
        boolean boolean44 = jSDocInfo39.hasType();
        boolean boolean45 = jSDocInfo39.isOverride();
        boolean boolean46 = jSDocInfo39.isConsistentIdGenerator();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection47 = jSDocInfo39.getTypeNodes();
        boolean boolean48 = strList16.equals((java.lang.Object) nodeCollection47);
        // The following exception was thrown during execution in test generation
        try {
            strList16.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str17, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test16902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16902");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        boolean boolean8 = jSDocInfoBuilder5.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node12, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray22 = (java.util.ArrayList<java.lang.String>[]) arrayListArray21;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder23 = strListBuilder19.add((java.util.ArrayList<java.lang.String>[]) arrayListArray21);
        boolean boolean24 = jSTypeExpression18.equals((java.lang.Object) arrayListArray21);
        boolean boolean25 = jSDocInfoBuilder5.recordDefineType(jSTypeExpression18);
        boolean boolean26 = jSTypeExpression18.isVarArgs();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSTypeExpression18.equals(obj27);
        boolean boolean29 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder31.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        jSDocInfoBuilder31.markName("hi!", staticSourceFile35, (int) (short) 0, (int) (short) 100);
        boolean boolean39 = jSDocInfoBuilder31.recordNoTypeCheck();
        boolean boolean40 = jSDocInfoBuilder31.recordExpose();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node44.addChildrenToFront(node48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = jSDocInfoBuilder31.build(node48);
        boolean boolean51 = jSDocInfo50.isExport();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean56 = node55.isOptionalArg();
        com.google.javascript.rhino.Node node57 = node55.getNext();
        jSDocInfo50.setAssociatedNode(node57);
        jSDocInfo50.setLicense("STRING ");
        java.lang.String str61 = jSDocInfo50.toString();
        boolean boolean62 = jSDocInfo50.hasTypedefType();
        java.util.Set<java.lang.String> strSet63 = jSDocInfo50.getModifies();
        boolean boolean64 = jSDocInfoBuilder1.recordSuppressions(strSet63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = strSet63.add("STRING  43\n    NUMBER 0.0 43\n        STRING  43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(strListArray22);
        org.junit.Assert.assertNotNull(strListBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "JSDocInfo" + "'", str61, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test16903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16903");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String str46 = jSDocInfo42.getBlockDescription();
        boolean boolean47 = jSDocInfo42.hasReturnType();
        java.lang.String str48 = jSDocInfo42.getBlockDescription();
        com.google.javascript.rhino.Node node49 = jSDocInfo42.getAssociatedNode();
        boolean boolean50 = jSDocInfo42.isJavaDispatch();
        boolean boolean51 = jSDocInfo42.isDefine();
        boolean boolean53 = jSDocInfo42.hasDescriptionForParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean54 = jSDocInfo42.hasBaseType();
        boolean boolean55 = jSDocInfo42.isNoTypeCheck();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test16904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16904");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean25 = typePosition24.hasBrackets();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean30 = node29.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet37);
        java.lang.Object obj41 = node34.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node42 = node29.copyInformationFrom(node34);
        typePosition24.setItem(node42);
        int int44 = typePosition24.getStartLine();
        com.google.javascript.rhino.Node node45 = typePosition24.getItem();
        node45.removeProp(39);
        boolean boolean48 = node21.isEquivalentTo(node45);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        boolean boolean55 = node52.isCall();
        int int56 = node52.getSourcePosition();
        java.lang.String str60 = node52.toString(false, true, false);
        boolean boolean61 = node52.isNot();
        boolean boolean62 = node52.isDelProp();
        boolean boolean63 = node52.isIf();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean67 = jSDocInfoBuilder65.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        jSDocInfoBuilder65.markName("hi!", staticSourceFile69, (int) (short) 0, (int) (short) 100);
        boolean boolean73 = jSDocInfoBuilder65.recordNoTypeCheck();
        boolean boolean74 = jSDocInfoBuilder65.recordExpose();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node78.addChildrenToFront(node82);
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = jSDocInfoBuilder65.build(node82);
        boolean boolean85 = node82.isOptionalArg();
        com.google.javascript.rhino.Node node86 = node82.getParent();
        node52.addChildrenToBack(node86);
        java.util.Set<java.lang.String> strSet88 = node52.getDirectives();
        java.lang.String str89 = node52.getSourceFileName();
        com.google.javascript.rhino.Node node90 = node45.copyInformationFrom(node52);
        com.google.javascript.rhino.Node node91 = node52.removeChildren();
        java.util.Set<java.lang.String> strSet92 = node91.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 176180 + "'", int56 == 176180);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "STRING " + "'", str60, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(strSet88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNull(strSet92);
    }

    @Test
    public void test16905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16905");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0);
        jSDocInfo42.setAssociatedNode(node77);
        int int79 = jSDocInfo42.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = jSDocInfo42.getTypedefType();
        boolean boolean81 = jSDocInfo42.containsDeclaration();
        boolean boolean82 = jSDocInfo42.isImplicitCast();
        boolean boolean83 = jSDocInfo42.isNoAlias();
        boolean boolean85 = jSDocInfo42.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTHROW 53\n\n\nSubtree1: STRING  43\n\n\nSubtree2: THROW 53\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(jSTypeExpression80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test16906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16906");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int43 = strList41.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList62 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList52, (java.lang.Iterable<java.lang.String>) strList61);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int73 = strList71.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator74 = strList71.spliterator();
        boolean boolean75 = strList41.equals((java.lang.Object) strList71);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean80 = node79.isVar();
        boolean boolean81 = strList71.contains((java.lang.Object) node79);
        boolean boolean82 = node79.isThis();
        int int83 = node21.getIndexOfChild(node79);
        boolean boolean84 = node79.isVar();
        boolean boolean85 = node79.isThis();
        boolean boolean86 = node79.isCase();
        boolean boolean87 = node79.isAssign();
        node79.setSourceEncodedPosition(23);
        boolean boolean90 = node79.isAssign();
        node79.setType((int) (short) 100);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strIterableList62);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test16907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16907");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        boolean boolean4 = node1.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.Object[] objArray14 = strSet11.toArray();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object[] objArray24 = strSet21.toArray();
        boolean boolean25 = strSet11.retainAll((java.util.Collection<java.lang.String>) strSet21);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean35 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet32);
        boolean boolean37 = strSet21.add("");
        node1.setDirectives((java.util.Set<java.lang.String>) strSet21);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean43 = node42.isVar();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node48 = node42.copyInformationFromForTree(node47);
        boolean boolean49 = node48.isVarArgs();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int60 = node59.getSourceOffset();
        com.google.javascript.rhino.Node node61 = node53.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        node65.setDirectives((java.util.Set<java.lang.String>) strSet68);
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder72 = node71.getJsDocBuilderForNode();
        boolean boolean73 = node71.isAnd();
        node48.addChildToBack(node71);
        com.google.javascript.rhino.Node node75 = node71.getLastSibling();
        node75.putIntProp((int) (short) -1, 0);
        com.google.javascript.rhino.Node node79 = node75.getFirstChild();
        boolean boolean80 = strSet21.equals((java.lang.Object) node75);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test16908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16908");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        int int12 = node3.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        boolean boolean14 = node3.isIn();
        boolean boolean15 = node3.isVarArgs();
        int int16 = node3.getType();
        java.util.Set<java.lang.String> strSet17 = node3.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test16909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16909");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        boolean boolean27 = node24.isCall();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "STRING ");
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression30);
        boolean boolean34 = jSDocInfoBuilder1.recordParameterDescription("STRING ", "NUMBER 0.0 43 [directives: []]\n");
        boolean boolean35 = jSDocInfoBuilder1.isPopulated();
        boolean boolean36 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean38 = jSDocInfoBuilder1.recordDeprecationReason("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test16910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16910");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo20.getAuthors();
        boolean boolean25 = jSDocInfo20.isConstructor();
        boolean boolean26 = jSDocInfo20.isJavaDispatch();
        int int27 = jSDocInfo20.getImplementedInterfaceCount();
        boolean boolean28 = jSDocInfo20.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test16911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16911");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.setIsSyntheticBlock(true);
        boolean boolean7 = node4.isDefaultCase();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        com.google.javascript.rhino.Node node19 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node20 = node17.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean25 = node24.isNull();
        boolean boolean26 = node24.isFor();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean31 = node30.isVar();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node36 = node30.copyInformationFromForTree(node35);
        boolean boolean37 = node36.isVarArgs();
        boolean boolean38 = node36.isHook();
        boolean boolean39 = node36.isVar();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node17, node24, node36);
        node4.setSourceEncodedPosition(23);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 100, 43, (-1));
        boolean boolean47 = node46.isNot();
        boolean boolean48 = node46.isNot();
        com.google.javascript.rhino.Node node49 = node4.useSourceInfoFromForTree(node46);
        boolean boolean50 = node46.isStringKey();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int61 = node60.getSourceOffset();
        com.google.javascript.rhino.Node node62 = node54.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node66.setDirectives((java.util.Set<java.lang.String>) strSet69);
        com.google.javascript.rhino.Node node72 = node60.useSourceInfoIfMissingFromForTree(node66);
        boolean boolean73 = node66.isThrow();
        boolean boolean74 = node66.isNot();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean79 = node78.isVar();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node84 = node78.copyInformationFromForTree(node83);
        java.lang.String str85 = node66.checkTreeEquals(node84);
        node84.setString("hi!");
        boolean boolean88 = node84.isArrayLit();
        int int89 = node84.getSourcePosition();
        boolean boolean90 = node84.isQualifiedName();
        com.google.javascript.rhino.Node node91 = node46.clonePropsFrom(node84);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str85, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test16912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16912");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setLineno(43);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        com.google.javascript.rhino.Node node35 = node23.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean36 = node29.isThrow();
        boolean boolean37 = node29.isNot();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean42 = node41.isVar();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node47 = node41.copyInformationFromForTree(node46);
        java.lang.String str48 = node29.checkTreeEquals(node47);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node47.siblings();
        boolean boolean51 = node47.getBooleanProp(39);
        java.lang.String str52 = node10.checkTreeEquals(node47);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean55 = node54.isFalse();
        boolean boolean56 = node54.isDelProp();
        com.google.javascript.rhino.Node node57 = node54.getLastSibling();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int68 = node67.getSourceOffset();
        com.google.javascript.rhino.Node node69 = node61.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        node73.setDirectives((java.util.Set<java.lang.String>) strSet76);
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        boolean boolean80 = node73.isThrow();
        boolean boolean81 = node73.isNot();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean86 = node85.isVar();
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node91 = node85.copyInformationFromForTree(node90);
        java.lang.String str92 = node73.checkTreeEquals(node91);
        boolean boolean93 = node73.isIf();
        // The following exception was thrown during execution in test generation
        try {
            node47.replaceChildAfter(node54, node73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str48, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str92, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test16913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16913");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        boolean boolean47 = jSDocInfo42.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo42.getExtendedInterfaces();
        java.lang.String str49 = jSDocInfo42.getSourceName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test16914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16914");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        boolean boolean13 = node3.isWith();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node3.isEquivalentTo(node17);
        boolean boolean25 = node17.isSwitch();
        boolean boolean26 = node17.isQuotedString();
        int int27 = node17.getLineno();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node31.addChildrenToFront(node35);
        node35.setQuotedString();
        boolean boolean38 = node35.isHook();
        boolean boolean39 = node35.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = node17.srcrefTree(node35);
        boolean boolean41 = node40.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 43 + "'", int27 == 43);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test16915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16915");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.equals((java.lang.Object) (-1));
        boolean boolean53 = strSet6.contains((java.lang.Object) (-1));
        int int54 = strSet6.size();
        boolean boolean56 = strSet6.add("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.lang.Object[] objArray57 = strSet6.toArray();
        boolean boolean59 = strSet6.add("NUMBER 12.0 43\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[, Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[, Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test16916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16916");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        boolean boolean32 = jSDocInfo20.isNoCompile();
        java.lang.String str33 = jSDocInfo20.getVersion();
        java.lang.String str34 = jSDocInfo20.getReturnDescription();
        java.lang.String str35 = jSDocInfo20.getOriginalCommentString();
        java.lang.String str36 = jSDocInfo20.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test16917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16917");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node11 = node4.getChildAtIndex(0);
        java.lang.String str12 = node11.toString();
        node11.setSourceEncodedPositionForTree((int) (byte) -1);
        node11.setOptionalArg(false);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj22 = node20.getProp(43);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int27 = node26.getSourceOffset();
        com.google.javascript.rhino.Node node28 = node20.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean33 = node32.isVar();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node38 = node32.copyInformationFromForTree(node37);
        com.google.javascript.rhino.Node node39 = node20.copyInformationFromForTree(node38);
        boolean boolean40 = node11.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder41 = node20.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node42 = node20.getLastSibling();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node46.siblings();
        boolean boolean53 = node46.isNull();
        com.google.javascript.rhino.Node node54 = node20.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(44, node20);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  43" + "'", str12, "STRING  43");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test16918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16918");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo14.setAssociatedNode(node17);
        boolean boolean19 = jSDocInfo14.hasBaseType();
        java.lang.String str20 = jSDocInfo14.getSourceName();
        boolean boolean21 = jSDocInfo14.hasType();
        boolean boolean23 = jSDocInfo14.hasParameter("THIS");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16919");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isGetterDef();
        node3.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        boolean boolean27 = node3.isEquivalentToTyped(node13);
        boolean boolean28 = node3.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node3.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator30 = nodeIterable29.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeSpliterator30);
    }

    @Test
    public void test16920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16920");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(16);
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test16921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16921");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        int int68 = node57.getSideEffectFlags();
        boolean boolean69 = node57.isRegExp();
        boolean boolean70 = node57.isSwitch();
        boolean boolean71 = node57.isAssignAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node57.siblings();
        com.google.javascript.rhino.Node node73 = node57.cloneTree();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        double double80 = node78.getDouble();
        boolean boolean81 = node78.isFor();
        java.util.Set<java.lang.String> strSet82 = node78.getDirectives();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(53, node78);
        com.google.javascript.rhino.Node node84 = node73.srcref(node78);
        boolean boolean85 = node84.isVar();
        boolean boolean86 = node84.isCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable87 = node84.children();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeIterable87);
    }

    @Test
    public void test16922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16922");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isGetterDef();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable11 = node9.getAncestors();
        com.google.javascript.rhino.Node node12 = node3.srcref(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isOptionalArg();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node23.addChildrenToFront(node27);
        boolean boolean29 = node23.isGetterDef();
        boolean boolean30 = node23.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.Node node52 = node40.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(32, node23, node40);
        boolean boolean54 = node53.isExprResult();
        boolean boolean55 = node53.isFunction();
        com.google.javascript.rhino.Node node56 = node16.srcrefTree(node53);
        com.google.javascript.rhino.Node node57 = node3.copyInformationFrom(node16);
        java.lang.String str58 = node57.toString();
        java.lang.String str62 = node57.toString(false, false, false);
        com.google.javascript.rhino.Node node63 = node57.removeFirstChild();
        int int64 = node57.getChildCount();
        boolean boolean65 = node57.isRegExp();
        int int66 = node57.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(ancestorIterable11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "STRING " + "'", str58, "STRING ");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "STRING " + "'", str62, "STRING ");
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test16923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16923");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        boolean boolean29 = jSDocInfo20.isNoSideEffects();
        boolean boolean30 = jSDocInfo20.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = jSDocInfo20.getVisibility();
        boolean boolean32 = jSDocInfo20.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test16924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16924");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(176129);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setThrows();
    }

    @Test
    public void test16925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16925");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.lang.Object[] objArray9 = strList8.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.lang.Object[] objArray31 = strSet16.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator32 = strSet16.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int43 = strList41.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int54 = strList52.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList73 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList52, (java.lang.Iterable<java.lang.String>) strList63, (java.lang.Iterable<java.lang.String>) strList72);
        boolean boolean74 = strSet16.equals((java.lang.Object) strList72);
        java.lang.String[] strArray77 = new java.lang.String[] { "STRING  43", "STRING " };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        boolean boolean80 = strSet16.removeAll((java.util.Collection<java.lang.String>) strList78);
        java.util.stream.Stream<java.lang.String> strStream81 = strSet16.parallelStream();
        strSet16.clear();
        boolean boolean83 = strList8.containsAll((java.util.Collection<java.lang.String>) strSet16);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(strSpliterator32);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strIterableList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strStream81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test16926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16926");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection16 = jSDocInfo14.getMarkers();
        boolean boolean17 = jSDocInfo14.hasEnumParameterType();
        java.util.Collection<java.lang.String> strCollection18 = jSDocInfo14.getReferences();
        java.lang.String str19 = jSDocInfo14.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(markerCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strCollection18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test16927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16927");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        boolean boolean6 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        java.util.Set<java.lang.String> strSet8 = node3.getDirectives();
        boolean boolean9 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet17);
        java.lang.Object[] objArray20 = strSet17.toArray();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        java.lang.Object[] objArray30 = strSet27.toArray();
        boolean boolean31 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray32 = strSet17.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet17.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int55 = strList53.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList74 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList64, (java.lang.Iterable<java.lang.String>) strList73);
        boolean boolean75 = strSet17.equals((java.lang.Object) strList73);
        java.util.Spliterator<java.lang.String> strSpliterator76 = strList73.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor77 = strList73.listIterator();
        node3.putProp((-1), (java.lang.Object) strList73);
        boolean boolean79 = node3.isTry();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean84 = node83.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node85 = node83.cloneNode();
        boolean boolean86 = node85.isGetElem();
        node85.addSuppression("");
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString("", 44, 39);
        node85.addChildrenToFront(node92);
        com.google.javascript.rhino.Node node94 = node3.useSourceInfoIfMissingFromForTree(node92);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable95 = node94.getAncestors();
        boolean boolean96 = node94.isOnlyModifiesThisCall();
        boolean boolean97 = node94.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strIterableList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSpliterator76);
        org.junit.Assert.assertNotNull(strItor77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(ancestorIterable95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test16928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16928");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection33 = jSDocInfo20.getMarkers();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection34 = jSDocInfo20.getMarkers();
        boolean boolean35 = jSDocInfo20.containsDeclaration();
        java.util.Collection<java.lang.String> strCollection36 = jSDocInfo20.getReferences();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertNotNull(markerCollection33);
        org.junit.Assert.assertNotNull(markerCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strCollection36);
    }

    @Test
    public void test16929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16929");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "NUMBER 40.0 [source_file: hi!]");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test16930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16930");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder7.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder7.markName("hi!", staticSourceFile11, (int) (short) 0, (int) (short) 100);
        boolean boolean15 = jSDocInfoBuilder7.recordNoTypeCheck();
        boolean boolean16 = jSDocInfoBuilder7.recordExpose();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node20.addChildrenToFront(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = jSDocInfoBuilder7.build(node24);
        java.lang.String str27 = jSDocInfo26.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo26.getTemplateTypeNames();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strList29.spliterator();
        boolean boolean32 = strList29.equals((java.lang.Object) 100.0d);
        boolean boolean33 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList29);
        boolean boolean34 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean35 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean36 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean37 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean38 = jSDocInfoBuilder1.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test16931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16931");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test16932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16932");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, nodeArray6, 40, 4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) '#', nodeArray6);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(30, nodeArray6, 167974, 11);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(30, nodeArray6, 35, 3);
        com.google.common.collect.ImmutableList<java.lang.Cloneable> cloneableList21 = com.google.common.collect.ImmutableList.of((java.lang.Cloneable[]) nodeArray6);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(cloneableList21);
    }

    @Test
    public void test16933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16933");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        boolean boolean23 = jSDocInfo20.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getEnumParameterType();
        jSDocInfo20.addSuppression("");
        java.lang.String str27 = jSDocInfo20.getDescription();
        java.lang.String str28 = jSDocInfo20.getDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test16934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16934");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        boolean boolean51 = jSDocInfo42.hasType();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo42.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo42.getType();
        boolean boolean54 = jSDocInfo42.isExport();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo42.getModifies();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSet55);
    }

    @Test
    public void test16935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16935");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        java.lang.Object[] objArray12 = strList8.toArray();
        int int13 = strList8.size();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(42, nodeArray19, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(49, nodeArray19, 53, 43);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(176180, nodeArray19, 41, 38);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray19);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(37, nodeArray19, 43, 16);
        boolean boolean33 = node32.isUnscopedQualifiedName();
        int int34 = strList8.indexOf((java.lang.Object) node32);
        boolean boolean35 = node32.isString();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16936");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "STRING  43 [quoted: 1]", 15, 15);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test16937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16937");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setLineno(43);
        java.lang.String str14 = node10.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test16938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16938");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.addReference("STRING ");
        boolean boolean10 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean11 = jSDocInfoBuilder1.shouldParseDocumentation();
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", (int) (short) 100, 50);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordJavaDispatch();
        boolean boolean19 = jSDocInfoBuilder17.recordNoCompile();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        boolean boolean27 = node24.isCall();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder31 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray33 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray34 = (java.util.ArrayList<java.lang.String>[]) arrayListArray33;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = strListBuilder31.add((java.util.ArrayList<java.lang.String>[]) arrayListArray33);
        boolean boolean36 = jSTypeExpression30.equals((java.lang.Object) arrayListArray33);
        boolean boolean37 = jSDocInfoBuilder17.recordParameter("", jSTypeExpression30);
        boolean boolean38 = jSTypeExpression30.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression30);
        com.google.javascript.rhino.Node node40 = jSTypeExpression30.getRoot();
        boolean boolean41 = jSTypeExpression30.isVarArgs();
        boolean boolean42 = jSDocInfoBuilder1.recordThisType(jSTypeExpression30);
        boolean boolean44 = jSTypeExpression30.equals((java.lang.Object) "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNULL\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NULL\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strListBuilder31);
        org.junit.Assert.assertNotNull(arrayListArray33);
        org.junit.Assert.assertNotNull(strListArray34);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test16939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16939");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isLabel();
        com.google.javascript.rhino.Node node23 = node21.getNext();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = node23.getSideEffectFlags();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test16940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16940");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        jSDocInfo20.setLicense("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean26 = jSDocInfo20.isNoSideEffects();
        jSDocInfo20.setLicense("NUMBER 0.0 43 [opt_arg: 1]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getParameterType("NAME\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = jSDocInfo20.getTemplateTypeNames();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList31.replaceAll(strUnaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test16941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16941");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        int int11 = strList8.size();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray15 = strList8.toArray(strArray14);
        // The following exception was thrown during execution in test generation
        try {
            strList8.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test16942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16942");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        int int2 = node1.getSourcePosition();
        boolean boolean3 = node1.isAssign();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        com.google.javascript.rhino.Node node35 = node23.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean36 = node35.isContinue();
        boolean boolean37 = node35.isOnlyModifiesThisCall();
        boolean boolean38 = node35.isDefaultCase();
        boolean boolean39 = node8.hasChild(node35);
        java.lang.String str43 = node8.toString(false, true, true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node8.siblings();
        node8.setOptionalArg(false);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean51 = node50.isVar();
        node50.putBooleanProp(30, false);
        boolean boolean55 = node50.isSwitch();
        boolean boolean56 = node50.isIn();
        boolean boolean57 = node50.isFromExterns();
        boolean boolean58 = node50.isNot();
        boolean boolean59 = node50.isNumber();
        int int60 = node50.getSideEffectFlags();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(42, nodeArray66, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(49, nodeArray66, 53, 43);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(176180, nodeArray66, 41, 38);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray66);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(26, nodeArray66);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean82 = node81.isVar();
        node81.putBooleanProp(30, false);
        boolean boolean86 = node81.isSwitch();
        boolean boolean87 = node81.isIn();
        boolean boolean88 = node81.isIn();
        boolean boolean89 = node81.isOr();
        com.google.javascript.rhino.Node node90 = node81.getLastSibling();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(46, node8, node50, node77, node81);
        node8.setType(42);
        boolean boolean94 = node8.isLabel();
        int int95 = node8.getChildCount();
        int int96 = node1.getIndexOfChild(node8);
        node1.setLength((int) (byte) 1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER 0.0 [directives: []]" + "'", str43, "NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test16943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16943");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isBreak();
        int int15 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFrom(node12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node12.getJSDocInfo();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node21.addChildrenToFront(node25);
        boolean boolean28 = node21.getBooleanProp(8);
        com.google.javascript.rhino.Node node29 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.InputId inputId30 = node29.getInputId();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        boolean boolean37 = node34.isCall();
        boolean boolean38 = node34.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = new com.google.javascript.rhino.JSTypeExpression(node34, "STRING ");
        boolean boolean41 = node34.isDo();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node45.addChildrenToFront(node49);
        boolean boolean51 = node49.isComma();
        com.google.javascript.rhino.Node node52 = node34.useSourceInfoFromForTree(node49);
        boolean boolean53 = node52.isAssignAdd();
        com.google.javascript.rhino.Node node54 = node52.getLastSibling();
        boolean boolean55 = node52.isNot();
        node29.addChildrenToBack(node52);
        com.google.javascript.rhino.InputId inputId57 = node52.getInputId();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(221199);
        node59.setSourceFileForTesting("STRING  43 [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node62 = node52.srcref(node59);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(inputId57);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test16944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16944");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        boolean boolean6 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        java.util.Set<java.lang.String> strSet8 = node3.getDirectives();
        boolean boolean9 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet17);
        java.lang.Object[] objArray20 = strSet17.toArray();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        java.lang.Object[] objArray30 = strSet27.toArray();
        boolean boolean31 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray32 = strSet17.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet17.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int55 = strList53.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList74 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList64, (java.lang.Iterable<java.lang.String>) strList73);
        boolean boolean75 = strSet17.equals((java.lang.Object) strList73);
        java.util.Spliterator<java.lang.String> strSpliterator76 = strList73.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor77 = strList73.listIterator();
        node3.putProp((-1), (java.lang.Object) strList73);
        boolean boolean79 = node3.isTry();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean84 = node83.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node85 = node83.cloneNode();
        boolean boolean86 = node85.isGetElem();
        node85.addSuppression("");
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString("", 44, 39);
        node85.addChildrenToFront(node92);
        com.google.javascript.rhino.Node node94 = node3.useSourceInfoIfMissingFromForTree(node92);
        boolean boolean95 = node3.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strIterableList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSpliterator76);
        org.junit.Assert.assertNotNull(strItor77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test16945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16945");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList81 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList60, (java.lang.Iterable<java.lang.String>) strList71, (java.lang.Iterable<java.lang.String>) strList80);
        boolean boolean82 = strList30.containsAll((java.util.Collection<java.lang.String>) strList80);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder84 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean85 = jSDocInfoBuilder84.recordNoTypeCheck();
        boolean boolean86 = jSDocInfoBuilder84.isJavaDispatch();
        boolean boolean87 = strList80.contains((java.lang.Object) boolean86);
        java.util.Spliterator<java.lang.String> strSpliterator88 = strList80.spliterator();
        java.lang.Object[] objArray89 = strList80.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList90 = strList80.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList91 = strList80.asList();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = strList91.add("NUMBER 12.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strIterableList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strSpliterator88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
    }

    @Test
    public void test16946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16946");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition72 = marker66.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition74 = marker66.getName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(stringPosition71);
        org.junit.Assert.assertNull(typePosition72);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNull(stringPosition74);
    }

    @Test
    public void test16947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16947");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isNoShadow();
        boolean boolean24 = jSDocInfo20.hasTypedefType();
        boolean boolean25 = jSDocInfo20.isNoSideEffects();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        boolean boolean27 = jSDocInfo20.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test16948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16948");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.isNoShadow();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        com.google.javascript.rhino.Node node36 = node29.getChildAtIndex(0);
        java.lang.String str37 = node36.toString();
        node36.setSourceEncodedPositionForTree((int) (byte) -1);
        node36.setOptionalArg(false);
        jSDocInfo20.setAssociatedNode(node36);
        com.google.javascript.rhino.Node node43 = jSDocInfo20.getAssociatedNode();
        java.lang.String str44 = jSDocInfo20.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "STRING  43" + "'", str37, "STRING  43");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test16949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16949");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        double double24 = node21.getDouble();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node21.siblings();
        boolean boolean26 = node21.isVar();
        boolean boolean27 = node21.isWhile();
        java.lang.String str28 = node21.toStringTree();
        boolean boolean29 = node21.isGetElem();
        boolean boolean30 = node21.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER 0.0 43\n" + "'", str28, "NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test16950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16950");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = strList50.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList50.spliterator();
        int int55 = strList50.size();
        int int56 = strList50.size();
        java.lang.String str58 = strList50.get((int) (byte) 1);
        boolean boolean59 = strList50.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test16951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16951");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        int int20 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node21 = typePosition0.getItem();
        node21.removeProp(39);
        boolean boolean24 = node21.isAssign();
        boolean boolean25 = node21.isAnd();
        boolean boolean26 = node21.isRegExp();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test16952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16952");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strList62.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor66 = strList62.listIterator();
        java.util.Spliterator<java.lang.String> strSpliterator67 = strList62.spliterator();
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(42, nodeArray72, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(39, nodeArray72, (int) '4', 32);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(176129, nodeArray72);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(35, nodeArray72);
        boolean boolean81 = strList62.contains((java.lang.Object) nodeArray72);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = strList62.add("NUMBER 0.0 43 [directives: []]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSpliterator65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strSpliterator67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test16953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16953");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean10 = jSDocInfoBuilder1.addAuthor("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean11 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean12 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test16954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16954");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet56);
        java.lang.Object[] objArray59 = strSet56.toArray();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node63.setDirectives((java.util.Set<java.lang.String>) strSet66);
        java.lang.Object[] objArray69 = strSet66.toArray();
        boolean boolean70 = strSet56.retainAll((java.util.Collection<java.lang.String>) strSet66);
        java.lang.Object[] objArray71 = strSet56.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator72 = strSet56.spliterator();
        boolean boolean73 = strList49.contains((java.lang.Object) strSpliterator72);
        java.util.Iterator<java.lang.String> strItor74 = strList49.iterator();
        boolean boolean75 = strList30.equals((java.lang.Object) strList49);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor76 = strList30.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = strList30.asList();
        java.util.stream.Stream<java.lang.String> strStream78 = strList77.stream();
        boolean boolean79 = strList77.isEmpty();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strItor76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test16955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16955");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        java.lang.Object[] objArray12 = strList8.toArray();
        int int13 = strList8.size();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(42, nodeArray19, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(49, nodeArray19, 53, 43);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(176180, nodeArray19, 41, 38);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray19);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(37, nodeArray19, 43, 16);
        boolean boolean33 = node32.isUnscopedQualifiedName();
        int int34 = strList8.indexOf((java.lang.Object) node32);
        boolean boolean35 = node32.isScript();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16956");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.setIsSyntheticBlock(true);
        boolean boolean6 = node3.isReturn();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj12 = node10.getProp(43);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int17 = node16.getSourceOffset();
        com.google.javascript.rhino.Node node18 = node10.useSourceInfoIfMissingFromForTree(node16);
        node10.setType(30);
        boolean boolean21 = node10.isCatch();
        int int22 = node3.getIndexOfChild(node10);
        com.google.javascript.rhino.InputId inputId23 = node3.getInputId();
        boolean boolean24 = node3.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16957");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isLabelName();
        boolean boolean13 = node3.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16958");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        jSDocInfo20.addSuppression("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean44 = node43.isVar();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node49 = node43.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node50 = node31.copyInformationFromForTree(node49);
        boolean boolean51 = node50.isTrue();
        boolean boolean52 = node50.isAnd();
        jSDocInfo20.setAssociatedNode(node50);
        boolean boolean54 = jSDocInfo20.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo20.getImplementedInterfaces();
        int int56 = jSDocInfo20.getImplementedInterfaceCount();
        java.lang.String str57 = jSDocInfo20.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test16959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16959");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node21.setJSType(jSType22);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node21.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor25 = ancestorIterable24.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(ancestorIterable24);
        org.junit.Assert.assertNotNull(nodeItor25);
    }

    @Test
    public void test16960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16960");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str27 = jSDocInfo20.getVersion();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        java.lang.Object[] objArray39 = strSet36.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet36.spliterator();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int51 = node50.getSourceOffset();
        com.google.javascript.rhino.Node node52 = node44.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet59);
        com.google.javascript.rhino.Node node62 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean63 = node62.isContinue();
        node62.setSourceEncodedPosition(45);
        boolean boolean66 = strSet36.remove((java.lang.Object) node62);
        boolean boolean67 = strList29.containsAll((java.util.Collection<java.lang.String>) strSet36);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test16961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16961");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList81 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList60, (java.lang.Iterable<java.lang.String>) strList71, (java.lang.Iterable<java.lang.String>) strList80);
        boolean boolean82 = strList30.containsAll((java.util.Collection<java.lang.String>) strList80);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition83 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition84 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition85 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition86 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition87 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition88 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean89 = typePosition88.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList90 = com.google.common.collect.ImmutableList.of(typePosition83, typePosition84, typePosition85, typePosition86, typePosition87, typePosition88);
        int int91 = strList30.lastIndexOf((java.lang.Object) typePosition88);
        boolean boolean92 = typePosition88.hasBrackets();
        int int93 = typePosition88.getPositionOnEndLine();
        int int94 = typePosition88.getStartLine();
        boolean boolean95 = typePosition88.hasBrackets();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strIterableList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(typePositionList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test16962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16962");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        node3.setSourceEncodedPosition(12);
        boolean boolean7 = node3.isFromExterns();
        boolean boolean8 = node3.isNull();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        com.google.javascript.rhino.Node node19 = node12.getChildAtIndex(0);
        java.lang.String str20 = node19.toString();
        node19.setSourceEncodedPositionForTree((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = node3.clonePropsFrom(node19);
        boolean boolean24 = node3.isUnscopedQualifiedName();
        boolean boolean25 = node3.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING  43" + "'", str20, "STRING  43");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test16963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16963");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean7 = jSDocInfoBuilder1.isPopulated();
        boolean boolean8 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean9 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean10 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder12.recordParameter("", jSTypeExpression15);
        boolean boolean17 = jSDocInfoBuilder12.recordExterns();
        boolean boolean18 = jSDocInfoBuilder12.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder20.recordThisType(jSTypeExpression22);
        boolean boolean24 = jSDocInfoBuilder20.recordOverride();
        boolean boolean25 = jSDocInfoBuilder20.recordExpose();
        boolean boolean26 = jSDocInfoBuilder20.isDescriptionRecorded();
        boolean boolean27 = jSDocInfoBuilder20.recordExpose();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.isInterfaceRecorded();
        boolean boolean31 = jSDocInfoBuilder29.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.isInterfaceRecorded();
        boolean boolean36 = jSDocInfoBuilder33.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj42 = node40.getProp(43);
        boolean boolean43 = node40.isCall();
        boolean boolean44 = node40.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = new com.google.javascript.rhino.JSTypeExpression(node40, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder47 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray49 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray50 = (java.util.ArrayList<java.lang.String>[]) arrayListArray49;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder51 = strListBuilder47.add((java.util.ArrayList<java.lang.String>[]) arrayListArray49);
        boolean boolean52 = jSTypeExpression46.equals((java.lang.Object) arrayListArray49);
        boolean boolean53 = jSDocInfoBuilder33.recordDefineType(jSTypeExpression46);
        com.google.javascript.rhino.Node node54 = jSTypeExpression46.getRoot();
        boolean boolean56 = jSDocInfoBuilder29.recordThrowDescription(jSTypeExpression46, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.isInterfaceRecorded();
        boolean boolean61 = jSDocInfoBuilder58.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        boolean boolean68 = node65.isCall();
        boolean boolean69 = node65.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = new com.google.javascript.rhino.JSTypeExpression(node65, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder72 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray74 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray75 = (java.util.ArrayList<java.lang.String>[]) arrayListArray74;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder76 = strListBuilder72.add((java.util.ArrayList<java.lang.String>[]) arrayListArray74);
        boolean boolean77 = jSTypeExpression71.equals((java.lang.Object) arrayListArray74);
        boolean boolean78 = jSDocInfoBuilder58.recordDefineType(jSTypeExpression71);
        boolean boolean79 = jSDocInfoBuilder29.recordEnumParameterType(jSTypeExpression71);
        boolean boolean80 = jSTypeExpression71.isOptionalArg();
        boolean boolean81 = jSTypeExpression71.isVarArgs();
        boolean boolean82 = jSTypeExpression71.isOptionalArg();
        boolean boolean83 = jSTypeExpression71.isVarArgs();
        boolean boolean84 = jSDocInfoBuilder20.recordThrowType(jSTypeExpression71);
        boolean boolean85 = jSDocInfoBuilder12.recordBaseType(jSTypeExpression71);
        boolean boolean86 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strListBuilder47);
        org.junit.Assert.assertNotNull(arrayListArray49);
        org.junit.Assert.assertNotNull(strListArray50);
        org.junit.Assert.assertNotNull(strListBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strListBuilder72);
        org.junit.Assert.assertNotNull(arrayListArray74);
        org.junit.Assert.assertNotNull(strListArray75);
        org.junit.Assert.assertNotNull(strListBuilder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test16964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16964");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(42, nodeArray4, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(36, nodeArray4, 40, 4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(176180, nodeArray4, (int) (byte) 10, 49);
        boolean boolean15 = node14.isArrayLit();
        boolean boolean16 = node14.hasChildren();
        boolean boolean17 = node14.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test16965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16965");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        com.google.javascript.rhino.Node node20 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isOnlyModifiesThisCall();
        boolean boolean33 = node30.isDefaultCase();
        boolean boolean34 = node3.hasChild(node30);
        int int35 = node3.getSourceOffset();
        boolean boolean36 = node3.isNew();
        boolean boolean37 = node3.isVar();
        boolean boolean38 = node3.isVarArgs();
        boolean boolean39 = node3.isInstanceOf();
        boolean boolean40 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test16966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16966");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        node3.setSourceEncodedPosition(12);
        node3.setSourceEncodedPositionForTree(26);
        boolean boolean9 = node3.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test16967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16967");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        boolean boolean33 = node28.isInstanceOf();
        boolean boolean34 = node28.isDefaultCase();
        int int35 = strList24.lastIndexOf((java.lang.Object) boolean34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        java.lang.String str41 = node40.toStringTree();
        boolean boolean42 = strList24.contains((java.lang.Object) node40);
        java.util.ListIterator<java.lang.String> strItor43 = strList24.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor44 = strList24.iterator();
        // The following exception was thrown during execution in test generation
        try {
            strList24.add(2, "GETELEM  43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR  54\n" + "'", str41, "OR  54\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strItor44);
    }

    @Test
    public void test16968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16968");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        boolean boolean23 = jSDocInfo20.isConstant();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo20.getBaseType();
        boolean boolean26 = jSDocInfo20.isNoSideEffects();
        boolean boolean28 = jSDocInfo20.hasParameterType("GETELEM  43\n");
        java.lang.String str29 = jSDocInfo20.getDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test16969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16969");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        node21.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node26 = node21.cloneNode();
        java.util.Set<java.lang.String> strSet27 = node26.getDirectives();
        boolean boolean28 = node26.isNot();
        int int29 = node26.getLineno();
        boolean boolean30 = node26.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test16970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16970");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean30 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean32 = strSet16.add("");
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet16.spliterator();
        java.util.Iterator<java.lang.String> strItor34 = strSet16.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(strItor34);
    }

    @Test
    public void test16971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16971");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.Iterator<java.lang.String> strItor5 = strList2.iterator();
        java.lang.Object[] objArray6 = strList2.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder8.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder8.recordParameter("", jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder8.isJavaDispatch();
        boolean boolean14 = jSDocInfoBuilder8.recordNoSideEffects();
        boolean boolean15 = jSDocInfoBuilder8.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder8.recordNoSideEffects();
        boolean boolean17 = strList2.remove((java.lang.Object) boolean16);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean21 = jSDocInfoBuilder19.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder23.recordParameter("", jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder23.recordExterns();
        boolean boolean29 = jSDocInfoBuilder23.recordPreserveTry();
        boolean boolean30 = jSDocInfoBuilder23.recordNoCompile();
        boolean boolean32 = jSDocInfoBuilder23.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordJavaDispatch();
        jSDocInfoBuilder34.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordJavaDispatch();
        boolean boolean45 = jSDocInfoBuilder43.recordNoCompile();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray59 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray60 = (java.util.ArrayList<java.lang.String>[]) arrayListArray59;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray59);
        boolean boolean62 = jSTypeExpression56.equals((java.lang.Object) arrayListArray59);
        boolean boolean63 = jSDocInfoBuilder43.recordParameter("", jSTypeExpression56);
        boolean boolean64 = jSDocInfoBuilder34.recordThrowType(jSTypeExpression56);
        boolean boolean65 = jSDocInfoBuilder23.recordBaseType(jSTypeExpression56);
        boolean boolean66 = jSDocInfoBuilder19.recordTypedef(jSTypeExpression56);
        boolean boolean67 = jSDocInfoBuilder19.isDescriptionRecorded();
        boolean boolean68 = jSDocInfoBuilder19.recordImplicitCast();
        boolean boolean70 = jSDocInfoBuilder19.recordReturnDescription("TYPEOF");
        boolean boolean71 = jSDocInfoBuilder19.recordNoAlias();
        boolean boolean72 = strList2.contains((java.lang.Object) boolean71);
        java.util.Spliterator<java.lang.String> strSpliterator73 = strList2.spliterator();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(arrayListArray59);
        org.junit.Assert.assertNotNull(strListArray60);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strSpliterator73);
    }

    @Test
    public void test16972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16972");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean42 = strList19.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int53 = strList51.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList51.spliterator();
        boolean boolean55 = strList51.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition58 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition60 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition61 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean62 = typePosition61.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList63 = com.google.common.collect.ImmutableList.of(typePosition56, typePosition57, typePosition58, typePosition59, typePosition60, typePosition61);
        int int64 = strList51.indexOf((java.lang.Object) typePosition61);
        com.google.javascript.rhino.Node node65 = typePosition61.getItem();
        boolean boolean66 = strList19.contains((java.lang.Object) node65);
        java.lang.Object[] objArray67 = strList19.toArray();
        boolean boolean68 = strList19.isEmpty();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(typePositionList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test16973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16973");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        int int17 = typePosition2.getStartLine();
        int int18 = typePosition2.getEndLine();
        int int19 = typePosition2.getPositionOnEndLine();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean42 = node35.isThrow();
        boolean boolean43 = node35.isNot();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean48 = node47.isVar();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node53 = node47.copyInformationFromForTree(node52);
        java.lang.String str54 = node35.checkTreeEquals(node53);
        boolean boolean55 = node53.isObjectLit();
        typePosition2.setItem(node53);
        int int57 = typePosition2.getPositionOnEndLine();
        boolean boolean58 = typePosition2.hasBrackets();
        com.google.javascript.rhino.Node node59 = typePosition2.getItem();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str54, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test16974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16974");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("JSDocInfo");
        boolean boolean15 = jSDocInfoBuilder1.recordDescription("NUMBER 12.0\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.isInterfaceRecorded();
        boolean boolean19 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray37 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray38 = (java.util.ArrayList<java.lang.String>[]) arrayListArray37;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = strListBuilder35.add((java.util.ArrayList<java.lang.String>[]) arrayListArray37);
        boolean boolean40 = jSTypeExpression34.equals((java.lang.Object) arrayListArray37);
        boolean boolean41 = jSDocInfoBuilder21.recordDefineType(jSTypeExpression34);
        boolean boolean42 = jSTypeExpression34.isVarArgs();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSTypeExpression34.equals(obj43);
        boolean boolean45 = jSDocInfoBuilder17.recordEnumParameterType(jSTypeExpression34);
        boolean boolean46 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression34);
        boolean boolean47 = jSTypeExpression34.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertNotNull(arrayListArray37);
        org.junit.Assert.assertNotNull(strListArray38);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test16975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16975");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node4.isComma();
        boolean boolean36 = node4.isCall();
        com.google.javascript.rhino.Node node37 = node4.cloneNode();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        boolean boolean44 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = node41.removeChildren();
        node41.setType(38);
        boolean boolean48 = node41.isNew();
        boolean boolean49 = node41.isAnd();
        com.google.javascript.rhino.Node node50 = node4.useSourceInfoFrom(node41);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test16976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16976");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(42, nodeArray8, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray8);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(36, nodeArray8, 40, 4);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(176180, nodeArray8, (int) (byte) 10, 49);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(53, nodeArray8);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(38, nodeArray8);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(221199, nodeArray8);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(35, nodeArray8);
        boolean boolean23 = node22.isObjectLit();
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16977");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(26);
        boolean boolean2 = node1.isQuotedString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test16978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16978");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        int int8 = node4.getSourcePosition();
        java.lang.String str12 = node4.toString(false, true, false);
        boolean boolean13 = node4.isExprResult();
        com.google.javascript.rhino.InputId inputId14 = null;
        node4.setInputId(inputId14);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node20.addChildrenToFront(node24);
        boolean boolean26 = node20.isGetterDef();
        boolean boolean27 = node20.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(32, node20, node37);
        boolean boolean51 = node50.isExprResult();
        boolean boolean52 = node50.isFunction();
        boolean boolean53 = node50.isDec();
        boolean boolean54 = node50.isLabelName();
        java.lang.String str58 = node50.toString(true, true, true);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(18, node4, node50, 41, 37);
        node61.setLineno(1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 176180 + "'", int8 == 176180);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING " + "'", str12, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "TYPEOF" + "'", str58, "TYPEOF");
    }

    @Test
    public void test16979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16979");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = marker66.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition72 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition73 = marker66.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition74 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition75 = marker66.getDescription();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(typePosition71);
        org.junit.Assert.assertNull(nodeSourcePosition72);
        org.junit.Assert.assertNull(typePosition73);
        org.junit.Assert.assertNull(stringPosition74);
        org.junit.Assert.assertNull(stringPosition75);
    }

    @Test
    public void test16980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16980");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        int int68 = node57.getSideEffectFlags();
        boolean boolean69 = node57.isRegExp();
        boolean boolean70 = node57.isSwitch();
        boolean boolean71 = node57.isAssignAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node57.siblings();
        com.google.javascript.rhino.Node node73 = node57.cloneTree();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        double double80 = node78.getDouble();
        boolean boolean81 = node78.isFor();
        java.util.Set<java.lang.String> strSet82 = node78.getDirectives();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(53, node78);
        com.google.javascript.rhino.Node node84 = node73.srcref(node78);
        boolean boolean85 = node84.isVar();
        boolean boolean86 = node84.isAssign();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test16981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16981");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        int int20 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node21 = typePosition0.getItem();
        com.google.javascript.rhino.jstype.JSType jSType22 = node21.getJSType();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        node30.setQuotedString();
        boolean boolean33 = node30.isHook();
        com.google.javascript.rhino.Node node34 = node30.getFirstChild();
        boolean boolean35 = node30.hasMoreThanOneChild();
        int int36 = node21.getIndexOfChild(node30);
        boolean boolean37 = node30.isAssign();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test16982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16982");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        node3.setIsSyntheticBlock(true);
        node3.detachChildren();
        com.google.javascript.rhino.Node node15 = node3.cloneTree();
        com.google.javascript.rhino.Node node16 = node15.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test16983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16983");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.isExpose();
        boolean boolean29 = jSDocInfo20.hasReturnType();
        java.util.Collection<java.lang.String> strCollection30 = jSDocInfo20.getAuthors();
        java.util.Set<java.lang.String> strSet31 = jSDocInfo20.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection30);
        org.junit.Assert.assertNotNull(strSet31);
    }

    @Test
    public void test16984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16984");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getPositionOnEndLine();
        int int3 = namePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test16985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16985");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        boolean boolean23 = jSDocInfo20.isConstant();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection24 = jSDocInfo20.getMarkers();
        boolean boolean25 = jSDocInfo20.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getEnumParameterType();
        java.lang.String str27 = jSDocInfo20.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(markerCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test16986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16986");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        boolean boolean10 = node7.isHook();
        int int11 = node7.getType();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        int int18 = node15.getType();
        boolean boolean19 = node15.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node20 = node7.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean21 = node15.isQuotedString();
        boolean boolean22 = node15.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean27 = node26.isVar();
        node26.putBooleanProp(30, false);
        boolean boolean31 = node26.isSwitch();
        boolean boolean32 = node26.isUnscopedQualifiedName();
        boolean boolean33 = node26.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node26.setStaticSourceFile(staticSourceFile34);
        boolean boolean36 = node26.isGetElem();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean41 = node40.isNull();
        boolean boolean42 = node40.isThis();
        boolean boolean43 = node40.isComma();
        node26.addChildToFront(node40);
        boolean boolean45 = node15.isEquivalentToTyped(node26);
        boolean boolean46 = node15.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test16987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16987");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        boolean boolean51 = jSDocInfo42.hasType();
        boolean boolean52 = jSDocInfo42.isImplicitCast();
        java.lang.String str53 = jSDocInfo42.toString();
        boolean boolean55 = jSDocInfo42.hasDescriptionForParameter("NUMBER 10.0 50");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo42.getThisType();
        java.lang.String str57 = jSDocInfo42.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JSDocInfo" + "'", str53, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "JSDocInfo" + "'", str57, "JSDocInfo");
    }

    @Test
    public void test16988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16988");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("TYPEOF");
        boolean boolean2 = node1.isBlock();
        boolean boolean3 = node1.isFunction();
        boolean boolean4 = node1.isNumber();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean10 = node9.isOptionalArg();
        node9.setSourceEncodedPosition(12);
        boolean boolean13 = node9.isFromExterns();
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node18.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node25 = node18.getChildAtIndex(0);
        java.lang.String str26 = node25.toString();
        node25.setSourceEncodedPositionForTree((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = node9.clonePropsFrom(node25);
        com.google.javascript.rhino.InputId inputId30 = null;
        node25.setInputId(inputId30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj37 = node35.getProp(43);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int42 = node41.getSourceOffset();
        com.google.javascript.rhino.Node node43 = node35.useSourceInfoIfMissingFromForTree(node41);
        boolean boolean44 = node43.isAssignAdd();
        boolean boolean45 = node43.isEmpty();
        node43.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node48 = node25.useSourceInfoFromForTree(node43);
        node1.putProp(49, (java.lang.Object) node25);
        node25.setSourceFileForTesting("[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING  43" + "'", str26, "STRING  43");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test16989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16989");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        int int7 = node4.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node4.siblings();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        int int16 = node12.getSourcePosition();
        java.lang.String str20 = node12.toString(false, true, false);
        boolean boolean21 = node12.isNot();
        boolean boolean22 = node12.isDelProp();
        boolean boolean23 = node12.isIf();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder25.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        jSDocInfoBuilder25.markName("hi!", staticSourceFile29, (int) (short) 0, (int) (short) 100);
        boolean boolean33 = jSDocInfoBuilder25.recordNoTypeCheck();
        boolean boolean34 = jSDocInfoBuilder25.recordExpose();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node38.addChildrenToFront(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = jSDocInfoBuilder25.build(node42);
        boolean boolean45 = node42.isOptionalArg();
        com.google.javascript.rhino.Node node46 = node42.getParent();
        node12.addChildrenToBack(node46);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(2, node4, node12, 54, 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(42, nodeArray56, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray56);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(36, nodeArray56, 40, 4);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(12, nodeArray56, 32, (int) (byte) 0);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray56);
        boolean boolean68 = node67.isVoid();
        com.google.javascript.rhino.Node node69 = node4.useSourceInfoIfMissingFrom(node67);
        boolean boolean70 = node69.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 176180 + "'", int16 == 176180);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING " + "'", str20, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test16990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16990");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean11 = jSDocInfoBuilder1.recordReturnDescription("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean16 = node15.isVar();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node21 = node15.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node22 = node15.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING  43");
        boolean boolean25 = jSDocInfoBuilder1.recordThisType(jSTypeExpression24);
        boolean boolean27 = jSDocInfoBuilder1.recordBlockDescription("NULL JSDocInfo 97");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test16991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16991");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node5 = node3.getNext();
        boolean boolean6 = node3.isThrow();
        boolean boolean7 = node3.isString();
        boolean boolean8 = node3.isAdd();
        boolean boolean9 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet26);
        int int31 = strSet26.size();
        boolean boolean33 = strSet26.add("");
        boolean boolean35 = strSet26.add("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean37 = strSet26.add("GETELEM");
        boolean boolean39 = strSet26.add("STRING  43\n");
        node3.setDirectives((java.util.Set<java.lang.String>) strSet26);
        boolean boolean41 = node3.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test16992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16992");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getEndLine();
        stringPosition0.setItem("STRING ");
        java.lang.String str9 = stringPosition0.getItem();
        stringPosition0.setItem("TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING " + "'", str9, "STRING ");
    }

    @Test
    public void test16993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16993");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.addAuthor("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, (int) ' ', (int) '#');
        boolean boolean13 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test16994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16994");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean11 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean12 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordNoTypeCheck();
        boolean boolean17 = jSDocInfoBuilder14.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder14.recordImplicitCast();
        boolean boolean19 = jSDocInfoBuilder14.recordInterface();
        boolean boolean20 = jSDocInfoBuilder14.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        boolean boolean25 = jSDocInfoBuilder22.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.isInterfaceRecorded();
        boolean boolean30 = jSDocInfoBuilder27.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        boolean boolean37 = node34.isCall();
        boolean boolean38 = node34.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = new com.google.javascript.rhino.JSTypeExpression(node34, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder41 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray43 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray44 = (java.util.ArrayList<java.lang.String>[]) arrayListArray43;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder45 = strListBuilder41.add((java.util.ArrayList<java.lang.String>[]) arrayListArray43);
        boolean boolean46 = jSTypeExpression40.equals((java.lang.Object) arrayListArray43);
        boolean boolean47 = jSDocInfoBuilder27.recordDefineType(jSTypeExpression40);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition48 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int49 = namePosition48.getEndLine();
        int int50 = namePosition48.getStartLine();
        com.google.javascript.rhino.Node node51 = namePosition48.getItem();
        boolean boolean52 = jSTypeExpression40.equals((java.lang.Object) node51);
        boolean boolean53 = jSDocInfoBuilder22.recordTypedef(jSTypeExpression40);
        boolean boolean54 = jSDocInfoBuilder14.recordThrowType(jSTypeExpression40);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        jSDocInfoBuilder56.markName("hi!", staticSourceFile60, (int) (short) 0, (int) (short) 100);
        boolean boolean64 = jSDocInfoBuilder56.recordNoTypeCheck();
        boolean boolean65 = jSDocInfoBuilder56.recordExpose();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node69.addChildrenToFront(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = jSDocInfoBuilder56.build(node73);
        boolean boolean76 = jSDocInfo75.isExport();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean81 = node80.isOptionalArg();
        com.google.javascript.rhino.Node node82 = node80.getNext();
        jSDocInfo75.setAssociatedNode(node82);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList84 = jSDocInfo75.getThrownTypes();
        boolean boolean85 = jSTypeExpression40.equals((java.lang.Object) jSDocInfo75);
        boolean boolean86 = jSDocInfoBuilder1.recordThisType(jSTypeExpression40);
        boolean boolean87 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strListBuilder41);
        org.junit.Assert.assertNotNull(arrayListArray43);
        org.junit.Assert.assertNotNull(strListArray44);
        org.junit.Assert.assertNotNull(strListBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSDocInfo75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test16995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16995");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", 4095, 45, (int) (byte) -1, 53);
        boolean boolean10 = jSDocInfoBuilder1.addAuthor("STRING  43");
        boolean boolean11 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder13.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        jSDocInfoBuilder13.markName("hi!", staticSourceFile17, (int) (short) 0, (int) (short) 100);
        boolean boolean21 = jSDocInfoBuilder13.recordNoTypeCheck();
        boolean boolean22 = jSDocInfoBuilder13.recordExpose();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = jSDocInfoBuilder13.build(node30);
        boolean boolean33 = jSDocInfo32.isExport();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean38 = node37.isOptionalArg();
        com.google.javascript.rhino.Node node39 = node37.getNext();
        jSDocInfo32.setAssociatedNode(node39);
        java.lang.String str41 = jSDocInfo32.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str43 = jSDocInfo32.getVersion();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo32.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream45 = strSet44.stream();
        boolean boolean46 = jSDocInfoBuilder1.recordModifies(strSet44);
        boolean boolean47 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean49 = jSDocInfoBuilder1.recordDescription("");
        boolean boolean51 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test16996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16996");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        node29.setLength(31);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean36 = node35.isNull();
        boolean boolean37 = node35.isFromExterns();
        boolean boolean38 = node35.isFunction();
        com.google.javascript.rhino.Node node39 = node35.cloneTree();
        boolean boolean40 = node39.isFor();
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node39);
        node41.removeProp((int) '#');
        boolean boolean44 = node41.isLabelName();
        boolean boolean45 = node41.isInc();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder46 = node41.new FileLevelJsDocBuilder();
        boolean boolean47 = node41.isFunction();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test16997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16997");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("STRING  43");
        boolean boolean11 = jSDocInfoBuilder1.recordDeprecationReason("ERROR  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        boolean boolean24 = strSet20.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int35 = strList33.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int46 = strList44.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList65 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList33, (java.lang.Iterable<java.lang.String>) strList44, (java.lang.Iterable<java.lang.String>) strList55, (java.lang.Iterable<java.lang.String>) strList64);
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int76 = strList74.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator77 = strList74.spliterator();
        boolean boolean78 = strList44.equals((java.lang.Object) strList74);
        boolean boolean79 = strSet20.addAll((java.util.Collection<java.lang.String>) strList74);
        boolean boolean80 = jSDocInfoBuilder13.recordModifies((java.util.Set<java.lang.String>) strSet20);
        boolean boolean81 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray82 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder[]> fileLevelJsDocBuilderArrayList83 = com.google.common.collect.ImmutableList.copyOf(fileLevelJsDocBuilderArray82);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder[]> fileLevelJsDocBuilderArrayList84 = com.google.common.collect.ImmutableList.of(fileLevelJsDocBuilderArray82);
        boolean boolean85 = strSet20.equals((java.lang.Object) fileLevelJsDocBuilderArrayList84);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet20.spliterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strIterableList65);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray82);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArrayList83);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArrayList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSpliterator86);
    }

    @Test
    public void test16998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16998");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = node4.isParamList();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean15 = node14.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object obj26 = node19.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node27 = node14.copyInformationFrom(node19);
        boolean boolean28 = node14.isOr();
        int int30 = node14.getIntProp(53);
        com.google.javascript.rhino.Node node31 = node14.cloneNode();
        boolean boolean32 = node31.wasEmptyNode();
        boolean boolean33 = node4.isEquivalentTo(node31);
        boolean boolean34 = node4.isGetElem();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(39, node4, 8, 15);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj43 = node41.getProp(43);
        boolean boolean44 = node41.isCall();
        int int45 = node41.getSourcePosition();
        java.lang.String str49 = node41.toString(false, true, false);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int54 = node53.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType55 = node53.getJSType();
        boolean boolean56 = node53.isDelProp();
        boolean boolean57 = node41.isEquivalentTo(node53);
        boolean boolean58 = node53.isInc();
        com.google.javascript.rhino.Node node59 = node53.getNext();
        com.google.javascript.rhino.Node node60 = node37.copyInformationFrom(node53);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 176180 + "'", int45 == 176180);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "STRING " + "'", str49, "STRING ");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test16999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16999");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder1.markName("NUMBER 0.0 [directives: []]", staticSourceFile10, 37, (int) '#');
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean17 = jSDocInfoBuilder15.isPopulatedWithFileOverview();
        boolean boolean18 = jSDocInfoBuilder15.isPopulated();
        boolean boolean19 = jSDocInfoBuilder15.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder21.recordTypedef(jSTypeExpression22);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordNoTypeCheck();
        boolean boolean27 = jSDocInfoBuilder25.isInterfaceRecorded();
        jSDocInfoBuilder25.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean32 = jSDocInfoBuilder25.recordIdGenerator();
        boolean boolean33 = jSDocInfoBuilder25.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder35.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        boolean boolean46 = node42.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node42, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray51 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray52 = (java.util.ArrayList<java.lang.String>[]) arrayListArray51;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = strListBuilder49.add((java.util.ArrayList<java.lang.String>[]) arrayListArray51);
        boolean boolean54 = jSTypeExpression48.equals((java.lang.Object) arrayListArray51);
        boolean boolean55 = jSDocInfoBuilder35.recordDefineType(jSTypeExpression48);
        boolean boolean56 = jSDocInfoBuilder25.recordThisType(jSTypeExpression48);
        boolean boolean57 = jSDocInfoBuilder21.recordThisType(jSTypeExpression48);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression48);
        boolean boolean59 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression58);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean65 = node64.isVar();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node70 = node64.copyInformationFromForTree(node69);
        com.google.javascript.rhino.Node node71 = node64.cloneTree();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(0, node64);
        boolean boolean73 = jSTypeExpression58.equals((java.lang.Object) node64);
        boolean boolean74 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression58);
        boolean boolean75 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean76 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean78 = jSDocInfoBuilder1.recordVersion("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(strListArray52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test17000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test17000");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node10 = node4.copyInformationFromForTree(node9);
        boolean boolean11 = node10.hasMoreThanOneChild();
        boolean boolean12 = node10.isQuotedString();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj18 = node16.getProp(43);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int23 = node22.getSourceOffset();
        com.google.javascript.rhino.Node node24 = node16.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node34 = node22.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(8, node10, node34, 32, (int) (short) 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        jSDocInfoBuilder40.markName("hi!", staticSourceFile44, (int) (short) 0, (int) (short) 100);
        boolean boolean48 = jSDocInfoBuilder40.recordNoTypeCheck();
        boolean boolean49 = jSDocInfoBuilder40.recordExpose();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node53.addChildrenToFront(node57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = jSDocInfoBuilder40.build(node57);
        boolean boolean60 = node57.isOptionalArg();
        com.google.javascript.rhino.Node node61 = node57.getParent();
        com.google.javascript.rhino.InputId inputId62 = null;
        node57.setInputId(inputId62);
        boolean boolean64 = node57.isNull();
        com.google.javascript.rhino.Node node65 = null;
        int int66 = node57.getIndexOfChild(node65);
        boolean boolean67 = node57.isVoid();
        boolean boolean68 = node57.isStringKey();
        com.google.javascript.rhino.Node node69 = node34.clonePropsFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(42, nodeArray75, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(44, nodeArray75);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(45, nodeArray75, (int) 'a', 48);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(8, nodeArray75, 12, 147494);
        node69.addChildToFront(node86);
        com.google.javascript.rhino.Node node88 = node69.getParent();
        node88.setVarArgs(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSDocInfo59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node88);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest30 {

    public static boolean debug = false;

    @Test
    public void test15001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15001");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str12 = stringPosition11.getItem();
        java.lang.String str13 = stringPosition11.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str15 = stringPosition14.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str17 = stringPosition16.getItem();
        java.lang.String str18 = stringPosition16.getItem();
        int int19 = stringPosition16.getPositionOnStartLine();
        int int20 = stringPosition16.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition22 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str24 = stringPosition23.getItem();
        stringPosition23.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str28 = stringPosition27.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        java.lang.String str31 = stringPosition29.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str33 = stringPosition32.getItem();
        java.lang.String str34 = stringPosition32.getItem();
        int int35 = stringPosition32.getPositionOnStartLine();
        int int36 = stringPosition32.getStartLine();
        int int37 = stringPosition32.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList38 = com.google.common.collect.ImmutableList.of(stringPosition8, stringPosition11, stringPosition14, stringPosition16, stringPosition21, stringPosition22, stringPosition23, stringPosition27, stringPosition29, stringPosition32);
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList41 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition32);
        stringPosition32.setItem("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNULL\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NULL\n");
        int int44 = stringPosition32.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(stringPositionList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(stringPositionList41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test15002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15002");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        jSDocInfoBuilder1.markText("[, hi!, , , hi!, , hi!, ]", 44, 49, 176129, 10);
        jSDocInfoBuilder1.markText("STRING  43 [jsdoc_info: JSDocInfo]\n", (int) (byte) 100, 4, 4095, 18);
        boolean boolean17 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.isPopulatedWithFileOverview();
        boolean boolean21 = jSDocInfoBuilder19.recordExpose();
        boolean boolean22 = jSDocInfoBuilder19.recordPreserveTry();
        boolean boolean23 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder19.recordExpose();
        boolean boolean25 = jSDocInfoBuilder19.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder27.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder27.markName("hi!", staticSourceFile31, (int) (short) 0, (int) (short) 100);
        boolean boolean35 = jSDocInfoBuilder27.recordNoTypeCheck();
        boolean boolean36 = jSDocInfoBuilder27.recordExterns();
        boolean boolean37 = jSDocInfoBuilder27.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = null;
        boolean boolean41 = jSDocInfoBuilder39.recordTypedef(jSTypeExpression40);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordNoTypeCheck();
        boolean boolean45 = jSDocInfoBuilder43.isInterfaceRecorded();
        jSDocInfoBuilder43.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean50 = jSDocInfoBuilder43.recordIdGenerator();
        boolean boolean51 = jSDocInfoBuilder43.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.isInterfaceRecorded();
        boolean boolean56 = jSDocInfoBuilder53.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj62 = node60.getProp(43);
        boolean boolean63 = node60.isCall();
        boolean boolean64 = node60.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = new com.google.javascript.rhino.JSTypeExpression(node60, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder67 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray69 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray70 = (java.util.ArrayList<java.lang.String>[]) arrayListArray69;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder71 = strListBuilder67.add((java.util.ArrayList<java.lang.String>[]) arrayListArray69);
        boolean boolean72 = jSTypeExpression66.equals((java.lang.Object) arrayListArray69);
        boolean boolean73 = jSDocInfoBuilder53.recordDefineType(jSTypeExpression66);
        boolean boolean74 = jSDocInfoBuilder43.recordThisType(jSTypeExpression66);
        boolean boolean75 = jSDocInfoBuilder39.recordThisType(jSTypeExpression66);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression66);
        boolean boolean77 = jSDocInfoBuilder27.recordTypedef(jSTypeExpression76);
        boolean boolean78 = jSTypeExpression76.isVarArgs();
        boolean boolean79 = jSTypeExpression76.isVarArgs();
        boolean boolean80 = jSDocInfoBuilder19.recordBaseType(jSTypeExpression76);
        boolean boolean81 = jSDocInfoBuilder1.recordThisType(jSTypeExpression76);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strListBuilder67);
        org.junit.Assert.assertNotNull(arrayListArray69);
        org.junit.Assert.assertNotNull(strListArray70);
        org.junit.Assert.assertNotNull(strListBuilder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test15003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15003");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean7 = jSDocInfoBuilder1.recordBlockDescription("[, hi!, , , hi!, , hi!, ]");
        boolean boolean9 = jSDocInfoBuilder1.recordReturnDescription("NUMBER 0.0 43");
        boolean boolean12 = jSDocInfoBuilder1.recordParameterDescription("OR  54\n", "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = node16.cloneNode();
        boolean boolean19 = node18.isGetElem();
        node18.addSuppression("");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        boolean boolean27 = node25.isBreak();
        int int28 = node25.getSourcePosition();
        com.google.javascript.rhino.Node node29 = node18.useSourceInfoFrom(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node25.getJSDocInfo();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node34.addChildrenToFront(node38);
        boolean boolean41 = node34.getBooleanProp(8);
        com.google.javascript.rhino.Node node42 = node25.clonePropsFrom(node34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = jSDocInfoBuilder1.build(node25);
        java.lang.String str44 = jSDocInfo43.toString();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo43.getModifies();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = strSet45.add("Node tree inequality:\nTree1:\nSTRING  43 [quoted: 1]\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING  43 [quoted: 1]\n\n\nSubtree2: STRING hi!\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 176129 + "'", int28 == 176129);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSDocInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "JSDocInfo" + "'", str44, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet45);
    }

    @Test
    public void test15004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15004");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        java.lang.String str50 = jSDocInfo42.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList51 = jSDocInfo42.getExtendedInterfaces();
        boolean boolean53 = jSDocInfo42.hasParameter("hi!");
        boolean boolean54 = jSDocInfo42.hasBaseType();
        boolean boolean55 = jSDocInfo42.isExterns();
        boolean boolean56 = jSDocInfo42.isNoSideEffects();
        boolean boolean57 = jSDocInfo42.isIdGenerator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(jSTypeExpressionList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test15005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15005");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordReturnDescription("THROW");
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordNoTypeCheck();
        boolean boolean13 = jSDocInfoBuilder11.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder15.recordThisType(jSTypeExpression17);
        boolean boolean19 = jSDocInfoBuilder15.recordOverride();
        boolean boolean20 = jSDocInfoBuilder15.recordExpose();
        boolean boolean21 = jSDocInfoBuilder15.recordExport();
        boolean boolean22 = jSDocInfoBuilder15.isDescriptionRecorded();
        boolean boolean23 = jSDocInfoBuilder15.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordJavaDispatch();
        jSDocInfoBuilder26.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordJavaDispatch();
        boolean boolean37 = jSDocInfoBuilder35.recordNoCompile();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        boolean boolean46 = node42.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node42, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray51 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray52 = (java.util.ArrayList<java.lang.String>[]) arrayListArray51;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = strListBuilder49.add((java.util.ArrayList<java.lang.String>[]) arrayListArray51);
        boolean boolean54 = jSTypeExpression48.equals((java.lang.Object) arrayListArray51);
        boolean boolean55 = jSDocInfoBuilder35.recordParameter("", jSTypeExpression48);
        boolean boolean56 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression48);
        boolean boolean57 = jSTypeExpression48.isVarArgs();
        boolean boolean58 = jSDocInfoBuilder15.recordParameter("STRING \n", jSTypeExpression48);
        boolean boolean59 = jSDocInfoBuilder11.recordThisType(jSTypeExpression48);
        boolean boolean60 = jSDocInfoBuilder1.recordThisType(jSTypeExpression48);
        boolean boolean61 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(strListArray52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test15006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15006");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        java.lang.String str27 = jSDocInfo20.getLendsName();
        boolean boolean28 = jSDocInfo20.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        java.lang.String str30 = jSDocInfo20.getFileOverview();
        java.util.Set<java.lang.String> strSet31 = jSDocInfo20.getModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo20.getThrownTypes();
        boolean boolean34 = jSDocInfo20.hasParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test15007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15007");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        boolean boolean18 = jSDocInfo14.hasType();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = jSDocInfo14.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = strList19.reverse();
        java.util.stream.Stream<java.lang.String> strStream21 = strList19.parallelStream();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList19.replaceAll(strUnaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strStream21);
    }

    @Test
    public void test15008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15008");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.isScript();
        boolean boolean14 = node11.wasEmptyNode();
        java.lang.Appendable appendable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            node11.appendStringTree(appendable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15009");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(176180, "Node tree inequality:\nTree1:\nSTRING STRING  43 [synthetic: 1] 35\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING STRING  43 [synthetic: 1] 35\n\n\nSubtree2: STRING  43\n");
        boolean boolean3 = node2.isGetElem();
        node2.setSourceFileForTesting("FALSE 43");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test15010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15010");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = node3.getLastSibling();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (byte) 10, 50, 30);
        boolean boolean14 = node13.isLocalResultCall();
        java.lang.String str18 = node13.toString(true, true, true);
        boolean boolean19 = node13.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean25 = node24.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        java.lang.Object obj36 = node29.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        com.google.javascript.rhino.Node node44 = node41.removeChildren();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean49 = node48.isDebugger();
        com.google.javascript.rhino.Node node50 = node48.getFirstChild();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int61 = node60.getSourceOffset();
        com.google.javascript.rhino.Node node62 = node54.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(38, node29, node41, node48, node54);
        int int64 = node48.getType();
        com.google.javascript.rhino.Node node65 = node13.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node node66 = node9.useSourceInfoIfMissingFromForTree(node48);
        boolean boolean67 = node66.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 10.0 50" + "'", str18, "NUMBER 10.0 50");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 39 + "'", int64 == 39);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test15011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15011");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getLendsName();
        boolean boolean30 = jSDocInfo20.isNoTypeCheck();
        boolean boolean31 = jSDocInfo20.isNoSideEffects();
        java.lang.String str32 = jSDocInfo20.getLendsName();
        boolean boolean33 = jSDocInfo20.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo20.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
    }

    @Test
    public void test15012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15012");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean33 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean38 = node37.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node39 = node37.cloneNode();
        boolean boolean40 = node37.hasChildren();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(15);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node42.isGetProp();
        jSDocInfo20.setAssociatedNode(node42);
        java.util.Collection<java.lang.String> strCollection46 = jSDocInfo20.getReferences();
        boolean boolean47 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean48 = jSDocInfo20.isImplicitCast();
        java.lang.String str49 = jSDocInfo20.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strCollection46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test15013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15013");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder6.markName("hi!", staticSourceFile10, (int) (short) 0, (int) (short) 100);
        boolean boolean14 = jSDocInfoBuilder6.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node19.addChildrenToFront(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder6.build(node23);
        java.lang.String str26 = jSDocInfo25.getMeaning();
        boolean boolean27 = jSDocInfo25.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getExtendedInterfaces();
        boolean boolean29 = jSDocInfo25.isImplicitCast();
        node3.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder32.markName("hi!", staticSourceFile36, (int) (short) 0, (int) (short) 100);
        boolean boolean40 = jSDocInfoBuilder32.recordNoTypeCheck();
        boolean boolean41 = jSDocInfoBuilder32.recordExpose();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node45.addChildrenToFront(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = jSDocInfoBuilder32.build(node49);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj57 = node55.getProp(43);
        boolean boolean58 = node55.isCall();
        boolean boolean59 = node55.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = new com.google.javascript.rhino.JSTypeExpression(node55, "STRING ");
        boolean boolean62 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression61);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder64.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder64.markName("hi!", staticSourceFile68, (int) (short) 0, (int) (short) 100);
        boolean boolean72 = jSDocInfoBuilder64.recordNoTypeCheck();
        boolean boolean73 = jSDocInfoBuilder64.recordExpose();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node77.addChildrenToFront(node81);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = jSDocInfoBuilder64.build(node81);
        boolean boolean84 = node81.isOptionalArg();
        com.google.javascript.rhino.Node node85 = node81.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = jSDocInfoBuilder32.build(node85);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean88 = jSDocInfoBuilder32.recordVisibility(visibility87);
        jSDocInfo25.setVisibility(visibility87);
        boolean boolean90 = jSDocInfo25.isConstructor();
        java.util.Set<java.lang.String> strSet91 = jSDocInfo25.getParameterNames();
        java.lang.String str92 = jSDocInfo25.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility93 = jSDocInfo25.getVisibility();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSDocInfo51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNotNull(jSDocInfo86);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + visibility93 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility93.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
    }

    @Test
    public void test15014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15014");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(42, nodeArray2, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(39, nodeArray2, (int) '4', 32);
        int int9 = node8.getLength();
        node8.setSourceEncodedPosition(49);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int17 = node16.getSourceOffset();
        double double18 = node16.getDouble();
        boolean boolean19 = node16.isFor();
        java.util.Set<java.lang.String> strSet20 = node16.getDirectives();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(53, node16);
        boolean boolean22 = node21.isEmpty();
        boolean boolean23 = node21.isDebugger();
        node21.setSourceEncodedPositionForTree(11);
        com.google.javascript.rhino.Node node26 = node8.clonePropsFrom(node21);
        boolean boolean27 = node21.isBreak();
        boolean boolean28 = node21.isBreak();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15015");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node7.isComma();
        boolean boolean10 = node7.isQuotedString();
        com.google.javascript.rhino.Node node11 = node7.getFirstChild();
        boolean boolean12 = node7.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15016");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("OR  54\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        java.lang.Object[] objArray39 = strSet36.toArray();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        java.lang.Object[] objArray49 = strSet46.toArray();
        boolean boolean50 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet46);
        java.lang.Object[] objArray51 = strSet36.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder53.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        jSDocInfoBuilder53.markName("hi!", staticSourceFile57, (int) (short) 0, (int) (short) 100);
        boolean boolean61 = jSDocInfoBuilder53.recordNoTypeCheck();
        boolean boolean62 = jSDocInfoBuilder53.recordExpose();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node66.addChildrenToFront(node70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = jSDocInfoBuilder53.build(node70);
        java.lang.String str73 = jSDocInfo72.getMeaning();
        boolean boolean74 = jSDocInfo72.isExport();
        boolean boolean75 = strSet36.equals((java.lang.Object) jSDocInfo72);
        boolean boolean76 = jSDocInfo72.isConstant();
        boolean boolean78 = jSDocInfo72.hasDescriptionForParameter("NUMBER 0.0 [directives: []]");
        boolean boolean79 = strList29.contains((java.lang.Object) jSDocInfo72);
        boolean boolean80 = strList29.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor82 = strList29.listIterator(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (100) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSDocInfo72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test15017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15017");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNull();
        boolean boolean6 = node4.isThis();
        boolean boolean7 = node4.isComma();
        node4.setVarArgs(false);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean15 = node14.isVar();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean38 = node31.isThrow();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(35, node14, node31);
        node39.setLength(31);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean46 = node45.isNull();
        boolean boolean47 = node45.isFromExterns();
        boolean boolean48 = node45.isFunction();
        com.google.javascript.rhino.Node node49 = node45.cloneTree();
        boolean boolean50 = node49.isFor();
        com.google.javascript.rhino.Node node51 = node39.srcrefTree(node49);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet58);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node55.children();
        boolean boolean62 = node39.hasChild(node55);
        int int63 = node39.getLength();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(10, node4, node39, 7, 15);
        boolean boolean68 = node4.isParamList();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 31 + "'", int63 == 31);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test15018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15018");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder10.recordNoCompile();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        boolean boolean20 = node17.isCall();
        boolean boolean21 = node17.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node17, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray26 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray27 = (java.util.ArrayList<java.lang.String>[]) arrayListArray26;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = strListBuilder24.add((java.util.ArrayList<java.lang.String>[]) arrayListArray26);
        boolean boolean29 = jSTypeExpression23.equals((java.lang.Object) arrayListArray26);
        boolean boolean30 = jSDocInfoBuilder10.recordParameter("", jSTypeExpression23);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression23);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = com.google.common.collect.ImmutableList.of(jSTypeExpression23);
        boolean boolean34 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression23, "");
        boolean boolean35 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean36 = jSDocInfoBuilder1.shouldParseDocumentation();
        jSDocInfoBuilder1.recordOriginalCommentString("[[, hi!, , , hi!, , hi!, ], , [, hi!, , , hi!, , hi!, ], hi!]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertNotNull(arrayListArray26);
        org.junit.Assert.assertNotNull(strListArray27);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression31);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15019");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition69 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker66.getDescription();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(stringPosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(stringPosition71);
    }

    @Test
    public void test15020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15020");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.isNoShadow();
        java.lang.String str26 = jSDocInfo20.getSourceName();
        boolean boolean27 = jSDocInfo20.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test15021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15021");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile11, (int) (short) 100, 8);
        boolean boolean15 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean16 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test15022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15022");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        boolean boolean18 = node9.isDefaultCase();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        int int25 = node22.getType();
        boolean boolean26 = node22.isGetterDef();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node28.getAncestors();
        com.google.javascript.rhino.Node node31 = node22.srcref(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean36 = node35.isVar();
        node35.putBooleanProp(30, false);
        boolean boolean40 = node35.isSwitch();
        boolean boolean41 = node35.isUnscopedQualifiedName();
        boolean boolean42 = node35.hasChildren();
        boolean boolean43 = node35.isDefaultCase();
        int int45 = node35.getIntProp((int) '#');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node35.children();
        boolean boolean47 = node35.isIn();
        node35.setSourceEncodedPositionForTree((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, node9, node22, node35);
        boolean boolean51 = node35.wasEmptyNode();
        node35.setLineno((int) (short) 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 40 + "'", int25 == 40);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test15023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15023");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.isImplicitCast();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getModifies();
        java.lang.Object[] objArray26 = strSet25.toArray();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][] fileLevelJsDocBuilderArray27 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][]> fileLevelJsDocBuilderArrayList28 = com.google.common.collect.ImmutableList.copyOf(fileLevelJsDocBuilderArray27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][] fileLevelJsDocBuilderArray29 = strSet25.toArray(fileLevelJsDocBuilderArray27);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet25.spliterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray27);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArrayList28);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray29);
        org.junit.Assert.assertNotNull(strSpliterator30);
    }

    @Test
    public void test15024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15024");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.rhino.Node node36 = node15.getChildBefore(node35);
        boolean boolean37 = node15.isVarArgs();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        node45.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node45.setJSType(jSType48);
        java.lang.String str50 = node45.getString();
        boolean boolean51 = node45.isName();
        int int52 = node45.getLength();
        com.google.javascript.rhino.Node node53 = node15.copyInformationFrom(node45);
        node45.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder56 = node45.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            int int58 = node45.getExistingIntProp(176129);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 176129");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder56);
    }

    @Test
    public void test15025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15025");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.setIsSyntheticBlock(true);
        boolean boolean6 = node3.wasEmptyNode();
        boolean boolean7 = node3.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15026");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean8 = jSDocInfoBuilder1.recordParameterDescription("", "STRING  43");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isParamList();
        node12.setType(176129);
        jSDocInfoBuilder1.markTypeNode(node12, 1, (int) ' ', (int) (byte) 100, (-2147483596), false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15027");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.containsDeclaration();
        boolean boolean19 = jSDocInfo14.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo14.getVisibility();
        boolean boolean21 = jSDocInfo14.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo14.getThisType();
        com.google.javascript.rhino.Node node23 = jSDocInfo14.getAssociatedNode();
        int int24 = jSDocInfo14.getParameterCount();
        boolean boolean25 = jSDocInfo14.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection26 = jSDocInfo14.getReferences();
        boolean boolean27 = jSDocInfo14.isDefine();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15028");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        boolean boolean13 = node3.isWith();
        boolean boolean14 = node3.isThrow();
        boolean boolean15 = node3.isIf();
        boolean boolean16 = node3.isString();
        boolean boolean17 = node3.isOr();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node3.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
    }

    @Test
    public void test15029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15029");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        jSDocInfoBuilder1.markText("[, hi!, , , hi!, , hi!, ]", 44, 49, 176129, 10);
        boolean boolean12 = jSDocInfoBuilder1.recordDescription("");
        boolean boolean14 = jSDocInfoBuilder1.recordLends("[, hi!, , , hi!, , hi!, ]");
        boolean boolean15 = jSDocInfoBuilder1.recordExterns();
        boolean boolean16 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordJavaDispatch();
        boolean boolean20 = jSDocInfoBuilder18.recordNoCompile();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        boolean boolean28 = node25.isCall();
        boolean boolean29 = node25.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = new com.google.javascript.rhino.JSTypeExpression(node25, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder32 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray34 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray35 = (java.util.ArrayList<java.lang.String>[]) arrayListArray34;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder36 = strListBuilder32.add((java.util.ArrayList<java.lang.String>[]) arrayListArray34);
        boolean boolean37 = jSTypeExpression31.equals((java.lang.Object) arrayListArray34);
        boolean boolean38 = jSDocInfoBuilder18.recordParameter("", jSTypeExpression31);
        boolean boolean39 = jSTypeExpression31.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression31);
        boolean boolean41 = jSTypeExpression40.isOptionalArg();
        boolean boolean43 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression40, "STRING  43 [quoted: 1]");
        boolean boolean44 = jSTypeExpression40.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strListBuilder32);
        org.junit.Assert.assertNotNull(arrayListArray34);
        org.junit.Assert.assertNotNull(strListArray35);
        org.junit.Assert.assertNotNull(strListBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test15030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15030");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        boolean boolean16 = node3.isEquivalentTo(node15);
        boolean boolean17 = node3.isIn();
        node3.setWasEmptyNode(true);
        boolean boolean20 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (byte) 10, 50, 30);
        boolean boolean25 = node24.isLocalResultCall();
        java.lang.String str29 = node24.toString(true, true, true);
        boolean boolean30 = node24.isCatch();
        node24.setSourceEncodedPositionForTree(37);
        boolean boolean33 = node24.hasMoreThanOneChild();
        boolean boolean34 = node24.isWhile();
        boolean boolean35 = node3.hasChild(node24);
        boolean boolean36 = node3.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER 10.0 50" + "'", str29, "NUMBER 10.0 50");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15031");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearAllFlags();
    }

    @Test
    public void test15032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15032");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(44, "STRING  43 [synthetic: 1]");
        int int3 = node2.getType();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet10);
        java.lang.Object[] objArray13 = strSet10.toArray();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        boolean boolean24 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isOptionalArg();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node35.addChildrenToFront(node39);
        boolean boolean41 = node35.isGetterDef();
        boolean boolean42 = node35.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj48 = node46.getProp(43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        com.google.javascript.rhino.Node node54 = node46.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet61);
        com.google.javascript.rhino.Node node64 = node52.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(32, node35, node52);
        boolean boolean66 = node65.isExprResult();
        boolean boolean67 = node65.isFunction();
        com.google.javascript.rhino.Node node68 = node28.srcrefTree(node65);
        boolean boolean69 = strSet20.remove((java.lang.Object) node65);
        com.google.javascript.rhino.Node node70 = node2.srcrefTree(node65);
        int int71 = node2.getSourceOffset();
        boolean boolean72 = node2.isBlock();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 44 + "'", int3 == 44);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test15033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15033");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.hasFileOverview();
        boolean boolean26 = jSDocInfo20.isConstant();
        java.lang.String str27 = jSDocInfo20.getDeprecationReason();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection28 = jSDocInfo20.getMarkers();
        boolean boolean29 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean30 = jSDocInfo20.isDefine();
        boolean boolean31 = jSDocInfo20.isHidden();
        boolean boolean32 = jSDocInfo20.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(markerCollection28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test15034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15034");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 100);
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test15035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15035");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = jSTypeExpression38.equals((java.lang.Object) node49);
        boolean boolean51 = jSDocInfoBuilder22.recordExtendedInterface(jSTypeExpression38);
        boolean boolean52 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression38);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean55 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean56 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 10, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", 51, 46);
        boolean boolean62 = node61.isHook();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = jSDocInfoBuilder1.build(node61);
        com.google.javascript.rhino.Node node64 = node61.getFirstChild();
        java.lang.String str65 = node61.getQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSDocInfo63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test15036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15036");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        boolean boolean30 = jSDocInfo20.isNoSideEffects();
        jSDocInfo20.setDeprecated(true);
        boolean boolean33 = jSDocInfo20.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test15037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15037");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = jSDocInfo42.getBaseType();
        java.lang.String str51 = jSDocInfo42.getDeprecationReason();
        boolean boolean52 = jSDocInfo42.isNoTypeCheck();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(jSTypeExpression50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test15038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15038");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getEndLine();
        int int8 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test15039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15039");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        boolean boolean10 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordNoTypeCheck();
        boolean boolean14 = jSDocInfoBuilder12.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder16.recordThisType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder16.recordOverride();
        boolean boolean21 = jSDocInfoBuilder16.recordExpose();
        boolean boolean22 = jSDocInfoBuilder16.recordExport();
        boolean boolean23 = jSDocInfoBuilder16.isDescriptionRecorded();
        boolean boolean24 = jSDocInfoBuilder16.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.recordJavaDispatch();
        jSDocInfoBuilder27.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.recordJavaDispatch();
        boolean boolean38 = jSDocInfoBuilder36.recordNoCompile();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        boolean boolean46 = node43.isCall();
        boolean boolean47 = node43.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node43, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray52 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray53 = (java.util.ArrayList<java.lang.String>[]) arrayListArray52;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder54 = strListBuilder50.add((java.util.ArrayList<java.lang.String>[]) arrayListArray52);
        boolean boolean55 = jSTypeExpression49.equals((java.lang.Object) arrayListArray52);
        boolean boolean56 = jSDocInfoBuilder36.recordParameter("", jSTypeExpression49);
        boolean boolean57 = jSDocInfoBuilder27.recordThrowType(jSTypeExpression49);
        boolean boolean58 = jSTypeExpression49.isVarArgs();
        boolean boolean59 = jSDocInfoBuilder16.recordParameter("STRING \n", jSTypeExpression49);
        boolean boolean60 = jSDocInfoBuilder12.recordThisType(jSTypeExpression49);
        boolean boolean61 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression49);
        com.google.javascript.rhino.Node node62 = jSTypeExpression49.getRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertNotNull(arrayListArray52);
        org.junit.Assert.assertNotNull(strListArray53);
        org.junit.Assert.assertNotNull(strListBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test15040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15040");
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = com.google.common.collect.ImmutableList.of("NUMBER 0.0 43\n");
        // The following exception was thrown during execution in test generation
        try {
            strList1.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList1);
    }

    @Test
    public void test15041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15041");
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = com.google.common.collect.ImmutableList.of("", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n", "OR  54\n", "hi!", "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "[]", "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        java.util.stream.Stream<java.lang.String> strStream12 = strList11.parallelStream();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node16.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node23 = node16.getChildAtIndex(0);
        com.google.javascript.rhino.Node node24 = node16.removeChildren();
        boolean boolean25 = node16.isDec();
        com.google.javascript.rhino.InputId inputId26 = node16.getInputId();
        boolean boolean27 = node16.isScript();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet44);
        java.lang.Object[] objArray47 = strSet44.toArray();
        boolean boolean48 = strSet34.retainAll((java.util.Collection<java.lang.String>) strSet44);
        strSet44.clear();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet56);
        java.lang.Object[] objArray59 = strSet56.toArray();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node63.setDirectives((java.util.Set<java.lang.String>) strSet66);
        java.lang.Object[] objArray69 = strSet66.toArray();
        boolean boolean70 = strSet56.retainAll((java.util.Collection<java.lang.String>) strSet66);
        boolean boolean71 = strSet44.removeAll((java.util.Collection<java.lang.String>) strSet56);
        boolean boolean73 = strSet44.add("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        java.util.stream.Stream<java.lang.String> strStream74 = strSet44.parallelStream();
        boolean boolean75 = strSet44.isEmpty();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordNoTypeCheck();
        boolean boolean79 = jSDocInfoBuilder77.isInterfaceRecorded();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj85 = node83.getProp(43);
        int int86 = node83.getType();
        boolean boolean87 = node83.isGetterDef();
        node83.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = jSDocInfoBuilder77.build(node83);
        boolean boolean91 = jSDocInfo90.isNoSideEffects();
        boolean boolean92 = jSDocInfo90.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList93 = jSDocInfo90.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet94 = jSDocInfo90.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator95 = strSet94.spliterator();
        boolean boolean96 = strSet44.containsAll((java.util.Collection<java.lang.String>) strSet94);
        node16.setDirectives(strSet94);
        boolean boolean98 = strList11.containsAll((java.util.Collection<java.lang.String>) strSet94);
        com.google.common.collect.ImmutableList<java.lang.String> strList99 = strList11.asList();
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 40 + "'", int86 == 40);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(jSDocInfo90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList93);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(strSpliterator95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test15042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15042");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("STRING  43 [jsdoc_info: JSDocInfo]\n");
        boolean boolean10 = jSDocInfoBuilder1.recordReturnDescription("STRING  43 [empty_block: 1]");
        boolean boolean11 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test15043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15043");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        com.google.javascript.rhino.Node node20 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isOnlyModifiesThisCall();
        boolean boolean33 = node30.isDefaultCase();
        boolean boolean34 = node3.hasChild(node30);
        int int35 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node3.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test15044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15044");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordJavaDispatch();
        jSDocInfoBuilder12.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordJavaDispatch();
        boolean boolean23 = jSDocInfoBuilder21.recordNoCompile();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray37 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray38 = (java.util.ArrayList<java.lang.String>[]) arrayListArray37;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = strListBuilder35.add((java.util.ArrayList<java.lang.String>[]) arrayListArray37);
        boolean boolean40 = jSTypeExpression34.equals((java.lang.Object) arrayListArray37);
        boolean boolean41 = jSDocInfoBuilder21.recordParameter("", jSTypeExpression34);
        boolean boolean42 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression34);
        boolean boolean43 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression34);
        boolean boolean45 = jSDocInfoBuilder1.hasParameter("[, hi!, , , hi!, , hi!, ]");
        boolean boolean46 = jSDocInfoBuilder1.isPopulated();
        boolean boolean47 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean52 = node51.isVar();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node57 = node51.copyInformationFromForTree(node56);
        com.google.javascript.rhino.Node node58 = node51.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node58, "STRING  43");
        boolean boolean61 = jSTypeExpression60.isVarArgs();
        boolean boolean62 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.Node node63 = jSTypeExpression60.getRoot();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertNotNull(arrayListArray37);
        org.junit.Assert.assertNotNull(strListArray38);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test15045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15045");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        node3.setIsSyntheticBlock(true);
        node3.detachChildren();
        com.google.javascript.rhino.Node node15 = node3.cloneTree();
        boolean boolean16 = node3.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test15046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15046");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node11 = node4.getChildAtIndex(0);
        boolean boolean12 = node11.isFor();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node11.setStaticSourceFile(staticSourceFile13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.Node node36 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean37 = node36.isContinue();
        boolean boolean38 = node36.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node39 = node11.srcrefTree(node36);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean45 = node44.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node46 = node44.cloneNode();
        boolean boolean47 = node46.isGetElem();
        node46.addSuppression("");
        int int50 = node46.getType();
        boolean boolean51 = node46.isInc();
        boolean boolean52 = node46.isNE();
        com.google.javascript.rhino.Node node54 = node46.getChildAtIndex((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(8, node39, node54, 39, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node54);
    }

    @Test
    public void test15047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15047");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        boolean boolean63 = strList19.containsAll((java.util.Collection<java.lang.String>) strList62);
        java.util.ListIterator<java.lang.String> strItor64 = strList62.listIterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder66 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean68 = jSDocInfoBuilder66.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = null;
        jSDocInfoBuilder66.markName("hi!", staticSourceFile70, (int) (short) 0, (int) (short) 100);
        boolean boolean74 = jSDocInfoBuilder66.recordNoTypeCheck();
        boolean boolean75 = jSDocInfoBuilder66.recordExpose();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node79.addChildrenToFront(node83);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = jSDocInfoBuilder66.build(node83);
        java.lang.String str86 = jSDocInfo85.getMeaning();
        boolean boolean87 = jSDocInfo85.isExport();
        boolean boolean89 = jSDocInfo85.hasDescriptionForParameter("STRING ");
        boolean boolean90 = jSDocInfo85.isNoCompile();
        int int91 = strList62.lastIndexOf((java.lang.Object) boolean90);
        java.util.ListIterator<java.lang.String> strItor92 = strList62.listIterator();
        java.util.ListIterator<java.lang.String> strItor93 = strList62.listIterator();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(jSDocInfo85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertNotNull(strItor93);
    }

    @Test
    public void test15048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15048");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int20 = node19.getSourceOffset();
        com.google.javascript.rhino.Node node21 = node13.useSourceInfoIfMissingFromForTree(node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean32 = node31.isContinue();
        boolean boolean33 = node31.isOnlyModifiesThisCall();
        boolean boolean34 = node31.isDefaultCase();
        boolean boolean35 = node4.hasChild(node31);
        java.lang.String str39 = node4.toString(false, true, true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node4.siblings();
        node4.setOptionalArg(false);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean47 = node46.isVar();
        node46.putBooleanProp(30, false);
        boolean boolean51 = node46.isSwitch();
        boolean boolean52 = node46.isIn();
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNot();
        boolean boolean55 = node46.isNumber();
        int int56 = node46.getSideEffectFlags();
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(42, nodeArray62, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(49, nodeArray62, 53, 43);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(176180, nodeArray62, 41, 38);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray62);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(26, nodeArray62);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean78 = node77.isVar();
        node77.putBooleanProp(30, false);
        boolean boolean82 = node77.isSwitch();
        boolean boolean83 = node77.isIn();
        boolean boolean84 = node77.isIn();
        boolean boolean85 = node77.isOr();
        com.google.javascript.rhino.Node node86 = node77.getLastSibling();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(46, node4, node46, node73, node77);
        boolean boolean88 = node87.isNew();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 0.0 [directives: []]" + "'", str39, "NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test15049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15049");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node2 = namePosition1.getItem();
        int int3 = namePosition1.getStartLine();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean8 = node7.isNull();
        boolean boolean9 = node7.isSyntheticBlock();
        namePosition1.setItem(node7);
        int int11 = namePosition1.getStartLine();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(0, "[]");
        namePosition1.setItem(node14);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node28 = node25.cloneNode();
        boolean boolean29 = node28.isName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 1, node14, node28, 0, (int) '4');
        boolean boolean33 = node28.isString();
        java.lang.String str34 = node28.getSourceFileName();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test15050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15050");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder7.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder7.markName("hi!", staticSourceFile11, (int) (short) 0, (int) (short) 100);
        boolean boolean15 = jSDocInfoBuilder7.recordNoTypeCheck();
        boolean boolean16 = jSDocInfoBuilder7.recordExpose();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node20.addChildrenToFront(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = jSDocInfoBuilder7.build(node24);
        java.lang.String str27 = jSDocInfo26.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo26.getTemplateTypeNames();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strList29.spliterator();
        boolean boolean32 = strList29.equals((java.lang.Object) 100.0d);
        boolean boolean33 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList29);
        boolean boolean34 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean35 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean37 = jSDocInfoBuilder1.recordMeaning("NUMBER 0.0 43");
        boolean boolean39 = jSDocInfoBuilder1.addReference("NUMBER 0.0\n");
        boolean boolean41 = jSDocInfoBuilder1.recordMeaning("TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test15051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15051");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test15052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15052");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        boolean boolean26 = jSDocInfo20.isNoAlias();
        boolean boolean27 = jSDocInfo20.isNoSideEffects();
        boolean boolean28 = jSDocInfo20.isHidden();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo20.getParameterNames();
        boolean boolean30 = jSDocInfo20.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15053");
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = com.google.common.collect.ImmutableList.of("STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "", "STRING ", "STRING ", "hi!");
        java.lang.Object[] objArray10 = strList9.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = strList9.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = strList11.remove(38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test15054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15054");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean9 = jSDocInfoBuilder7.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        com.google.javascript.rhino.Node node32 = jSTypeExpression24.getRoot();
        boolean boolean34 = jSDocInfoBuilder7.recordThrowDescription(jSTypeExpression24, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.isInterfaceRecorded();
        boolean boolean39 = jSDocInfoBuilder36.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        boolean boolean46 = node43.isCall();
        boolean boolean47 = node43.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node43, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray52 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray53 = (java.util.ArrayList<java.lang.String>[]) arrayListArray52;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder54 = strListBuilder50.add((java.util.ArrayList<java.lang.String>[]) arrayListArray52);
        boolean boolean55 = jSTypeExpression49.equals((java.lang.Object) arrayListArray52);
        boolean boolean56 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression49);
        boolean boolean57 = jSDocInfoBuilder7.recordEnumParameterType(jSTypeExpression49);
        boolean boolean58 = jSTypeExpression49.isOptionalArg();
        boolean boolean59 = jSTypeExpression49.isVarArgs();
        boolean boolean60 = jSTypeExpression49.isOptionalArg();
        boolean boolean61 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression49);
        boolean boolean63 = jSDocInfoBuilder1.recordLends("Node tree inequality:\nTree1:\nSTRING  43 [directives: []]\n\n\nTree2:\nTHIS\n\n\nSubtree1: STRING  43 [directives: []]\n\n\nSubtree2: THIS\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertNotNull(arrayListArray52);
        org.junit.Assert.assertNotNull(strListArray53);
        org.junit.Assert.assertNotNull(strListBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test15055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15055");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        boolean boolean11 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean14 = jSDocInfoBuilder1.recordLends("STRING  43 [source_file: NUMBER 0.0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15056");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = new com.google.javascript.rhino.JSTypeExpression(node34, "NUMBER 0.0");
        boolean boolean38 = node34.isGetterDef();
        boolean boolean39 = node34.isTypeOf();
        boolean boolean40 = node34.hasMoreThanOneChild();
        // The following exception was thrown during execution in test generation
        try {
            node34.setSideEffectFlags(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test15057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15057");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        boolean boolean10 = node9.hasMoreThanOneChild();
        boolean boolean11 = node9.isQuotedString();
        int int12 = node9.getSourcePosition();
        com.google.javascript.rhino.Node node13 = node9.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = node9.getExistingIntProp(29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 29");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test15058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15058");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = jSTypeExpression38.equals((java.lang.Object) node49);
        boolean boolean51 = jSDocInfoBuilder22.recordExtendedInterface(jSTypeExpression38);
        boolean boolean52 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression38);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder56.isInterfaceRecorded();
        boolean boolean59 = jSDocInfoBuilder56.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj65 = node63.getProp(43);
        boolean boolean66 = node63.isCall();
        boolean boolean67 = node63.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = new com.google.javascript.rhino.JSTypeExpression(node63, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder70 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray72 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray73 = (java.util.ArrayList<java.lang.String>[]) arrayListArray72;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder74 = strListBuilder70.add((java.util.ArrayList<java.lang.String>[]) arrayListArray72);
        boolean boolean75 = jSTypeExpression69.equals((java.lang.Object) arrayListArray72);
        boolean boolean76 = jSDocInfoBuilder56.recordDefineType(jSTypeExpression69);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition77 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int78 = namePosition77.getEndLine();
        int int79 = namePosition77.getStartLine();
        com.google.javascript.rhino.Node node80 = namePosition77.getItem();
        boolean boolean81 = jSTypeExpression69.equals((java.lang.Object) node80);
        boolean boolean82 = jSTypeExpression69.isOptionalArg();
        boolean boolean83 = jSDocInfoBuilder1.recordThisType(jSTypeExpression69);
        boolean boolean85 = jSDocInfoBuilder1.recordFileOverview("NUMBER 0.0 43 [directives: []]\n");
        boolean boolean86 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strListBuilder70);
        org.junit.Assert.assertNotNull(arrayListArray72);
        org.junit.Assert.assertNotNull(strListArray73);
        org.junit.Assert.assertNotNull(strListBuilder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test15059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15059");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", 4, 176129);
        int int4 = node3.getSideEffectFlags();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node3.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node3.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15060");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean10 = node9.isVar();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node15 = node9.copyInformationFromForTree(node14);
        boolean boolean16 = node15.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = jSDocInfoBuilder1.build(node15);
        boolean boolean18 = jSDocInfoBuilder1.recordOverride();
        boolean boolean19 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean20 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean22 = jSDocInfoBuilder1.recordDeprecationReason("NUMBER 0.0 43\n    STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test15061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15061");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0);
        jSDocInfo42.setAssociatedNode(node77);
        int int79 = jSDocInfo42.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = jSDocInfo42.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo42.getParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.lang.String str83 = jSDocInfo42.getReturnDescription();
        boolean boolean84 = jSDocInfo42.hasEnumParameterType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(jSTypeExpression80);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test15062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15062");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isFromExterns();
        boolean boolean11 = node3.isNot();
        boolean boolean12 = node3.isNumber();
        boolean boolean13 = node3.isDefaultCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15063");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("");
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str26 = strList25.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = strList25.reverse();
        int int28 = strList25.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder30.markName("hi!", staticSourceFile34, (int) (short) 0, (int) (short) 100);
        boolean boolean38 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean39 = jSDocInfoBuilder30.recordExpose();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder30.build(node47);
        boolean boolean50 = jSDocInfo49.isExport();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean55 = node54.isOptionalArg();
        com.google.javascript.rhino.Node node56 = node54.getNext();
        jSDocInfo49.setAssociatedNode(node56);
        jSDocInfo49.setLicense("STRING ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo49.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean62 = jSDocInfo49.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility63 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo49.setVisibility(visibility63);
        boolean boolean65 = strList25.equals((java.lang.Object) jSDocInfo49);
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = strList25.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList67 = strList25.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = strList67.set(30, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nNUMBER 10.0 52\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: NUMBER 10.0 52\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + visibility63 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility63.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strList67);
    }

    @Test
    public void test15064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15064");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor66 = strList62.listIterator();
        java.util.Collection<java.lang.String> strCollection67 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = strList62.containsAll(strCollection67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strItor66);
    }

    @Test
    public void test15065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15065");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean26 = jSDocInfo20.hasDescriptionForParameter("[, hi!, , , hi!, , hi!, ]");
        boolean boolean27 = jSDocInfo20.hasFileOverview();
        java.lang.String str28 = jSDocInfo20.getVersion();
        boolean boolean29 = jSDocInfo20.isNoSideEffects();
        boolean boolean30 = jSDocInfo20.isNoCompile();
        boolean boolean31 = jSDocInfo20.isNoSideEffects();
        boolean boolean32 = jSDocInfo20.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test15066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15066");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node7.addChildrenToFront(node11);
        boolean boolean13 = node7.isGetterDef();
        boolean boolean14 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.Node node36 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(32, node7, node24);
        boolean boolean38 = node37.isExprResult();
        boolean boolean39 = node37.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = jSDocInfoBuilder1.build(node37);
        jSDocInfo40.setLicense("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        java.util.Set<java.lang.String> strSet43 = jSDocInfo40.getParameterNames();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSDocInfo40);
        org.junit.Assert.assertNotNull(strSet43);
    }

    @Test
    public void test15067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15067");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isExterns();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        java.lang.String str27 = jSDocInfo20.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = jSDocInfo20.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test15068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15068");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.isInterfaceRecorded();
        boolean boolean8 = jSDocInfoBuilder6.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.isInterfaceRecorded();
        boolean boolean13 = jSDocInfoBuilder10.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        boolean boolean20 = node17.isCall();
        boolean boolean21 = node17.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node17, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray26 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray27 = (java.util.ArrayList<java.lang.String>[]) arrayListArray26;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = strListBuilder24.add((java.util.ArrayList<java.lang.String>[]) arrayListArray26);
        boolean boolean29 = jSTypeExpression23.equals((java.lang.Object) arrayListArray26);
        boolean boolean30 = jSDocInfoBuilder10.recordDefineType(jSTypeExpression23);
        com.google.javascript.rhino.Node node31 = jSTypeExpression23.getRoot();
        boolean boolean33 = jSDocInfoBuilder6.recordThrowDescription(jSTypeExpression23, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder35.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        boolean boolean46 = node42.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node42, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray51 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray52 = (java.util.ArrayList<java.lang.String>[]) arrayListArray51;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = strListBuilder49.add((java.util.ArrayList<java.lang.String>[]) arrayListArray51);
        boolean boolean54 = jSTypeExpression48.equals((java.lang.Object) arrayListArray51);
        boolean boolean55 = jSDocInfoBuilder35.recordDefineType(jSTypeExpression48);
        boolean boolean56 = jSDocInfoBuilder6.recordEnumParameterType(jSTypeExpression48);
        boolean boolean57 = jSTypeExpression48.isOptionalArg();
        boolean boolean58 = jSTypeExpression48.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression48);
        com.google.javascript.rhino.Node node60 = jSTypeExpression48.getRoot();
        boolean boolean61 = jSTypeExpression48.isOptionalArg();
        boolean boolean62 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression48);
        boolean boolean64 = jSDocInfoBuilder1.recordLends("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean65 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertNotNull(arrayListArray26);
        org.junit.Assert.assertNotNull(strListArray27);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(strListArray52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test15069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15069");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setSourceEncodedPositionForTree((int) (byte) -1);
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isVar();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node37 = node31.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node38 = node19.copyInformationFromForTree(node37);
        boolean boolean39 = node10.isEquivalentToTyped(node19);
        boolean boolean40 = node19.isVoid();
        int int41 = node19.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test15070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15070");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.InputId inputId22 = null;
        node15.setInputId(inputId22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        int int36 = node27.getSourceOffset();
        boolean boolean37 = node27.isParamList();
        node15.addChildToFront(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node15.children();
        boolean boolean40 = node15.isCase();
        com.google.javascript.rhino.Node node41 = node15.removeChildren();
        com.google.javascript.rhino.InputId inputId42 = null;
        node15.setInputId(inputId42);
        java.util.Set<java.lang.String> strSet44 = node15.getDirectives();
        java.util.Iterator<java.lang.String> strItor45 = strSet44.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strItor45);
    }

    @Test
    public void test15071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15071");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isFor();
        boolean boolean11 = node3.isDebugger();
        node3.setQuotedString();
        boolean boolean13 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15072");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean4 = jSDocInfoBuilder2.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        jSDocInfoBuilder2.markName("hi!", staticSourceFile6, (int) (short) 0, (int) (short) 100);
        boolean boolean10 = jSDocInfoBuilder2.recordNoTypeCheck();
        boolean boolean11 = jSDocInfoBuilder2.recordExpose();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node15.addChildrenToFront(node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = jSDocInfoBuilder2.build(node19);
        java.lang.String str22 = jSDocInfo21.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getTypedefType();
        java.lang.String str24 = jSDocInfo21.getLendsName();
        jSDocInfo21.addSuppression("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean27 = jSDocInfo21.isInterface();
        boolean boolean28 = jSDocInfo21.isExport();
        com.google.javascript.rhino.Node node29 = jSDocInfo21.getAssociatedNode();
        boolean boolean30 = node29.isNumber();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(2, node29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSDocInfo21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15073");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        int int23 = strList20.size();
        boolean boolean24 = strList8.containsAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        node32.setQuotedString();
        boolean boolean35 = node32.isHook();
        boolean boolean36 = strList20.equals((java.lang.Object) node32);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList20.reverse();
        boolean boolean38 = strList20.isEmpty();
        boolean boolean39 = strList20.isEmpty();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test15074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15074");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        boolean boolean16 = strSet12.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int27 = strList25.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int38 = strList36.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList57 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList25, (java.lang.Iterable<java.lang.String>) strList36, (java.lang.Iterable<java.lang.String>) strList47, (java.lang.Iterable<java.lang.String>) strList56);
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int68 = strList66.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator69 = strList66.spliterator();
        boolean boolean70 = strList36.equals((java.lang.Object) strList66);
        boolean boolean71 = strSet12.addAll((java.util.Collection<java.lang.String>) strList66);
        boolean boolean72 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet12);
        jSDocInfoBuilder1.markText("NUMBER 0.0 [directives: []]", 32, 26, 35, (int) (short) 0);
        boolean boolean79 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj85 = node83.getProp(43);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int90 = node89.getSourceOffset();
        com.google.javascript.rhino.Node node91 = node83.useSourceInfoIfMissingFromForTree(node89);
        boolean boolean92 = node91.isAssignAdd();
        boolean boolean93 = node91.isScript();
        boolean boolean94 = node91.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = jSDocInfoBuilder1.build(node91);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList96 = jSDocInfo95.getImplementedInterfaces();
        java.lang.String str97 = jSDocInfo95.getReturnDescription();
        java.lang.String str98 = jSDocInfo95.getDeprecationReason();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList99 = jSDocInfo95.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strIterableList57);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jSDocInfo95);
        org.junit.Assert.assertNotNull(jSTypeExpressionList96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertNotNull(jSTypeExpressionList99);
    }

    @Test
    public void test15075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15075");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isExterns();
        boolean boolean19 = jSDocInfo14.hasParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo14.getExtendedInterfaces();
        boolean boolean21 = jSDocInfo14.hasBaseType();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo14.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo14.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test15076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15076");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isOverride();
        boolean boolean19 = jSDocInfo14.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo14.getImplementedInterfaces();
        boolean boolean22 = jSDocInfo14.hasParameterType("STRING  43 [var_args_name: 1]\n");
        java.lang.String str23 = jSDocInfo14.getLendsName();
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo14.getAuthors();
        java.lang.String str25 = jSDocInfo14.getBlockDescription();
        java.lang.String str26 = jSDocInfo14.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strCollection24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test15077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15077");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isVar();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node22 = node16.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node23 = node4.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(0, node22);
        node24.removeProp((int) (short) 10);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean31 = node30.isOptionalArg();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node37.addChildrenToFront(node41);
        boolean boolean43 = node37.isGetterDef();
        boolean boolean44 = node37.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj50 = node48.getProp(43);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int55 = node54.getSourceOffset();
        com.google.javascript.rhino.Node node56 = node48.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.javascript.rhino.Node node66 = node54.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(32, node37, node54);
        boolean boolean68 = node67.isExprResult();
        boolean boolean69 = node67.isFunction();
        com.google.javascript.rhino.Node node70 = node30.srcrefTree(node67);
        node67.addSuppression("NUMBER 0.0 [directives: []]");
        int int73 = node67.getCharno();
        boolean boolean74 = node67.isBlock();
        boolean boolean75 = node67.isGetElem();
        boolean boolean76 = node24.isEquivalentToTyped(node67);
        boolean boolean77 = node24.hasChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test15078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15078");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.InputId inputId22 = null;
        node15.setInputId(inputId22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node62.setDirectives((java.util.Set<java.lang.String>) strSet65);
        com.google.javascript.rhino.Node node68 = node56.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj75 = node73.getProp(43);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int80 = node79.getSourceOffset();
        com.google.javascript.rhino.Node node81 = node73.useSourceInfoIfMissingFromForTree(node79);
        boolean boolean82 = node81.isAssignAdd();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean87 = node86.isVar();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) ' ', node40, node68, node81, node86, 1, 100);
        node86.setWasEmptyNode(true);
        boolean boolean93 = node86.isQuotedString();
        boolean boolean95 = node86.getBooleanProp((int) (byte) 0);
        boolean boolean96 = node86.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node97 = node15.copyInformationFromForTree(node86);
        boolean boolean98 = node15.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test15079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15079");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        jSDocInfoBuilder1.markText("[]", (int) (byte) 0, 176180, 2, (int) (byte) 100);
        boolean boolean14 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean15 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean16 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean17 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15080");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        boolean boolean11 = strSet7.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList52 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList20, (java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList51);
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator64 = strList61.spliterator();
        boolean boolean65 = strList31.equals((java.lang.Object) strList61);
        boolean boolean66 = strSet7.addAll((java.util.Collection<java.lang.String>) strList61);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean71 = node70.isIf();
        boolean boolean72 = strSet7.equals((java.lang.Object) node70);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, node70);
        boolean boolean74 = node73.isLabel();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node77.getStaticSourceFile();
        boolean boolean79 = node77.isGetProp();
        com.google.javascript.rhino.Node node80 = node73.copyInformationFromForTree(node77);
        int int81 = node73.getType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strIterableList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(staticSourceFile78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test15081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15081");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node10 = node4.copyInformationFromForTree(node9);
        node10.setString("[, hi!, , , hi!, , hi!, ]");
        boolean boolean13 = node10.isStringKey();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        jSDocInfoBuilder15.markName("hi!", staticSourceFile19, (int) (short) 0, (int) (short) 100);
        boolean boolean23 = jSDocInfoBuilder15.recordNoTypeCheck();
        boolean boolean24 = jSDocInfoBuilder15.recordExpose();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = jSDocInfoBuilder15.build(node32);
        java.lang.String str35 = jSDocInfo34.getMeaning();
        boolean boolean36 = jSDocInfo34.isExport();
        boolean boolean37 = jSDocInfo34.isConstant();
        boolean boolean38 = jSDocInfo34.hasEnumParameterType();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int49 = node48.getSourceOffset();
        com.google.javascript.rhino.Node node50 = node42.useSourceInfoIfMissingFromForTree(node48);
        boolean boolean51 = node42.isDelProp();
        jSDocInfo34.setAssociatedNode(node42);
        boolean boolean53 = node42.isCatch();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(48, node10, node42);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder55 = node54.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSDocInfo34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder55);
    }

    @Test
    public void test15082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15082");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.isEmpty();
        node11.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node16 = node11.cloneTree();
        com.google.javascript.rhino.Node node17 = node16.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = node17.isTrue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test15083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15083");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        node1.setSourceEncodedPositionForTree(4);
        boolean boolean4 = node1.isBlock();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj12 = node10.getProp(43);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int17 = node16.getSourceOffset();
        com.google.javascript.rhino.Node node18 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        com.google.javascript.rhino.Node node28 = node16.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean29 = node22.isThrow();
        boolean boolean30 = node22.isNot();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean35 = node34.isVar();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node40 = node34.copyInformationFromForTree(node39);
        java.lang.String str41 = node22.checkTreeEquals(node40);
        com.google.javascript.rhino.Node node42 = null;
        com.google.javascript.rhino.Node node43 = node22.getChildBefore(node42);
        boolean boolean44 = node22.isVarArgs();
        boolean boolean45 = node22.isIn();
        boolean boolean46 = node22.isNE();
        com.google.javascript.rhino.Node node47 = node6.srcref(node22);
        node1.addChildrenToFront(node47);
        int int49 = node1.getLength();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str41, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test15084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15084");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getReturnType();
        java.lang.String str25 = jSDocInfo20.getSourceName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection26 = jSDocInfo20.getMarkers();
        com.google.javascript.rhino.Node node27 = jSDocInfo20.getAssociatedNode();
        com.google.javascript.rhino.Node node29 = node27.getAncestor((int) (byte) 1);
        boolean boolean30 = node27.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(markerCollection26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15085");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        stringPosition0.setItem("[]");
        int int7 = stringPosition0.getStartLine();
        java.lang.String str8 = stringPosition0.getItem();
        java.lang.String str9 = stringPosition0.getItem();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
    }

    @Test
    public void test15086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15086");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList81 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList60, (java.lang.Iterable<java.lang.String>) strList71, (java.lang.Iterable<java.lang.String>) strList80);
        boolean boolean82 = strList30.containsAll((java.util.Collection<java.lang.String>) strList80);
        int int83 = strList30.size();
        int int84 = strList30.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = strList30.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList86 = strList85.reverse();
        boolean boolean87 = strList85.isEmpty();
        boolean boolean88 = strList85.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strList85.add(45, "STRING  36");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strIterableList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test15087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15087");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition8 = marker0.getNameNode();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(nodeSourcePosition8);
    }

    @Test
    public void test15088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15088");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isOptionalArg();
        com.google.javascript.rhino.Node node7 = node5.getNext();
        boolean boolean8 = node5.isThrow();
        boolean boolean9 = node5.isFor();
        boolean boolean10 = node5.isNE();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node15 = node14.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node14.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = node5.useSourceInfoIfMissingFrom(node14);
        boolean boolean18 = node17.isDelProp();
        node1.addChildrenToBack(node17);
        boolean boolean20 = node1.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test15089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15089");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        boolean boolean47 = strSet6.contains((java.lang.Object) namePosition46);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags49 = new com.google.javascript.rhino.Node.SideEffectFlags(46);
        boolean boolean50 = strSet6.remove((java.lang.Object) sideEffectFlags49);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder52 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder52.recordNoTypeCheck();
        boolean boolean54 = jSDocInfoBuilder52.isInterfaceRecorded();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj60 = node58.getProp(43);
        int int61 = node58.getType();
        boolean boolean62 = node58.isGetterDef();
        node58.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = jSDocInfoBuilder52.build(node58);
        boolean boolean66 = jSDocInfo65.isNoSideEffects();
        java.lang.String str67 = jSDocInfo65.getMeaning();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo65.getModifies();
        boolean boolean69 = strSet6.contains((java.lang.Object) strSet68);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 40 + "'", int61 == 40);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test15090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15090");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node23 = jSDocInfo20.getAssociatedNode();
        boolean boolean24 = jSDocInfo20.isExpose();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection25 = jSDocInfo20.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getType();
        boolean boolean27 = jSDocInfo20.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(nodeCollection25);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15091");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        node3.setSourceEncodedPosition(12);
        int int7 = node3.getSideEffectFlags();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = null;
        node3.setStaticSourceFile(staticSourceFile8);
        boolean boolean10 = node3.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15092");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        boolean boolean41 = strList19.isEmpty();
        boolean boolean42 = strList19.isEmpty();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.recordNoTypeCheck();
        boolean boolean46 = jSDocInfoBuilder44.isInterfaceRecorded();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        int int53 = node50.getType();
        boolean boolean54 = node50.isGetterDef();
        node50.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = jSDocInfoBuilder44.build(node50);
        boolean boolean58 = jSDocInfo57.isNoSideEffects();
        boolean boolean59 = jSDocInfo57.hasTypedefType();
        boolean boolean60 = jSDocInfo57.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder62 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean63 = jSDocInfoBuilder62.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = null;
        boolean boolean66 = jSDocInfoBuilder62.recordParameter("hi!", jSTypeExpression65);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean68 = jSDocInfoBuilder62.recordVisibility(visibility67);
        jSDocInfo57.setVisibility(visibility67);
        boolean boolean70 = jSDocInfo57.isNoSideEffects();
        int int71 = strList19.indexOf((java.lang.Object) boolean70);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = strList19.add("GETELEM 43");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 40 + "'", int53 == 40);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + visibility67 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility67.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test15093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15093");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        int int6 = sideEffectFlags1.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags8.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags11 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags11.setThrows();
        sideEffectFlags11.setAllFlags();
        boolean boolean14 = sideEffectFlags11.areAllFlagsSet();
        sideEffectFlags11.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags17 = new com.google.javascript.rhino.Node.SideEffectFlags(47);
        sideEffectFlags17.setMutatesThis();
        sideEffectFlags17.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags21 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags21.setThrows();
        sideEffectFlags21.clearAllFlags();
        sideEffectFlags21.setAllFlags();
        sideEffectFlags21.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags26 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags26.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags29 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags29.setThrows();
        sideEffectFlags29.clearSideEffectFlags();
        sideEffectFlags29.setMutatesThis();
        sideEffectFlags29.setMutatesThis();
        sideEffectFlags29.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags36 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags36.setThrows();
        sideEffectFlags36.clearAllFlags();
        sideEffectFlags36.setAllFlags();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList40 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags8, sideEffectFlags11, sideEffectFlags17, sideEffectFlags21, sideEffectFlags26, sideEffectFlags29, sideEffectFlags36);
        int int41 = sideEffectFlags29.valueOf();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(sideEffectFlagsList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 41 + "'", int41 == 41);
    }

    @Test
    public void test15094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15094");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        int int23 = strList20.size();
        boolean boolean24 = strList8.containsAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        node32.setQuotedString();
        boolean boolean35 = node32.isHook();
        boolean boolean36 = strList20.equals((java.lang.Object) node32);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList20.reverse();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.setIsSyntheticBlock(true);
        boolean boolean44 = node41.isReturn();
        boolean boolean45 = node41.isCatch();
        boolean boolean46 = node41.isStringKey();
        node41.setWasEmptyNode(true);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node41.getStaticSourceFile();
        int int50 = strList37.indexOf((java.lang.Object) staticSourceFile49);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test15095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15095");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getSuppressions();
        java.util.Iterator<java.lang.String> strItor26 = strSet25.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strItor26);
    }

    @Test
    public void test15096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15096");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.isNoTypeCheck();
        boolean boolean26 = jSDocInfo20.isExpose();
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo20.getAuthors();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean29 = jSDocInfo20.hasEnumParameterType();
        boolean boolean30 = jSDocInfo20.hasFileOverview();
        java.util.Collection<java.lang.String> strCollection31 = jSDocInfo20.getReferences();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strCollection31);
    }

    @Test
    public void test15097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15097");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean23 = jSDocInfo20.isConstant();
        boolean boolean24 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        boolean boolean37 = node28.isDelProp();
        jSDocInfo20.setAssociatedNode(node28);
        boolean boolean39 = jSDocInfo20.isExpose();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test15098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15098");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        boolean boolean26 = jSDocInfo20.hasParameter("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean28 = jSDocInfo20.hasDescriptionForParameter("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        java.util.Set<java.lang.String> strSet29 = jSDocInfo20.getSuppressions();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = strSet29.add("NUMBER 0.0 43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test15099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15099");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 0, "REGEXP Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test15100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15100");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.isInterfaceRecorded();
        boolean boolean9 = jSDocInfoBuilder6.recordBlockDescription("hi!");
        jSDocInfoBuilder6.recordOriginalCommentString("STRING ");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordNoTypeCheck();
        boolean boolean17 = jSDocInfoBuilder14.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder14.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.isInterfaceRecorded();
        boolean boolean22 = jSDocInfoBuilder20.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.isInterfaceRecorded();
        boolean boolean27 = jSDocInfoBuilder24.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        boolean boolean34 = node31.isCall();
        boolean boolean35 = node31.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = new com.google.javascript.rhino.JSTypeExpression(node31, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder38 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray40 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray41 = (java.util.ArrayList<java.lang.String>[]) arrayListArray40;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder42 = strListBuilder38.add((java.util.ArrayList<java.lang.String>[]) arrayListArray40);
        boolean boolean43 = jSTypeExpression37.equals((java.lang.Object) arrayListArray40);
        boolean boolean44 = jSDocInfoBuilder24.recordDefineType(jSTypeExpression37);
        com.google.javascript.rhino.Node node45 = jSTypeExpression37.getRoot();
        boolean boolean47 = jSDocInfoBuilder20.recordThrowDescription(jSTypeExpression37, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.isInterfaceRecorded();
        boolean boolean52 = jSDocInfoBuilder49.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj58 = node56.getProp(43);
        boolean boolean59 = node56.isCall();
        boolean boolean60 = node56.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = new com.google.javascript.rhino.JSTypeExpression(node56, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder63 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray65 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray66 = (java.util.ArrayList<java.lang.String>[]) arrayListArray65;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder67 = strListBuilder63.add((java.util.ArrayList<java.lang.String>[]) arrayListArray65);
        boolean boolean68 = jSTypeExpression62.equals((java.lang.Object) arrayListArray65);
        boolean boolean69 = jSDocInfoBuilder49.recordDefineType(jSTypeExpression62);
        boolean boolean70 = jSDocInfoBuilder20.recordEnumParameterType(jSTypeExpression62);
        boolean boolean71 = jSTypeExpression62.isOptionalArg();
        boolean boolean72 = jSTypeExpression62.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression62);
        boolean boolean74 = jSDocInfoBuilder14.recordReturnType(jSTypeExpression73);
        boolean boolean75 = jSDocInfoBuilder6.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n", jSTypeExpression73);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression73);
        boolean boolean77 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression76);
        com.google.javascript.rhino.Node node78 = jSTypeExpression76.getRoot();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strListBuilder38);
        org.junit.Assert.assertNotNull(arrayListArray40);
        org.junit.Assert.assertNotNull(strListArray41);
        org.junit.Assert.assertNotNull(strListBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strListBuilder63);
        org.junit.Assert.assertNotNull(arrayListArray65);
        org.junit.Assert.assertNotNull(strListArray66);
        org.junit.Assert.assertNotNull(strListBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test15101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15101");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnStartLine();
        int int8 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        int int11 = stringPosition0.getEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test15102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15102");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 24, (int) (byte) 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node8.addChildrenToFront(node12);
        boolean boolean14 = node8.isGetterDef();
        boolean boolean15 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(32, node8, node25);
        boolean boolean39 = node38.isExprResult();
        boolean boolean40 = node38.isFunction();
        boolean boolean41 = node38.isDec();
        boolean boolean42 = node38.isLabelName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean47 = node46.isVar();
        com.google.javascript.rhino.Node node48 = node38.useSourceInfoFromForTree(node46);
        node3.addChildToFront(node48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(45, 2, (int) ' ');
        node48.addChildToFront(node53);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test15103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15103");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 31);
        boolean boolean2 = node1.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test15104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15104");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        java.lang.String str24 = jSDocInfo20.getDescriptionForParameter("NUMBER 0.0 43");
        boolean boolean25 = jSDocInfo20.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getThisType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(jSTypeExpression27);
    }

    @Test
    public void test15105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15105");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        boolean boolean49 = node48.isIf();
        boolean boolean50 = node48.isCatch();
        com.google.javascript.rhino.Node node51 = node48.removeChildren();
        node51.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder54 = node51.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder54);
    }

    @Test
    public void test15106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15106");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.util.Iterator<java.lang.String> strItor21 = strSet16.iterator();
        boolean boolean22 = strSet16.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int74 = strList72.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator75 = strList72.spliterator();
        boolean boolean76 = strList42.equals((java.lang.Object) strList72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean81 = node80.isVar();
        boolean boolean82 = strList72.contains((java.lang.Object) node80);
        int int83 = strList72.size();
        boolean boolean84 = strList72.isEmpty();
        java.lang.Object obj85 = null;
        boolean boolean86 = strList72.equals(obj85);
        java.lang.Object obj87 = null;
        int int88 = strList72.indexOf(obj87);
        boolean boolean89 = strList72.isEmpty();
        boolean boolean90 = strSet16.addAll((java.util.Collection<java.lang.String>) strList72);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test15107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15107");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.isNoTypeCheck();
        boolean boolean26 = jSDocInfo20.isExpose();
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo20.getReferences();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo20.getModifies();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder30.markName("hi!", staticSourceFile34, (int) (short) 0, (int) (short) 100);
        boolean boolean38 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean39 = jSDocInfoBuilder30.recordExpose();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder30.build(node47);
        boolean boolean50 = jSDocInfo49.isConstructor();
        int int51 = jSDocInfo49.getExtendedInterfacesCount();
        boolean boolean52 = jSDocInfo49.isIdGenerator();
        java.lang.String str53 = jSDocInfo49.getFileOverview();
        boolean boolean54 = jSDocInfo49.hasFileOverview();
        boolean boolean55 = jSDocInfo49.isConstant();
        java.lang.String str56 = jSDocInfo49.getDeprecationReason();
        boolean boolean58 = jSDocInfo49.hasParameterType("[, hi!, , , hi!, , hi!, ]");
        boolean boolean59 = jSDocInfo49.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo49.getBaseType();
        boolean boolean61 = jSDocInfo49.isConstructor();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo49.getImplementedInterfaces();
        boolean boolean63 = strSet28.contains((java.lang.Object) jSTypeExpressionList62);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(jSTypeExpression60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test15108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15108");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isOnlyModifiesThisCall();
        boolean boolean8 = node3.isNew();
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((double) 16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  43 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15109");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isConstant();
        jSDocInfo42.setLicense("STRING \n");
        boolean boolean49 = jSDocInfo42.hasType();
        java.lang.String str50 = jSDocInfo42.getReturnDescription();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test15110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15110");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strSet6.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator11 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("[, hi!, , hi!, , , hi!, ]", "NULL JSDocInfo 97", "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nTYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n", "ERROR  43\n", "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean18 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = strList17.set(30, "");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(strSpliterator10);
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test15111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15111");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        com.google.javascript.rhino.Node node17 = node12.getParent();
        boolean boolean18 = node12.isLabelName();
        com.google.javascript.rhino.Node node19 = node12.getLastSibling();
        int int20 = node12.getSourceOffset();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable21 = node12.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator22 = ancestorIterable21.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor23 = ancestorIterable21.iterator();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable21);
        org.junit.Assert.assertNotNull(nodeSpliterator22);
        org.junit.Assert.assertNotNull(nodeItor23);
    }

    @Test
    public void test15112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15112");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo20.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.lang.String str25 = jSDocInfo20.getSourceName();
        int int26 = jSDocInfo20.getImplementedInterfaceCount();
        boolean boolean27 = jSDocInfo20.containsDeclaration();
        boolean boolean28 = jSDocInfo20.isDeprecated();
        boolean boolean29 = jSDocInfo20.hasType();
        boolean boolean30 = jSDocInfo20.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15113");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        jSDocInfoBuilder1.markText("[, hi!, , , hi!, , hi!, ]", 44, 49, 176129, 10);
        boolean boolean11 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder13.recordParameter("", jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder13.recordExterns();
        boolean boolean19 = jSDocInfoBuilder13.recordPreserveTry();
        boolean boolean20 = jSDocInfoBuilder13.recordNoCompile();
        boolean boolean22 = jSDocInfoBuilder13.recordLends("");
        boolean boolean25 = jSDocInfoBuilder13.recordParameterDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder27.recordParameter("", jSTypeExpression30);
        boolean boolean32 = jSDocInfoBuilder27.recordExterns();
        boolean boolean33 = jSDocInfoBuilder27.recordPreserveTry();
        boolean boolean34 = jSDocInfoBuilder27.recordNoCompile();
        boolean boolean36 = jSDocInfoBuilder27.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.recordJavaDispatch();
        jSDocInfoBuilder38.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordJavaDispatch();
        boolean boolean49 = jSDocInfoBuilder47.recordNoCompile();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        boolean boolean57 = node54.isCall();
        boolean boolean58 = node54.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node54, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray63 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray64 = (java.util.ArrayList<java.lang.String>[]) arrayListArray63;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder65 = strListBuilder61.add((java.util.ArrayList<java.lang.String>[]) arrayListArray63);
        boolean boolean66 = jSTypeExpression60.equals((java.lang.Object) arrayListArray63);
        boolean boolean67 = jSDocInfoBuilder47.recordParameter("", jSTypeExpression60);
        boolean boolean68 = jSDocInfoBuilder38.recordThrowType(jSTypeExpression60);
        boolean boolean69 = jSDocInfoBuilder27.recordBaseType(jSTypeExpression60);
        boolean boolean70 = jSDocInfoBuilder13.recordImplementedInterface(jSTypeExpression60);
        boolean boolean71 = jSDocInfoBuilder1.recordType(jSTypeExpression60);
        boolean boolean72 = jSDocInfoBuilder1.isPopulated();
        boolean boolean73 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(42, nodeArray78, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(12, nodeArray78, 32, 12);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(38, nodeArray78, 10, 18);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(43, nodeArray78);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = new com.google.javascript.rhino.JSTypeExpression(node88, "ERROR\n    NUMBER 40.0\n");
        boolean boolean91 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression90);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertNotNull(arrayListArray63);
        org.junit.Assert.assertNotNull(strListArray64);
        org.junit.Assert.assertNotNull(strListBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test15114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15114");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("TYPEOF");
        node2.setType(0);
        boolean boolean5 = node2.isFalse();
        com.google.javascript.rhino.Node node6 = node2.getParent();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(49, node2, 31, 45);
        boolean boolean10 = node2.isSyntheticBlock();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = node2.getExistingIntProp(24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 24");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15115");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        boolean boolean23 = jSDocInfo20.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        jSDocInfo20.addSuppression("STRING  43");
        boolean boolean27 = jSDocInfo20.containsDeclaration();
        boolean boolean28 = jSDocInfo20.hasThisType();
        boolean boolean29 = jSDocInfo20.isExterns();
        java.util.Collection<java.lang.String> strCollection30 = jSDocInfo20.getAuthors();
        boolean boolean31 = jSDocInfo20.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test15116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15116");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0);
        jSDocInfo42.setAssociatedNode(node77);
        int int79 = jSDocInfo42.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = jSDocInfo42.getTypedefType();
        boolean boolean81 = jSDocInfo42.containsDeclaration();
        boolean boolean82 = jSDocInfo42.isJavaDispatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(jSTypeExpression80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test15117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15117");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getParent();
        com.google.javascript.rhino.InputId inputId23 = null;
        node18.setInputId(inputId23);
        boolean boolean26 = node18.getBooleanProp(39);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(41, "JSDocInfo", (int) 'a', 40);
        boolean boolean32 = node31.isDo();
        com.google.javascript.rhino.Node node33 = node18.copyInformationFrom(node31);
        java.lang.String str34 = node31.toString();
        boolean boolean35 = node31.isDebugger();
        boolean boolean36 = node31.isAssign();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NULL JSDocInfo 97" + "'", str34, "NULL JSDocInfo 97");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15118");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getVersion();
        boolean boolean25 = jSDocInfo20.isNoAlias();
        boolean boolean26 = jSDocInfo20.hasTypedefType();
        boolean boolean28 = jSDocInfo20.hasParameterType("JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15119");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        java.lang.String str26 = jSDocInfo20.getOriginalCommentString();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.Node node28 = jSDocInfo20.getAssociatedNode();
        java.lang.String str30 = jSDocInfo20.getDescriptionForParameter("NUMBER 10.0 50");
        boolean boolean31 = jSDocInfo20.isExterns();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test15120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15120");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        boolean boolean12 = node4.isBlock();
        boolean boolean13 = node4.isContinue();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(29, node4, (int) '4', 0);
        boolean boolean17 = node16.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15121");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        boolean boolean8 = node3.isAssign();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15122");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", 4095, 45, (int) (byte) -1, 53);
        boolean boolean10 = jSDocInfoBuilder1.addAuthor("STRING  43");
        boolean boolean11 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean13 = jSDocInfoBuilder1.recordVersion("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nTYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        jSDocInfoBuilder15.markName("hi!", staticSourceFile19, (int) (short) 0, (int) (short) 100);
        boolean boolean23 = jSDocInfoBuilder15.recordNoTypeCheck();
        boolean boolean24 = jSDocInfoBuilder15.recordExpose();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = jSDocInfoBuilder15.build(node32);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder39.isInterfaceRecorded();
        boolean boolean42 = jSDocInfoBuilder39.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj48 = node46.getProp(43);
        boolean boolean49 = node46.isCall();
        boolean boolean50 = node46.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node46, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray55 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray56 = (java.util.ArrayList<java.lang.String>[]) arrayListArray55;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = strListBuilder53.add((java.util.ArrayList<java.lang.String>[]) arrayListArray55);
        boolean boolean58 = jSTypeExpression52.equals((java.lang.Object) arrayListArray55);
        boolean boolean59 = jSDocInfoBuilder39.recordDefineType(jSTypeExpression52);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition60 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int61 = namePosition60.getEndLine();
        int int62 = namePosition60.getStartLine();
        com.google.javascript.rhino.Node node63 = namePosition60.getItem();
        boolean boolean64 = jSTypeExpression52.equals((java.lang.Object) node63);
        boolean boolean65 = jSDocInfoBuilder36.recordExtendedInterface(jSTypeExpression52);
        boolean boolean66 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression52);
        jSDocInfoBuilder15.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean71 = jSDocInfoBuilder15.recordParameterDescription("STRING ", "hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder73 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean74 = jSDocInfoBuilder73.isInterfaceRecorded();
        boolean boolean76 = jSDocInfoBuilder73.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj82 = node80.getProp(43);
        boolean boolean83 = node80.isCall();
        boolean boolean84 = node80.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = new com.google.javascript.rhino.JSTypeExpression(node80, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder87 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray89 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray90 = (java.util.ArrayList<java.lang.String>[]) arrayListArray89;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder91 = strListBuilder87.add((java.util.ArrayList<java.lang.String>[]) arrayListArray89);
        boolean boolean92 = jSTypeExpression86.equals((java.lang.Object) arrayListArray89);
        boolean boolean93 = jSDocInfoBuilder73.recordDefineType(jSTypeExpression86);
        boolean boolean94 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression86);
        boolean boolean95 = jSTypeExpression86.isVarArgs();
        boolean boolean96 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression86);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertNotNull(arrayListArray55);
        org.junit.Assert.assertNotNull(strListArray56);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strListBuilder87);
        org.junit.Assert.assertNotNull(arrayListArray89);
        org.junit.Assert.assertNotNull(strListArray90);
        org.junit.Assert.assertNotNull(strListBuilder91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test15123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15123");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 39);
        node1.setType(38);
        node1.putBooleanProp(0, false);
        com.google.javascript.rhino.Node node7 = node1.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = null;
        node1.setStaticSourceFile(staticSourceFile8);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test15124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15124");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        com.google.javascript.rhino.Node node4 = node1.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test15125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15125");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        int int20 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node21 = typePosition0.getItem();
        com.google.javascript.rhino.jstype.JSType jSType22 = node21.getJSType();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        node30.setQuotedString();
        boolean boolean33 = node30.isHook();
        com.google.javascript.rhino.Node node34 = node30.getFirstChild();
        boolean boolean35 = node30.hasMoreThanOneChild();
        int int36 = node21.getIndexOfChild(node30);
        com.google.javascript.rhino.InputId inputId37 = null;
        node21.setInputId(inputId37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean44 = node43.isNull();
        boolean boolean45 = node43.isSyntheticBlock();
        com.google.javascript.rhino.Node node46 = node43.removeChildren();
        com.google.javascript.rhino.InputId inputId47 = null;
        node43.setInputId(inputId47);
        boolean boolean49 = node43.isThis();
        boolean boolean50 = node43.isSwitch();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(43, node43, (int) (short) 10, 36);
        com.google.javascript.rhino.Node node54 = node21.srcrefTree(node43);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        jSDocInfoBuilder56.markName("hi!", staticSourceFile60, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder56.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj75 = node73.getProp(43);
        boolean boolean76 = node73.isCall();
        int int77 = node73.getSourcePosition();
        java.lang.String str81 = node73.toString(false, true, false);
        boolean boolean82 = node73.isDo();
        boolean boolean83 = node73.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = jSDocInfoBuilder56.build(node73);
        com.google.javascript.rhino.InputId inputId85 = node73.getInputId();
        boolean boolean86 = node73.isReturn();
        node43.addChildrenToFront(node73);
        boolean boolean88 = node43.isBreak();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 176180 + "'", int77 == 176180);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "STRING " + "'", str81, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSDocInfo84);
        org.junit.Assert.assertNull(inputId85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test15126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15126");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15127");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        java.lang.String str37 = node34.toString();
        boolean boolean38 = node34.isThrow();
        boolean boolean39 = node34.isCatch();
        int int40 = node34.getSourcePosition();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TYPEOF" + "'", str37, "TYPEOF");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test15128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15128");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        boolean boolean10 = node7.isHook();
        int int11 = node7.getType();
        node7.putIntProp(0, (int) (byte) 0);
        boolean boolean15 = node7.isRegExp();
        boolean boolean16 = node7.isEmpty();
        boolean boolean17 = node7.isNoSideEffectsCall();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node7, "Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n");
        boolean boolean20 = node7.isOptionalArg();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node7.setStaticSourceFile(staticSourceFile21);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test15129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15129");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node28 = node15.useSourceInfoFromForTree(node27);
        boolean boolean29 = node27.isContinue();
        java.lang.Object obj31 = node27.getProp(30);
        boolean boolean32 = node27.isArrayLit();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node27.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator34 = ancestorIterable33.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
    }

    @Test
    public void test15130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15130");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo20.getTemplateTypeNames();
        jSDocInfo20.setDeprecated(true);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection28 = jSDocInfo20.getTypeNodes();
        java.lang.String str29 = jSDocInfo20.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(nodeCollection28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test15131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15131");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean30 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet27);
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int41 = strList39.indexOf((java.lang.Object) 'a');
        int int42 = strList39.size();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray46 = strList39.toArray(strArray45);
        boolean boolean47 = strSet16.containsAll((java.util.Collection<java.lang.String>) strList39);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet54);
        boolean boolean58 = strSet54.contains((java.lang.Object) 10.0d);
        boolean boolean59 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet54);
        strSet16.clear();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList61 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet16);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSetList61);
    }

    @Test
    public void test15132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15132");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo20.getThrownTypes();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo20.getSuppressions();
        java.lang.String str31 = jSDocInfo20.toString();
        java.lang.String str32 = jSDocInfo20.getReturnDescription();
        boolean boolean33 = jSDocInfo20.isImplicitCast();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection34 = jSDocInfo20.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JSDocInfo" + "'", str31, "JSDocInfo");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeCollection34);
    }

    @Test
    public void test15133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15133");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        jSDocInfoBuilder1.markName("STRING ", 40, 41);
        jSDocInfoBuilder1.markName("TYPEOF", 18, 53);
        jSDocInfoBuilder1.markName("NUMBER 10.0 50", 49, 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15134");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 43");
        boolean boolean2 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node1.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder3);
    }

    @Test
    public void test15135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15135");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean6 = jSDocInfoBuilder1.recordInterface();
        jSDocInfoBuilder1.markText("[]", 46, 12, 32, 50);
        boolean boolean13 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder15.recordBaseType(jSTypeExpression17);
        boolean boolean19 = jSDocInfoBuilder15.recordNoAlias();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        java.lang.Object[] objArray39 = strSet36.toArray();
        boolean boolean40 = strSet26.retainAll((java.util.Collection<java.lang.String>) strSet36);
        strSet36.clear();
        boolean boolean42 = strSet36.isEmpty();
        int int43 = strSet36.size();
        java.lang.Object[] objArray44 = strSet36.toArray();
        boolean boolean45 = jSDocInfoBuilder15.recordSuppressions((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = strSet36.contains((java.lang.Object) namePosition46);
        boolean boolean51 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet36);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test15136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15136");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.isExprResult();
        boolean boolean13 = node10.isOr();
        boolean boolean14 = node10.isComma();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean40 = node33.isThrow();
        boolean boolean41 = node33.isNot();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean46 = node45.isVar();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node51 = node45.copyInformationFromForTree(node50);
        java.lang.String str52 = node33.checkTreeEquals(node51);
        com.google.javascript.rhino.Node node53 = null;
        com.google.javascript.rhino.Node node54 = node33.getChildBefore(node53);
        boolean boolean55 = node33.isVarArgs();
        boolean boolean56 = node33.isIn();
        boolean boolean57 = node33.isNE();
        com.google.javascript.rhino.Node node58 = node17.srcref(node33);
        node10.putProp(29, (java.lang.Object) node58);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str52, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test15137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15137");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean30 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean32 = strSet16.add("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder34.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder34.markName("hi!", staticSourceFile38, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder34.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        boolean boolean48 = strSet16.contains((java.lang.Object) 0);
        boolean boolean49 = strSet16.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test15138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15138");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  43", (int) '#', 4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node5 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
    }

    @Test
    public void test15139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15139");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str25 = jSDocInfo20.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(jSTypeExpression26);
    }

    @Test
    public void test15140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15140");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        node3.setWasEmptyNode(true);
        boolean boolean10 = node3.isDelProp();
        com.google.javascript.rhino.jstype.JSType jSType11 = node3.getJSType();
        boolean boolean12 = node3.isNull();
        int int13 = node3.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 176180 + "'", int13 == 176180);
    }

    @Test
    public void test15141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15141");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(42, nodeArray8, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray8);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(36, nodeArray8, 40, 4);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(176180, nodeArray8, (int) (byte) 10, 49);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(53, nodeArray8);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(38, nodeArray8);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(221199, nodeArray8);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(221199, nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray8);
    }

    @Test
    public void test15142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15142");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection23 = jSDocInfo20.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getImplementedInterfaces();
        boolean boolean26 = jSDocInfo20.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        jSDocInfoBuilder28.markName("hi!", staticSourceFile32, (int) (short) 0, (int) (short) 100);
        boolean boolean36 = jSDocInfoBuilder28.recordNoTypeCheck();
        boolean boolean37 = jSDocInfoBuilder28.recordExpose();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = jSDocInfoBuilder28.build(node45);
        boolean boolean48 = jSDocInfo47.isExport();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean53 = node52.isOptionalArg();
        com.google.javascript.rhino.Node node54 = node52.getNext();
        jSDocInfo47.setAssociatedNode(node54);
        boolean boolean56 = jSDocInfo47.isNoSideEffects();
        boolean boolean57 = jSDocInfo47.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = jSDocInfo47.getVisibility();
        jSDocInfo20.setVisibility(visibility58);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection60 = jSDocInfo20.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(markerCollection23);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + visibility58 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility58.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection60);
    }

    @Test
    public void test15143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15143");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean26 = jSDocInfo20.hasParameter("JSDocInfo");
        java.util.Set<java.lang.String> strSet27 = jSDocInfo20.getSuppressions();
        boolean boolean28 = jSDocInfo20.isIdGenerator();
        boolean boolean29 = jSDocInfo20.isConstructor();
        boolean boolean30 = jSDocInfo20.hasBaseType();
        java.lang.String str31 = jSDocInfo20.getVersion();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test15144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15144");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.stream.Stream<java.lang.String> strStream9 = strList8.stream();
        java.util.ListIterator<java.lang.String> strItor10 = strList8.listIterator();
        java.lang.Object[] objArray11 = strList8.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = strList8.asList();
        java.lang.Object obj13 = null;
        boolean boolean14 = strList12.equals(obj13);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15145");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        java.lang.String str5 = node4.toStringTree();
        java.lang.String str6 = node4.getSourceFileName();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj12 = node10.getProp(43);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int17 = node16.getSourceOffset();
        com.google.javascript.rhino.Node node18 = node10.useSourceInfoIfMissingFromForTree(node16);
        boolean boolean19 = node18.isAssignAdd();
        boolean boolean20 = node18.isEmpty();
        java.lang.Object obj22 = node18.getProp((int) '#');
        com.google.javascript.rhino.Node node23 = node4.srcref(node18);
        boolean boolean24 = node4.isScript();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR  54\n" + "'", str5, "OR  54\n");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15146");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isNoShadow();
        boolean boolean24 = jSDocInfo20.isExterns();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo20.getModifies();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo20.getSuppressions();
        boolean boolean28 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean29 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
    }

    @Test
    public void test15147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15147");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        boolean boolean68 = node67.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(53, node67, node80, node84);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newNumber((double) 35);
        int int89 = node88.getCharno();
        java.lang.String str90 = node88.getSourceFileName();
        int int91 = node88.getLength();
        node80.addChildToFront(node88);
        boolean boolean93 = node80.isRegExp();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test15148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15148");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.setIsSyntheticBlock(true);
        boolean boolean6 = node3.isDefaultCase();
        boolean boolean7 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15149");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("");
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo20.getTemplateTypeNames();
        jSDocInfo20.setLicense("Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection28 = jSDocInfo20.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(nodeCollection28);
    }

    @Test
    public void test15150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15150");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int31 = strList29.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int42 = strList40.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList61 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList29, (java.lang.Iterable<java.lang.String>) strList40, (java.lang.Iterable<java.lang.String>) strList51, (java.lang.Iterable<java.lang.String>) strList60);
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int72 = strList70.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator73 = strList70.spliterator();
        boolean boolean74 = strList40.equals((java.lang.Object) strList70);
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = strList40.asList();
        boolean boolean76 = strSet6.addAll((java.util.Collection<java.lang.String>) strList75);
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = strList75.asList();
        java.util.Spliterator<java.lang.String> strSpliterator78 = strList77.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            strList77.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strIterableList61);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strSpliterator78);
    }

    @Test
    public void test15151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15151");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet15);
        java.lang.Object[] objArray18 = strSet15.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        java.lang.Object[] objArray28 = strSet25.toArray();
        boolean boolean29 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.lang.Object[] objArray30 = strSet15.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator31 = strSet15.spliterator();
        boolean boolean32 = strList8.contains((java.lang.Object) strSpliterator31);
        java.util.Iterator<java.lang.String> strItor33 = strList8.iterator();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str35 = stringPosition34.getItem();
        java.lang.String str36 = stringPosition34.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition37 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str38 = stringPosition37.getItem();
        java.lang.String str39 = stringPosition37.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition40 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str41 = stringPosition40.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str43 = stringPosition42.getItem();
        java.lang.String str44 = stringPosition42.getItem();
        int int45 = stringPosition42.getPositionOnStartLine();
        int int46 = stringPosition42.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition47 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition48 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        stringPosition49.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition53 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str54 = stringPosition53.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition55 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str56 = stringPosition55.getItem();
        java.lang.String str57 = stringPosition55.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition58 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str59 = stringPosition58.getItem();
        java.lang.String str60 = stringPosition58.getItem();
        int int61 = stringPosition58.getPositionOnStartLine();
        int int62 = stringPosition58.getStartLine();
        int int63 = stringPosition58.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList64 = com.google.common.collect.ImmutableList.of(stringPosition34, stringPosition37, stringPosition40, stringPosition42, stringPosition47, stringPosition48, stringPosition49, stringPosition53, stringPosition55, stringPosition58);
        stringPosition58.setItem("TYPEOF");
        boolean boolean67 = strList8.equals((java.lang.Object) stringPosition58);
        java.util.Spliterator<java.lang.String> strSpliterator68 = strList8.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            strList8.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(stringPositionList64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strSpliterator68);
    }

    @Test
    public void test15152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15152");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = strList19.asList();
        java.lang.Object[] objArray55 = strList19.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder57.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        jSDocInfoBuilder57.markName("hi!", staticSourceFile61, (int) (short) 0, (int) (short) 100);
        boolean boolean65 = jSDocInfoBuilder57.recordNoTypeCheck();
        boolean boolean66 = jSDocInfoBuilder57.recordExpose();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = jSDocInfoBuilder57.build(node74);
        boolean boolean77 = jSDocInfo76.isExport();
        boolean boolean78 = jSDocInfo76.isExport();
        java.lang.String str79 = jSDocInfo76.getSourceName();
        java.lang.String str80 = jSDocInfo76.getSourceName();
        boolean boolean81 = strList19.equals((java.lang.Object) jSDocInfo76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = strList19.get(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (31) must be less than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test15153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15153");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.Node node36 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.InputId inputId37 = null;
        node30.setInputId(inputId37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int49 = node48.getSourceOffset();
        com.google.javascript.rhino.Node node50 = node42.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node54.setDirectives((java.util.Set<java.lang.String>) strSet57);
        com.google.javascript.rhino.Node node60 = node48.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) ' ', node30, node54);
        boolean boolean62 = node3.hasChild(node61);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        node3.setStaticSourceFile(staticSourceFile63);
        java.lang.String str65 = node3.getSourceFileName();
        int int66 = node3.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
    }

    @Test
    public void test15154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15154");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node10 = node4.copyInformationFromForTree(node9);
        node10.setString("[, hi!, , , hi!, , hi!, ]");
        boolean boolean13 = node10.isStringKey();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        jSDocInfoBuilder15.markName("hi!", staticSourceFile19, (int) (short) 0, (int) (short) 100);
        boolean boolean23 = jSDocInfoBuilder15.recordNoTypeCheck();
        boolean boolean24 = jSDocInfoBuilder15.recordExpose();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = jSDocInfoBuilder15.build(node32);
        java.lang.String str35 = jSDocInfo34.getMeaning();
        boolean boolean36 = jSDocInfo34.isExport();
        boolean boolean37 = jSDocInfo34.isConstant();
        boolean boolean38 = jSDocInfo34.hasEnumParameterType();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int49 = node48.getSourceOffset();
        com.google.javascript.rhino.Node node50 = node42.useSourceInfoIfMissingFromForTree(node48);
        boolean boolean51 = node42.isDelProp();
        jSDocInfo34.setAssociatedNode(node42);
        boolean boolean53 = node42.isCatch();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(48, node10, node42);
        boolean boolean55 = node10.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSDocInfo34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test15155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15155");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo14.getParameterNames();
        boolean boolean19 = jSDocInfo14.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getReturnType();
        boolean boolean21 = jSDocInfo14.isJavaDispatch();
        int int22 = jSDocInfo14.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test15156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15156");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean13 = node12.isIf();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(49, node12, 0, 100);
        com.google.javascript.rhino.Node node17 = node16.getLastChild();
        boolean boolean18 = node16.isDefaultCase();
        boolean boolean19 = node16.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", 12, 0);
        java.lang.String str24 = node16.checkTreeEquals(node23);
        int int25 = node16.getSourceOffset();
        boolean boolean26 = node16.isWhile();
        boolean boolean27 = node16.isEmpty();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(42, nodeArray30, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(49, nodeArray30, 53, 43);
        boolean boolean37 = node36.isVarArgs();
        com.google.javascript.rhino.InputId inputId38 = null;
        node36.setInputId(inputId38);
        com.google.javascript.rhino.Node node40 = node16.useSourceInfoIfMissingFrom(node36);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n" + "'", str24, "Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
    }

    @Test
    public void test15157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15157");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(49, nodeArray6, 53, 43);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(176180, nodeArray6, 41, 38);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray6);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(37, nodeArray6, 43, 16);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(49, nodeArray6, (int) (short) 100, (int) '#');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node22.children();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(nodeIterable23);
    }

    @Test
    public void test15158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15158");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node23 = jSDocInfo20.getAssociatedNode();
        boolean boolean24 = node23.isDec();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node31 = node23.cloneTree();
        int int32 = node23.getSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test15159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15159");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getReturnType();
        java.util.Collection<java.lang.String> strCollection25 = jSDocInfo20.getReferences();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node30.addChildrenToFront(node34);
        boolean boolean36 = node30.isGetterDef();
        boolean boolean37 = node30.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj43 = node41.getProp(43);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int48 = node47.getSourceOffset();
        com.google.javascript.rhino.Node node49 = node41.useSourceInfoIfMissingFromForTree(node47);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet56);
        com.google.javascript.rhino.Node node59 = node47.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, node30, node47);
        boolean boolean61 = node60.isExprResult();
        boolean boolean62 = node60.isFunction();
        java.lang.String str63 = node60.toString();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node67.addChildrenToFront(node71);
        node71.setQuotedString();
        boolean boolean74 = node71.isHook();
        int int75 = node71.getType();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj81 = node79.getProp(43);
        int int82 = node79.getType();
        boolean boolean83 = node79.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node84 = node71.useSourceInfoIfMissingFromForTree(node79);
        boolean boolean85 = node60.hasChild(node84);
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = node84.getJSDocInfo();
        jSDocInfo20.setAssociatedNode(node84);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        boolean boolean91 = node90.isFor();
        com.google.javascript.rhino.Node node92 = node90.getNext();
        com.google.javascript.rhino.Node node93 = node84.useSourceInfoIfMissingFrom(node90);
        boolean boolean95 = node84.getBooleanProp((-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(strCollection25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "TYPEOF" + "'", str63, "TYPEOF");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 40 + "'", int75 == 40);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 40 + "'", int82 == 40);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSDocInfo86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test15160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15160");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo20.hasThisType();
        int int25 = jSDocInfo20.getParameterCount();
        boolean boolean26 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean27 = jSDocInfo20.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15161");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder5.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder5.markName("hi!", staticSourceFile9, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = null;
        boolean boolean14 = jSDocInfoBuilder5.recordEnumParameterType(jSTypeExpression13);
        jSDocInfoBuilder5.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean17 = jSDocInfoBuilder5.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder19.recordThisType(jSTypeExpression21);
        boolean boolean24 = jSDocInfoBuilder19.addReference("hi!");
        boolean boolean25 = jSDocInfoBuilder19.recordPreserveTry();
        boolean boolean27 = jSDocInfoBuilder19.addAuthor("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordJavaDispatch();
        jSDocInfoBuilder29.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.recordJavaDispatch();
        boolean boolean40 = jSDocInfoBuilder38.recordNoCompile();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj47 = node45.getProp(43);
        boolean boolean48 = node45.isCall();
        boolean boolean49 = node45.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = new com.google.javascript.rhino.JSTypeExpression(node45, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder52 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray54 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray55 = (java.util.ArrayList<java.lang.String>[]) arrayListArray54;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder56 = strListBuilder52.add((java.util.ArrayList<java.lang.String>[]) arrayListArray54);
        boolean boolean57 = jSTypeExpression51.equals((java.lang.Object) arrayListArray54);
        boolean boolean58 = jSDocInfoBuilder38.recordParameter("", jSTypeExpression51);
        boolean boolean59 = jSDocInfoBuilder29.recordThrowType(jSTypeExpression51);
        boolean boolean60 = jSTypeExpression51.isVarArgs();
        boolean boolean61 = jSDocInfoBuilder19.recordThisType(jSTypeExpression51);
        boolean boolean62 = jSDocInfoBuilder5.recordThisType(jSTypeExpression51);
        boolean boolean63 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression51);
        boolean boolean64 = jSDocInfoBuilder1.recordConstancy();
        jSDocInfoBuilder1.markAnnotation("Node tree inequality:\nTree1:\nLE\n\n\nTree2:\nNUMBER 0.0 43\n    STRING  43\n\n\nSubtree1: LE\n\n\nSubtree2: NUMBER 0.0 43\n    STRING  43\n", (int) (byte) 0, 43);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strListBuilder52);
        org.junit.Assert.assertNotNull(arrayListArray54);
        org.junit.Assert.assertNotNull(strListArray55);
        org.junit.Assert.assertNotNull(strListBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test15162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15162");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo20.getBaseType();
        boolean boolean32 = jSDocInfo20.hasEnumParameterType();
        boolean boolean33 = jSDocInfo20.isConstructor();
        java.lang.String str34 = jSDocInfo20.getFileOverview();
        java.lang.String str35 = jSDocInfo20.getDescription();
        boolean boolean36 = jSDocInfo20.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15163");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        boolean boolean5 = node3.isWith();
        boolean boolean6 = node3.isInstanceOf();
        boolean boolean7 = node3.isFunction();
        node3.removeProp(12);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15164");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        boolean boolean13 = node3.isWith();
        boolean boolean14 = node3.isThrow();
        boolean boolean15 = node3.isIf();
        com.google.javascript.rhino.jstype.JSType jSType16 = node3.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSType16);
    }

    @Test
    public void test15165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15165");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        boolean boolean5 = node3.isWhile();
        boolean boolean6 = node3.isNumber();
        boolean boolean7 = node3.isTypeOf();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder9.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        jSDocInfoBuilder9.markName("hi!", staticSourceFile13, (int) (short) 0, (int) (short) 100);
        boolean boolean17 = jSDocInfoBuilder9.recordNoTypeCheck();
        boolean boolean18 = jSDocInfoBuilder9.recordExpose();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node22.addChildrenToFront(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = jSDocInfoBuilder9.build(node26);
        java.lang.String str29 = jSDocInfo28.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo28.getTypedefType();
        java.lang.String str31 = jSDocInfo28.getLicense();
        boolean boolean32 = jSDocInfo28.isExport();
        boolean boolean33 = jSDocInfo28.hasBaseType();
        boolean boolean34 = jSDocInfo28.shouldPreserveTry();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection35 = jSDocInfo28.getMarkers();
        boolean boolean36 = jSDocInfo28.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo28.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.util.Set<java.lang.String> strSet39 = jSDocInfo28.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int50 = strList48.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator51 = strList48.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        int int63 = strList60.size();
        boolean boolean64 = strList48.containsAll((java.util.Collection<java.lang.String>) strList60);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node68.addChildrenToFront(node72);
        node72.setQuotedString();
        boolean boolean75 = node72.isHook();
        boolean boolean76 = strList60.equals((java.lang.Object) node72);
        boolean boolean77 = strSet39.retainAll((java.util.Collection<java.lang.String>) strList60);
        node3.setDirectives(strSet39);
        strSet39.clear();
        int int80 = strSet39.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = strSet39.add("GETELEM  43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSDocInfo28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(markerCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator51);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8 + "'", int63 == 8);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test15166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15166");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.hasFileOverview();
        boolean boolean26 = jSDocInfo20.isConstant();
        java.lang.String str27 = jSDocInfo20.getDeprecationReason();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection28 = jSDocInfo20.getMarkers();
        boolean boolean29 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean30 = jSDocInfo20.isDefine();
        boolean boolean31 = jSDocInfo20.isHidden();
        boolean boolean32 = jSDocInfo20.isNoSideEffects();
        boolean boolean33 = jSDocInfo20.isExpose();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(markerCollection28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test15167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15167");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getParent();
        com.google.javascript.rhino.InputId inputId23 = null;
        node18.setInputId(inputId23);
        boolean boolean25 = node18.isNull();
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node18.getIndexOfChild(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType33 = node31.getJSType();
        boolean boolean34 = node31.isArrayLit();
        node18.addChildToBack(node31);
        java.lang.String str39 = node31.toString(false, false, false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node31.siblings();
        boolean boolean41 = node31.isTypeOf();
        node31.setWasEmptyNode(false);
        int int44 = node31.getLength();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 0.0" + "'", str39, "NUMBER 0.0");
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test15168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15168");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        boolean boolean8 = jSDocInfoBuilder5.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node12, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray22 = (java.util.ArrayList<java.lang.String>[]) arrayListArray21;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder23 = strListBuilder19.add((java.util.ArrayList<java.lang.String>[]) arrayListArray21);
        boolean boolean24 = jSTypeExpression18.equals((java.lang.Object) arrayListArray21);
        boolean boolean25 = jSDocInfoBuilder5.recordDefineType(jSTypeExpression18);
        com.google.javascript.rhino.Node node26 = jSTypeExpression18.getRoot();
        boolean boolean28 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression18, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean30 = jSDocInfoBuilder1.recordDeprecationReason("GETELEM");
        boolean boolean31 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean32 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean34 = jSDocInfoBuilder1.recordDescription("ERROR 30");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(strListArray22);
        org.junit.Assert.assertNotNull(strListBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test15169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15169");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean26 = jSDocInfo20.hasDescriptionForParameter("[, hi!, , , hi!, , hi!, ]");
        boolean boolean27 = jSDocInfo20.hasFileOverview();
        java.lang.String str28 = jSDocInfo20.getVersion();
        java.lang.String str29 = jSDocInfo20.getDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test15170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15170");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        boolean boolean15 = jSDocInfoBuilder12.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        boolean boolean22 = node19.isCall();
        boolean boolean23 = node19.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node19, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder26 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray28 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray29 = (java.util.ArrayList<java.lang.String>[]) arrayListArray28;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder30 = strListBuilder26.add((java.util.ArrayList<java.lang.String>[]) arrayListArray28);
        boolean boolean31 = jSTypeExpression25.equals((java.lang.Object) arrayListArray28);
        boolean boolean32 = jSDocInfoBuilder12.recordDefineType(jSTypeExpression25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int34 = namePosition33.getEndLine();
        int int35 = namePosition33.getStartLine();
        com.google.javascript.rhino.Node node36 = namePosition33.getItem();
        boolean boolean37 = jSTypeExpression25.equals((java.lang.Object) node36);
        boolean boolean38 = jSDocInfoBuilder7.recordTypedef(jSTypeExpression25);
        boolean boolean39 = jSDocInfoBuilder1.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", jSTypeExpression25);
        boolean boolean41 = jSDocInfoBuilder1.recordDeprecationReason("JSDocInfo");
        boolean boolean43 = jSDocInfoBuilder1.recordFileOverview("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        boolean boolean46 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean47 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean48 = jSDocInfoBuilder1.isPopulated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strListBuilder26);
        org.junit.Assert.assertNotNull(arrayListArray28);
        org.junit.Assert.assertNotNull(strListArray29);
        org.junit.Assert.assertNotNull(strListBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test15171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15171");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean28 = jSDocInfo20.isNoCompile();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo20.getVisibility();
        boolean boolean30 = jSDocInfo20.isImplicitCast();
        boolean boolean31 = jSDocInfo20.hasModifies();
        int int32 = jSDocInfo20.getImplementedInterfaceCount();
        boolean boolean33 = jSDocInfo20.hasThisType();
        boolean boolean34 = jSDocInfo20.isOverride();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test15172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15172");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
    }

    @Test
    public void test15173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15173");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        boolean boolean10 = node7.isHook();
        int int11 = node7.getType();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        int int18 = node15.getType();
        boolean boolean19 = node15.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node20 = node7.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean21 = node7.isDec();
        node7.putBooleanProp(4095, false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test15174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15174");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isGetterDef();
        boolean boolean10 = node3.isQuotedString();
        boolean boolean11 = node3.isAdd();
        com.google.javascript.rhino.Node node13 = node3.getAncestor((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = node13.isAssignAdd();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test15175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15175");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.rhino.Node node36 = node15.getChildBefore(node35);
        boolean boolean37 = node15.isVarArgs();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        node45.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node45.setJSType(jSType48);
        java.lang.String str50 = node45.getString();
        boolean boolean51 = node45.isName();
        int int52 = node45.getLength();
        com.google.javascript.rhino.Node node53 = node15.copyInformationFrom(node45);
        node45.setIsSyntheticBlock(true);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder57.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        jSDocInfoBuilder57.markName("hi!", staticSourceFile61, (int) (short) 0, (int) (short) 100);
        boolean boolean65 = jSDocInfoBuilder57.recordNoTypeCheck();
        boolean boolean66 = jSDocInfoBuilder57.recordExpose();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = jSDocInfoBuilder57.build(node74);
        boolean boolean77 = jSDocInfo76.isConstructor();
        int int78 = jSDocInfo76.getExtendedInterfacesCount();
        boolean boolean79 = jSDocInfo76.isIdGenerator();
        java.lang.String str80 = jSDocInfo76.getFileOverview();
        boolean boolean81 = jSDocInfo76.isNoTypeCheck();
        java.lang.String str82 = jSDocInfo76.getLendsName();
        boolean boolean83 = jSDocInfo76.isJavaDispatch();
        boolean boolean84 = jSDocInfo76.hasEnumParameterType();
        jSDocInfo76.setLicense("Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        java.lang.String str87 = jSDocInfo76.getVersion();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList88 = jSDocInfo76.getThrownTypes();
        node45.setJSDocInfo(jSDocInfo76);
        com.google.javascript.rhino.Node node90 = jSDocInfo76.getAssociatedNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(jSTypeExpressionList88);
        org.junit.Assert.assertNotNull(node90);
    }

    @Test
    public void test15176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15176");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isNoShadow();
        boolean boolean24 = jSDocInfo20.isInterface();
        boolean boolean25 = jSDocInfo20.isNoCompile();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo20.getParameterNames();
        java.util.Collection<java.lang.String> strCollection27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = strSet26.addAll(strCollection27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test15177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15177");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node33 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean34 = node33.isAssignAdd();
        boolean boolean35 = node33.isEmpty();
        java.lang.Object obj37 = node33.getProp((int) '#');
        com.google.javascript.rhino.Node node38 = node5.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 37, 36, 38);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean47 = node46.isOptionalArg();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node53.addChildrenToFront(node57);
        boolean boolean59 = node53.isGetterDef();
        boolean boolean60 = node53.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj66 = node64.getProp(43);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int71 = node70.getSourceOffset();
        com.google.javascript.rhino.Node node72 = node64.useSourceInfoIfMissingFromForTree(node70);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        node76.setDirectives((java.util.Set<java.lang.String>) strSet79);
        com.google.javascript.rhino.Node node82 = node70.useSourceInfoIfMissingFromForTree(node76);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, node53, node70);
        boolean boolean84 = node83.isExprResult();
        boolean boolean85 = node83.isFunction();
        com.google.javascript.rhino.Node node86 = node46.srcrefTree(node83);
        com.google.javascript.rhino.Node node87 = node42.clonePropsFrom(node46);
        boolean boolean88 = node87.isOptionalArg();
        com.google.javascript.rhino.Node node89 = node33.useSourceInfoFrom(node87);
        java.lang.String str90 = node33.toString();
        boolean boolean91 = node33.isCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "STRING  36" + "'", str90, "STRING  36");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test15178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15178");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        boolean boolean13 = node3.isWith();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node3.isEquivalentTo(node17);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node35 = node28.getChildAtIndex(0);
        java.lang.String str36 = node35.toString();
        node35.setSourceEncodedPositionForTree((int) (byte) -1);
        node35.setOptionalArg(false);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int51 = node50.getSourceOffset();
        com.google.javascript.rhino.Node node52 = node44.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean57 = node56.isVar();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node62 = node56.copyInformationFromForTree(node61);
        com.google.javascript.rhino.Node node63 = node44.copyInformationFromForTree(node62);
        boolean boolean64 = node35.isEquivalentToTyped(node44);
        com.google.javascript.rhino.Node node65 = node3.srcrefTree(node35);
        boolean boolean66 = node3.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType67 = node3.getJSType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node3.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  43" + "'", str36, "STRING  43");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertNull(jSDocInfo68);
    }

    @Test
    public void test15179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15179");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        boolean boolean23 = jSDocInfo20.isConstant();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getBaseType();
        java.lang.String str28 = jSDocInfo20.getDescription();
        boolean boolean29 = jSDocInfo20.isIdGenerator();
        boolean boolean30 = jSDocInfo20.hasTypedefType();
        java.lang.String str31 = jSDocInfo20.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test15180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15180");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.equals((java.lang.Object) (-1));
        boolean boolean53 = strSet6.contains((java.lang.Object) (-1));
        int int54 = strSet6.size();
        int int55 = strSet6.size();
        java.lang.Object[] objArray56 = strSet6.toArray();
        java.lang.Object[] objArray57 = strSet6.toArray();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
    }

    @Test
    public void test15181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15181");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = strList19.asList();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder56.recordNoTypeCheck();
        boolean boolean58 = jSDocInfoBuilder56.isInterfaceRecorded();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj64 = node62.getProp(43);
        int int65 = node62.getType();
        boolean boolean66 = node62.isGetterDef();
        node62.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder56.build(node62);
        boolean boolean70 = jSDocInfo69.isNoSideEffects();
        boolean boolean71 = jSDocInfo69.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo69.getExtendedInterfaces();
        boolean boolean73 = jSDocInfo69.hasType();
        boolean boolean74 = jSDocInfo69.isConsistentIdGenerator();
        boolean boolean75 = strList54.equals((java.lang.Object) jSDocInfo69);
        boolean boolean76 = strList54.isEmpty();
        java.lang.String str78 = strList54.get(0);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor79 = strList54.iterator();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 40 + "'", int65 == 40);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strItor79);
    }

    @Test
    public void test15182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15182");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 0, "STRING  0", (int) '#', 11);
        node4.setString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNULL\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NULL\n");
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test15183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15183");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isOverride();
        boolean boolean19 = jSDocInfo14.isExport();
        java.lang.String str20 = jSDocInfo14.getLendsName();
        com.google.javascript.rhino.Node node21 = jSDocInfo14.getAssociatedNode();
        java.util.Collection<java.lang.String> strCollection22 = jSDocInfo14.getReferences();
        boolean boolean23 = jSDocInfo14.hasFileOverview();
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo14.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(strCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strCollection24);
    }

    @Test
    public void test15184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15184");
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = com.google.common.collect.ImmutableList.of("STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "", "STRING ", "STRING ", "hi!");
        java.lang.Object[] objArray10 = strList9.toArray();
        boolean boolean12 = strList9.contains((java.lang.Object) 0);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordNoTypeCheck();
        boolean boolean16 = jSDocInfoBuilder14.isInterfaceRecorded();
        jSDocInfoBuilder14.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean21 = jSDocInfoBuilder14.isPopulated();
        boolean boolean22 = jSDocInfoBuilder14.recordConsistentIdGenerator();
        boolean boolean23 = strList9.contains((java.lang.Object) boolean22);
        java.util.ListIterator<java.lang.String> strItor24 = strList9.listIterator();
        java.util.Iterator<java.lang.String> strItor25 = strList9.iterator();
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
    }

    @Test
    public void test15185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15185");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean6 = strSet3.equals((java.lang.Object) (-1));
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(42, nodeArray11, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(39, nodeArray11, (int) '4', 32);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(50, nodeArray11, 32, 15);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(10, nodeArray11, 1, (int) ' ');
        boolean boolean24 = strSet3.equals((java.lang.Object) 10);
        int int25 = strSet3.size();
        com.google.common.collect.ImmutableCollection[] immutableCollectionArray27 = new com.google.common.collect.ImmutableCollection[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableCollection<java.lang.String>[] strCollectionArray28 = (com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray27;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection<java.lang.String>> strCollectionList29 = com.google.common.collect.ImmutableList.copyOf((com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray27);
        com.google.common.collect.ImmutableList[] immutableListArray31 = new com.google.common.collect.ImmutableList[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList<java.lang.String>[] strListArray32 = (com.google.common.collect.ImmutableList<java.lang.String>[]) immutableListArray31;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<java.lang.String>> strListList33 = com.google.common.collect.ImmutableList.copyOf(strListArray32);
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection[]> immutableCollectionArrayList34 = com.google.common.collect.ImmutableList.of(immutableCollectionArray27, (com.google.common.collect.ImmutableCollection[]) strListArray32);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList35 = com.google.common.collect.ImmutableList.copyOf((java.util.List<java.lang.String>[]) strListArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String>[] strListArray36 = strSet3.toArray((java.util.List<java.lang.String>[]) strListArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(immutableCollectionArray27);
        org.junit.Assert.assertNotNull(strCollectionArray28);
        org.junit.Assert.assertNotNull(strCollectionList29);
        org.junit.Assert.assertNotNull(immutableListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListList33);
        org.junit.Assert.assertNotNull(immutableCollectionArrayList34);
        org.junit.Assert.assertNotNull(strListList35);
    }

    @Test
    public void test15186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15186");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.InputId inputId22 = null;
        node15.setInputId(inputId22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        int int36 = node27.getSourceOffset();
        boolean boolean37 = node27.isParamList();
        node15.addChildToFront(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node15.children();
        boolean boolean40 = node15.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test15187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15187");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(24, "TYPEOF", (-1), 0);
        boolean boolean5 = node4.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test15188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15188");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition4 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node5 = namePosition4.getItem();
        int int6 = namePosition4.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList7 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition4);
        int int8 = namePosition0.getPositionOnEndLine();
        int int9 = namePosition0.getEndLine();
        int int10 = namePosition0.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            namePosition0.setPositionInformation(12, (int) (byte) 1, 5, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 12?end-line: 5");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(namePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test15189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15189");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isInc();
        boolean boolean10 = node3.isEmpty();
        node3.setOptionalArg(true);
        int int13 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node14 = node3.getLastChild();
        node3.putIntProp(176180, (int) (short) -1);
        boolean boolean18 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean23 = node22.isVar();
        node22.putBooleanProp(30, false);
        boolean boolean27 = node22.isSwitch();
        boolean boolean28 = node22.isUnscopedQualifiedName();
        boolean boolean29 = node22.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node22.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj39 = node37.getProp(43);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int44 = node43.getSourceOffset();
        com.google.javascript.rhino.Node node45 = node37.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node49.setDirectives((java.util.Set<java.lang.String>) strSet52);
        com.google.javascript.rhino.Node node55 = node43.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.InputId inputId56 = null;
        node49.setInputId(inputId56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int68 = node67.getSourceOffset();
        com.google.javascript.rhino.Node node69 = node61.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        node73.setDirectives((java.util.Set<java.lang.String>) strSet76);
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) ' ', node49, node73);
        boolean boolean81 = node22.hasChild(node80);
        int int82 = node3.getIndexOfChild(node22);
        boolean boolean83 = node22.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test15190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15190");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        boolean boolean25 = jSDocInfo20.hasModifies();
        java.lang.String str27 = jSDocInfo20.getDescriptionForParameter("STRING  43\n");
        boolean boolean28 = jSDocInfo20.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15191");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean11 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        java.lang.Object[] objArray21 = strSet18.toArray();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object[] objArray41 = strSet38.toArray();
        boolean boolean42 = strSet28.retainAll((java.util.Collection<java.lang.String>) strSet38);
        java.lang.Object[] objArray43 = strSet28.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder45.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        jSDocInfoBuilder45.markName("hi!", staticSourceFile49, (int) (short) 0, (int) (short) 100);
        boolean boolean53 = jSDocInfoBuilder45.recordNoTypeCheck();
        boolean boolean54 = jSDocInfoBuilder45.recordExpose();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node58.addChildrenToFront(node62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = jSDocInfoBuilder45.build(node62);
        java.lang.String str65 = jSDocInfo64.getMeaning();
        boolean boolean66 = jSDocInfo64.isExport();
        boolean boolean67 = strSet28.equals((java.lang.Object) jSDocInfo64);
        boolean boolean68 = jSDocInfo64.isNoAlias();
        java.lang.String str69 = jSDocInfo64.getMeaning();
        java.lang.String str70 = jSDocInfo64.getMeaning();
        boolean boolean71 = jSDocInfo64.isNoTypeCheck();
        java.lang.String str72 = jSDocInfo64.getReturnDescription();
        boolean boolean73 = strSet18.equals((java.lang.Object) jSDocInfo64);
        boolean boolean74 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet18);
        boolean boolean76 = jSDocInfoBuilder1.recordDeprecationReason("NUMBER 0.0 43\n");
        boolean boolean77 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean78 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSDocInfo64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test15192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15192");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("NUMBER 0.0 43\n    STRING  43\n", "NUMBER 0.0 43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder15.recordParameter("", jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder15.recordExterns();
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        boolean boolean22 = jSDocInfoBuilder15.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder15.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder15.recordType(jSTypeExpression25);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean28 = jSDocInfoBuilder15.recordVisibility(visibility27);
        boolean boolean29 = jSDocInfoBuilder1.recordVisibility(visibility27);
        boolean boolean31 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        boolean boolean32 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test15193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15193");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        com.google.javascript.rhino.Node node77 = node70.getChildAtIndex(0);
        java.lang.String str78 = node77.toString();
        boolean boolean79 = node77.isExprResult();
        boolean boolean80 = node77.isCall();
        com.google.javascript.rhino.Node node81 = node62.srcrefTree(node77);
        int int82 = node81.getCharno();
        boolean boolean83 = node81.isGetElem();
        node81.setLength(52);
        node81.setLength(54);
        com.google.javascript.rhino.Node node88 = node81.getNext();
        java.lang.String str89 = node81.getString();
        boolean boolean90 = node81.isAssign();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "STRING  43" + "'", str78, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test15194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15194");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList81 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList60, (java.lang.Iterable<java.lang.String>) strList71, (java.lang.Iterable<java.lang.String>) strList80);
        boolean boolean82 = strList30.containsAll((java.util.Collection<java.lang.String>) strList80);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition83 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition84 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition85 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition86 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition87 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition88 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean89 = typePosition88.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList90 = com.google.common.collect.ImmutableList.of(typePosition83, typePosition84, typePosition85, typePosition86, typePosition87, typePosition88);
        int int91 = strList30.lastIndexOf((java.lang.Object) typePosition88);
        boolean boolean92 = strList30.isEmpty();
        java.util.Iterator<java.lang.String> strItor93 = strList30.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList96 = strList30.subList(45055, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (45055) must not be greater than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strIterableList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(typePositionList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strItor93);
    }

    @Test
    public void test15195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15195");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo20.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.lang.String str25 = jSDocInfo20.getSourceName();
        int int26 = jSDocInfo20.getImplementedInterfaceCount();
        boolean boolean27 = jSDocInfo20.containsDeclaration();
        boolean boolean28 = jSDocInfo20.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo20.getTypedefType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection30 = jSDocInfo20.getMarkers();
        boolean boolean31 = jSDocInfo20.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNotNull(markerCollection30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test15196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15196");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int15 = node14.getSourceOffset();
        com.google.javascript.rhino.Node node16 = node8.useSourceInfoIfMissingFromForTree(node14);
        int int17 = node8.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node8.getJSDocInfo();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(49, node8, (int) (byte) -1, (int) 'a');
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = jSDocInfoBuilder1.build(node21);
        boolean boolean23 = jSDocInfo22.isJavaDispatch();
        java.lang.String str24 = jSDocInfo22.getVersion();
        boolean boolean25 = jSDocInfo22.isExpose();
        boolean boolean26 = jSDocInfo22.isExterns();
        boolean boolean27 = jSDocInfo22.isInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertNotNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15197");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean7 = typePosition6.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6);
        int int9 = typePosition3.getEndLine();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean14 = node13.isNull();
        boolean boolean15 = node13.isSyntheticBlock();
        boolean boolean16 = node13.hasMoreThanOneChild();
        typePosition3.setItem(node13);
        com.google.javascript.rhino.Node node18 = node13.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.children();
        boolean boolean20 = node13.isVar();
        boolean boolean21 = node13.isGetterDef();
        node13.addSuppression("NUMBER 0.0 43");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet35);
        java.lang.Object obj39 = node32.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node32);
        boolean boolean41 = node27.isOr();
        int int43 = node27.getIntProp(53);
        com.google.javascript.rhino.Node node44 = node27.cloneNode();
        boolean boolean45 = node44.wasEmptyNode();
        node44.removeProp(36);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean52 = node51.isNull();
        boolean boolean53 = node51.isSyntheticBlock();
        com.google.javascript.rhino.Node node54 = node51.removeChildren();
        com.google.javascript.rhino.InputId inputId55 = null;
        node51.setInputId(inputId55);
        boolean boolean57 = node51.isThis();
        boolean boolean58 = node44.hasChild(node51);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node62.setIsSyntheticBlock(true);
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.isReturn();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 1, node13, node51, node62);
        com.google.javascript.rhino.Node node68 = node62.getLastSibling();
        java.lang.String str69 = node62.toString();
        boolean boolean70 = node62.isFromExterns();
        boolean boolean71 = node62.isIf();
        node62.setWasEmptyNode(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder74 = node62.getJsDocBuilderForNode();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "STRING  43 [synthetic: 1]" + "'", str69, "STRING  43 [synthetic: 1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder74);
    }

    @Test
    public void test15198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15198");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        boolean boolean9 = node5.isInstanceOf();
        boolean boolean10 = node5.isNew();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean27 = node26.isVar();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node32 = node26.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node33 = node14.copyInformationFromForTree(node32);
        boolean boolean34 = node33.isTrue();
        boolean boolean35 = node33.isFromExterns();
        com.google.javascript.rhino.Node node36 = node5.copyInformationFrom(node33);
        boolean boolean37 = node36.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15199");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo42.getImplementedInterfaces();
        boolean boolean49 = jSDocInfo42.isDeprecated();
        java.lang.String str50 = jSDocInfo42.getFileOverview();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = jSDocInfo42.getVisibility();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test15200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15200");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean10 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean12 = jSDocInfoBuilder1.recordBlockDescription("STRING  0");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test15201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15201");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        typePosition0.setPositionInformation((int) (byte) -1, 48, 4095, 46);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj18 = node16.getProp(43);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int23 = node22.getSourceOffset();
        com.google.javascript.rhino.Node node24 = node16.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node34 = node22.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean35 = node34.isContinue();
        boolean boolean36 = node34.isVoid();
        node34.setSourceEncodedPosition(4095);
        typePosition0.setItem(node34);
        node34.setDouble((double) 29);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15202");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean9 = jSDocInfoBuilder1.recordVersion("THROW");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test15203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15203");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        boolean boolean59 = strList49.contains((java.lang.Object) node57);
        int int60 = strList49.size();
        java.lang.Object[] objArray61 = strList49.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strList49.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test15204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15204");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        int int12 = node3.getSourceOffset();
        node3.addSuppression("OR  54\n");
        boolean boolean15 = node3.isEmpty();
        com.google.javascript.rhino.InputId inputId16 = node3.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputId16);
    }

    @Test
    public void test15205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15205");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        boolean boolean26 = jSDocInfo20.hasModifies();
        boolean boolean27 = jSDocInfo20.hasType();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo20.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator29 = strSet28.spliterator();
        boolean boolean30 = strSet28.isEmpty();
        java.util.Iterator<java.lang.String> strItor31 = strSet28.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strItor31);
    }

    @Test
    public void test15206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15206");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setSourceEncodedPositionForTree((int) (byte) -1);
        boolean boolean14 = node10.isGetterDef();
        boolean boolean15 = node10.isScript();
        java.lang.String str16 = node10.getSourceFileName();
        com.google.javascript.rhino.Node node17 = node10.cloneTree();
        java.lang.String str21 = node10.toString(true, false, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "STRING " + "'", str21, "STRING ");
    }

    @Test
    public void test15207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15207");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean5 = jSDocInfoBuilder4.isInterfaceRecorded();
        boolean boolean7 = jSDocInfoBuilder4.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        boolean boolean14 = node11.isCall();
        boolean boolean15 = node11.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = new com.google.javascript.rhino.JSTypeExpression(node11, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder18 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray20 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray21 = (java.util.ArrayList<java.lang.String>[]) arrayListArray20;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder22 = strListBuilder18.add((java.util.ArrayList<java.lang.String>[]) arrayListArray20);
        boolean boolean23 = jSTypeExpression17.equals((java.lang.Object) arrayListArray20);
        boolean boolean24 = jSDocInfoBuilder4.recordDefineType(jSTypeExpression17);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int26 = namePosition25.getEndLine();
        int int27 = namePosition25.getStartLine();
        com.google.javascript.rhino.Node node28 = namePosition25.getItem();
        boolean boolean29 = jSTypeExpression17.equals((java.lang.Object) node28);
        boolean boolean30 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression17);
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int53 = strList51.indexOf((java.lang.Object) 'a');
        int int54 = strList51.size();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray58 = strList51.toArray(strArray57);
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("[, hi!, , , hi!, , hi!, ]", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "STRING ", "NUMBER 12.0\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "NUMBER 0.0 43 [directives: []]\n", "NUMBER 0.0", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "hi!", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", strArray57);
        boolean boolean60 = jSTypeExpression17.equals((java.lang.Object) "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        com.google.javascript.rhino.Node node61 = jSTypeExpression17.getRoot();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node61.children();
        com.google.javascript.rhino.Node node63 = node61.cloneNode();
        boolean boolean64 = node61.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strListBuilder18);
        org.junit.Assert.assertNotNull(arrayListArray20);
        org.junit.Assert.assertNotNull(strListArray21);
        org.junit.Assert.assertNotNull(strListBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test15208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15208");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setSourceEncodedPositionForTree((int) (byte) -1);
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        boolean boolean22 = node19.isCall();
        int int23 = node19.getSourcePosition();
        java.lang.String str27 = node19.toString(false, true, false);
        boolean boolean28 = node19.isNot();
        boolean boolean29 = node19.isDelProp();
        node10.addChildrenToFront(node19);
        boolean boolean31 = node19.isGetterDef();
        boolean boolean32 = node19.isContinue();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(42, nodeArray36, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(49, nodeArray36, 53, 43);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(176180, nodeArray36, 41, 38);
        boolean boolean46 = node19.isEquivalentTo(node45);
        boolean boolean47 = node19.isParamList();
        boolean boolean48 = node19.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 176180 + "'", int23 == 176180);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "STRING " + "'", str27, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test15209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15209");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 47 + "'", int4 == 47);
    }

    @Test
    public void test15210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15210");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isGetElem();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        node17.detachChildren();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node17);
        boolean boolean21 = node3.isAssignAdd();
        boolean boolean22 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("hi!");
        int int27 = node25.getIntProp(44);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node33 = node31.cloneNode();
        boolean boolean34 = node33.isGetElem();
        node33.addSuppression("");
        boolean boolean37 = node33.isInstanceOf();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj43 = node41.getProp(43);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int48 = node47.getSourceOffset();
        com.google.javascript.rhino.Node node49 = node41.useSourceInfoIfMissingFromForTree(node47);
        node41.setIsSyntheticBlock(false);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node41.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isNoSideEffectsCall();
        boolean boolean59 = node57.isWith();
        boolean boolean60 = node57.isInstanceOf();
        com.google.javascript.rhino.Node node61 = node41.srcrefTree(node57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node25, node33, node61);
        node3.addChildrenToBack(node62);
        boolean boolean64 = node62.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test15211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15211");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList52 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList20, (java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList51);
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator64 = strList61.spliterator();
        boolean boolean65 = strList31.equals((java.lang.Object) strList61);
        int int66 = strList8.indexOf((java.lang.Object) strList61);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int71 = node70.getSourceOffset();
        double double72 = node70.getDouble();
        boolean boolean73 = node70.isInc();
        boolean boolean74 = node70.isNew();
        boolean boolean75 = strList61.equals((java.lang.Object) boolean74);
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = strList61.reverse();
        java.util.Iterator<java.lang.String> strItor77 = strList76.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = strList76.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strIterableList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strItor77);
    }

    @Test
    public void test15212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15212");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean22 = jSDocInfo20.isDefine();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean25 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
    }

    @Test
    public void test15213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15213");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        boolean boolean6 = node4.isWith();
        int int7 = node4.getLength();
        boolean boolean8 = node4.isDebugger();
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node4.setJSType(jSType9);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean17 = typePosition16.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList18 = com.google.common.collect.ImmutableList.of(typePosition11, typePosition12, typePosition13, typePosition14, typePosition15, typePosition16);
        typePosition11.setPositionInformation((int) (byte) -1, 48, 4095, 46);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        boolean boolean47 = node45.isVoid();
        node45.setSourceEncodedPosition(4095);
        typePosition11.setItem(node45);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition51 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int52 = namePosition51.getEndLine();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean57 = node56.isVar();
        node56.putBooleanProp(30, false);
        boolean boolean61 = node56.isSwitch();
        boolean boolean62 = node56.isUnscopedQualifiedName();
        boolean boolean63 = node56.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        node56.setStaticSourceFile(staticSourceFile64);
        boolean boolean66 = node56.isGetElem();
        namePosition51.setItem(node56);
        boolean boolean68 = node56.isThrow();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder69 = node56.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node70 = node45.useSourceInfoFrom(node56);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(12, node4, node70, 29, 32);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(typePositionList18);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder69);
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test15214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15214");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        boolean boolean51 = jSDocInfo42.hasType();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo42.getModifies();
        strSet52.clear();
        java.util.Iterator<java.lang.String> strItor54 = strSet52.iterator();
        boolean boolean55 = strSet52.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test15215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15215");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isGetterDef();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        com.google.javascript.rhino.Node node19 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isVar();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node29 = node23.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node30 = node11.copyInformationFromForTree(node29);
        boolean boolean31 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = node3.useSourceInfoIfMissingFrom(node30);
        boolean boolean33 = node32.isWith();
        node32.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test15216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15216");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExterns();
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        jSDocInfoBuilder1.recordOriginalCommentString("TYPEOF");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression28);
        com.google.javascript.rhino.Node node36 = jSTypeExpression28.getRoot();
        boolean boolean37 = jSDocInfoBuilder1.recordThisType(jSTypeExpression28);
        boolean boolean38 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean40 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nBITXOR Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n 51 [quoted: 1]\n\n\nTree2:\nGETELEM [length: 31]\n    STRING  43\n    NUMBER 0.0 43 [directives: []]\n\n\nSubtree1: BITXOR Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n 51 [quoted: 1]\n\n\nSubtree2: GETELEM [length: 31]\n    STRING  43\n    NUMBER 0.0 43 [directives: []]\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test15217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15217");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.isExpose();
        java.lang.String str29 = jSDocInfo20.getSourceName();
        java.lang.String str30 = jSDocInfo20.getDescription();
        boolean boolean31 = jSDocInfo20.isExpose();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test15218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15218");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = marker66.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = marker66.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition73 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition74 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition75 = marker66.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition76 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition77 = marker66.getAnnotation();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(typePosition71);
        org.junit.Assert.assertNull(stringPosition72);
        org.junit.Assert.assertNull(nodeSourcePosition73);
        org.junit.Assert.assertNull(stringPosition74);
        org.junit.Assert.assertNull(stringPosition75);
        org.junit.Assert.assertNull(stringPosition76);
        org.junit.Assert.assertNull(stringPosition77);
    }

    @Test
    public void test15219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15219");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        int int23 = node14.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node14.getJSDocInfo();
        boolean boolean25 = node14.isIn();
        node3.addChildrenToFront(node14);
        boolean boolean27 = node3.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15220");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.rhino.Node node36 = node15.getChildBefore(node35);
        boolean boolean37 = node15.isVarArgs();
        boolean boolean38 = node15.isIn();
        com.google.javascript.rhino.Node node40 = node15.getAncestor(46);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable41 = node15.getAncestors();
        com.google.javascript.rhino.jstype.JSType jSType42 = node15.getJSType();
        boolean boolean43 = node15.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(ancestorIterable41);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test15221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15221");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean10 = strSet6.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator63 = strList60.spliterator();
        boolean boolean64 = strList30.equals((java.lang.Object) strList60);
        boolean boolean65 = strSet6.addAll((java.util.Collection<java.lang.String>) strList60);
        boolean boolean66 = strList60.isEmpty();
        java.lang.Object obj67 = null;
        boolean boolean68 = strList60.equals(obj67);
        java.lang.Object[] objArray69 = strList60.toArray();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test15222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15222");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        com.google.javascript.rhino.Node node17 = node12.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.children();
        boolean boolean19 = node12.isLabelName();
        java.lang.Object obj21 = node12.getProp(48);
        double double22 = node12.getDouble();
        boolean boolean23 = node12.isContinue();
        boolean boolean24 = node12.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15223");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        int int17 = typePosition2.getStartLine();
        com.google.javascript.rhino.Node node18 = typePosition2.getItem();
        boolean boolean19 = node18.isLabel();
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean25 = node24.isNull();
        boolean boolean26 = node24.isSyntheticBlock();
        boolean boolean27 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node28 = node24.removeChildren();
        java.util.Set<java.lang.String> strSet29 = node24.getDirectives();
        boolean boolean30 = node24.hasChildren();
        boolean boolean31 = node24.isSetterDef();
        boolean boolean32 = node24.isDec();
        node18.addChildrenToFront(node24);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test15224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15224");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test15225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15225");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean3 = typePosition2.hasBrackets();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean8 = node7.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet15);
        java.lang.Object obj19 = node12.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node7.copyInformationFrom(node12);
        typePosition2.setItem(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node33 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean34 = node33.isAssignAdd();
        boolean boolean35 = node33.isFromExterns();
        com.google.javascript.rhino.Node node36 = node20.copyInformationFromForTree(node33);
        boolean boolean37 = node20.isDelProp();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int42 = node41.getSourceOffset();
        boolean boolean43 = node41.isFor();
        java.lang.Object obj45 = node41.getProp(49);
        java.util.Set<java.lang.String> strSet46 = node41.getDirectives();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean49 = jSDocInfoBuilder48.recordNoTypeCheck();
        boolean boolean50 = jSDocInfoBuilder48.isInterfaceRecorded();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        int int57 = node54.getType();
        boolean boolean58 = node54.isGetterDef();
        node54.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = jSDocInfoBuilder48.build(node54);
        boolean boolean62 = jSDocInfo61.isNoSideEffects();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo61.setAssociatedNode(node64);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(49, node20, node41, node64, (int) (short) 0, 36);
        boolean boolean69 = node68.isDefaultCase();
        boolean boolean70 = node68.isDelProp();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100, node68, 16, 24);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean78 = node77.isNull();
        boolean boolean79 = node77.isWhile();
        com.google.javascript.rhino.Node node80 = node77.getLastSibling();
        node68.addChildrenToBack(node77);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 40 + "'", int57 == 40);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test15226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15226");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        boolean boolean8 = jSDocInfoBuilder5.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node12, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray22 = (java.util.ArrayList<java.lang.String>[]) arrayListArray21;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder23 = strListBuilder19.add((java.util.ArrayList<java.lang.String>[]) arrayListArray21);
        boolean boolean24 = jSTypeExpression18.equals((java.lang.Object) arrayListArray21);
        boolean boolean25 = jSDocInfoBuilder5.recordDefineType(jSTypeExpression18);
        com.google.javascript.rhino.Node node26 = jSTypeExpression18.getRoot();
        boolean boolean28 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression18, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder30.isInterfaceRecorded();
        boolean boolean33 = jSDocInfoBuilder30.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj39 = node37.getProp(43);
        boolean boolean40 = node37.isCall();
        boolean boolean41 = node37.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = new com.google.javascript.rhino.JSTypeExpression(node37, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder44 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray46 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray47 = (java.util.ArrayList<java.lang.String>[]) arrayListArray46;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder48 = strListBuilder44.add((java.util.ArrayList<java.lang.String>[]) arrayListArray46);
        boolean boolean49 = jSTypeExpression43.equals((java.lang.Object) arrayListArray46);
        boolean boolean50 = jSDocInfoBuilder30.recordDefineType(jSTypeExpression43);
        boolean boolean51 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression43);
        boolean boolean52 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.isInterfaceRecorded();
        boolean boolean57 = jSDocInfoBuilder54.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        boolean boolean64 = node61.isCall();
        boolean boolean65 = node61.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = new com.google.javascript.rhino.JSTypeExpression(node61, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder68 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray70 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray71 = (java.util.ArrayList<java.lang.String>[]) arrayListArray70;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder72 = strListBuilder68.add((java.util.ArrayList<java.lang.String>[]) arrayListArray70);
        boolean boolean73 = jSTypeExpression67.equals((java.lang.Object) arrayListArray70);
        boolean boolean74 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression67);
        boolean boolean75 = jSDocInfoBuilder1.recordThisType(jSTypeExpression67);
        boolean boolean76 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean77 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean79 = jSDocInfoBuilder1.recordDescription("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        boolean boolean82 = jSDocInfoBuilder1.recordParameterDescription("STRING \n", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = null;
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n", staticSourceFile84, 0, 51);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(strListArray22);
        org.junit.Assert.assertNotNull(strListBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strListBuilder44);
        org.junit.Assert.assertNotNull(arrayListArray46);
        org.junit.Assert.assertNotNull(strListArray47);
        org.junit.Assert.assertNotNull(strListBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strListBuilder68);
        org.junit.Assert.assertNotNull(arrayListArray70);
        org.junit.Assert.assertNotNull(strListArray71);
        org.junit.Assert.assertNotNull(strListBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test15227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15227");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int34 = strList32.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int45 = strList43.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList64 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList32, (java.lang.Iterable<java.lang.String>) strList43, (java.lang.Iterable<java.lang.String>) strList54, (java.lang.Iterable<java.lang.String>) strList63);
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = strList54.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor66 = strList54.iterator();
        java.lang.String str67 = strList54.toString();
        com.google.common.collect.ImmutableList.Builder<java.util.ListIterator<java.lang.String>> strItorBuilder68 = com.google.common.collect.ImmutableList.builder();
        int int69 = strList54.indexOf((java.lang.Object) strItorBuilder68);
        boolean boolean70 = strSet23.containsAll((java.util.Collection<java.lang.String>) strList54);
        strSet23.clear();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray72 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray73 = strSet23.toArray(jSDocInfoArray72);
        java.util.Iterator<java.lang.String> strItor74 = strSet23.iterator();
        int int75 = strSet23.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strIterableList64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str67, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strItorBuilder68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSDocInfoArray72);
        org.junit.Assert.assertNotNull(jSDocInfoArray73);
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test15228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15228");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str12 = stringPosition11.getItem();
        java.lang.String str13 = stringPosition11.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str15 = stringPosition14.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str17 = stringPosition16.getItem();
        java.lang.String str18 = stringPosition16.getItem();
        int int19 = stringPosition16.getPositionOnStartLine();
        int int20 = stringPosition16.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition22 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str24 = stringPosition23.getItem();
        stringPosition23.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str28 = stringPosition27.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        java.lang.String str31 = stringPosition29.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str33 = stringPosition32.getItem();
        java.lang.String str34 = stringPosition32.getItem();
        int int35 = stringPosition32.getPositionOnStartLine();
        int int36 = stringPosition32.getStartLine();
        int int37 = stringPosition32.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList38 = com.google.common.collect.ImmutableList.of(stringPosition8, stringPosition11, stringPosition14, stringPosition16, stringPosition21, stringPosition22, stringPosition23, stringPosition27, stringPosition29, stringPosition32);
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList41 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition32);
        int int42 = stringPosition32.getPositionOnStartLine();
        int int43 = stringPosition32.getStartLine();
        int int44 = stringPosition32.getPositionOnStartLine();
        int int45 = stringPosition32.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(stringPositionList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(stringPositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test15229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15229");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        boolean boolean67 = node16.isThrow();
        int int68 = node16.getLineno();
        node16.setSourceFileForTesting("");
        boolean boolean71 = node16.isNull();
        com.google.javascript.rhino.Node node72 = node16.getNext();
        node72.addSuppression("STRING  43 [source_file: [, hi!, , , hi!, , hi!, ]]\n");
        boolean boolean75 = node72.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 43 + "'", int68 == 43);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test15230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15230");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable3 = node1.getAncestors();
        java.lang.Object obj5 = node1.getProp(8);
        boolean boolean6 = node1.isDebugger();
        com.google.javascript.rhino.Node node7 = node1.removeFirstChild();
        int int9 = node1.getIntProp(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(ancestorIterable3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test15231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15231");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression2);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.recordNoTypeCheck();
        boolean boolean7 = jSDocInfoBuilder5.isInterfaceRecorded();
        jSDocInfoBuilder5.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean12 = jSDocInfoBuilder5.recordIdGenerator();
        boolean boolean13 = jSDocInfoBuilder5.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression28);
        boolean boolean36 = jSDocInfoBuilder5.recordThisType(jSTypeExpression28);
        boolean boolean37 = jSDocInfoBuilder1.recordThisType(jSTypeExpression28);
        boolean boolean38 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean39 = jSDocInfoBuilder1.isPopulated();
        boolean boolean41 = jSDocInfoBuilder1.recordDeprecationReason("NUMBER 0.0");
        boolean boolean42 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test15232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15232");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, 42);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int15 = node14.getSourceOffset();
        com.google.javascript.rhino.Node node16 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet23);
        com.google.javascript.rhino.Node node26 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int37 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node38 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.javascript.rhino.Node node48 = node36.useSourceInfoIfMissingFromForTree(node42);
        boolean boolean49 = node48.isContinue();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int60 = node59.getSourceOffset();
        com.google.javascript.rhino.Node node61 = node53.useSourceInfoIfMissingFromForTree(node59);
        boolean boolean62 = node61.isAssignAdd();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean67 = node66.isVar();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) ' ', node20, node48, node61, node66, 1, 100);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node74.addChildrenToFront(node78);
        com.google.javascript.rhino.Node node81 = node74.getChildAtIndex(0);
        java.lang.String str82 = node81.toString();
        boolean boolean83 = node81.isExprResult();
        boolean boolean84 = node81.isCall();
        com.google.javascript.rhino.Node node85 = node66.srcrefTree(node81);
        com.google.javascript.rhino.Node node86 = node3.copyInformationFrom(node81);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "STRING  43" + "'", str82, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test15233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15233");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean10 = strSet6.contains((java.lang.Object) 10.0d);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int15 = node14.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType16 = node14.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder17 = node14.getJsDocBuilderForNode();
        boolean boolean18 = node14.isOr();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node22.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node29 = node22.getChildAtIndex(0);
        boolean boolean30 = node22.isExprResult();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean35 = node34.isNull();
        boolean boolean36 = node34.isThis();
        boolean boolean37 = node22.hasChild(node34);
        com.google.javascript.rhino.Node node38 = node14.useSourceInfoIfMissingFromForTree(node22);
        node38.setCharno(39);
        boolean boolean41 = strSet6.contains((java.lang.Object) 39);
        strSet6.clear();
        int int43 = strSet6.size();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(jSType16);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test15234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15234");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo20.getThisType();
        boolean boolean24 = jSDocInfo20.shouldPreserveTry();
        boolean boolean25 = jSDocInfo20.hasReturnType();
        jSDocInfo20.setDeprecated(false);
        boolean boolean28 = jSDocInfo20.isDefine();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType34 = node32.getJSType();
        boolean boolean35 = node32.isDelProp();
        boolean boolean36 = node32.isQualifiedName();
        jSDocInfo20.setAssociatedNode(node32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15235");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getLength();
        com.google.javascript.rhino.InputId inputId5 = node3.getInputId();
        boolean boolean6 = node3.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(inputId5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15236");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.util.stream.Stream<java.lang.String> strStream46 = strSet6.stream();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean51 = node50.isOptionalArg();
        node50.setSourceEncodedPosition(12);
        boolean boolean54 = node50.isFromExterns();
        boolean boolean55 = node50.isNull();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node59.addChildrenToFront(node63);
        com.google.javascript.rhino.Node node66 = node59.getChildAtIndex(0);
        java.lang.String str67 = node66.toString();
        node66.setSourceEncodedPositionForTree((int) (byte) -1);
        com.google.javascript.rhino.Node node70 = node50.clonePropsFrom(node66);
        com.google.javascript.rhino.InputId inputId71 = null;
        node66.setInputId(inputId71);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj78 = node76.getProp(43);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int83 = node82.getSourceOffset();
        com.google.javascript.rhino.Node node84 = node76.useSourceInfoIfMissingFromForTree(node82);
        boolean boolean85 = node84.isAssignAdd();
        boolean boolean86 = node84.isEmpty();
        node84.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node89 = node66.useSourceInfoFromForTree(node84);
        boolean boolean90 = strSet6.contains((java.lang.Object) node89);
        node89.addSuppression("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "STRING  43" + "'", str67, "STRING  43");
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test15237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15237");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean30 = typePosition29.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList31 = com.google.common.collect.ImmutableList.of(typePosition24, typePosition25, typePosition26, typePosition27, typePosition28, typePosition29);
        int int32 = typePosition26.getEndLine();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean37 = node36.isNull();
        boolean boolean38 = node36.isSyntheticBlock();
        boolean boolean39 = node36.hasMoreThanOneChild();
        typePosition26.setItem(node36);
        com.google.javascript.rhino.Node node41 = node36.getParent();
        jSDocInfo20.setAssociatedNode(node36);
        boolean boolean43 = jSDocInfo20.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(typePositionList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test15238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15238");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 48, 26);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15239");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object[] objArray25 = strSet22.toArray();
        boolean boolean26 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        boolean boolean36 = strSet22.containsAll((java.util.Collection<java.lang.String>) strSet33);
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int47 = strList45.indexOf((java.lang.Object) 'a');
        int int48 = strList45.size();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray52 = strList45.toArray(strArray51);
        boolean boolean53 = strSet22.containsAll((java.util.Collection<java.lang.String>) strList45);
        boolean boolean54 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet22);
        jSDocInfoBuilder1.markAnnotation("ERROR  43\n", 38, 176129);
        boolean boolean59 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.Node node60 = null;
        jSDocInfoBuilder1.markTypeNode(node60, 3, (-1), (int) '4', (int) '#', true);
        boolean boolean67 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder69 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder69.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = null;
        jSDocInfoBuilder69.markName("hi!", staticSourceFile73, (int) (short) 0, (int) (short) 100);
        boolean boolean77 = jSDocInfoBuilder69.recordNoTypeCheck();
        boolean boolean78 = jSDocInfoBuilder69.recordExpose();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node82.addChildrenToFront(node86);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = jSDocInfoBuilder69.build(node86);
        boolean boolean89 = jSDocInfo88.isConstructor();
        int int90 = jSDocInfo88.getExtendedInterfacesCount();
        boolean boolean91 = jSDocInfo88.isIdGenerator();
        java.lang.String str92 = jSDocInfo88.getFileOverview();
        boolean boolean93 = jSDocInfo88.isNoTypeCheck();
        boolean boolean94 = jSDocInfo88.isExpose();
        java.util.Set<java.lang.String> strSet95 = jSDocInfo88.getParameterNames();
        boolean boolean96 = jSDocInfoBuilder1.recordModifies(strSet95);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test15240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15240");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet9);
        java.lang.Object[] objArray12 = strSet9.toArray();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        boolean boolean23 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet9.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder26.markName("hi!", staticSourceFile30, (int) (short) 0, (int) (short) 100);
        boolean boolean34 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean35 = jSDocInfoBuilder26.recordExpose();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node39.addChildrenToFront(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = jSDocInfoBuilder26.build(node43);
        java.lang.String str46 = jSDocInfo45.getMeaning();
        boolean boolean47 = jSDocInfo45.isExport();
        boolean boolean48 = strSet9.equals((java.lang.Object) jSDocInfo45);
        boolean boolean49 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet9);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet56);
        java.lang.Object[] objArray59 = strSet56.toArray();
        boolean boolean60 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet56);
        jSDocInfoBuilder1.markName("NUMBER 0.0", (int) (short) -1, (int) (byte) -1);
        boolean boolean66 = jSDocInfoBuilder1.recordLends("STRING  43 [jsdoc_info: JSDocInfo]\n");
        boolean boolean67 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSDocInfo45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test15241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15241");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node12 = node9.cloneNode();
        node12.setType(0);
        boolean boolean15 = node12.isTypeOf();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object[] objArray25 = strSet22.toArray();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        java.lang.Object[] objArray35 = strSet32.toArray();
        boolean boolean36 = strSet22.retainAll((java.util.Collection<java.lang.String>) strSet32);
        int int37 = strSet32.size();
        boolean boolean39 = strSet32.add("");
        int int40 = strSet32.size();
        strSet32.clear();
        java.util.Iterator<java.lang.String> strItor42 = strSet32.iterator();
        strSet32.clear();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet50);
        java.lang.Object[] objArray53 = strSet50.toArray();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet60);
        java.lang.Object[] objArray63 = strSet60.toArray();
        boolean boolean64 = strSet50.retainAll((java.util.Collection<java.lang.String>) strSet60);
        java.lang.Object[] objArray65 = strSet50.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder67.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        jSDocInfoBuilder67.markName("hi!", staticSourceFile71, (int) (short) 0, (int) (short) 100);
        boolean boolean75 = jSDocInfoBuilder67.recordNoTypeCheck();
        boolean boolean76 = jSDocInfoBuilder67.recordExpose();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node80.addChildrenToFront(node84);
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = jSDocInfoBuilder67.build(node84);
        java.lang.String str87 = jSDocInfo86.getMeaning();
        boolean boolean88 = jSDocInfo86.isExport();
        boolean boolean89 = strSet50.equals((java.lang.Object) jSDocInfo86);
        java.lang.String str90 = jSDocInfo86.getBlockDescription();
        boolean boolean91 = jSDocInfo86.hasReturnType();
        java.lang.String str92 = jSDocInfo86.getBlockDescription();
        com.google.javascript.rhino.Node node93 = jSDocInfo86.getAssociatedNode();
        boolean boolean94 = strSet32.contains((java.lang.Object) node93);
        boolean boolean95 = node93.isFalse();
        com.google.javascript.rhino.Node node96 = node12.copyInformationFrom(node93);
        boolean boolean97 = node96.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(jSDocInfo86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test15242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15242");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '4');
        node1.setVarArgs(false);
        boolean boolean4 = node1.isAssignAdd();
        boolean boolean5 = node1.isExprResult();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test15243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15243");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        java.lang.String str50 = jSDocInfo42.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList51 = jSDocInfo42.getExtendedInterfaces();
        boolean boolean53 = jSDocInfo42.hasParameter("hi!");
        boolean boolean54 = jSDocInfo42.hasBaseType();
        boolean boolean55 = jSDocInfo42.isExterns();
        boolean boolean56 = jSDocInfo42.isNoSideEffects();
        jSDocInfo42.setDeprecated(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(jSTypeExpressionList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15244");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo20.getTypedefType();
        int int26 = jSDocInfo20.getExtendedInterfacesCount();
        int int27 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test15245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15245");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int15 = node14.getSourceOffset();
        com.google.javascript.rhino.Node node16 = node8.useSourceInfoIfMissingFromForTree(node14);
        int int17 = node8.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node8.getJSDocInfo();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(49, node8, (int) (byte) -1, (int) 'a');
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = jSDocInfoBuilder1.build(node21);
        boolean boolean23 = jSDocInfo22.isJavaDispatch();
        java.lang.String str24 = jSDocInfo22.getVersion();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = jSDocInfo22.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertNotNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + visibility25 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility25.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test15246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15246");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordVersion("Node tree inequality:\nTree1:\nNUMBER 12.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 12.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder12.recordParameter("", jSTypeExpression15);
        boolean boolean17 = jSDocInfoBuilder12.recordConstancy();
        boolean boolean18 = jSDocInfoBuilder12.isConstructorRecorded();
        boolean boolean20 = jSDocInfoBuilder12.recordDescription("STRING  0");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder22.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.isInterfaceRecorded();
        boolean boolean29 = jSDocInfoBuilder26.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj35 = node33.getProp(43);
        boolean boolean36 = node33.isCall();
        boolean boolean37 = node33.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = new com.google.javascript.rhino.JSTypeExpression(node33, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder40 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray42 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray43 = (java.util.ArrayList<java.lang.String>[]) arrayListArray42;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder44 = strListBuilder40.add((java.util.ArrayList<java.lang.String>[]) arrayListArray42);
        boolean boolean45 = jSTypeExpression39.equals((java.lang.Object) arrayListArray42);
        boolean boolean46 = jSDocInfoBuilder26.recordDefineType(jSTypeExpression39);
        boolean boolean47 = jSTypeExpression39.isVarArgs();
        java.lang.Object obj48 = null;
        boolean boolean49 = jSTypeExpression39.equals(obj48);
        boolean boolean50 = jSDocInfoBuilder22.recordEnumParameterType(jSTypeExpression39);
        boolean boolean51 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression39);
        boolean boolean52 = jSTypeExpression39.isOptionalArg();
        boolean boolean53 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression39);
        com.google.javascript.rhino.Node node54 = jSTypeExpression39.getRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strListBuilder40);
        org.junit.Assert.assertNotNull(arrayListArray42);
        org.junit.Assert.assertNotNull(strListArray43);
        org.junit.Assert.assertNotNull(strListBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test15247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15247");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node3.siblings();
        boolean boolean10 = node3.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15248");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isNoAlias();
        boolean boolean19 = jSDocInfo14.isIdGenerator();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo14.getSuppressions();
        boolean boolean21 = jSDocInfo14.shouldPreserveTry();
        boolean boolean22 = jSDocInfo14.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test15249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15249");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        boolean boolean6 = jSDocInfoBuilder1.recordReturnDescription("STRING ");
        boolean boolean7 = jSDocInfoBuilder1.recordExterns();
        boolean boolean8 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean10 = jSDocInfoBuilder1.hasParameter("STRING  36");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15250");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        jSDocInfo20.setLicense("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean26 = jSDocInfo20.isExterns();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test15251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15251");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.Node node36 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.InputId inputId37 = null;
        node30.setInputId(inputId37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int49 = node48.getSourceOffset();
        com.google.javascript.rhino.Node node50 = node42.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node54.setDirectives((java.util.Set<java.lang.String>) strSet57);
        com.google.javascript.rhino.Node node60 = node48.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) ' ', node30, node54);
        boolean boolean62 = node3.hasChild(node61);
        boolean boolean63 = node3.isArrayLit();
        boolean boolean64 = node3.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test15252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15252");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        int int68 = node57.getSideEffectFlags();
        boolean boolean69 = node57.isRegExp();
        boolean boolean70 = node57.isSwitch();
        boolean boolean71 = node57.isAssignAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node57.siblings();
        boolean boolean73 = node57.hasMoreThanOneChild();
        java.lang.String str74 = node57.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "STRING  43" + "'", str74, "STRING  43");
    }

    @Test
    public void test15253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15253");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isVar();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node22 = node16.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node23 = node4.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(0, node22);
        boolean boolean25 = node24.isDec();
        node24.setVarArgs(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test15254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15254");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        com.google.javascript.rhino.Node node11 = node3.removeChildren();
        boolean boolean12 = node11.isInstanceOf();
        boolean boolean13 = node11.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15255");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        boolean boolean11 = node3.isDefaultCase();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node15.addChildrenToFront(node19);
        node19.setQuotedString();
        com.google.javascript.rhino.Node node22 = node19.removeFirstChild();
        int int24 = node19.getIntProp((int) 'a');
        node19.setCharno(47);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int37 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node38 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean43 = node42.isVar();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node48 = node42.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node49 = node30.copyInformationFromForTree(node48);
        boolean boolean50 = node19.hasChild(node49);
        boolean boolean51 = node49.isDec();
        node49.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node54 = node3.srcrefTree(node49);
        java.lang.String str55 = node54.toStringTree();
        boolean boolean56 = node54.isIf();
        boolean boolean57 = node54.isGetElem();
        boolean boolean58 = node54.isLocalResultCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "STRING \n" + "'", str55, "STRING \n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test15256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15256");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isGetterDef();
        node3.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        boolean boolean27 = node3.isEquivalentToTyped(node13);
        com.google.javascript.rhino.Node node28 = node3.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = node28.isLabelName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test15257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15257");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        double double6 = node4.getDouble();
        boolean boolean7 = node4.isFor();
        java.util.Set<java.lang.String> strSet8 = node4.getDirectives();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, node4);
        boolean boolean10 = node9.isEmpty();
        boolean boolean11 = node9.isDebugger();
        boolean boolean12 = node9.isQuotedString();
        boolean boolean13 = node9.isWhile();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node9.setJSType(jSType14);
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node9.getJSDocInfo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
    }

    @Test
    public void test15258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15258");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
    }

    @Test
    public void test15259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15259");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.isInterface();
        boolean boolean30 = jSDocInfo20.hasParameter("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        boolean boolean31 = jSDocInfo20.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo20.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
    }

    @Test
    public void test15260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15260");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 52, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = new com.google.javascript.rhino.JSTypeExpression(node3, "NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression6);
        boolean boolean8 = jSTypeExpression6.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15261");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isString();
        int int14 = node3.getType();
        int int15 = node3.getLineno();
        boolean boolean16 = node3.isDefaultCase();
        com.google.javascript.rhino.InputId inputId17 = node3.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 40 + "'", int14 == 40);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 43 + "'", int15 == 43);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(inputId17);
    }

    @Test
    public void test15262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15262");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getParent();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node22.setJSType(jSType23);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test15263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15263");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(jSDocInfoBuilderBuilder0);
    }

    @Test
    public void test15264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15264");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        boolean boolean18 = node9.isDefaultCase();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        int int25 = node22.getType();
        boolean boolean26 = node22.isGetterDef();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node29 = node28.removeChildren();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node28.getAncestors();
        com.google.javascript.rhino.Node node31 = node22.srcref(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean36 = node35.isVar();
        node35.putBooleanProp(30, false);
        boolean boolean40 = node35.isSwitch();
        boolean boolean41 = node35.isUnscopedQualifiedName();
        boolean boolean42 = node35.hasChildren();
        boolean boolean43 = node35.isDefaultCase();
        int int45 = node35.getIntProp((int) '#');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node35.children();
        boolean boolean47 = node35.isIn();
        node35.setSourceEncodedPositionForTree((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, node9, node22, node35);
        node35.setType(0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder53 = node35.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder53.append("GETELEM 43");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 40 + "'", int25 == 40);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test15265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15265");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder1.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        int int22 = node18.getSourcePosition();
        java.lang.String str26 = node18.toString(false, true, false);
        boolean boolean27 = node18.isDo();
        boolean boolean28 = node18.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = jSDocInfoBuilder1.build(node18);
        boolean boolean30 = node18.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = null;
        boolean boolean36 = jSDocInfoBuilder32.recordParameter("", jSTypeExpression35);
        boolean boolean38 = jSDocInfoBuilder32.recordBlockDescription("[, hi!, , , hi!, , hi!, ]");
        boolean boolean40 = jSDocInfoBuilder32.recordReturnDescription("NUMBER 0.0 43");
        boolean boolean43 = jSDocInfoBuilder32.recordParameterDescription("OR  54\n", "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean48 = node47.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node49 = node47.cloneNode();
        boolean boolean50 = node49.isGetElem();
        node49.addSuppression("");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        boolean boolean58 = node56.isBreak();
        int int59 = node56.getSourcePosition();
        com.google.javascript.rhino.Node node60 = node49.useSourceInfoFrom(node56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node56.getJSDocInfo();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node65.addChildrenToFront(node69);
        boolean boolean72 = node65.getBooleanProp(8);
        com.google.javascript.rhino.Node node73 = node56.clonePropsFrom(node65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = jSDocInfoBuilder32.build(node56);
        node18.addChildrenToBack(node56);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj81 = node79.getProp(43);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int86 = node85.getSourceOffset();
        com.google.javascript.rhino.Node node87 = node79.useSourceInfoIfMissingFromForTree(node85);
        boolean boolean88 = node79.isDefaultCase();
        boolean boolean89 = node79.isEmpty();
        boolean boolean90 = node79.isOptionalArg();
        com.google.javascript.rhino.Node node91 = node18.copyInformationFrom(node79);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176180 + "'", int22 == 176180);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING " + "'", str26, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 176129 + "'", int59 == 176129);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSDocInfo74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test15266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15266");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        boolean boolean33 = jSDocInfo20.hasThisType();
        boolean boolean34 = jSDocInfo20.isExpose();
        int int35 = jSDocInfo20.getParameterCount();
        jSDocInfo20.setLicense("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        java.util.Collection<java.lang.String> strCollection38 = jSDocInfo20.getReferences();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(strCollection38);
    }

    @Test
    public void test15267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15267");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        boolean boolean4 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean9 = node8.isVar();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node14 = node8.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node15 = node8.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = new com.google.javascript.rhino.JSTypeExpression(node15, "STRING  43");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        java.lang.Object[] objArray28 = strSet25.toArray();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet35);
        java.lang.Object[] objArray38 = strSet35.toArray();
        boolean boolean39 = strSet25.retainAll((java.util.Collection<java.lang.String>) strSet35);
        int int40 = strSet35.size();
        boolean boolean42 = strSet35.add("");
        boolean boolean43 = jSTypeExpression18.equals((java.lang.Object) strSet35);
        boolean boolean44 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression18);
        boolean boolean45 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(jSTypeExpression18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test15268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15268");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = jSTypeExpression38.equals((java.lang.Object) node49);
        boolean boolean51 = jSDocInfoBuilder22.recordExtendedInterface(jSTypeExpression38);
        boolean boolean52 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression38);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean57 = jSDocInfoBuilder1.recordParameterDescription("STRING ", "hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.isInterfaceRecorded();
        boolean boolean62 = jSDocInfoBuilder59.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj68 = node66.getProp(43);
        boolean boolean69 = node66.isCall();
        boolean boolean70 = node66.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node66, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder73 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray75 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray76 = (java.util.ArrayList<java.lang.String>[]) arrayListArray75;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder77 = strListBuilder73.add((java.util.ArrayList<java.lang.String>[]) arrayListArray75);
        boolean boolean78 = jSTypeExpression72.equals((java.lang.Object) arrayListArray75);
        boolean boolean79 = jSDocInfoBuilder59.recordDefineType(jSTypeExpression72);
        boolean boolean80 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression72);
        boolean boolean81 = jSDocInfoBuilder1.recordExpose();
        boolean boolean82 = jSDocInfoBuilder1.isPopulated();
        boolean boolean83 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean84 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strListBuilder73);
        org.junit.Assert.assertNotNull(arrayListArray75);
        org.junit.Assert.assertNotNull(strListArray76);
        org.junit.Assert.assertNotNull(strListBuilder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test15269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15269");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isVarArgs();
        node3.putBooleanProp(32, true);
        int int16 = node3.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test15270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15270");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str27 = jSDocInfo20.getVersion();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        java.lang.String str29 = jSDocInfo20.getMeaning();
        int int30 = jSDocInfo20.getParameterCount();
        boolean boolean31 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo20.getTypedefType();
        boolean boolean33 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean34 = jSDocInfo20.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test15271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15271");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isString();
        int int14 = node3.getCharno();
        boolean boolean15 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj22 = node20.getProp(43);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean27 = node26.isIf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        boolean boolean40 = node39.isAssignAdd();
        boolean boolean41 = node39.isEmpty();
        node39.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean48 = node47.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet55);
        java.lang.Object obj59 = node52.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node60 = node47.copyInformationFrom(node52);
        boolean boolean61 = node47.isOr();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(1, node20, node26, node39, node47, 176180, 1);
        boolean boolean65 = node26.isInstanceOf();
        boolean boolean66 = node26.isHook();
        com.google.javascript.rhino.Node node67 = node3.copyInformationFromForTree(node26);
        node3.setString("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        node3.setLineno(53);
        boolean boolean72 = node3.isHook();
        boolean boolean73 = node3.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test15272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15272");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        boolean boolean30 = jSDocInfo20.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection31 = jSDocInfo20.getMarkers();
        java.lang.String str32 = jSDocInfo20.getMeaning();
        boolean boolean33 = jSDocInfo20.hasThisType();
        boolean boolean35 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(markerCollection31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test15273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15273");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(12);
        sideEffectFlags1.clearAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
    }

    @Test
    public void test15274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15274");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str27 = jSDocInfo20.getVersion();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo20.getModifies();
        java.lang.Object[] objArray30 = strSet29.toArray();
        strSet29.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = strSet29.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test15275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15275");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        node3.putBooleanProp(30, false);
        boolean boolean10 = node3.isReturn();
        boolean boolean11 = node3.isLabel();
        boolean boolean12 = node3.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15276");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        boolean boolean23 = jSDocInfo20.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        jSDocInfo20.addSuppression("STRING  43");
        boolean boolean27 = jSDocInfo20.containsDeclaration();
        boolean boolean28 = jSDocInfo20.hasThisType();
        boolean boolean29 = jSDocInfo20.hasFileOverview();
        boolean boolean30 = jSDocInfo20.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15277");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        int int9 = node5.getType();
        boolean boolean10 = node5.isInc();
        boolean boolean11 = node5.isNE();
        boolean boolean12 = node5.isName();
        boolean boolean13 = node5.isRegExp();
        boolean boolean14 = node5.isArrayLit();
        boolean boolean15 = node5.isThis();
        boolean boolean16 = node5.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test15278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15278");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node3.new FileLevelJsDocBuilder();
        boolean boolean15 = node3.isContinue();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean17 = typePosition16.hasBrackets();
        int int18 = typePosition16.getEndLine();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int23 = node22.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType24 = node22.getJSType();
        boolean boolean25 = node22.isWith();
        typePosition16.setItem(node22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int37 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node38 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.javascript.rhino.Node node48 = node36.useSourceInfoIfMissingFromForTree(node42);
        boolean boolean49 = node42.isThrow();
        boolean boolean50 = node42.isNot();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean55 = node54.isVar();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node60 = node54.copyInformationFromForTree(node59);
        java.lang.String str61 = node42.checkTreeEquals(node60);
        com.google.javascript.rhino.Node node62 = null;
        com.google.javascript.rhino.Node node63 = node42.getChildBefore(node62);
        boolean boolean64 = node42.isVarArgs();
        boolean boolean65 = node42.isIn();
        com.google.javascript.rhino.Node node67 = node42.getAncestor(46);
        com.google.javascript.rhino.Node node68 = node22.srcrefTree(node42);
        com.google.javascript.rhino.Node node69 = node3.copyInformationFromForTree(node42);
        int int70 = node69.getSideEffectFlags();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder71 = node69.getJsDocBuilderForNode();
        fileLevelJsDocBuilder71.append("NEW OR  54\n 4");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str61, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder71);
    }

    @Test
    public void test15279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15279");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        int int21 = strSet16.size();
        boolean boolean23 = strSet16.add("");
        int int24 = strSet16.size();
        strSet16.clear();
        java.util.Iterator<java.lang.String> strItor26 = strSet16.iterator();
        java.util.Iterator<java.lang.String> strItor27 = strSet16.iterator();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isVar();
        node31.putBooleanProp(30, false);
        boolean boolean36 = node31.isSwitch();
        boolean boolean37 = node31.isUnscopedQualifiedName();
        boolean boolean38 = node31.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node31.setStaticSourceFile(staticSourceFile39);
        boolean boolean41 = node31.isGetElem();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int46 = node45.getSourceOffset();
        node45.detachChildren();
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoFromForTree(node45);
        boolean boolean49 = strSet16.equals((java.lang.Object) node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node31.children();
        boolean boolean51 = node31.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test15280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15280");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        boolean boolean59 = strList49.contains((java.lang.Object) node57);
        boolean boolean60 = node57.isThis();
        java.util.Set<java.lang.String> strSet61 = node57.getDirectives();
        boolean boolean62 = node57.isUnscopedQualifiedName();
        boolean boolean63 = node57.isDec();
        int int64 = node57.getLineno();
        int int65 = node57.getType();
        node57.setType(7);
        boolean boolean68 = node57.isCatch();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 43 + "'", int64 == 43);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 40 + "'", int65 == 40);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test15281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15281");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node10 = node3.cloneTree();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        boolean boolean17 = node14.isCall();
        boolean boolean18 = node14.isGetterDef();
        java.lang.String str19 = node3.checkTreeEquals(node14);
        node3.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node node22 = node3.getLastSibling();
        int int23 = node3.getType();
        node3.setString("ERROR\n    NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 40 + "'", int23 == 40);
    }

    @Test
    public void test15282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15282");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean2 = node1.isScript();
        boolean boolean3 = node1.isAssignAdd();
        node1.setVarArgs(true);
        boolean boolean6 = node1.isDec();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15283");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        int int11 = strList8.size();
        java.lang.Object[] objArray12 = strList8.toArray();
        boolean boolean13 = strList8.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder14 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList15 = strListBuilder14.build();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object[] objArray25 = strSet22.toArray();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        java.lang.Object[] objArray35 = strSet32.toArray();
        boolean boolean36 = strSet22.retainAll((java.util.Collection<java.lang.String>) strSet32);
        java.lang.Object[] objArray37 = strSet22.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator38 = strSet22.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int49 = strList47.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int60 = strList58.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList69 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList79 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList47, (java.lang.Iterable<java.lang.String>) strList58, (java.lang.Iterable<java.lang.String>) strList69, (java.lang.Iterable<java.lang.String>) strList78);
        boolean boolean80 = strSet22.equals((java.lang.Object) strList78);
        java.lang.String[] strArray83 = new java.lang.String[] { "STRING  43", "STRING " };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        boolean boolean86 = strSet22.removeAll((java.util.Collection<java.lang.String>) strList84);
        java.lang.Object[] objArray87 = strList84.toArray();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder88 = strListBuilder14.add(strList84);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList89 = strListBuilder14.build();
        int int90 = strList8.indexOf((java.lang.Object) strListList89);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strListBuilder14);
        org.junit.Assert.assertNotNull(strListList15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(strSpliterator38);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(strIterableList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[STRING  43, STRING ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[STRING  43, STRING ]");
        org.junit.Assert.assertNotNull(strListBuilder88);
        org.junit.Assert.assertNotNull(strListList89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test15284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15284");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        int int20 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node21 = typePosition0.getItem();
        boolean boolean22 = node21.isWhile();
        boolean boolean23 = node21.isFromExterns();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) ' ', 167974, (int) (byte) 1);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node27.setJSType(jSType28);
        node27.addSuppression("STRING  43");
        com.google.javascript.rhino.Node node32 = node21.srcrefTree(node27);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test15285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15285");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        boolean boolean59 = strList49.contains((java.lang.Object) node57);
        boolean boolean60 = node57.isThis();
        boolean boolean61 = node57.isGetProp();
        boolean boolean62 = node57.isThis();
        node57.putIntProp(176129, 23);
        int int66 = node57.getType();
        node57.setSourceFileForTesting("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 40 + "'", int66 == 40);
    }

    @Test
    public void test15286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15286");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object[] objArray25 = strSet22.toArray();
        boolean boolean26 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        boolean boolean36 = strSet22.containsAll((java.util.Collection<java.lang.String>) strSet33);
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int47 = strList45.indexOf((java.lang.Object) 'a');
        int int48 = strList45.size();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray52 = strList45.toArray(strArray51);
        boolean boolean53 = strSet22.containsAll((java.util.Collection<java.lang.String>) strList45);
        boolean boolean54 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Object> objList55 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.String>) strSet22);
        java.util.stream.Stream<java.lang.String> strStream56 = strSet22.parallelStream();
        boolean boolean58 = strSet22.add("Node tree inequality:\nTree1:\nSTRING  43 [synthetic: 1]\n\n\nTree2:\nEQ  32\n\n\nSubtree1: STRING  43 [synthetic: 1]\n\n\nSubtree2: EQ  32\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test15287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15287");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        node62.setWasEmptyNode(true);
        boolean boolean69 = node62.isQuotedString();
        boolean boolean71 = node62.getBooleanProp((int) (byte) 0);
        boolean boolean72 = node62.isEmpty();
        node62.setCharno(29);
        boolean boolean75 = node62.isUnscopedQualifiedName();
        boolean boolean76 = node62.isNull();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test15288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15288");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        boolean boolean26 = jSDocInfo20.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getParameterType("[, hi!, , , hi!, , hi!, ]");
        boolean boolean29 = jSDocInfo20.isDefine();
        jSDocInfo20.setLicense("OR  54\n");
        boolean boolean32 = jSDocInfo20.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test15289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15289");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo20.getVisibility();
        boolean boolean25 = jSDocInfo20.isNoTypeCheck();
        boolean boolean26 = jSDocInfo20.hasType();
        jSDocInfo20.setLicense("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo20.getVisibility();
        int int30 = jSDocInfo20.getExtendedInterfacesCount();
        java.lang.String str31 = jSDocInfo20.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test15290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15290");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean4 = jSDocInfoBuilder3.recordNoTypeCheck();
        boolean boolean5 = jSDocInfoBuilder3.isInterfaceRecorded();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        int int12 = node9.getType();
        boolean boolean13 = node9.isGetterDef();
        node9.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = jSDocInfoBuilder3.build(node9);
        boolean boolean17 = jSDocInfo16.isNoSideEffects();
        boolean boolean18 = jSDocInfo16.hasTypedefType();
        boolean boolean19 = jSDocInfo16.isConsistentIdGenerator();
        boolean boolean20 = jSDocInfo16.containsDeclaration();
        boolean boolean21 = jSDocInfo16.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = jSDocInfo16.getVisibility();
        boolean boolean23 = jSDocInfo16.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo16.getThisType();
        com.google.javascript.rhino.Node node25 = jSDocInfo16.getAssociatedNode();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((-1), node25, 39, 52);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean31 = node30.isFromExterns();
        boolean boolean32 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(41, "STRING  43 [quoted: 1]");
        node35.setQuotedString();
        java.lang.String str37 = node35.getSourceFileName();
        com.google.javascript.rhino.Node node38 = node30.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        int int43 = node42.getSideEffectFlags();
        boolean boolean44 = node42.isQuotedString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(5, node25, node38, node42, 50, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test15291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15291");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object[] objArray17 = strSet14.toArray();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object[] objArray27 = strSet24.toArray();
        boolean boolean28 = strSet14.retainAll((java.util.Collection<java.lang.String>) strSet24);
        java.lang.Object[] objArray29 = strSet14.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet14.spliterator();
        boolean boolean32 = strSet14.add("STRING ");
        boolean boolean33 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet14);
        boolean boolean34 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test15292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15292");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo20.getBaseType();
        boolean boolean24 = jSDocInfo20.isHidden();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean26 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean31 = node30.isNull();
        boolean boolean32 = node30.isSyntheticBlock();
        com.google.javascript.rhino.Node node33 = node30.removeChildren();
        com.google.javascript.rhino.InputId inputId34 = null;
        node30.setInputId(inputId34);
        int int36 = node30.getType();
        node30.setIsSyntheticBlock(true);
        jSDocInfo20.setAssociatedNode(node30);
        boolean boolean40 = jSDocInfo20.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 39 + "'", int36 == 39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test15293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15293");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean7 = typePosition6.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6);
        int int9 = typePosition3.getEndLine();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean14 = node13.isNull();
        boolean boolean15 = node13.isSyntheticBlock();
        boolean boolean16 = node13.hasMoreThanOneChild();
        typePosition3.setItem(node13);
        com.google.javascript.rhino.Node node18 = node13.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.children();
        boolean boolean20 = node13.isVar();
        boolean boolean21 = node13.isGetterDef();
        node13.addSuppression("NUMBER 0.0 43");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isOptionalArg();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node34.addChildrenToFront(node38);
        boolean boolean40 = node34.isGetterDef();
        boolean boolean41 = node34.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj47 = node45.getProp(43);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int52 = node51.getSourceOffset();
        com.google.javascript.rhino.Node node53 = node45.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet60);
        com.google.javascript.rhino.Node node63 = node51.useSourceInfoIfMissingFromForTree(node57);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(32, node34, node51);
        boolean boolean65 = node64.isExprResult();
        boolean boolean66 = node64.isFunction();
        com.google.javascript.rhino.Node node67 = node27.srcrefTree(node64);
        node13.addChildrenToFront(node27);
        boolean boolean69 = node27.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(5, node27, 0, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test15294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15294");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isGetterDef();
        boolean boolean10 = node3.isQuotedString();
        boolean boolean11 = node3.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = node3.getExistingIntProp(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 43");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15295");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition19.getStartLine();
        int int32 = stringPosition19.getPositionOnStartLine();
        int int33 = stringPosition19.getEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test15296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15296");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isNoAlias();
        boolean boolean19 = jSDocInfo14.isJavaDispatch();
        boolean boolean21 = jSDocInfo14.hasDescriptionForParameter("NUMBER 0.0 43");
        boolean boolean22 = jSDocInfo14.isInterface();
        boolean boolean23 = jSDocInfo14.isConstant();
        com.google.javascript.rhino.Node node24 = jSDocInfo14.getAssociatedNode();
        boolean boolean25 = node24.isTrue();
        int int26 = node24.getLineno();
        node24.putBooleanProp(38, true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test15297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15297");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        boolean boolean26 = jSDocInfo20.hasModifies();
        boolean boolean27 = jSDocInfo20.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection28 = jSDocInfo20.getMarkers();
        int int29 = jSDocInfo20.getParameterCount();
        boolean boolean30 = jSDocInfo20.isConstructor();
        java.lang.String str31 = jSDocInfo20.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(markerCollection28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test15298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15298");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        node4.putIntProp(46, 30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordNoTypeCheck();
        boolean boolean16 = jSDocInfoBuilder14.isInterfaceRecorded();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj22 = node20.getProp(43);
        int int23 = node20.getType();
        boolean boolean24 = node20.isGetterDef();
        node20.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = jSDocInfoBuilder14.build(node20);
        boolean boolean28 = jSDocInfo27.isNoSideEffects();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo27.setAssociatedNode(node30);
        boolean boolean32 = node30.isInc();
        int int33 = node4.getIndexOfChild(node30);
        boolean boolean34 = node4.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, (int) '4', 32);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 40 + "'", int23 == 40);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test15299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15299");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        com.google.javascript.rhino.Node node11 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node12 = node3.removeChildren();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean15 = node14.isFalse();
        boolean boolean16 = node14.isDelProp();
        com.google.javascript.rhino.Node node17 = node14.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node17.setStaticSourceFile(staticSourceFile18);
        node17.setCharno(41);
        node17.addSuppression("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean24 = node17.isNE();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean31 = typePosition30.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList32 = com.google.common.collect.ImmutableList.of(typePosition25, typePosition26, typePosition27, typePosition28, typePosition29, typePosition30);
        int int33 = typePosition27.getEndLine();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean38 = node37.isNull();
        boolean boolean39 = node37.isSyntheticBlock();
        boolean boolean40 = node37.hasMoreThanOneChild();
        typePosition27.setItem(node37);
        com.google.javascript.rhino.Node node42 = node37.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node37.children();
        boolean boolean44 = node37.isVar();
        java.lang.String str45 = node37.getQualifiedName();
        node37.putIntProp(176180, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            node12.addChildrenAfter(node17, node37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(typePositionList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test15300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15300");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isAssignAdd();
        boolean boolean19 = node17.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node17);
        boolean boolean21 = jSDocInfo20.isNoAlias();
        boolean boolean22 = jSDocInfo20.isIdGenerator();
        boolean boolean23 = jSDocInfo20.isDefine();
        java.lang.String str24 = jSDocInfo20.getMeaning();
        boolean boolean25 = jSDocInfo20.isDefine();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test15301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15301");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        boolean boolean67 = node16.isThrow();
        com.google.javascript.rhino.Node node68 = node16.detachFromParent();
        boolean boolean69 = node16.isVarArgs();
        boolean boolean70 = node16.isFromExterns();
        boolean boolean71 = node16.isAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test15302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15302");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getNext();
        int int23 = node18.getSideEffectFlags();
        boolean boolean24 = node18.isNull();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean31 = node30.isVar();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node36 = node30.copyInformationFromForTree(node35);
        boolean boolean37 = node36.isRegExp();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((-1), node36);
        boolean boolean39 = node38.isAssignAdd();
        boolean boolean40 = node18.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 10.0f, (int) ' ', 12);
        boolean boolean45 = node44.hasOneChild();
        com.google.javascript.rhino.Node node46 = node38.copyInformationFrom(node44);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test15303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15303");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        boolean boolean24 = node21.isDec();
        com.google.javascript.rhino.Node node25 = node21.cloneNode();
        boolean boolean26 = node25.isLocalResultCall();
        boolean boolean27 = node25.isCall();
        boolean boolean28 = node25.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15304");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNull();
        boolean boolean6 = node4.isThis();
        boolean boolean7 = node4.isComma();
        node4.setVarArgs(false);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean15 = node14.isVar();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean38 = node31.isThrow();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(35, node14, node31);
        node39.setLength(31);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean46 = node45.isNull();
        boolean boolean47 = node45.isFromExterns();
        boolean boolean48 = node45.isFunction();
        com.google.javascript.rhino.Node node49 = node45.cloneTree();
        boolean boolean50 = node49.isFor();
        com.google.javascript.rhino.Node node51 = node39.srcrefTree(node49);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet58);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node55.children();
        boolean boolean62 = node39.hasChild(node55);
        int int63 = node39.getLength();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(10, node4, node39, 7, 15);
        java.lang.Class<?> wildcardClass68 = node4.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 31 + "'", int63 == 31);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test15305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15305");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean2 = node1.isScript();
        boolean boolean3 = node1.isAssignAdd();
        java.lang.Object obj5 = node1.getProp((int) (byte) 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test15306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15306");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        int int13 = node4.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(49, node4, (int) (byte) -1, (int) 'a');
        boolean boolean18 = node17.isQualifiedName();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean23 = node22.isIf();
        boolean boolean24 = node22.isName();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        node33.setQuotedString();
        com.google.javascript.rhino.Node node36 = node33.cloneNode();
        boolean boolean37 = node36.isFalse();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFrom(node36);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test15307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15307");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("STRING  43");
        boolean boolean11 = jSDocInfoBuilder1.recordFileOverview("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder13.recordTypedef(jSTypeExpression14);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        jSDocInfoBuilder13.markName("NUMBER 0.0 43\n", staticSourceFile17, 45, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        boolean boolean25 = jSDocInfoBuilder22.recordBlockDescription("hi!");
        jSDocInfoBuilder22.recordOriginalCommentString("STRING ");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean33 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean34 = jSDocInfoBuilder30.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder36.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.isInterfaceRecorded();
        boolean boolean43 = jSDocInfoBuilder40.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj49 = node47.getProp(43);
        boolean boolean50 = node47.isCall();
        boolean boolean51 = node47.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = new com.google.javascript.rhino.JSTypeExpression(node47, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder54 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray56 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray57 = (java.util.ArrayList<java.lang.String>[]) arrayListArray56;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder58 = strListBuilder54.add((java.util.ArrayList<java.lang.String>[]) arrayListArray56);
        boolean boolean59 = jSTypeExpression53.equals((java.lang.Object) arrayListArray56);
        boolean boolean60 = jSDocInfoBuilder40.recordDefineType(jSTypeExpression53);
        com.google.javascript.rhino.Node node61 = jSTypeExpression53.getRoot();
        boolean boolean63 = jSDocInfoBuilder36.recordThrowDescription(jSTypeExpression53, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder65.isInterfaceRecorded();
        boolean boolean68 = jSDocInfoBuilder65.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        boolean boolean75 = node72.isCall();
        boolean boolean76 = node72.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node72, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder79 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray81 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray82 = (java.util.ArrayList<java.lang.String>[]) arrayListArray81;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder83 = strListBuilder79.add((java.util.ArrayList<java.lang.String>[]) arrayListArray81);
        boolean boolean84 = jSTypeExpression78.equals((java.lang.Object) arrayListArray81);
        boolean boolean85 = jSDocInfoBuilder65.recordDefineType(jSTypeExpression78);
        boolean boolean86 = jSDocInfoBuilder36.recordEnumParameterType(jSTypeExpression78);
        boolean boolean87 = jSTypeExpression78.isOptionalArg();
        boolean boolean88 = jSTypeExpression78.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression78);
        boolean boolean90 = jSDocInfoBuilder30.recordReturnType(jSTypeExpression89);
        boolean boolean91 = jSDocInfoBuilder22.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n", jSTypeExpression89);
        boolean boolean92 = jSDocInfoBuilder13.recordDefineType(jSTypeExpression89);
        com.google.javascript.rhino.Node node93 = jSTypeExpression89.getRoot();
        boolean boolean94 = jSTypeExpression89.isOptionalArg();
        boolean boolean95 = jSDocInfoBuilder1.recordType(jSTypeExpression89);
        boolean boolean97 = jSDocInfoBuilder1.recordLends("REGEXP Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strListBuilder54);
        org.junit.Assert.assertNotNull(arrayListArray56);
        org.junit.Assert.assertNotNull(strListArray57);
        org.junit.Assert.assertNotNull(strListBuilder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strListBuilder79);
        org.junit.Assert.assertNotNull(arrayListArray81);
        org.junit.Assert.assertNotNull(strListArray82);
        org.junit.Assert.assertNotNull(strListBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test15308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15308");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo20.getVisibility();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        jSDocInfo20.setLicense("GETELEM");
        java.lang.String str28 = jSDocInfo20.getLicense();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GETELEM" + "'", str28, "GETELEM");
    }

    @Test
    public void test15309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15309");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strList62.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor66 = strList62.listIterator();
        java.util.Spliterator<java.lang.String> strSpliterator67 = strList62.spliterator();
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(42, nodeArray72, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(39, nodeArray72, (int) '4', 32);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(176129, nodeArray72);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(35, nodeArray72);
        boolean boolean81 = strList62.contains((java.lang.Object) nodeArray72);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor83 = strList62.listIterator(4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = strList62.add("STRING  [length: 53]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSpliterator65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strSpliterator67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strItor83);
    }

    @Test
    public void test15310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15310");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean30 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet27);
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int41 = strList39.indexOf((java.lang.Object) 'a');
        int int42 = strList39.size();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray46 = strList39.toArray(strArray45);
        boolean boolean47 = strSet16.containsAll((java.util.Collection<java.lang.String>) strList39);
        java.util.ListIterator<java.lang.String> strItor48 = strList39.listIterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList57 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int59 = strList57.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList68 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int70 = strList68.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList79 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList88 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList89 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList57, (java.lang.Iterable<java.lang.String>) strList68, (java.lang.Iterable<java.lang.String>) strList79, (java.lang.Iterable<java.lang.String>) strList88);
        com.google.common.collect.ImmutableList<java.lang.String> strList90 = strList79.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor91 = strList79.iterator();
        java.lang.String str92 = strList79.toString();
        java.util.Spliterator<java.lang.String> strSpliterator93 = strList79.spliterator();
        boolean boolean94 = strList39.containsAll((java.util.Collection<java.lang.String>) strList79);
        java.util.Spliterator<java.lang.String> strSpliterator95 = strList79.spliterator();
        java.lang.Object[] objArray96 = strList79.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strList79.add(0, "STRING  43 [source_file: NUMBER 40.0]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNotNull(strIterableList89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strItor91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str92, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strSpliterator93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(strSpliterator95);
        org.junit.Assert.assertNotNull(objArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray96), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray96), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test15311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15311");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getParent();
        com.google.javascript.rhino.InputId inputId23 = null;
        node18.setInputId(inputId23);
        boolean boolean25 = node18.isNull();
        boolean boolean26 = node18.isParamList();
        boolean boolean27 = node18.isTypeOf();
        boolean boolean28 = node18.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15312");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = null;
        boolean boolean9 = jSDocInfoBuilder5.recordParameter("", jSTypeExpression8);
        boolean boolean10 = jSDocInfoBuilder5.recordExterns();
        boolean boolean11 = jSDocInfoBuilder5.recordPreserveTry();
        boolean boolean12 = jSDocInfoBuilder5.recordNoCompile();
        boolean boolean14 = jSDocInfoBuilder5.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordJavaDispatch();
        jSDocInfoBuilder16.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordJavaDispatch();
        boolean boolean27 = jSDocInfoBuilder25.recordNoCompile();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordParameter("", jSTypeExpression38);
        boolean boolean46 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression38);
        boolean boolean47 = jSDocInfoBuilder5.recordBaseType(jSTypeExpression38);
        boolean boolean48 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression38);
        boolean boolean49 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean50 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean52 = jSDocInfoBuilder1.recordReturnDescription("TYPEOF");
        boolean boolean53 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean54 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test15313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15313");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        jSDocInfoBuilder1.markText("[, hi!, , , hi!, , hi!, ]", 44, 49, 176129, 10);
        boolean boolean11 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder13.recordParameter("", jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder13.recordExterns();
        boolean boolean19 = jSDocInfoBuilder13.recordPreserveTry();
        boolean boolean20 = jSDocInfoBuilder13.recordNoCompile();
        boolean boolean22 = jSDocInfoBuilder13.recordLends("");
        boolean boolean25 = jSDocInfoBuilder13.recordParameterDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder27.recordParameter("", jSTypeExpression30);
        boolean boolean32 = jSDocInfoBuilder27.recordExterns();
        boolean boolean33 = jSDocInfoBuilder27.recordPreserveTry();
        boolean boolean34 = jSDocInfoBuilder27.recordNoCompile();
        boolean boolean36 = jSDocInfoBuilder27.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.recordJavaDispatch();
        jSDocInfoBuilder38.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordJavaDispatch();
        boolean boolean49 = jSDocInfoBuilder47.recordNoCompile();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        boolean boolean57 = node54.isCall();
        boolean boolean58 = node54.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node54, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray63 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray64 = (java.util.ArrayList<java.lang.String>[]) arrayListArray63;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder65 = strListBuilder61.add((java.util.ArrayList<java.lang.String>[]) arrayListArray63);
        boolean boolean66 = jSTypeExpression60.equals((java.lang.Object) arrayListArray63);
        boolean boolean67 = jSDocInfoBuilder47.recordParameter("", jSTypeExpression60);
        boolean boolean68 = jSDocInfoBuilder38.recordThrowType(jSTypeExpression60);
        boolean boolean69 = jSDocInfoBuilder27.recordBaseType(jSTypeExpression60);
        boolean boolean70 = jSDocInfoBuilder13.recordImplementedInterface(jSTypeExpression60);
        boolean boolean71 = jSDocInfoBuilder1.recordType(jSTypeExpression60);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 50);
        node73.setLength(12);
        com.google.javascript.rhino.Node node76 = node73.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = jSDocInfoBuilder1.build(node76);
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", 45055, 24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertNotNull(arrayListArray63);
        org.junit.Assert.assertNotNull(strListArray64);
        org.junit.Assert.assertNotNull(strListBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(jSDocInfo77);
    }

    @Test
    public void test15314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15314");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean7 = jSDocInfoBuilder1.recordVisibility(visibility6);
        boolean boolean8 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15315");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean6 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = null;
        jSDocInfoBuilder1.markName("[, hi!, , , hi!, , hi!, ]", staticSourceFile8, (int) 'a', (int) (short) -1);
        boolean boolean13 = jSDocInfoBuilder1.recordMeaning("NUMBER 53.0 42\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test15316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15316");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        boolean boolean47 = strSet6.contains((java.lang.Object) namePosition46);
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor57 = strList56.iterator();
        boolean boolean58 = strSet6.addAll((java.util.Collection<java.lang.String>) strList56);
        java.lang.String str59 = strList56.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = strList56.reverse();
        java.lang.String str61 = strList56.toString();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor62 = strList56.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = strList56.set((int) (short) -1, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nTYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str59, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str61, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strItor62);
    }

    @Test
    public void test15317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15317");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str27 = jSDocInfo20.getVersion();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        java.lang.String str29 = jSDocInfo20.getMeaning();
        jSDocInfo20.addSuppression("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.lang.String str33 = jSDocInfo20.getDescriptionForParameter("OR  54\n");
        boolean boolean34 = jSDocInfo20.isJavaDispatch();
        boolean boolean35 = jSDocInfo20.hasFileOverview();
        java.lang.String str36 = jSDocInfo20.getLicense();
        boolean boolean37 = jSDocInfo20.isJavaDispatch();
        com.google.javascript.rhino.Node node38 = jSDocInfo20.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test15318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15318");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isQuotedString();
        boolean boolean8 = node3.isObjectLit();
        boolean boolean9 = node3.isOr();
        boolean boolean10 = node3.isNull();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("THROW", (int) (short) 0, 38);
        com.google.javascript.rhino.Node node15 = node3.clonePropsFrom(node14);
        node14.setSourceEncodedPositionForTree(0);
        boolean boolean18 = node14.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test15319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15319");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node8, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray18 = (java.util.ArrayList<java.lang.String>[]) arrayListArray17;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = strListBuilder15.add((java.util.ArrayList<java.lang.String>[]) arrayListArray17);
        boolean boolean20 = jSTypeExpression14.equals((java.lang.Object) arrayListArray17);
        boolean boolean21 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression14);
        boolean boolean22 = jSTypeExpression14.isVarArgs();
        com.google.javascript.rhino.Node node23 = jSTypeExpression14.getRoot();
        boolean boolean24 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isOptionalArg();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node35.addChildrenToFront(node39);
        boolean boolean41 = node35.isGetterDef();
        boolean boolean42 = node35.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj48 = node46.getProp(43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        com.google.javascript.rhino.Node node54 = node46.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet61);
        com.google.javascript.rhino.Node node64 = node52.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(32, node35, node52);
        boolean boolean66 = node65.isExprResult();
        boolean boolean67 = node65.isFunction();
        com.google.javascript.rhino.Node node68 = node28.srcrefTree(node65);
        boolean boolean69 = node68.isWhile();
        boolean boolean70 = node68.isScript();
        boolean boolean71 = node23.hasChild(node68);
        com.google.javascript.rhino.Node node72 = node68.cloneNode();
        boolean boolean73 = node72.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(strListArray18);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test15320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15320");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        boolean boolean13 = strList8.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int24 = strList22.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator25 = strList22.spliterator();
        boolean boolean26 = strList22.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean33 = typePosition32.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList34 = com.google.common.collect.ImmutableList.of(typePosition27, typePosition28, typePosition29, typePosition30, typePosition31, typePosition32);
        int int35 = strList22.indexOf((java.lang.Object) typePosition32);
        boolean boolean36 = strList8.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.lang.Object[] objArray37 = strList22.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder39.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        jSDocInfoBuilder39.markName("hi!", staticSourceFile43, (int) (short) 0, (int) (short) 100);
        boolean boolean47 = jSDocInfoBuilder39.recordNoTypeCheck();
        boolean boolean48 = jSDocInfoBuilder39.recordExpose();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node52.addChildrenToFront(node56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = jSDocInfoBuilder39.build(node56);
        java.lang.String str59 = jSDocInfo58.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo58.getTypedefType();
        java.lang.String str61 = jSDocInfo58.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo58.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = jSDocInfo58.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo58.getParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean66 = strList22.contains((java.lang.Object) jSTypeExpression65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = strList22.remove((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typePositionList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSDocInfo58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(jSTypeExpression60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test15321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15321");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.addReference("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean11 = jSDocInfoBuilder1.addReference("Node tree inequality:\nTree1:\nNUMBER 12.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 12.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        jSDocInfoBuilder1.markAnnotation("[]", 50, 167974);
        jSDocInfoBuilder1.markAnnotation("STRING  43\n", 35, 50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test15322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15322");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(42, nodeArray3, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(49, nodeArray3, 53, 43);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(8, node9, 18, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj18 = node16.getProp(43);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int23 = node22.getSourceOffset();
        com.google.javascript.rhino.Node node24 = node16.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean25 = node24.isIf();
        boolean boolean26 = node24.isAnd();
        boolean boolean27 = node24.isVar();
        node24.setType((int) (byte) -1);
        node24.setSourceEncodedPositionForTree((int) '#');
        boolean boolean32 = node24.isNumber();
        boolean boolean33 = node24.hasOneChild();
        com.google.javascript.rhino.Node node34 = node12.useSourceInfoFrom(node24);
        java.lang.Appendable appendable35 = null;
        // The following exception was thrown during execution in test generation
        try {
            node24.appendStringTree(appendable35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test15323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15323");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((-1), (int) ' ', 12);
        boolean boolean4 = node3.hasMoreThanOneChild();
        java.lang.Class<?> wildcardClass5 = node3.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test15324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15324");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("[, hi!, , , hi!, , hi!, ]", 8, (-1));
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int61 = node60.getSourceOffset();
        com.google.javascript.rhino.Node node62 = node54.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean63 = node62.isAssignAdd();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean68 = node67.isVar();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) ' ', node21, node49, node62, node67, 1, 100);
        int int72 = node62.getSideEffectFlags();
        boolean boolean73 = node62.isDelProp();
        node62.setCharno(0);
        boolean boolean76 = node62.isAssign();
        java.lang.String str77 = node62.getSourceFileName();
        boolean boolean78 = node62.isLocalResultCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node62.children();
        boolean boolean80 = node62.isGetterDef();
        boolean boolean81 = node3.hasChild(node62);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test15325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15325");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean22 = node21.isNull();
        boolean boolean23 = node21.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isDebugger();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(38, node9, node21, node28, node34);
        boolean boolean44 = node21.isCall();
        boolean boolean45 = node21.isOr();
        boolean boolean46 = node21.isIn();
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int58 = strList56.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream59 = strList56.stream();
        boolean boolean60 = strList56.isEmpty();
        boolean boolean61 = strList56.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int72 = strList70.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator73 = strList70.spliterator();
        boolean boolean74 = strList70.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition78 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition80 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean81 = typePosition80.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList82 = com.google.common.collect.ImmutableList.of(typePosition75, typePosition76, typePosition77, typePosition78, typePosition79, typePosition80);
        int int83 = strList70.indexOf((java.lang.Object) typePosition80);
        boolean boolean84 = strList56.containsAll((java.util.Collection<java.lang.String>) strList70);
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = strList70.reverse();
        java.lang.String str87 = strList70.get(4);
        java.lang.Object[] objArray88 = strList70.toArray();
        node21.putProp((int) (short) 100, (java.lang.Object) objArray88);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(typePositionList82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test15326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15326");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strList62.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = strList62.asList();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        com.google.javascript.rhino.Node node77 = node70.getChildAtIndex(0);
        java.lang.String str78 = node77.toString();
        boolean boolean79 = strList62.equals((java.lang.Object) node77);
        boolean boolean80 = node77.isEmpty();
        int int81 = node77.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSpliterator65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "STRING  43" + "'", str78, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 43 + "'", int81 == 43);
    }

    @Test
    public void test15327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15327");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isAssignAdd();
        boolean boolean19 = node17.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node17);
        boolean boolean21 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean22 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test15328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15328");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        com.google.javascript.rhino.Node node77 = node70.getChildAtIndex(0);
        java.lang.String str78 = node77.toString();
        boolean boolean79 = node77.isExprResult();
        boolean boolean80 = node77.isCall();
        com.google.javascript.rhino.Node node81 = node62.srcrefTree(node77);
        java.util.Set<java.lang.String> strSet82 = node62.getDirectives();
        boolean boolean83 = node62.isStringKey();
        node62.setCharno(0);
        int int86 = node62.getChildCount();
        boolean boolean87 = node62.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "STRING  43" + "'", str78, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test15329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15329");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean26 = jSDocInfo20.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test15330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15330");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.setString("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean6 = node3.isSyntheticBlock();
        boolean boolean7 = node3.isAssign();
        int int8 = node3.getCharno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        node16.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node16.setJSType(jSType19);
        java.lang.String str21 = node16.getString();
        boolean boolean22 = node16.isName();
        int int23 = node16.getLength();
        boolean boolean24 = node16.isTypeOf();
        boolean boolean25 = node3.hasChild(node16);
        int int26 = node3.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 43 + "'", int26 == 43);
    }

    @Test
    public void test15331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15331");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean22 = node21.isNull();
        boolean boolean23 = node21.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isDebugger();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(38, node9, node21, node28, node34);
        com.google.javascript.rhino.Node node44 = node21.getFirstChild();
        boolean boolean45 = node21.isBlock();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean50 = node49.isVar();
        node49.putBooleanProp(30, false);
        boolean boolean54 = node49.isSwitch();
        boolean boolean55 = node49.isUnscopedQualifiedName();
        boolean boolean56 = node49.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node49.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node49.isGetElem();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int64 = node63.getSourceOffset();
        node63.detachChildren();
        com.google.javascript.rhino.Node node66 = node49.useSourceInfoFromForTree(node63);
        boolean boolean67 = node63.isNumber();
        boolean boolean68 = node63.isFalse();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node63.children();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 4);
        com.google.javascript.rhino.Node node72 = node71.removeFirstChild();
        node71.putIntProp(26, 2);
        com.google.javascript.rhino.Node node76 = node63.copyInformationFrom(node71);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable77 = node71.getAncestors();
        boolean boolean78 = node71.isParamList();
        com.google.javascript.rhino.Node node79 = node21.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node80 = node71.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node71.setSideEffectFlags((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(ancestorIterable77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test15332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15332");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean22 = node21.isNull();
        boolean boolean23 = node21.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isDebugger();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(38, node9, node21, node28, node34);
        boolean boolean44 = node28.isNoSideEffectsCall();
        boolean boolean46 = node28.getBooleanProp(23);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test15333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15333");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node18.isComma();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFromForTree(node18);
        boolean boolean22 = node18.isDec();
        boolean boolean23 = node18.hasOneChild();
        boolean boolean24 = node18.isAssignAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node18.siblings();
        int int26 = node18.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test15334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15334");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("hi!");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean11 = jSDocInfoBuilder1.recordVisibility(visibility10);
        boolean boolean12 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean14 = jSDocInfoBuilder1.addReference("");
        boolean boolean16 = jSDocInfoBuilder1.recordLends("STRING  43 [synthetic: 1]");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder18.markName("hi!", staticSourceFile22, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder18.recordEnumParameterType(jSTypeExpression26);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordJavaDispatch();
        jSDocInfoBuilder29.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.recordJavaDispatch();
        boolean boolean40 = jSDocInfoBuilder38.recordNoCompile();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj47 = node45.getProp(43);
        boolean boolean48 = node45.isCall();
        boolean boolean49 = node45.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = new com.google.javascript.rhino.JSTypeExpression(node45, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder52 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray54 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray55 = (java.util.ArrayList<java.lang.String>[]) arrayListArray54;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder56 = strListBuilder52.add((java.util.ArrayList<java.lang.String>[]) arrayListArray54);
        boolean boolean57 = jSTypeExpression51.equals((java.lang.Object) arrayListArray54);
        boolean boolean58 = jSDocInfoBuilder38.recordParameter("", jSTypeExpression51);
        boolean boolean59 = jSDocInfoBuilder29.recordThrowType(jSTypeExpression51);
        boolean boolean60 = jSTypeExpression51.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression51);
        boolean boolean62 = jSDocInfoBuilder18.recordEnumParameterType(jSTypeExpression51);
        boolean boolean63 = jSDocInfoBuilder1.recordThisType(jSTypeExpression51);
        boolean boolean65 = jSDocInfoBuilder1.addReference("NEW  43 [opt_arg: 1]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strListBuilder52);
        org.junit.Assert.assertNotNull(arrayListArray54);
        org.junit.Assert.assertNotNull(strListArray55);
        org.junit.Assert.assertNotNull(strListBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test15335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15335");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        node3.detachChildren();
        boolean boolean6 = node3.isLabelName();
        int int7 = node3.getSourcePosition();
        boolean boolean8 = node3.isQuotedString();
        boolean boolean9 = node3.isBlock();
        com.google.common.collect.ImmutableList.Builder<java.lang.Comparable<java.lang.String>[]> strComparableArrayBuilder11 = com.google.common.collect.ImmutableList.builder();
        node3.putProp(100, (java.lang.Object) strComparableArrayBuilder11);
        com.google.javascript.rhino.Node node13 = node3.removeFirstChild();
        boolean boolean14 = node3.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176129 + "'", int7 == 176129);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strComparableArrayBuilder11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15336");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean9 = jSDocInfoBuilder7.isPopulatedWithFileOverview();
        boolean boolean10 = jSDocInfoBuilder7.recordOverride();
        jSDocInfoBuilder7.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", (int) (short) 10, 48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder16.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        jSDocInfoBuilder16.markName("hi!", staticSourceFile20, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder16.recordEnumParameterType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder16.recordConstructor();
        boolean boolean27 = jSDocInfoBuilder16.recordNoTypeCheck();
        boolean boolean28 = jSDocInfoBuilder16.isConstructorRecorded();
        boolean boolean29 = jSDocInfoBuilder16.isDescriptionRecorded();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        boolean boolean37 = node34.isCall();
        boolean boolean38 = node34.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = new com.google.javascript.rhino.JSTypeExpression(node34, "STRING ");
        boolean boolean41 = jSDocInfoBuilder16.recordParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", jSTypeExpression40);
        boolean boolean42 = jSDocInfoBuilder7.recordType(jSTypeExpression40);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.isInterfaceRecorded();
        boolean boolean50 = jSDocInfoBuilder47.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        boolean boolean57 = node54.isCall();
        boolean boolean58 = node54.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node54, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray63 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray64 = (java.util.ArrayList<java.lang.String>[]) arrayListArray63;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder65 = strListBuilder61.add((java.util.ArrayList<java.lang.String>[]) arrayListArray63);
        boolean boolean66 = jSTypeExpression60.equals((java.lang.Object) arrayListArray63);
        boolean boolean67 = jSDocInfoBuilder47.recordDefineType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int69 = namePosition68.getEndLine();
        int int70 = namePosition68.getStartLine();
        com.google.javascript.rhino.Node node71 = namePosition68.getItem();
        boolean boolean72 = jSTypeExpression60.equals((java.lang.Object) node71);
        boolean boolean73 = jSDocInfoBuilder44.recordExtendedInterface(jSTypeExpression60);
        boolean boolean74 = jSDocInfoBuilder7.recordEnumParameterType(jSTypeExpression60);
        boolean boolean75 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordNoTypeCheck();
        boolean boolean79 = jSDocInfoBuilder77.isInterfaceRecorded();
        jSDocInfoBuilder77.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean85 = jSDocInfoBuilder77.recordMeaning("hi!");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility86 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean87 = jSDocInfoBuilder77.recordVisibility(visibility86);
        boolean boolean88 = jSDocInfoBuilder1.recordVisibility(visibility86);
        boolean boolean89 = jSDocInfoBuilder1.recordImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertNotNull(arrayListArray63);
        org.junit.Assert.assertNotNull(strListArray64);
        org.junit.Assert.assertNotNull(strListBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + visibility86 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility86.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15337");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean23 = node22.isAssignAdd();
        jSDocInfoBuilder1.markTypeNode(node22, 47, (int) (byte) 0, 44, 26, false);
        boolean boolean30 = jSDocInfoBuilder1.recordOverride();
        boolean boolean32 = jSDocInfoBuilder1.recordReturnDescription("Node tree inequality:\nTree1:\nLE\n\n\nTree2:\nNUMBER 0.0 43\n    STRING  43\n\n\nSubtree1: LE\n\n\nSubtree2: NUMBER 0.0 43\n    STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test15338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15338");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(26, "", 46, (int) (byte) 10);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test15339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15339");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        boolean boolean32 = jSDocInfoBuilder1.recordThisType(jSTypeExpression24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object[] objArray42 = strSet39.toArray();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        java.lang.Object[] objArray52 = strSet49.toArray();
        boolean boolean53 = strSet39.retainAll((java.util.Collection<java.lang.String>) strSet49);
        java.lang.Object[] objArray54 = strSet39.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        jSDocInfoBuilder56.markName("hi!", staticSourceFile60, (int) (short) 0, (int) (short) 100);
        boolean boolean64 = jSDocInfoBuilder56.recordNoTypeCheck();
        boolean boolean65 = jSDocInfoBuilder56.recordExpose();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node69.addChildrenToFront(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = jSDocInfoBuilder56.build(node73);
        java.lang.String str76 = jSDocInfo75.getMeaning();
        boolean boolean77 = jSDocInfo75.isExport();
        boolean boolean78 = strSet39.equals((java.lang.Object) jSDocInfo75);
        java.util.stream.Stream<java.lang.String> strStream79 = strSet39.stream();
        boolean boolean80 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 52, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = new com.google.javascript.rhino.JSTypeExpression(node84, "NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression86);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression87);
        boolean boolean89 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression87);
        jSDocInfoBuilder1.markText("NUMBER 0.0 43 [opt_arg: 1]", 10, (int) '4', (int) (short) 0, 32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSDocInfo75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(jSTypeExpression87);
        org.junit.Assert.assertNotNull(jSTypeExpression88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test15340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15340");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("[, hi!, , , hi!, , hi!, ]", 5, 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15341");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection33 = jSDocInfo20.getMarkers();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection34 = jSDocInfo20.getMarkers();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.lang.Object[] objArray44 = strSet41.toArray();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet51);
        java.lang.Object[] objArray54 = strSet51.toArray();
        boolean boolean55 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet51);
        java.lang.Object[] objArray56 = strSet41.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder58.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        jSDocInfoBuilder58.markName("hi!", staticSourceFile62, (int) (short) 0, (int) (short) 100);
        boolean boolean66 = jSDocInfoBuilder58.recordNoTypeCheck();
        boolean boolean67 = jSDocInfoBuilder58.recordExpose();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node71.addChildrenToFront(node75);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = jSDocInfoBuilder58.build(node75);
        java.lang.String str78 = jSDocInfo77.getMeaning();
        boolean boolean79 = jSDocInfo77.isExport();
        boolean boolean80 = strSet41.equals((java.lang.Object) jSDocInfo77);
        boolean boolean81 = jSDocInfo77.isNoAlias();
        java.lang.String str82 = jSDocInfo77.getMeaning();
        java.lang.String str83 = jSDocInfo77.getMeaning();
        boolean boolean84 = jSDocInfo77.hasThisType();
        java.lang.String str85 = jSDocInfo77.getLendsName();
        boolean boolean86 = jSDocInfo77.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = jSDocInfo77.getVisibility();
        jSDocInfo20.setVisibility(visibility87);
        java.lang.String str89 = jSDocInfo20.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = jSDocInfo20.getType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertNotNull(markerCollection33);
        org.junit.Assert.assertNotNull(markerCollection34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(jSDocInfo77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(jSTypeExpression90);
    }

    @Test
    public void test15342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15342");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        boolean boolean27 = node24.isCall();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "STRING ");
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression30);
        boolean boolean34 = jSDocInfoBuilder1.recordParameterDescription("STRING ", "NUMBER 0.0 43 [directives: []]\n");
        boolean boolean35 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean37 = jSDocInfoBuilder1.hasParameter("STRING  43 [quoted: 1]");
        jSDocInfoBuilder1.markAnnotation("OR ", (int) (byte) 1, 3);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15343");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        boolean boolean6 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean7 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean8 = jSDocInfoBuilder1.isDescriptionRecorded();
        jSDocInfoBuilder1.markAnnotation("Node tree inequality:\nTree1:\nLE 51\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: LE 51\n\n\nSubtree2: NUMBER 0.0 43\n", 3, 4);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = null;
        boolean boolean14 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test15344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15344");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean16 = node15.isVar();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node21 = node15.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node22 = node3.copyInformationFromForTree(node21);
        boolean boolean23 = node22.isLocalResultCall();
        com.google.javascript.rhino.jstype.JSType jSType24 = node22.getJSType();
        java.lang.String str25 = node22.toStringTree();
        boolean boolean26 = node22.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 46, 26, 4);
        com.google.javascript.rhino.Node node31 = null;
        node22.addChildAfter(node30, node31);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING \n" + "'", str25, "STRING \n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test15345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15345");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        typePosition0.setPositionInformation((int) (byte) -1, 48, 4095, 46);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj18 = node16.getProp(43);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int23 = node22.getSourceOffset();
        com.google.javascript.rhino.Node node24 = node16.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node34 = node22.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean35 = node34.isContinue();
        boolean boolean36 = node34.isVoid();
        node34.setSourceEncodedPosition(4095);
        typePosition0.setItem(node34);
        boolean boolean40 = typePosition0.hasBrackets();
        int int41 = typePosition0.getPositionOnStartLine();
        boolean boolean42 = typePosition0.hasBrackets();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test15346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15346");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean16 = node15.isVar();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node21 = node15.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node22 = node3.copyInformationFromForTree(node21);
        boolean boolean23 = node3.isNew();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node24 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test15347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15347");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 10, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", 51, 46);
        boolean boolean5 = node4.isStringKey();
        node4.setQuotedString();
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean12 = node11.isIf();
        boolean boolean13 = node11.isAnd();
        boolean boolean14 = node11.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        node18.detachChildren();
        boolean boolean21 = node18.isLabelName();
        int int22 = node18.getSourcePosition();
        boolean boolean23 = node18.isQuotedString();
        node11.addChildToBack(node18);
        node11.setWasEmptyNode(false);
        node4.addChildToBack(node11);
        boolean boolean28 = node4.isHook();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node4.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator30 = nodeIterable29.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176129 + "'", int22 == 176129);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(nodeSpliterator30);
    }

    @Test
    public void test15348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15348");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        int int17 = typePosition2.getPositionOnStartLine();
        boolean boolean18 = typePosition2.hasBrackets();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test15349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15349");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        boolean boolean27 = node24.isCall();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "STRING ");
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder33.markName("hi!", staticSourceFile37, (int) (short) 0, (int) (short) 100);
        boolean boolean41 = jSDocInfoBuilder33.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder33.recordExpose();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = jSDocInfoBuilder33.build(node50);
        boolean boolean53 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node54 = node50.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = jSDocInfoBuilder1.build(node54);
        boolean boolean56 = jSDocInfo55.isDeprecated();
        boolean boolean57 = jSDocInfo55.isHidden();
        boolean boolean59 = jSDocInfo55.hasParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        jSDocInfo55.addSuppression("Node tree inequality:\nTree1:\nNUMBER 12.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 12.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean62 = jSDocInfo55.isNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder64.recordNoTypeCheck();
        boolean boolean66 = jSDocInfoBuilder64.isInterfaceRecorded();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj72 = node70.getProp(43);
        int int73 = node70.getType();
        boolean boolean74 = node70.isGetterDef();
        node70.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = jSDocInfoBuilder64.build(node70);
        boolean boolean78 = jSDocInfo77.isNoSideEffects();
        boolean boolean79 = jSDocInfo77.hasTypedefType();
        boolean boolean80 = jSDocInfo77.isConsistentIdGenerator();
        boolean boolean81 = jSDocInfo77.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo77.getEnumParameterType();
        int int83 = jSDocInfo77.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility84 = jSDocInfo77.getVisibility();
        jSDocInfo55.setVisibility(visibility84);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + visibility84 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility84.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test15350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15350");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        int int4 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int61 = node60.getSourceOffset();
        com.google.javascript.rhino.Node node62 = node54.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean63 = node62.isAssignAdd();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean68 = node67.isVar();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) ' ', node21, node49, node62, node67, 1, 100);
        node67.setWasEmptyNode(true);
        boolean boolean74 = node67.isQuotedString();
        boolean boolean76 = node67.getBooleanProp((int) (byte) 0);
        boolean boolean77 = node67.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node78 = node67.getLastSibling();
        namePosition0.setItem(node78);
        com.google.javascript.rhino.jstype.JSType jSType80 = node78.getJSType();
        boolean boolean81 = node78.isQuotedString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test15351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15351");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(42, nodeArray4, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(49, nodeArray4, 53, 43);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(8, node10, 18, 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean19 = node18.isVar();
        node18.putBooleanProp(30, false);
        boolean boolean23 = node18.isSwitch();
        boolean boolean24 = node18.isUnscopedQualifiedName();
        boolean boolean25 = node18.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node18.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node18.isGetElem();
        boolean boolean29 = node18.isOnlyModifiesThisCall();
        boolean boolean30 = node18.isNoSideEffectsCall();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(3, node10, node18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15352");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        java.lang.Class<?> wildcardClass42 = strIterableList41.getClass();
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int53 = strList51.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList51.spliterator();
        java.lang.Class<?> wildcardClass55 = strList51.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.AnnotatedElement> annotatedElementList56 = com.google.common.collect.ImmutableList.of((java.lang.reflect.AnnotatedElement) wildcardClass42, (java.lang.reflect.AnnotatedElement) wildcardClass55);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray57 = new java.lang.reflect.AnnotatedElement[] { wildcardClass55 };
        com.google.common.collect.ImmutableList<java.lang.reflect.AnnotatedElement> annotatedElementList58 = com.google.common.collect.ImmutableList.of(annotatedElementArray57);
        com.google.common.collect.ImmutableList<java.lang.reflect.AnnotatedElement> annotatedElementList59 = com.google.common.collect.ImmutableList.of(annotatedElementArray57);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(annotatedElementList56);
        org.junit.Assert.assertNotNull(annotatedElementArray57);
        org.junit.Assert.assertNotNull(annotatedElementList58);
        org.junit.Assert.assertNotNull(annotatedElementList59);
    }

    @Test
    public void test15353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15353");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.isImplicitCast();
        jSDocInfo20.addSuppression("hi!");
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo20.getAuthors();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo20.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int39 = strList37.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList37.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList81 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList60, (java.lang.Iterable<java.lang.String>) strList71, (java.lang.Iterable<java.lang.String>) strList80);
        com.google.common.collect.ImmutableList<java.lang.String> strList90 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int92 = strList90.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator93 = strList90.spliterator();
        boolean boolean94 = strList60.equals((java.lang.Object) strList90);
        int int95 = strList37.indexOf((java.lang.Object) strList90);
        boolean boolean96 = strSet28.remove((java.lang.Object) strList37);
        boolean boolean98 = strSet28.add("NUMBER 0.0 43 [jsdoc_info: JSDocInfo]\n");
        java.util.stream.Stream<java.lang.String> strStream99 = strSet28.stream();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strIterableList81);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(strStream99);
    }

    @Test
    public void test15354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15354");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        int int52 = strList49.size();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray56 = strList49.toArray(strArray55);
        java.lang.String[] strArray57 = strList8.toArray(strArray55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int68 = node67.getSourceOffset();
        com.google.javascript.rhino.Node node69 = node61.useSourceInfoIfMissingFromForTree(node67);
        int int70 = node61.getSourceOffset();
        com.google.javascript.rhino.Node node72 = node61.getAncestor(8);
        boolean boolean73 = strList8.contains((java.lang.Object) 8);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean78 = node77.isOptionalArg();
        com.google.javascript.rhino.Node node79 = node77.getNext();
        boolean boolean80 = node77.isThrow();
        boolean boolean81 = node77.isFor();
        boolean boolean82 = node77.isNE();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node87 = node86.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node86.getJSDocInfo();
        com.google.javascript.rhino.Node node89 = node77.useSourceInfoIfMissingFrom(node86);
        int int90 = strList8.indexOf((java.lang.Object) node89);
        boolean boolean91 = strList8.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream92 = strList8.parallelStream();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strStream92);
    }

    @Test
    public void test15355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15355");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.stream.Stream<java.lang.String> strStream9 = strList8.stream();
        java.util.ListIterator<java.lang.String> strItor10 = strList8.listIterator();
        java.lang.Object[] objArray11 = strList8.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator23 = strList20.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int34 = strList32.indexOf((java.lang.Object) 'a');
        int int35 = strList32.size();
        boolean boolean36 = strList20.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int47 = strList45.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int58 = strList56.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList67 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList77 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList45, (java.lang.Iterable<java.lang.String>) strList56, (java.lang.Iterable<java.lang.String>) strList67, (java.lang.Iterable<java.lang.String>) strList76);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList78 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList56);
        boolean boolean79 = strList56.isEmpty();
        boolean boolean80 = strList32.contains((java.lang.Object) strList56);
        boolean boolean81 = strList8.containsAll((java.util.Collection<java.lang.String>) strList32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList84 = strList32.subList(52, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (52) must not be greater than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strIterableList77);
        org.junit.Assert.assertNotNull(strIterableList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test15356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15356");
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        int int23 = strList20.size();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray27 = strList20.toArray(strArray26);
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("[, hi!, , , hi!, , hi!, ]", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "STRING ", "NUMBER 12.0\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "NUMBER 0.0 43 [directives: []]\n", "NUMBER 0.0", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "hi!", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", strArray26);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor30 = strList28.listIterator((int) (byte) 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = null;
        boolean boolean36 = jSDocInfoBuilder32.recordParameter("", jSTypeExpression35);
        boolean boolean37 = jSDocInfoBuilder32.isJavaDispatch();
        boolean boolean38 = jSDocInfoBuilder32.recordNoSideEffects();
        boolean boolean39 = jSDocInfoBuilder32.recordPreserveTry();
        boolean boolean40 = jSDocInfoBuilder32.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = null;
        jSDocInfoBuilder32.markName("hi!", staticSourceFile42, (int) (short) 100, 8);
        boolean boolean47 = jSDocInfoBuilder32.recordFileOverview("NUMBER 0.0 43");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet54);
        java.lang.Object[] objArray57 = strSet54.toArray();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node61.setDirectives((java.util.Set<java.lang.String>) strSet64);
        java.lang.Object[] objArray67 = strSet64.toArray();
        boolean boolean68 = strSet54.retainAll((java.util.Collection<java.lang.String>) strSet64);
        int int69 = strSet64.size();
        boolean boolean70 = jSDocInfoBuilder32.recordSuppressions((java.util.Set<java.lang.String>) strSet64);
        int int71 = strList28.indexOf((java.lang.Object) strSet64);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test15357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15357");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isNoSideEffectsCall();
        boolean boolean9 = node3.isVarArgs();
        boolean boolean10 = node3.isNoSideEffectsCall();
        boolean boolean11 = node3.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15358");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(49, nodeArray6, 53, 43);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(176180, nodeArray6, 41, 38);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray6);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(26, nodeArray6);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(41, nodeArray6);
        boolean boolean19 = node18.isVarArgs();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node18.getAncestors();
        boolean boolean21 = node18.isCatch();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node18.siblings();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
    }

    @Test
    public void test15359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15359");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo20.getVisibility();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        jSDocInfo20.setDeprecated(false);
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        java.lang.String str29 = jSDocInfo20.getVersion();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test15360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15360");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition8 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker0.getNameNode();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(nodeSourcePosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
    }

    @Test
    public void test15361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15361");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 12.0\n", 23, (int) (byte) 1);
        boolean boolean4 = node3.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test15362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15362");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        int int20 = typePosition0.getStartLine();
        boolean boolean21 = typePosition0.hasBrackets();
        boolean boolean22 = typePosition0.hasBrackets();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test15363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15363");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node3.siblings();
        boolean boolean11 = node3.isThrow();
        com.google.javascript.rhino.InputId inputId12 = null;
        node3.setInputId(inputId12);
        boolean boolean14 = node3.isParamList();
        com.google.javascript.rhino.Node node15 = node3.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test15364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15364");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor41 = strList39.iterator();
        java.lang.Object obj42 = null;
        int int43 = strList39.indexOf(obj42);
        int int44 = strList39.size();
        java.util.Spliterator<java.lang.String> strSpliterator45 = strList39.spliterator();
        java.lang.Object[] objArray46 = strList39.toArray();
        boolean boolean47 = strList39.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = strList39.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor49 = strList39.listIterator();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strItor49);
    }

    @Test
    public void test15365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15365");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        boolean boolean45 = node44.isObjectLit();
        node44.setLength(4095);
        node44.addSuppression("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder51.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        jSDocInfoBuilder51.markName("hi!", staticSourceFile55, (int) (short) 0, (int) (short) 100);
        boolean boolean59 = jSDocInfoBuilder51.recordNoTypeCheck();
        boolean boolean60 = jSDocInfoBuilder51.recordExpose();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node64.addChildrenToFront(node68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = jSDocInfoBuilder51.build(node68);
        java.lang.String str71 = jSDocInfo70.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = jSDocInfo70.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = jSDocInfo70.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition74 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition78 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean80 = typePosition79.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList81 = com.google.common.collect.ImmutableList.of(typePosition74, typePosition75, typePosition76, typePosition77, typePosition78, typePosition79);
        int int82 = typePosition76.getEndLine();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean87 = node86.isNull();
        boolean boolean88 = node86.isSyntheticBlock();
        boolean boolean89 = node86.hasMoreThanOneChild();
        typePosition76.setItem(node86);
        com.google.javascript.rhino.Node node91 = node86.getParent();
        jSDocInfo70.setAssociatedNode(node86);
        boolean boolean93 = node86.isDelProp();
        java.lang.String str94 = node86.toStringTree();
        double double95 = node86.getDouble();
        com.google.javascript.rhino.Node node96 = node44.srcrefTree(node86);
        boolean boolean97 = node86.isFromExterns();
        double double98 = node86.getDouble();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(jSDocInfo70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(jSTypeExpression72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(typePositionList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "NUMBER 0.0 43\n" + "'", str94, "NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test15366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15366");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = com.google.common.collect.ImmutableList.of("NUMBER 0.0 43\n", "", "NUMBER 43.0\n", "NULL JSDocInfo 97", "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nSTRING NUMBER 0.0 43 43\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: STRING NUMBER 0.0 43 43\n");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", 30, 51);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isOptionalArg();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node20.addChildrenToFront(node24);
        boolean boolean26 = node20.isGetterDef();
        boolean boolean27 = node20.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(32, node20, node37);
        boolean boolean51 = node50.isExprResult();
        boolean boolean52 = node50.isFunction();
        com.google.javascript.rhino.Node node53 = node13.srcrefTree(node50);
        boolean boolean54 = node50.isAdd();
        com.google.javascript.rhino.Node node55 = node9.useSourceInfoIfMissingFrom(node50);
        boolean boolean56 = strList5.equals((java.lang.Object) node55);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15367");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isLabel();
        node21.removeProp(41);
        node21.setVarArgs(false);
        boolean boolean27 = node21.isDebugger();
        boolean boolean28 = node21.isBlock();
        boolean boolean29 = node21.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test15368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15368");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("OR  54\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean30 = strList29.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor32 = strList29.listIterator(24);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (24) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test15369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15369");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isExterns();
        boolean boolean19 = jSDocInfo14.hasParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo14.getExtendedInterfaces();
        boolean boolean21 = jSDocInfo14.hasBaseType();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo14.getModifies();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        boolean boolean25 = node24.isParamList();
        com.google.javascript.rhino.Node node26 = node24.getFirstChild();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(41, (int) (short) -1, (int) (byte) 10);
        boolean boolean31 = node30.wasEmptyNode();
        boolean boolean32 = node30.isNE();
        boolean boolean33 = node30.hasChildren();
        java.lang.String str34 = node24.checkTreeEquals(node30);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean39 = node38.isNull();
        boolean boolean40 = node38.isFromExterns();
        boolean boolean41 = node38.isFunction();
        com.google.javascript.rhino.Node node42 = node38.cloneTree();
        node38.setOptionalArg(false);
        com.google.javascript.rhino.Node node45 = node38.getFirstChild();
        java.lang.String str46 = node24.checkTreeEquals(node38);
        int int47 = node24.getSourcePosition();
        boolean boolean48 = node24.isCase();
        boolean boolean49 = strSet22.contains((java.lang.Object) node24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNULL\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NULL\n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNULL\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NULL\n");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING  43\n" + "'", str46, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test15370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15370");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isVarArgs();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node16.addChildrenToFront(node20);
        node20.setQuotedString();
        boolean boolean23 = node20.isHook();
        boolean boolean24 = node3.isEquivalentTo(node20);
        node20.setLineno(15);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node20.getJsDocBuilderForNode();
        boolean boolean28 = node20.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15371");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isParamList();
        boolean boolean7 = node3.isParamList();
        com.google.javascript.rhino.Node node8 = node3.cloneNode();
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        boolean boolean17 = node14.isCall();
        int int18 = node14.getSourcePosition();
        java.lang.String str22 = node14.toString(false, true, false);
        boolean boolean23 = node14.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node14.getJsDocBuilderForNode();
        boolean boolean25 = node14.isSwitch();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node14.getAncestors();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean28 = typePosition27.hasBrackets();
        int int29 = typePosition27.getEndLine();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node33.addChildrenToFront(node37);
        boolean boolean39 = node33.isGetterDef();
        boolean boolean40 = node33.isEmpty();
        typePosition27.setItem(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node33.children();
        com.google.javascript.rhino.Node node43 = node14.copyInformationFromForTree(node33);
        boolean boolean44 = node43.isContinue();
        int int45 = node43.getLength();
        com.google.javascript.rhino.Node node46 = node8.useSourceInfoFromForTree(node43);
        boolean boolean47 = node8.isFromExterns();
        boolean boolean49 = node8.getBooleanProp(0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 176180 + "'", int18 == 176180);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "STRING " + "'", str22, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ancestorIterable26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test15372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15372");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        boolean boolean11 = node3.isDefaultCase();
        node3.setCharno(46);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        strSet20.clear();
        node3.setDirectives((java.util.Set<java.lang.String>) strSet20);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test15373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15373");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        java.lang.String str22 = jSDocInfo20.getVersion();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING  43");
        boolean boolean25 = jSDocInfo20.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test15374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15374");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordExport();
        boolean boolean8 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordJavaDispatch();
        jSDocInfoBuilder12.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordJavaDispatch();
        boolean boolean23 = jSDocInfoBuilder21.recordNoCompile();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray37 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray38 = (java.util.ArrayList<java.lang.String>[]) arrayListArray37;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = strListBuilder35.add((java.util.ArrayList<java.lang.String>[]) arrayListArray37);
        boolean boolean40 = jSTypeExpression34.equals((java.lang.Object) arrayListArray37);
        boolean boolean41 = jSDocInfoBuilder21.recordParameter("", jSTypeExpression34);
        boolean boolean42 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression34);
        boolean boolean43 = jSTypeExpression34.isVarArgs();
        boolean boolean44 = jSDocInfoBuilder1.recordParameter("STRING \n", jSTypeExpression34);
        boolean boolean46 = jSDocInfoBuilder1.addReference("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        boolean boolean47 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertNotNull(arrayListArray37);
        org.junit.Assert.assertNotNull(strListArray38);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test15375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15375");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str25 = jSDocInfo20.getLendsName();
        boolean boolean27 = jSDocInfo20.hasParameter("");
        java.lang.String str28 = jSDocInfo20.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getParameterType("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        com.google.javascript.rhino.Node node31 = jSDocInfo20.getAssociatedNode();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder34.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder34.markName("hi!", staticSourceFile38, (int) (short) 0, (int) (short) 100);
        boolean boolean42 = jSDocInfoBuilder34.recordNoTypeCheck();
        boolean boolean43 = jSDocInfoBuilder34.recordExpose();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node47.addChildrenToFront(node51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = jSDocInfoBuilder34.build(node51);
        boolean boolean54 = jSDocInfo53.isExport();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean59 = node58.isOptionalArg();
        com.google.javascript.rhino.Node node60 = node58.getNext();
        jSDocInfo53.setAssociatedNode(node60);
        java.lang.String str62 = jSDocInfo53.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList63 = jSDocInfo53.getImplementedInterfaces();
        java.lang.String str64 = jSDocInfo53.getVersion();
        java.util.Set<java.lang.String> strSet65 = jSDocInfo53.getSuppressions();
        strSet65.clear();
        java.util.stream.Stream<java.lang.String> strStream67 = strSet65.parallelStream();
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray68 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray69 = strSet65.toArray(visibilityArray68);
        node31.putProp(10, (java.lang.Object) strSet65);
        java.util.Iterator<java.lang.String> strItor71 = strSet65.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(jSTypeExpressionList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertNotNull(visibilityArray68);
        org.junit.Assert.assertNotNull(visibilityArray69);
        org.junit.Assert.assertNotNull(strItor71);
    }

    @Test
    public void test15376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15376");
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = com.google.common.collect.ImmutableList.of("STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "", "STRING ", "STRING ", "hi!");
        boolean boolean10 = strList9.isEmpty();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        jSDocInfoBuilder12.markName("hi!", staticSourceFile16, (int) (short) 0, (int) (short) 100);
        boolean boolean20 = jSDocInfoBuilder12.recordNoTypeCheck();
        boolean boolean21 = jSDocInfoBuilder12.recordExpose();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node25.addChildrenToFront(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = jSDocInfoBuilder12.build(node29);
        java.lang.String str32 = jSDocInfo31.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo31.getTypedefType();
        java.lang.String str34 = jSDocInfo31.getLicense();
        java.lang.String str35 = jSDocInfo31.getReturnDescription();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo31.getSuppressions();
        java.lang.Object[] objArray37 = strSet36.toArray();
        boolean boolean38 = strList9.containsAll((java.util.Collection<java.lang.String>) strSet36);
        java.lang.Object obj39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = strList9.remove(obj39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSDocInfo31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test15377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15377");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean4 = node3.isIf();
        boolean boolean5 = node3.isAnd();
        boolean boolean6 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        node10.detachChildren();
        boolean boolean13 = node10.isLabelName();
        int int14 = node10.getSourcePosition();
        boolean boolean15 = node10.isQuotedString();
        node3.addChildToBack(node10);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder18.markName("hi!", staticSourceFile22, (int) (short) 0, (int) (short) 100);
        boolean boolean26 = jSDocInfoBuilder18.recordNoTypeCheck();
        boolean boolean27 = jSDocInfoBuilder18.recordExpose();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node31.addChildrenToFront(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = jSDocInfoBuilder18.build(node35);
        boolean boolean38 = jSDocInfo37.isExport();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean43 = node42.isOptionalArg();
        com.google.javascript.rhino.Node node44 = node42.getNext();
        jSDocInfo37.setAssociatedNode(node44);
        java.lang.String str46 = jSDocInfo37.getMeaning();
        boolean boolean47 = jSDocInfo37.containsDeclaration();
        boolean boolean48 = jSDocInfo37.isDefine();
        boolean boolean49 = jSDocInfo37.isIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo37.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo37.getReturnType();
        node3.setJSDocInfo(jSDocInfo37);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 176129 + "'", int14 == 176129);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(jSTypeExpression51);
    }

    @Test
    public void test15378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15378");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        boolean boolean8 = node4.isEmpty();
        boolean boolean9 = node4.isSetterDef();
        boolean boolean10 = node4.isArrayLit();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(221199, node4, 51, (int) (byte) 100);
        com.google.javascript.rhino.jstype.JSType jSType14 = node13.getJSType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSType14);
    }

    @Test
    public void test15379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15379");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean9 = jSDocInfoBuilder7.isPopulatedWithFileOverview();
        boolean boolean10 = jSDocInfoBuilder7.recordOverride();
        jSDocInfoBuilder7.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", (int) (short) 10, 48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder16.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        jSDocInfoBuilder16.markName("hi!", staticSourceFile20, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder16.recordEnumParameterType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder16.recordConstructor();
        boolean boolean27 = jSDocInfoBuilder16.recordNoTypeCheck();
        boolean boolean28 = jSDocInfoBuilder16.isConstructorRecorded();
        boolean boolean29 = jSDocInfoBuilder16.isDescriptionRecorded();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        boolean boolean37 = node34.isCall();
        boolean boolean38 = node34.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = new com.google.javascript.rhino.JSTypeExpression(node34, "STRING ");
        boolean boolean41 = jSDocInfoBuilder16.recordParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", jSTypeExpression40);
        boolean boolean42 = jSDocInfoBuilder7.recordType(jSTypeExpression40);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.isInterfaceRecorded();
        boolean boolean50 = jSDocInfoBuilder47.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        boolean boolean57 = node54.isCall();
        boolean boolean58 = node54.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node54, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray63 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray64 = (java.util.ArrayList<java.lang.String>[]) arrayListArray63;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder65 = strListBuilder61.add((java.util.ArrayList<java.lang.String>[]) arrayListArray63);
        boolean boolean66 = jSTypeExpression60.equals((java.lang.Object) arrayListArray63);
        boolean boolean67 = jSDocInfoBuilder47.recordDefineType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int69 = namePosition68.getEndLine();
        int int70 = namePosition68.getStartLine();
        com.google.javascript.rhino.Node node71 = namePosition68.getItem();
        boolean boolean72 = jSTypeExpression60.equals((java.lang.Object) node71);
        boolean boolean73 = jSDocInfoBuilder44.recordExtendedInterface(jSTypeExpression60);
        boolean boolean74 = jSDocInfoBuilder7.recordEnumParameterType(jSTypeExpression60);
        boolean boolean75 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression60);
        boolean boolean77 = jSDocInfoBuilder1.recordVersion("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertNotNull(arrayListArray63);
        org.junit.Assert.assertNotNull(strListArray64);
        org.junit.Assert.assertNotNull(strListBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test15380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15380");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean9 = jSDocInfoBuilder1.recordDeprecationReason("STRING \n");
        boolean boolean11 = jSDocInfoBuilder1.addReference("NUMBER 18.0");
        boolean boolean12 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test15381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15381");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isNoShadow();
        boolean boolean24 = jSDocInfo20.isInterface();
        boolean boolean25 = jSDocInfo20.isNoCompile();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo20.getParameterNames();
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo20.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(strCollection27);
    }

    @Test
    public void test15382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15382");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj12 = node10.getProp(43);
        boolean boolean13 = node10.isCall();
        int int14 = node10.getSourcePosition();
        java.lang.String str18 = node10.toString(false, true, false);
        boolean boolean19 = node10.isDo();
        boolean boolean20 = node10.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = jSDocInfoBuilder1.build(node10);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection22 = jSDocInfo21.getMarkers();
        java.lang.Class<?> wildcardClass23 = markerCollection22.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 176180 + "'", int14 == 176180);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING " + "'", str18, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSDocInfo21);
        org.junit.Assert.assertNotNull(markerCollection22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test15383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15383");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(176180, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nNUMBER 10.0 52\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: NUMBER 10.0 52\n");
        boolean boolean3 = node2.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test15384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15384");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean22 = jSDocInfo20.isDefine();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean25 = jSDocInfo20.hasEnumParameterType();
        int int26 = jSDocInfo20.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test15385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15385");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = strList50.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList50.spliterator();
        int int55 = strList50.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder57.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder57.recordParameter("", jSTypeExpression60);
        boolean boolean62 = jSDocInfoBuilder57.isJavaDispatch();
        boolean boolean63 = jSDocInfoBuilder57.recordNoSideEffects();
        boolean boolean64 = jSDocInfoBuilder57.recordPreserveTry();
        boolean boolean65 = jSDocInfoBuilder57.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = null;
        jSDocInfoBuilder57.markName("hi!", staticSourceFile67, (int) (short) 100, 8);
        int int71 = strList50.lastIndexOf((java.lang.Object) staticSourceFile67);
        java.util.Spliterator<java.lang.String> strSpliterator72 = strList50.spliterator();
        java.util.Iterator<java.lang.String> strItor73 = strList50.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = strList50.set(4095, "NUMBER 0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertNotNull(strItor73);
    }

    @Test
    public void test15386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15386");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        boolean boolean6 = node3.isDelProp();
        boolean boolean7 = node3.isQualifiedName();
        boolean boolean9 = node3.getBooleanProp(15);
        boolean boolean10 = node3.isVarArgs();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        boolean boolean17 = node14.isCall();
        int int18 = node14.getSourcePosition();
        java.lang.String str22 = node14.toString(false, true, false);
        boolean boolean23 = node14.isDo();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        boolean boolean27 = node14.isEquivalentTo(node26);
        boolean boolean28 = node14.isIn();
        node14.setWasEmptyNode(true);
        boolean boolean31 = node14.isOptionalArg();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (byte) 10, 50, 30);
        boolean boolean36 = node35.isLocalResultCall();
        java.lang.String str40 = node35.toString(true, true, true);
        boolean boolean41 = node35.isCatch();
        node35.setSourceEncodedPositionForTree(37);
        boolean boolean44 = node35.hasMoreThanOneChild();
        boolean boolean45 = node35.isWhile();
        boolean boolean46 = node14.hasChild(node35);
        node3.addChildToBack(node14);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 176180 + "'", int18 == 176180);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "STRING " + "'", str22, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 10.0 50" + "'", str40, "NUMBER 10.0 50");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test15387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15387");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isGetterDef();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable11 = node9.getAncestors();
        com.google.javascript.rhino.Node node12 = node3.srcref(node9);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node3.getJsDocBuilderForNode();
        node3.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(ancestorIterable11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
    }

    @Test
    public void test15388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15388");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition32 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int33 = namePosition32.getEndLine();
        int int34 = namePosition32.getStartLine();
        com.google.javascript.rhino.Node node35 = namePosition32.getItem();
        boolean boolean36 = jSTypeExpression24.equals((java.lang.Object) node35);
        boolean boolean37 = jSTypeExpression24.isVarArgs();
        boolean boolean38 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression24);
        com.google.javascript.rhino.Node node39 = jSTypeExpression24.getRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test15389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15389");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(42, nodeArray3, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(49, nodeArray3, 53, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray3);
        boolean boolean11 = node10.isFor();
        boolean boolean12 = node10.isThis();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        com.google.javascript.rhino.Node node35 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj41 = node39.getProp(43);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int46 = node45.getSourceOffset();
        com.google.javascript.rhino.Node node47 = node39.useSourceInfoIfMissingFromForTree(node45);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.Node node57 = node45.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj64 = node62.getProp(43);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int69 = node68.getSourceOffset();
        com.google.javascript.rhino.Node node70 = node62.useSourceInfoIfMissingFromForTree(node68);
        boolean boolean71 = node70.isAssignAdd();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean76 = node75.isVar();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) ' ', node29, node57, node70, node75, 1, 100);
        int int80 = node70.getSideEffectFlags();
        int int81 = node70.getSideEffectFlags();
        boolean boolean82 = node70.isAdd();
        com.google.javascript.rhino.Node node83 = node70.cloneNode();
        node10.addChildrenToFront(node83);
        boolean boolean85 = node10.isAssign();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test15390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15390");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo42.getBaseType();
        boolean boolean49 = jSDocInfo42.hasFileOverview();
        boolean boolean50 = jSDocInfo42.isNoSideEffects();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test15391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15391");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean4 = jSDocInfoBuilder1.addReference("NUMBER 40.0");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test15392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15392");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(52, "Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n", 30, 8);
        node4.setLineno(176180);
        boolean boolean7 = node4.isComma();
        node4.setLength(54);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15393");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean10 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean12 = jSDocInfoBuilder1.recordLends("[, hi!, , , hi!, , hi!, ]");
        boolean boolean13 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder16.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.isInterfaceRecorded();
        boolean boolean23 = jSDocInfoBuilder20.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        boolean boolean30 = node27.isCall();
        boolean boolean31 = node27.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = new com.google.javascript.rhino.JSTypeExpression(node27, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder34 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray36 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray37 = (java.util.ArrayList<java.lang.String>[]) arrayListArray36;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder38 = strListBuilder34.add((java.util.ArrayList<java.lang.String>[]) arrayListArray36);
        boolean boolean39 = jSTypeExpression33.equals((java.lang.Object) arrayListArray36);
        boolean boolean40 = jSDocInfoBuilder20.recordDefineType(jSTypeExpression33);
        com.google.javascript.rhino.Node node41 = jSTypeExpression33.getRoot();
        boolean boolean43 = jSDocInfoBuilder16.recordThrowDescription(jSTypeExpression33, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder45.isInterfaceRecorded();
        boolean boolean48 = jSDocInfoBuilder45.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        boolean boolean55 = node52.isCall();
        boolean boolean56 = node52.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = new com.google.javascript.rhino.JSTypeExpression(node52, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder59 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray61 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray62 = (java.util.ArrayList<java.lang.String>[]) arrayListArray61;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder63 = strListBuilder59.add((java.util.ArrayList<java.lang.String>[]) arrayListArray61);
        boolean boolean64 = jSTypeExpression58.equals((java.lang.Object) arrayListArray61);
        boolean boolean65 = jSDocInfoBuilder45.recordDefineType(jSTypeExpression58);
        boolean boolean66 = jSDocInfoBuilder16.recordEnumParameterType(jSTypeExpression58);
        boolean boolean67 = jSDocInfoBuilder1.recordParameter("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", jSTypeExpression58);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node71.addChildrenToFront(node75);
        node75.setQuotedString();
        com.google.javascript.rhino.Node node78 = node75.removeFirstChild();
        boolean boolean79 = node75.isQuotedString();
        boolean boolean80 = node75.isRegExp();
        node75.setCharno((int) '#');
        boolean boolean83 = jSTypeExpression58.equals((java.lang.Object) '#');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strListBuilder34);
        org.junit.Assert.assertNotNull(arrayListArray36);
        org.junit.Assert.assertNotNull(strListArray37);
        org.junit.Assert.assertNotNull(strListBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strListBuilder59);
        org.junit.Assert.assertNotNull(arrayListArray61);
        org.junit.Assert.assertNotNull(strListArray62);
        org.junit.Assert.assertNotNull(strListBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test15394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15394");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean11 = node4.getBooleanProp(8);
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        boolean boolean13 = node4.isVoid();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node17.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node24 = node17.getChildAtIndex(0);
        java.lang.String str25 = node24.toString();
        node24.setSourceEncodedPositionForTree((int) (byte) -1);
        node24.setOptionalArg(false);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj35 = node33.getProp(43);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int40 = node39.getSourceOffset();
        com.google.javascript.rhino.Node node41 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean46 = node45.isVar();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node51 = node45.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node52 = node33.copyInformationFromForTree(node51);
        boolean boolean53 = node24.isEquivalentToTyped(node33);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(8, node4, node33, 9, (int) '4');
        boolean boolean57 = node4.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING  43" + "'", str25, "STRING  43");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test15395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15395");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0\n", 53, 0);
        boolean boolean5 = node3.getBooleanProp(9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test15396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15396");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isExprResult();
        com.google.javascript.rhino.InputId inputId13 = null;
        node3.setInputId(inputId13);
        com.google.javascript.rhino.Node node15 = node3.cloneTree();
        java.lang.String str16 = node3.toStringTree();
        com.google.javascript.rhino.Node node17 = node3.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "STRING  43\n" + "'", str16, "STRING  43\n");
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test15397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15397");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isBreak();
        int int15 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFrom(node12);
        com.google.javascript.rhino.Node node17 = node12.getFirstChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node30 = node12.srcref(node29);
        int int31 = node30.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 43 + "'", int31 == 43);
    }

    @Test
    public void test15398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15398");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        boolean boolean7 = node3.isOr();
        boolean boolean8 = node3.isNot();
        node3.setLength(2);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable11 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor12 = ancestorIterable11.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ancestorIterable11);
        org.junit.Assert.assertNotNull(nodeItor12);
    }

    @Test
    public void test15399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15399");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo14.getParameterNames();
        boolean boolean19 = jSDocInfo14.hasReturnType();
        java.lang.String str20 = jSDocInfo14.getFileOverview();
        boolean boolean21 = jSDocInfo14.hasReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo14.getImplementedInterfaces();
        java.lang.String str23 = jSDocInfo14.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test15400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15400");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo20.hasThisType();
        java.lang.String str25 = jSDocInfo20.getBlockDescription();
        boolean boolean26 = jSDocInfo20.isNoCompile();
        boolean boolean27 = jSDocInfo20.isHidden();
        boolean boolean28 = jSDocInfo20.isOverride();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node32.addChildrenToFront(node36);
        node36.setQuotedString();
        boolean boolean39 = node36.isHook();
        int int40 = node36.getType();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        int int47 = node44.getType();
        boolean boolean48 = node44.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node49 = node36.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean50 = node44.isQuotedString();
        boolean boolean51 = node44.isIf();
        jSDocInfo20.setAssociatedNode(node44);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo20.getBaseType();
        boolean boolean55 = jSDocInfo20.isOverride();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 40 + "'", int40 == 40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 40 + "'", int47 == 40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test15401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15401");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isIf();
        boolean boolean13 = node11.isAnd();
        node11.detachChildren();
        boolean boolean15 = node11.isStringKey();
        node11.addSuppression("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean18 = node11.isEmpty();
        boolean boolean19 = node11.isArrayLit();
        java.lang.String str20 = node11.getString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test15402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15402");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(36);
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(12, (-1), (int) (short) 10);
        boolean boolean7 = node6.isNot();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node6);
        boolean boolean9 = node8.isHook();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15403");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        int int15 = jSDocInfo14.getImplementedInterfaceCount();
        boolean boolean17 = jSDocInfo14.hasParameterType("OR  54\n");
        java.lang.String str18 = jSDocInfo14.getVersion();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test15404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15404");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 44, 39);
        node5.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.cloneNode();
        boolean boolean15 = node14.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15405");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node18.isComma();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFromForTree(node18);
        boolean boolean22 = node21.isAssignAdd();
        boolean boolean23 = node21.isNot();
        com.google.javascript.rhino.Node node24 = node21.getFirstChild();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isVar();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node34 = node28.copyInformationFromForTree(node33);
        boolean boolean35 = node34.hasMoreThanOneChild();
        node34.putProp(4, (java.lang.Object) (byte) -1);
        com.google.javascript.rhino.Node node39 = node21.srcrefTree(node34);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test15406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15406");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet15);
        java.lang.Object[] objArray18 = strSet15.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        java.lang.Object[] objArray28 = strSet25.toArray();
        boolean boolean29 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.lang.Object[] objArray30 = strSet15.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder32.markName("hi!", staticSourceFile36, (int) (short) 0, (int) (short) 100);
        boolean boolean40 = jSDocInfoBuilder32.recordNoTypeCheck();
        boolean boolean41 = jSDocInfoBuilder32.recordExpose();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node45.addChildrenToFront(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = jSDocInfoBuilder32.build(node49);
        java.lang.String str52 = jSDocInfo51.getMeaning();
        boolean boolean53 = jSDocInfo51.isExport();
        boolean boolean54 = strSet15.equals((java.lang.Object) jSDocInfo51);
        java.util.stream.Stream<java.lang.String> strStream55 = strSet15.stream();
        boolean boolean56 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet15);
        boolean boolean57 = jSDocInfoBuilder1.recordExport();
        boolean boolean59 = jSDocInfoBuilder1.recordFileOverview("NUMBER 0.0 43\n");
        boolean boolean61 = jSDocInfoBuilder1.recordFileOverview("");
        boolean boolean63 = jSDocInfoBuilder1.recordDeprecationReason("OR  54\n");
        boolean boolean64 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean66 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSDocInfo51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test15407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15407");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.hasFileOverview();
        boolean boolean26 = jSDocInfo20.isConstant();
        java.lang.String str27 = jSDocInfo20.getDeprecationReason();
        boolean boolean29 = jSDocInfo20.hasParameterType("[, hi!, , , hi!, , hi!, ]");
        boolean boolean30 = jSDocInfo20.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo20.getBaseType();
        boolean boolean32 = jSDocInfo20.isConstructor();
        boolean boolean33 = jSDocInfo20.isNoShadow();
        java.lang.String str34 = jSDocInfo20.getBlockDescription();
        boolean boolean35 = jSDocInfo20.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test15408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15408");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        java.lang.String str3 = stringPosition0.getItem();
        stringPosition0.setItem("");
        stringPosition0.setItem("STRING  43\n");
        stringPosition0.setItem("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        stringPosition0.setPositionInformation(30, (int) '4', (int) 'a', 4095);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test15409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15409");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExterns();
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        jSDocInfoBuilder1.recordOriginalCommentString("TYPEOF");
        boolean boolean14 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.recordOriginalCommentString("OR  54\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        jSDocInfoBuilder1.markName("ERROR  43\n", staticSourceFile18, 24, 47);
        boolean boolean22 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean23 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test15410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15410");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        boolean boolean34 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList31);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = strList31.add("NULL JSDocInfo 97");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test15411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15411");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0);
        jSDocInfo42.setAssociatedNode(node77);
        boolean boolean79 = jSDocInfo42.isNoShadow();
        boolean boolean80 = jSDocInfo42.hasFileOverview();
        java.lang.String str81 = jSDocInfo42.getVersion();
        jSDocInfo42.setDeprecated(false);
        java.util.Collection<java.lang.String> strCollection84 = jSDocInfo42.getAuthors();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(strCollection84);
    }

    @Test
    public void test15412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15412");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        com.google.javascript.rhino.Node node77 = node70.getChildAtIndex(0);
        com.google.javascript.rhino.Node node78 = node70.removeFirstChild();
        node57.addChildToBack(node70);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0);
        com.google.javascript.rhino.Node node82 = node57.copyInformationFromForTree(node81);
        com.google.javascript.rhino.Node node83 = node57.removeChildren();
        boolean boolean84 = node57.isAdd();
        boolean boolean85 = node57.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test15413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15413");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        boolean boolean26 = jSDocInfo20.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection27 = jSDocInfo20.getTypeNodes();
        java.lang.String str28 = jSDocInfo20.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo20.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeCollection27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(jSTypeExpression30);
    }

    @Test
    public void test15414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15414");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, 36, 38);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean8 = node7.isOptionalArg();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node14.isGetterDef();
        boolean boolean21 = node14.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node33 = node25.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet40);
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(32, node14, node31);
        boolean boolean45 = node44.isExprResult();
        boolean boolean46 = node44.isFunction();
        com.google.javascript.rhino.Node node47 = node7.srcrefTree(node44);
        com.google.javascript.rhino.Node node48 = node3.clonePropsFrom(node7);
        int int49 = node7.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
    }

    @Test
    public void test15415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15415");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        int int12 = node3.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node17.hasChildren();
        node17.setCharno(52);
        com.google.javascript.rhino.Node node27 = node3.clonePropsFrom(node17);
        boolean boolean28 = node3.isQuotedString();
        boolean boolean29 = node3.isBlock();
        boolean boolean30 = node3.isTry();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean35 = node34.isOptionalArg();
        node34.setSourceEncodedPosition(12);
        boolean boolean38 = node34.isFromExterns();
        com.google.javascript.rhino.Node node39 = node3.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node node40 = node39.cloneNode();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isCatch();
        boolean boolean43 = node39.isGetElem();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test15416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15416");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object[] objArray17 = strSet14.toArray();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object[] objArray27 = strSet24.toArray();
        boolean boolean28 = strSet14.retainAll((java.util.Collection<java.lang.String>) strSet24);
        java.lang.Object[] objArray29 = strSet14.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet14.spliterator();
        boolean boolean32 = strSet14.add("STRING ");
        boolean boolean33 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet14);
        java.util.Spliterator<java.lang.String> strSpliterator34 = strSet14.spliterator();
        boolean boolean36 = strSet14.add("");
        strSet14.clear();
        com.google.common.collect.ImmutableList.Builder<java.lang.reflect.Type> typeBuilder38 = com.google.common.collect.ImmutableList.builder();
        boolean boolean39 = strSet14.equals((java.lang.Object) typeBuilder38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(typeBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test15417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15417");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        node33.setString("hi!");
        boolean boolean37 = node33.isArrayLit();
        int int38 = node33.getSourcePosition();
        int int39 = node33.getCharno();
        boolean boolean40 = node33.isInc();
        java.lang.Object obj42 = null;
        node33.putProp(100, obj42);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test15418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15418");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        boolean boolean59 = strList49.contains((java.lang.Object) node57);
        int int60 = strList49.size();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor62 = strList49.listIterator(4);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor64 = strList49.listIterator(0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor66 = strList49.listIterator(167974);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (167974) must not be greater than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertNotNull(strItor64);
    }

    @Test
    public void test15419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15419");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        boolean boolean13 = node3.isWith();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node3.isEquivalentTo(node17);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node35 = node28.getChildAtIndex(0);
        java.lang.String str36 = node35.toString();
        node35.setSourceEncodedPositionForTree((int) (byte) -1);
        node35.setOptionalArg(false);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int51 = node50.getSourceOffset();
        com.google.javascript.rhino.Node node52 = node44.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean57 = node56.isVar();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node62 = node56.copyInformationFromForTree(node61);
        com.google.javascript.rhino.Node node63 = node44.copyInformationFromForTree(node62);
        boolean boolean64 = node35.isEquivalentToTyped(node44);
        com.google.javascript.rhino.Node node65 = node3.srcrefTree(node35);
        boolean boolean66 = node35.isNot();
        boolean boolean67 = node35.isContinue();
        com.google.javascript.rhino.InputId inputId68 = null;
        node35.setInputId(inputId68);
        boolean boolean70 = node35.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  43" + "'", str36, "STRING  43");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test15420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15420");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isLabelName();
        int int7 = node3.getIntProp((int) 'a');
        boolean boolean8 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 50);
        node10.setLength(12);
        com.google.javascript.rhino.Node node13 = node10.cloneTree();
        com.google.javascript.rhino.Node node14 = node3.copyInformationFromForTree(node10);
        boolean boolean15 = node14.isString();
        boolean boolean16 = node14.isOnlyModifiesThisCall();
        boolean boolean17 = node14.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15421");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 48, 4, 51);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15422");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        boolean boolean68 = node67.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(53, node67, node80, node84);
        boolean boolean87 = node80.isNull();
        boolean boolean88 = node80.isLabelName();
        boolean boolean89 = node80.isThis();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(41, 31, (int) (short) 1);
        com.google.javascript.rhino.Node node94 = node93.getLastSibling();
        com.google.javascript.rhino.Node node95 = node94.getLastChild();
        node80.addChildrenToBack(node94);
        com.google.javascript.rhino.jstype.JSType jSType97 = node94.getJSType();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNull(node95);
        org.junit.Assert.assertNull(jSType97);
    }

    @Test
    public void test15423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15423");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        boolean boolean8 = node4.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = new com.google.javascript.rhino.JSTypeExpression(node4, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder11 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray13 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray14 = (java.util.ArrayList<java.lang.String>[]) arrayListArray13;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = strListBuilder11.add((java.util.ArrayList<java.lang.String>[]) arrayListArray13);
        boolean boolean16 = jSTypeExpression10.equals((java.lang.Object) arrayListArray13);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder17 = strListBuilder0.add((java.util.ArrayList<java.lang.String>[]) arrayListArray13);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder18 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = strListBuilder18.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder36 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray38 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray39 = (java.util.ArrayList<java.lang.String>[]) arrayListArray38;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder40 = strListBuilder36.add((java.util.ArrayList<java.lang.String>[]) arrayListArray38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        boolean boolean47 = node44.isCall();
        boolean boolean48 = node44.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = new com.google.javascript.rhino.JSTypeExpression(node44, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder51 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray53 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray54 = (java.util.ArrayList<java.lang.String>[]) arrayListArray53;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder55 = strListBuilder51.add((java.util.ArrayList<java.lang.String>[]) arrayListArray53);
        boolean boolean56 = jSTypeExpression50.equals((java.lang.Object) arrayListArray53);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        boolean boolean64 = node61.isCall();
        boolean boolean65 = node61.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = new com.google.javascript.rhino.JSTypeExpression(node61, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder68 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray70 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray71 = (java.util.ArrayList<java.lang.String>[]) arrayListArray70;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder72 = strListBuilder68.add((java.util.ArrayList<java.lang.String>[]) arrayListArray70);
        boolean boolean73 = jSTypeExpression67.equals((java.lang.Object) arrayListArray70);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder74 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray70);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder75 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj81 = node79.getProp(43);
        boolean boolean82 = node79.isCall();
        boolean boolean83 = node79.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = new com.google.javascript.rhino.JSTypeExpression(node79, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder86 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray88 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray89 = (java.util.ArrayList<java.lang.String>[]) arrayListArray88;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder90 = strListBuilder86.add((java.util.ArrayList<java.lang.String>[]) arrayListArray88);
        boolean boolean91 = jSTypeExpression85.equals((java.lang.Object) arrayListArray88);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder92 = strListBuilder75.add((java.util.ArrayList<java.lang.String>[]) arrayListArray88);
        com.google.common.collect.ImmutableList<java.util.ArrayList[]> arrayListArrayList93 = com.google.common.collect.ImmutableList.of(arrayListArray38, arrayListArray53, arrayListArray70, arrayListArray88);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder94 = strListBuilder18.add((java.util.ArrayList<java.lang.String>[]) arrayListArray88);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList95 = strListBuilder18.build();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>> strListBuilderList96 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>) strListBuilder17, (com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>) strListBuilder18);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList97 = strListBuilder18.build();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList98 = strListBuilder18.build();
        org.junit.Assert.assertNotNull(strListBuilder0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strListBuilder11);
        org.junit.Assert.assertNotNull(arrayListArray13);
        org.junit.Assert.assertNotNull(strListArray14);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder17);
        org.junit.Assert.assertNotNull(strListBuilder18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertNotNull(strListBuilder36);
        org.junit.Assert.assertNotNull(arrayListArray38);
        org.junit.Assert.assertNotNull(strListArray39);
        org.junit.Assert.assertNotNull(strListBuilder40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strListBuilder51);
        org.junit.Assert.assertNotNull(arrayListArray53);
        org.junit.Assert.assertNotNull(strListArray54);
        org.junit.Assert.assertNotNull(strListBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strListBuilder68);
        org.junit.Assert.assertNotNull(arrayListArray70);
        org.junit.Assert.assertNotNull(strListArray71);
        org.junit.Assert.assertNotNull(strListBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strListBuilder74);
        org.junit.Assert.assertNotNull(strListBuilder75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strListBuilder86);
        org.junit.Assert.assertNotNull(arrayListArray88);
        org.junit.Assert.assertNotNull(strListArray89);
        org.junit.Assert.assertNotNull(strListBuilder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strListBuilder92);
        org.junit.Assert.assertNotNull(arrayListArrayList93);
        org.junit.Assert.assertNotNull(strListBuilder94);
        org.junit.Assert.assertNotNull(strListList95);
        org.junit.Assert.assertNotNull(strListBuilderList96);
        org.junit.Assert.assertNotNull(strListList97);
        org.junit.Assert.assertNotNull(strListList98);
    }

    @Test
    public void test15424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15424");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition13.getPositionOnStartLine();
        java.lang.String str32 = stringPosition13.getItem();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition13.setPositionInformation(52, 176129, 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 52?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test15425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15425");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isVarArgs();
        boolean boolean13 = node3.isReturn();
        boolean boolean14 = node3.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15426");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder1 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList2 = strListBuilder1.build();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>> strListBuilderList3 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>) strListBuilder0, (com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>) strListBuilder1);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList4 = strListBuilder1.build();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder5 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder6 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList7 = strListBuilder6.build();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>> strListBuilderList8 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>) strListBuilder5, (com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>) strListBuilder6);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder9 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder10 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList11 = strListBuilder10.build();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>> strListBuilderList12 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>) strListBuilder9, (com.google.common.collect.ImmutableCollection.Builder<java.util.ArrayList<java.lang.String>>) strListBuilder10);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList13 = strListBuilder10.build();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder14 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray16 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray17 = (java.util.ArrayList<java.lang.String>[]) arrayListArray16;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder18 = strListBuilder14.add((java.util.ArrayList<java.lang.String>[]) arrayListArray16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj41 = node39.getProp(43);
        boolean boolean42 = node39.isCall();
        boolean boolean43 = node39.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = new com.google.javascript.rhino.JSTypeExpression(node39, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder46 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray48 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray49 = (java.util.ArrayList<java.lang.String>[]) arrayListArray48;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = strListBuilder46.add((java.util.ArrayList<java.lang.String>[]) arrayListArray48);
        boolean boolean51 = jSTypeExpression45.equals((java.lang.Object) arrayListArray48);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder52 = strListBuilder35.add((java.util.ArrayList<java.lang.String>[]) arrayListArray48);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj59 = node57.getProp(43);
        boolean boolean60 = node57.isCall();
        boolean boolean61 = node57.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = new com.google.javascript.rhino.JSTypeExpression(node57, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder64 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray66 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray67 = (java.util.ArrayList<java.lang.String>[]) arrayListArray66;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder68 = strListBuilder64.add((java.util.ArrayList<java.lang.String>[]) arrayListArray66);
        boolean boolean69 = jSTypeExpression63.equals((java.lang.Object) arrayListArray66);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder70 = strListBuilder53.add((java.util.ArrayList<java.lang.String>[]) arrayListArray66);
        com.google.common.collect.ImmutableList<java.util.ArrayList[]> arrayListArrayList71 = com.google.common.collect.ImmutableList.of(arrayListArray16, arrayListArray31, arrayListArray48, arrayListArray66);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder72 = strListBuilder10.add((java.util.ArrayList<java.lang.String>[]) arrayListArray48);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder73 = strListBuilder6.add((java.util.ArrayList<java.lang.String>[]) arrayListArray48);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder74 = strListBuilder1.add((java.util.ArrayList<java.lang.String>[]) arrayListArray48);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        boolean boolean79 = strList77.isEmpty();
        java.util.Iterator<java.lang.String> strItor80 = strList77.iterator();
        java.lang.Object[] objArray81 = strList77.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder83 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean84 = jSDocInfoBuilder83.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = null;
        boolean boolean87 = jSDocInfoBuilder83.recordParameter("", jSTypeExpression86);
        boolean boolean88 = jSDocInfoBuilder83.isJavaDispatch();
        boolean boolean89 = jSDocInfoBuilder83.recordNoSideEffects();
        boolean boolean90 = jSDocInfoBuilder83.recordHiddenness();
        boolean boolean91 = jSDocInfoBuilder83.recordNoSideEffects();
        boolean boolean92 = strList77.remove((java.lang.Object) boolean91);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder93 = strListBuilder74.add(strList77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = strList77.set(4095, "NULL JSDocInfo");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4095, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBuilder0);
        org.junit.Assert.assertNotNull(strListBuilder1);
        org.junit.Assert.assertNotNull(strListList2);
        org.junit.Assert.assertNotNull(strListBuilderList3);
        org.junit.Assert.assertNotNull(strListList4);
        org.junit.Assert.assertNotNull(strListBuilder5);
        org.junit.Assert.assertNotNull(strListBuilder6);
        org.junit.Assert.assertNotNull(strListList7);
        org.junit.Assert.assertNotNull(strListBuilderList8);
        org.junit.Assert.assertNotNull(strListBuilder9);
        org.junit.Assert.assertNotNull(strListBuilder10);
        org.junit.Assert.assertNotNull(strListList11);
        org.junit.Assert.assertNotNull(strListBuilderList12);
        org.junit.Assert.assertNotNull(strListList13);
        org.junit.Assert.assertNotNull(strListBuilder14);
        org.junit.Assert.assertNotNull(arrayListArray16);
        org.junit.Assert.assertNotNull(strListArray17);
        org.junit.Assert.assertNotNull(strListBuilder18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strListBuilder46);
        org.junit.Assert.assertNotNull(arrayListArray48);
        org.junit.Assert.assertNotNull(strListArray49);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strListBuilder52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strListBuilder64);
        org.junit.Assert.assertNotNull(arrayListArray66);
        org.junit.Assert.assertNotNull(strListArray67);
        org.junit.Assert.assertNotNull(strListBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strListBuilder70);
        org.junit.Assert.assertNotNull(arrayListArrayList71);
        org.junit.Assert.assertNotNull(strListBuilder72);
        org.junit.Assert.assertNotNull(strListBuilder73);
        org.junit.Assert.assertNotNull(strListBuilder74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strListBuilder93);
    }

    @Test
    public void test15427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15427");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        com.google.javascript.rhino.Node node11 = node3.getNext();
        com.google.javascript.rhino.Node node12 = node3.getNext();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.siblings();
        java.lang.Object obj15 = node3.getProp(44);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test15428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15428");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 43, (-1));
        boolean boolean4 = node3.isSetterDef();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15429");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.AncestorIterable[][][][]> ancestorIterableArrayList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(ancestorIterableArrayList0);
    }

    @Test
    public void test15430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15430");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = strList50.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList50.spliterator();
        int int55 = strList50.size();
        int int56 = strList50.size();
        java.lang.String str58 = strList50.get((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = strList50.remove(42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
    }

    @Test
    public void test15431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15431");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        java.lang.String str27 = jSDocInfo20.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo20.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo20.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNull(jSTypeExpression29);
    }

    @Test
    public void test15432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15432");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        boolean boolean35 = node29.isGetterDef();
        boolean boolean36 = node29.hasMoreThanOneChild();
        jSDocInfo20.setAssociatedNode(node29);
        boolean boolean38 = node29.isNE();
        boolean boolean39 = node29.isWith();
        boolean boolean40 = node29.isScript();
        node29.putIntProp((int) (short) 1, 16);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test15433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15433");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node21.setJSType(jSType22);
        boolean boolean24 = node21.isQualifiedName();
        node21.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15434");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        jSDocInfoBuilder12.markName("hi!", staticSourceFile16, (int) (short) 0, (int) (short) 100);
        boolean boolean20 = jSDocInfoBuilder12.recordNoTypeCheck();
        boolean boolean21 = jSDocInfoBuilder12.recordExpose();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node25.addChildrenToFront(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = jSDocInfoBuilder12.build(node29);
        java.lang.String str32 = jSDocInfo31.getMeaning();
        boolean boolean33 = jSDocInfo31.hasFileOverview();
        boolean boolean35 = jSDocInfo31.hasParameter("");
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = jSDocInfo31.getTemplateTypeNames();
        boolean boolean37 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList36);
        java.lang.Object[] objArray38 = strList36.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = strList36.remove((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSDocInfo31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
    }

    @Test
    public void test15435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15435");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        boolean boolean24 = jSDocInfo20.hasReturnType();
        boolean boolean25 = jSDocInfo20.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection26 = jSDocInfo20.getMarkers();
        java.lang.String str27 = jSDocInfo20.getBlockDescription();
        boolean boolean28 = jSDocInfo20.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo20.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(markerCollection26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNull(jSTypeExpression30);
    }

    @Test
    public void test15436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15436");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        strSet16.clear();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object[] objArray41 = strSet38.toArray();
        boolean boolean42 = strSet28.retainAll((java.util.Collection<java.lang.String>) strSet38);
        boolean boolean43 = strSet16.removeAll((java.util.Collection<java.lang.String>) strSet28);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet16.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet16.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertNotNull(strSpliterator45);
    }

    @Test
    public void test15437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15437");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        java.util.Spliterator<java.lang.String> strSpliterator24 = strList23.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator25 = strList23.spliterator();
        java.util.Iterator<java.lang.String> strItor26 = strList23.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strSpliterator24);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(strItor26);
    }

    @Test
    public void test15438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15438");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        com.google.javascript.rhino.jstype.JSType jSType68 = node57.getJSType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node57.children();
        com.google.javascript.rhino.Node node70 = node57.cloneTree();
        boolean boolean71 = node70.isNot();
        boolean boolean72 = node70.isFunction();
        node70.setString("NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test15439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15439");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        boolean boolean7 = jSDocInfoBuilder1.hasParameter("STRING  43");
        boolean boolean8 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean9 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean11 = jSDocInfoBuilder1.recordVersion("NUMBER 12.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test15440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15440");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder15.recordThisType(jSTypeExpression17);
        boolean boolean20 = jSDocInfoBuilder15.addReference("hi!");
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        boolean boolean23 = jSDocInfoBuilder15.addAuthor("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordJavaDispatch();
        jSDocInfoBuilder25.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordJavaDispatch();
        boolean boolean36 = jSDocInfoBuilder34.recordNoCompile();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj43 = node41.getProp(43);
        boolean boolean44 = node41.isCall();
        boolean boolean45 = node41.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node41, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder48 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray50 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray51 = (java.util.ArrayList<java.lang.String>[]) arrayListArray50;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder52 = strListBuilder48.add((java.util.ArrayList<java.lang.String>[]) arrayListArray50);
        boolean boolean53 = jSTypeExpression47.equals((java.lang.Object) arrayListArray50);
        boolean boolean54 = jSDocInfoBuilder34.recordParameter("", jSTypeExpression47);
        boolean boolean55 = jSDocInfoBuilder25.recordThrowType(jSTypeExpression47);
        boolean boolean56 = jSTypeExpression47.isVarArgs();
        boolean boolean57 = jSDocInfoBuilder15.recordThisType(jSTypeExpression47);
        boolean boolean58 = jSDocInfoBuilder1.recordThisType(jSTypeExpression47);
        jSDocInfoBuilder1.recordOriginalCommentString("[, hi!, , hi!, , , hi!, ]");
        boolean boolean61 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strListBuilder48);
        org.junit.Assert.assertNotNull(arrayListArray50);
        org.junit.Assert.assertNotNull(strListArray51);
        org.junit.Assert.assertNotNull(strListBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test15441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15441");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        boolean boolean24 = node21.isDec();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        node32.setQuotedString();
        com.google.javascript.rhino.Node node35 = node32.removeFirstChild();
        com.google.javascript.rhino.Node node36 = node21.copyInformationFrom(node32);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        node40.detachChildren();
        boolean boolean43 = node40.isAnd();
        boolean boolean44 = node40.isSwitch();
        boolean boolean45 = node40.isExprResult();
        node40.addSuppression("JSDocInfo");
        int int48 = node32.getIndexOfChild(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node40.getJSDocInfo();
        boolean boolean50 = node40.isContinue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test15442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15442");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean7 = jSDocInfoBuilder1.isPopulated();
        boolean boolean8 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean10 = jSDocInfoBuilder1.addReference("NUMBER 0.0 43\n    STRING  43\n");
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("GETELEM  43\n", "NUMBER 53.0 42\n");
        boolean boolean14 = jSDocInfoBuilder1.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15443");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = jSDocInfo42.getTemplateTypeNames();
        java.util.ListIterator<java.lang.String> strItor51 = strList50.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor52 = strList50.iterator();
        java.lang.Object[] objArray53 = strList50.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder55.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        jSDocInfoBuilder55.markName("hi!", staticSourceFile59, (int) (short) 0, (int) (short) 100);
        boolean boolean63 = jSDocInfoBuilder55.recordNoTypeCheck();
        boolean boolean64 = jSDocInfoBuilder55.recordExpose();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node68.addChildrenToFront(node72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = jSDocInfoBuilder55.build(node72);
        java.lang.String str75 = jSDocInfo74.getMeaning();
        boolean boolean76 = jSDocInfo74.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList77 = jSDocInfo74.getExtendedInterfaces();
        java.lang.String str78 = jSDocInfo74.getDescription();
        java.util.Set<java.lang.String> strSet79 = jSDocInfo74.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream80 = strSet79.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator81 = strSet79.spliterator();
        boolean boolean82 = strList50.containsAll((java.util.Collection<java.lang.String>) strSet79);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(jSDocInfo74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strStream80);
        org.junit.Assert.assertNotNull(strSpliterator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test15444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15444");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean7 = typePosition6.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6);
        int int9 = typePosition3.getEndLine();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean14 = node13.isNull();
        boolean boolean15 = node13.isSyntheticBlock();
        boolean boolean16 = node13.hasMoreThanOneChild();
        typePosition3.setItem(node13);
        com.google.javascript.rhino.Node node18 = node13.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.children();
        boolean boolean20 = node13.isVar();
        boolean boolean21 = node13.isGetterDef();
        node13.addSuppression("NUMBER 0.0 43");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet35);
        java.lang.Object obj39 = node32.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node40 = node27.copyInformationFrom(node32);
        boolean boolean41 = node27.isOr();
        int int43 = node27.getIntProp(53);
        com.google.javascript.rhino.Node node44 = node27.cloneNode();
        boolean boolean45 = node44.wasEmptyNode();
        node44.removeProp(36);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean52 = node51.isNull();
        boolean boolean53 = node51.isSyntheticBlock();
        com.google.javascript.rhino.Node node54 = node51.removeChildren();
        com.google.javascript.rhino.InputId inputId55 = null;
        node51.setInputId(inputId55);
        boolean boolean57 = node51.isThis();
        boolean boolean58 = node44.hasChild(node51);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node62.setIsSyntheticBlock(true);
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.isReturn();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 1, node13, node51, node62);
        node62.detachChildren();
        boolean boolean69 = node62.isIn();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test15445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15445");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        boolean boolean24 = jSDocInfo20.hasReturnType();
        boolean boolean25 = jSDocInfo20.hasType();
        boolean boolean26 = jSDocInfo20.isOverride();
        java.lang.String str27 = jSDocInfo20.getBlockDescription();
        boolean boolean28 = jSDocInfo20.hasFileOverview();
        boolean boolean29 = jSDocInfo20.isDefine();
        boolean boolean30 = jSDocInfo20.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15446");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean5 = jSDocInfoBuilder4.isInterfaceRecorded();
        boolean boolean7 = jSDocInfoBuilder4.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        boolean boolean14 = node11.isCall();
        boolean boolean15 = node11.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = new com.google.javascript.rhino.JSTypeExpression(node11, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder18 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray20 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray21 = (java.util.ArrayList<java.lang.String>[]) arrayListArray20;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder22 = strListBuilder18.add((java.util.ArrayList<java.lang.String>[]) arrayListArray20);
        boolean boolean23 = jSTypeExpression17.equals((java.lang.Object) arrayListArray20);
        boolean boolean24 = jSDocInfoBuilder4.recordDefineType(jSTypeExpression17);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int26 = namePosition25.getEndLine();
        int int27 = namePosition25.getStartLine();
        com.google.javascript.rhino.Node node28 = namePosition25.getItem();
        boolean boolean29 = jSTypeExpression17.equals((java.lang.Object) node28);
        boolean boolean30 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression17);
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int53 = strList51.indexOf((java.lang.Object) 'a');
        int int54 = strList51.size();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray58 = strList51.toArray(strArray57);
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("[, hi!, , , hi!, , hi!, ]", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "STRING ", "NUMBER 12.0\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "NUMBER 0.0 43 [directives: []]\n", "NUMBER 0.0", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "hi!", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", strArray57);
        boolean boolean60 = jSTypeExpression17.equals((java.lang.Object) "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression17);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strListBuilder18);
        org.junit.Assert.assertNotNull(arrayListArray20);
        org.junit.Assert.assertNotNull(strListArray21);
        org.junit.Assert.assertNotNull(strListBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression61);
        org.junit.Assert.assertNotNull(jSTypeExpression62);
    }

    @Test
    public void test15447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15447");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node3.siblings();
        node3.setDouble((double) 10);
        int int12 = node3.getSourcePosition();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.siblings();
        int int14 = node3.getSideEffectFlags();
        node3.setType((int) (byte) 1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 176129 + "'", int12 == 176129);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test15448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15448");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder10.recordBaseType(jSTypeExpression12);
        boolean boolean15 = jSDocInfoBuilder10.recordVersion("NUMBER 0.0 43");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder17.recordParameter("", jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder17.recordExterns();
        boolean boolean23 = jSDocInfoBuilder17.recordPreserveTry();
        boolean boolean24 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean26 = jSDocInfoBuilder17.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder17.recordType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder17.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.isInterfaceRecorded();
        boolean boolean34 = jSDocInfoBuilder31.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj40 = node38.getProp(43);
        boolean boolean41 = node38.isCall();
        boolean boolean42 = node38.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = new com.google.javascript.rhino.JSTypeExpression(node38, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder45 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray47 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray48 = (java.util.ArrayList<java.lang.String>[]) arrayListArray47;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = strListBuilder45.add((java.util.ArrayList<java.lang.String>[]) arrayListArray47);
        boolean boolean50 = jSTypeExpression44.equals((java.lang.Object) arrayListArray47);
        boolean boolean51 = jSDocInfoBuilder31.recordDefineType(jSTypeExpression44);
        boolean boolean52 = jSDocInfoBuilder17.recordBaseType(jSTypeExpression44);
        boolean boolean53 = jSDocInfoBuilder10.recordThrowType(jSTypeExpression44);
        boolean boolean54 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression44);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strListBuilder45);
        org.junit.Assert.assertNotNull(arrayListArray47);
        org.junit.Assert.assertNotNull(strListArray48);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test15449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15449");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) 'a');
        sideEffectFlags1.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags4.clearAllFlags();
        sideEffectFlags4.clearAllFlags();
        sideEffectFlags4.clearAllFlags();
        int int8 = sideEffectFlags4.valueOf();
        int int9 = sideEffectFlags4.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags11 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags11.setThrows();
        sideEffectFlags11.clearAllFlags();
        sideEffectFlags11.setAllFlags();
        sideEffectFlags11.clearAllFlags();
        sideEffectFlags11.setReturnsTainted();
        sideEffectFlags11.setAllFlags();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList18 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags4, sideEffectFlags11);
        sideEffectFlags4.setAllFlags();
        sideEffectFlags4.setAllFlags();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(sideEffectFlagsList18);
    }

    @Test
    public void test15450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15450");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean10 = strSet6.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator63 = strList60.spliterator();
        boolean boolean64 = strList30.equals((java.lang.Object) strList60);
        boolean boolean65 = strSet6.addAll((java.util.Collection<java.lang.String>) strList60);
        boolean boolean66 = strList60.isEmpty();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = null;
        boolean boolean71 = jSDocInfoBuilder68.recordThisType(jSTypeExpression70);
        boolean boolean73 = jSDocInfoBuilder68.addReference("hi!");
        boolean boolean74 = jSDocInfoBuilder68.recordPreserveTry();
        boolean boolean76 = jSDocInfoBuilder68.recordMeaning("JSDocInfo");
        boolean boolean77 = jSDocInfoBuilder68.recordIdGenerator();
        boolean boolean78 = strList60.contains((java.lang.Object) boolean77);
        java.util.Iterator<java.lang.String> strItor79 = strList60.iterator();
        java.util.stream.Stream<java.lang.String> strStream80 = strList60.parallelStream();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj86 = node84.getProp(43);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int91 = node90.getSourceOffset();
        com.google.javascript.rhino.Node node92 = node84.useSourceInfoIfMissingFromForTree(node90);
        boolean boolean93 = node92.isIf();
        boolean boolean94 = node92.isBreak();
        boolean boolean95 = node92.isComma();
        node92.setQuotedString();
        boolean boolean97 = node92.isBlock();
        int int98 = strList60.lastIndexOf((java.lang.Object) node92);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strItor79);
        org.junit.Assert.assertNotNull(strStream80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test15451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15451");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean22 = jSDocInfo20.isDefine();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean30 = typePosition29.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList31 = com.google.common.collect.ImmutableList.of(typePosition24, typePosition25, typePosition26, typePosition27, typePosition28, typePosition29);
        boolean boolean32 = strSet23.contains((java.lang.Object) typePosition28);
        int int33 = typePosition28.getStartLine();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node37.addChildrenToFront(node41);
        com.google.javascript.rhino.Node node44 = node37.getChildAtIndex(0);
        int int46 = node37.getIntProp(15);
        double double47 = node37.getDouble();
        typePosition28.setItem(node37);
        com.google.javascript.rhino.Node node49 = typePosition28.getItem();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(42, nodeArray52, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(39, nodeArray52, (int) '4', 32);
        int int59 = node58.getLength();
        java.lang.String str60 = node58.getSourceFileName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node58.siblings();
        com.google.javascript.rhino.Node node62 = node49.useSourceInfoFrom(node58);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(typePositionList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test15452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15452");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        java.lang.String str16 = jSDocInfo14.getMeaning();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo14.getModifies();
        java.lang.Object[] objArray18 = strSet17.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int29 = strList27.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int40 = strList38.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList59 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList27, (java.lang.Iterable<java.lang.String>) strList38, (java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList58);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList60 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList38);
        boolean boolean61 = strList38.isEmpty();
        java.lang.Object[] objArray62 = strList38.toArray();
        boolean boolean64 = strList38.contains((java.lang.Object) 32);
        boolean boolean65 = strSet17.containsAll((java.util.Collection<java.lang.String>) strList38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strIterableList59);
        org.junit.Assert.assertNotNull(strIterableList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test15453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15453");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isName();
        com.google.javascript.rhino.jstype.JSType jSType8 = node3.getJSType();
        node3.setLineno((int) (short) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean15 = node14.isVar();
        node14.putBooleanProp(30, false);
        boolean boolean19 = node14.isSwitch();
        boolean boolean20 = node14.isUnscopedQualifiedName();
        boolean boolean21 = node14.isName();
        node14.setWasEmptyNode(false);
        boolean boolean24 = node14.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        node28.setIsSyntheticBlock(true);
        boolean boolean39 = node28.isBlock();
        com.google.javascript.rhino.Node node40 = node14.clonePropsFrom(node28);
        com.google.javascript.rhino.Node node41 = node3.useSourceInfoIfMissingFromForTree(node14);
        boolean boolean42 = node14.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test15454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15454");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean11 = jSDocInfoBuilder1.recordMeaning("hi!");
        boolean boolean12 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test15455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15455");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isIf();
        boolean boolean13 = node11.isAnd();
        node11.setVarArgs(false);
        boolean boolean16 = node11.isFor();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj22 = node20.getProp(43);
        boolean boolean23 = node20.isCall();
        int int24 = node20.getSourcePosition();
        java.lang.String str28 = node20.toString(false, true, false);
        boolean boolean29 = node20.isNot();
        boolean boolean30 = node20.isDelProp();
        boolean boolean31 = node20.isTrue();
        int int32 = node11.getIndexOfChild(node20);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj38 = node36.getProp(43);
        boolean boolean39 = node36.isCall();
        int int40 = node36.getSourcePosition();
        com.google.javascript.rhino.Node node41 = node36.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.children();
        com.google.javascript.rhino.Node node43 = node11.useSourceInfoFromForTree(node36);
        int int44 = node11.getSideEffectFlags();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean51 = typePosition50.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList52 = com.google.common.collect.ImmutableList.of(typePosition45, typePosition46, typePosition47, typePosition48, typePosition49, typePosition50);
        int int53 = typePosition46.getEndLine();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        java.lang.String str59 = node58.toStringTree();
        java.lang.String str60 = node58.getSourceFileName();
        typePosition46.setItem(node58);
        node58.setQuotedString();
        node11.addChildrenToFront(node58);
        int int64 = node58.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 176180 + "'", int24 == 176180);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "STRING " + "'", str28, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 176180 + "'", int40 == 176180);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(typePositionList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR  54\n" + "'", str59, "OR  54\n");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 221199 + "'", int64 == 221199);
    }

    @Test
    public void test15456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15456");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node6.addChildrenToFront(node10);
        boolean boolean12 = node6.isGetterDef();
        boolean boolean13 = node6.isEmpty();
        typePosition0.setItem(node6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node6.children();
        boolean boolean16 = node6.isDefaultCase();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder18.markName("hi!", staticSourceFile22, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder18.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj37 = node35.getProp(43);
        boolean boolean38 = node35.isCall();
        int int39 = node35.getSourcePosition();
        java.lang.String str43 = node35.toString(false, true, false);
        boolean boolean44 = node35.isDo();
        boolean boolean45 = node35.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = jSDocInfoBuilder18.build(node35);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isParamList();
        boolean boolean54 = node50.isParamList();
        com.google.javascript.rhino.Node node55 = node50.cloneNode();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int60 = node59.getSourceOffset();
        double double61 = node59.getDouble();
        boolean boolean62 = node59.isInc();
        node50.addChildToFront(node59);
        boolean boolean64 = node50.isFalse();
        com.google.javascript.rhino.Node node65 = node50.getFirstChild();
        com.google.javascript.rhino.Node node66 = node35.srcrefTree(node50);
        boolean boolean67 = node6.isEquivalentToTyped(node66);
        node6.setIsSyntheticBlock(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 176180 + "'", int39 == 176180);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "STRING " + "'", str43, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSDocInfo46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test15457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15457");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        boolean boolean8 = node4.isEmpty();
        boolean boolean9 = node4.isInstanceOf();
        boolean boolean10 = node4.isDefaultCase();
        node4.putBooleanProp(47, false);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(35, node4, 53, 37);
        boolean boolean17 = node16.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15458");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(42, nodeArray4, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(39, nodeArray4, (int) '4', 32);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(176129, nodeArray4);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray4);
        node12.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node16 = node12.getAncestor(46);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test15459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15459");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean23 = jSDocInfo20.isConstant();
        boolean boolean24 = jSDocInfo20.isIdGenerator();
        boolean boolean25 = jSDocInfo20.isDeprecated();
        java.lang.String str26 = jSDocInfo20.getLicense();
        boolean boolean27 = jSDocInfo20.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15460");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean25 = jSDocInfo20.isDeprecated();
        boolean boolean26 = jSDocInfo20.isOverride();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test15461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15461");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        boolean boolean21 = strSet16.isEmpty();
        int int22 = strSet16.size();
        int int23 = strSet16.size();
        strSet16.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int35 = strList33.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int46 = strList44.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList65 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList33, (java.lang.Iterable<java.lang.String>) strList44, (java.lang.Iterable<java.lang.String>) strList55, (java.lang.Iterable<java.lang.String>) strList64);
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int76 = strList74.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator77 = strList74.spliterator();
        boolean boolean78 = strList44.equals((java.lang.Object) strList74);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean83 = node82.isVar();
        boolean boolean84 = strList74.contains((java.lang.Object) node82);
        int int85 = strList74.size();
        boolean boolean86 = strList74.isEmpty();
        java.lang.Object obj87 = null;
        boolean boolean88 = strList74.equals(obj87);
        java.lang.Object obj89 = null;
        int int90 = strList74.indexOf(obj89);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor91 = strList74.iterator();
        boolean boolean92 = strSet16.containsAll((java.util.Collection<java.lang.String>) strList74);
        java.lang.Object obj93 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = strList74.remove(obj93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strIterableList65);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(strItor91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test15462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15462");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean42 = strList19.isEmpty();
        java.lang.Object[] objArray43 = strList19.toArray();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) ' ', 16, 51);
        int int48 = strList19.indexOf((java.lang.Object) node47);
        node47.putBooleanProp(48, false);
        com.google.javascript.rhino.Node node52 = node47.getParent();
        boolean boolean53 = node47.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test15463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15463");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        jSDocInfo42.setLicense("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        boolean boolean51 = jSDocInfo42.isDeprecated();
        java.lang.String str52 = jSDocInfo42.getDescription();
        java.util.Collection<java.lang.String> strCollection53 = jSDocInfo42.getAuthors();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(strCollection53);
    }

    @Test
    public void test15464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15464");
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(42, nodeArray10, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(49, nodeArray10, 53, 43);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(176180, nodeArray10, 41, 38);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(37, nodeArray10, 43, 16);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(49, nodeArray10, (int) (short) 100, (int) '#');
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(0, nodeArray10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(52, nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray10);
    }

    @Test
    public void test15465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15465");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean42 = strList19.isEmpty();
        java.lang.Object[] objArray43 = strList19.toArray();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) ' ', 16, 51);
        int int48 = strList19.indexOf((java.lang.Object) node47);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor49 = strList19.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            strList19.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(strItor49);
    }

    @Test
    public void test15466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15466");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isIf();
        boolean boolean13 = node11.isAnd();
        node11.detachChildren();
        boolean boolean15 = node11.isStringKey();
        node11.addSuppression("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean18 = node11.isEmpty();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(53, "hi!", (int) (short) -1, (int) (short) 10);
        com.google.javascript.rhino.Node node25 = node24.getLastSibling();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean30 = node29.isVar();
        node29.putBooleanProp(30, false);
        boolean boolean34 = node29.isSwitch();
        boolean boolean35 = node29.isIn();
        node29.setSourceEncodedPosition(45);
        boolean boolean38 = node29.isAssign();
        int int39 = node29.getSourceOffset();
        int int40 = node29.getLineno();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean45 = node44.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node46 = node44.cloneNode();
        boolean boolean47 = node46.isGetElem();
        node46.addSuppression("");
        int int50 = node46.getType();
        boolean boolean51 = node46.isInc();
        boolean boolean52 = node46.isNE();
        boolean boolean53 = node46.isName();
        boolean boolean54 = node46.isRegExp();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 1, node24, node29, node46);
        int int56 = node11.getIndexOfChild(node29);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test15467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15467");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        com.google.javascript.rhino.Node node17 = typePosition2.getItem();
        int int18 = typePosition2.getStartLine();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test15468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15468");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean24 = jSDocInfo20.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection25 = jSDocInfo20.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int36 = strList34.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int47 = strList45.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList66 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList34, (java.lang.Iterable<java.lang.String>) strList45, (java.lang.Iterable<java.lang.String>) strList56, (java.lang.Iterable<java.lang.String>) strList65);
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int77 = strList75.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator78 = strList75.spliterator();
        boolean boolean79 = strList45.equals((java.lang.Object) strList75);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean84 = node83.isNull();
        boolean boolean85 = node83.isSyntheticBlock();
        com.google.javascript.rhino.Node node86 = node83.removeChildren();
        com.google.javascript.rhino.InputId inputId87 = null;
        node83.setInputId(inputId87);
        boolean boolean89 = strList45.equals((java.lang.Object) node83);
        boolean boolean90 = node83.isParamList();
        jSDocInfo20.setAssociatedNode(node83);
        java.util.Set<java.lang.String> strSet92 = jSDocInfo20.getSuppressions();
        java.lang.String str93 = jSDocInfo20.getLendsName();
        int int94 = jSDocInfo20.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeCollection25);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strIterableList66);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test15469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15469");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo20.getImplementedInterfaces();
        jSDocInfo20.addSuppression("STRING  43\n");
        java.util.Collection<java.lang.String> strCollection30 = jSDocInfo20.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNull(strCollection30);
    }

    @Test
    public void test15470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15470");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        int int11 = strList8.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = strList8.asList();
        java.lang.String str13 = strList12.toString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        boolean boolean20 = node17.isCall();
        int int21 = node17.getSourcePosition();
        java.lang.String str25 = node17.toString(false, true, false);
        boolean boolean26 = node17.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node17.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet44);
        java.lang.Object[] objArray47 = strSet44.toArray();
        boolean boolean48 = strSet34.retainAll((java.util.Collection<java.lang.String>) strSet44);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet55);
        boolean boolean58 = strSet44.containsAll((java.util.Collection<java.lang.String>) strSet55);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet44);
        java.util.Iterator<java.lang.String> strItor60 = strSet44.iterator();
        boolean boolean62 = strSet44.add("Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n");
        int int63 = strSet44.size();
        java.lang.Object obj64 = null;
        boolean boolean65 = strSet44.equals(obj64);
        boolean boolean66 = strList12.containsAll((java.util.Collection<java.lang.String>) strSet44);
        java.lang.Object[] objArray67 = strList12.toArray();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str13, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 176180 + "'", int21 == 176180);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING " + "'", str25, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test15471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15471");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        int int21 = strSet16.size();
        boolean boolean23 = strSet16.add("");
        boolean boolean25 = strSet16.add("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean27 = strSet16.add("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        java.util.Spliterator<java.lang.String> strSpliterator28 = strSet16.spliterator();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet16.parallelStream();
        java.lang.Object[] objArray30 = strSet16.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int53 = strList51.indexOf((java.lang.Object) 'a');
        int int54 = strList51.size();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray58 = strList51.toArray(strArray57);
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("[, hi!, , , hi!, , hi!, ]", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "STRING ", "NUMBER 12.0\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "NUMBER 0.0 43 [directives: []]\n", "NUMBER 0.0", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "hi!", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", strArray57);
        boolean boolean60 = strSet16.containsAll((java.util.Collection<java.lang.String>) strList59);
        java.lang.Object[] objArray61 = strList59.toArray();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[, TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[, TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n]");
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray61);
    }

    @Test
    public void test15472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15472");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int34 = strList32.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int45 = strList43.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList64 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList32, (java.lang.Iterable<java.lang.String>) strList43, (java.lang.Iterable<java.lang.String>) strList54, (java.lang.Iterable<java.lang.String>) strList63);
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = strList54.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor66 = strList54.iterator();
        java.lang.String str67 = strList54.toString();
        com.google.common.collect.ImmutableList.Builder<java.util.ListIterator<java.lang.String>> strItorBuilder68 = com.google.common.collect.ImmutableList.builder();
        int int69 = strList54.indexOf((java.lang.Object) strItorBuilder68);
        boolean boolean70 = strSet23.containsAll((java.util.Collection<java.lang.String>) strList54);
        boolean boolean71 = strList54.isEmpty();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList54.replaceAll(strUnaryOperator72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strIterableList64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str67, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strItorBuilder68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test15473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15473");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        boolean boolean63 = strList19.containsAll((java.util.Collection<java.lang.String>) strList62);
        java.util.Iterator<java.lang.String> strItor64 = strList19.iterator();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int69 = node68.getSourceOffset();
        double double70 = node68.getDouble();
        boolean boolean71 = node68.isInc();
        int int72 = strList19.indexOf((java.lang.Object) node68);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = node68.siblings();
        boolean boolean74 = node68.isThis();
        java.lang.String str75 = node68.getSourceFileName();
        int int77 = node68.getIntProp(35);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test15474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15474");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(221199, 4095, 2);
    }

    @Test
    public void test15475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15475");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean30 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean32 = strSet16.add("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder34.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder34.markName("hi!", staticSourceFile38, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder34.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        boolean boolean48 = strSet16.contains((java.lang.Object) 0);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean55 = strSet52.equals((java.lang.Object) (-1));
        java.lang.Object[] objArray56 = strSet52.toArray();
        boolean boolean57 = strSet16.equals((java.lang.Object) strSet52);
        int int58 = strSet16.size();
        java.util.stream.Stream<java.lang.String> strStream59 = strSet16.parallelStream();
        boolean boolean60 = strSet16.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test15476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15476");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        int int26 = jSDocInfo20.getExtendedInterfacesCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection27 = jSDocInfo20.getMarkers();
        java.lang.String str28 = jSDocInfo20.getFileOverview();
        java.lang.String str29 = jSDocInfo20.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(markerCollection27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test15477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15477");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        boolean boolean10 = node7.isHook();
        int int11 = node7.getType();
        node7.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node15 = node7.getAncestor(10);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean20 = node19.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node25 = node19.copyInformationFromForTree(node24);
        boolean boolean26 = node25.isVarArgs();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int37 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node38 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.javascript.rhino.Node node48 = node36.useSourceInfoIfMissingFromForTree(node42);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder49 = node48.getJsDocBuilderForNode();
        boolean boolean50 = node48.isAnd();
        node25.addChildToBack(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node48.siblings();
        java.util.Set<java.lang.String> strSet53 = node48.getDirectives();
        boolean boolean54 = node48.isCatch();
        boolean boolean55 = node48.isFalse();
        com.google.javascript.rhino.Node node56 = node7.useSourceInfoIfMissingFrom(node48);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test15478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15478");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isNoAlias();
        boolean boolean19 = jSDocInfo14.isJavaDispatch();
        boolean boolean21 = jSDocInfo14.hasDescriptionForParameter("NUMBER 0.0 43");
        boolean boolean22 = jSDocInfo14.isInterface();
        boolean boolean23 = jSDocInfo14.isInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test15479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15479");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isGetterDef();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node10 = node9.removeChildren();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable11 = node9.getAncestors();
        com.google.javascript.rhino.Node node12 = node3.srcref(node9);
        int int13 = node3.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(ancestorIterable11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test15480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15480");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        boolean boolean10 = node9.isVarArgs();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node32.getJsDocBuilderForNode();
        boolean boolean34 = node32.isAnd();
        node9.addChildToBack(node32);
        boolean boolean36 = node9.isHook();
        boolean boolean37 = node9.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15481");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile11, 0, 0);
        boolean boolean15 = jSDocInfoBuilder1.recordConstructor();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder16 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList17 = strListBuilder16.build();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object[] objArray27 = strSet24.toArray();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        boolean boolean38 = strSet24.retainAll((java.util.Collection<java.lang.String>) strSet34);
        java.lang.Object[] objArray39 = strSet24.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet24.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList81 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList60, (java.lang.Iterable<java.lang.String>) strList71, (java.lang.Iterable<java.lang.String>) strList80);
        boolean boolean82 = strSet24.equals((java.lang.Object) strList80);
        java.lang.String[] strArray85 = new java.lang.String[] { "STRING  43", "STRING " };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        boolean boolean88 = strSet24.removeAll((java.util.Collection<java.lang.String>) strList86);
        java.lang.Object[] objArray89 = strList86.toArray();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder90 = strListBuilder16.add(strList86);
        boolean boolean91 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList86);
        int int92 = strList86.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strListBuilder16);
        org.junit.Assert.assertNotNull(strListList17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strIterableList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[STRING  43, STRING ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[STRING  43, STRING ]");
        org.junit.Assert.assertNotNull(strListBuilder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test15482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15482");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet8);
        boolean boolean11 = node5.isParamList();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node15.addChildrenToFront(node19);
        boolean boolean21 = node15.isGetterDef();
        boolean boolean22 = node15.isEmpty();
        node15.setCharno(31);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int29 = node28.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType30 = node28.getJSType();
        boolean boolean31 = node28.isDelProp();
        java.lang.String str32 = node28.toString();
        boolean boolean33 = node28.isFunction();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(0, node5, node15, node28);
        boolean boolean35 = node15.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node15.getJSDocInfo();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean41 = node40.isNull();
        boolean boolean42 = node40.isSyntheticBlock();
        boolean boolean43 = node40.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node44 = node40.removeChildren();
        node40.setType(38);
        node40.putBooleanProp((int) (byte) -1, true);
        boolean boolean50 = node40.isThrow();
        node40.setDouble((double) (byte) 0);
        int int53 = node15.getIndexOfChild(node40);
        boolean boolean54 = node40.isContinue();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '4', node40, 11, 15);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 0.0 43" + "'", str32, "NUMBER 0.0 43");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test15483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15483");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        boolean boolean23 = jSDocInfo20.isConsistentIdGenerator();
        java.lang.String str24 = jSDocInfo20.getReturnDescription();
        int int25 = jSDocInfo20.getImplementedInterfaceCount();
        int int26 = jSDocInfo20.getParameterCount();
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo20.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(strCollection27);
    }

    @Test
    public void test15484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15484");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(4, nodeArray6, (int) (short) 1, 47);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(221199, nodeArray6, 38, (int) 'a');
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(26, nodeArray6);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray6, 0, 44);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test15485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15485");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        java.lang.String str70 = jSDocInfo69.getMeaning();
        boolean boolean71 = jSDocInfo69.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo69.getExtendedInterfaces();
        java.lang.String str73 = jSDocInfo69.getDescription();
        java.util.Set<java.lang.String> strSet74 = jSDocInfo69.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream75 = strSet74.parallelStream();
        node31.setDirectives(strSet74);
        boolean boolean77 = node31.isNumber();
        boolean boolean78 = node31.isQuotedString();
        boolean boolean79 = node31.isCase();
        com.google.javascript.rhino.Node node80 = node31.cloneNode();
        boolean boolean81 = node80.isAnd();
        boolean boolean82 = node80.isRegExp();
        int int83 = node80.getLength();
        boolean boolean84 = node80.isFunction();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test15486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15486");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test15487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15487");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isNoShadow();
        boolean boolean24 = jSDocInfo20.isInterface();
        boolean boolean25 = jSDocInfo20.hasType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        jSDocInfo20.setLicense("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean29 = jSDocInfo20.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test15488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15488");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        int int9 = node5.getType();
        boolean boolean10 = node5.isInc();
        boolean boolean11 = node5.isNE();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.Node node42 = node30.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean43 = node42.isContinue();
        boolean boolean44 = node42.isOnlyModifiesThisCall();
        boolean boolean45 = node42.isDefaultCase();
        boolean boolean46 = node15.hasChild(node42);
        java.lang.String str50 = node15.toString(false, true, true);
        com.google.javascript.rhino.Node node51 = node5.copyInformationFrom(node15);
        int int52 = node5.getCharno();
        com.google.javascript.rhino.Node node54 = node5.getAncestor((int) (byte) 10);
        boolean boolean55 = node5.isObjectLit();
        boolean boolean56 = node5.isInc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 0.0 [directives: []]" + "'", str50, "NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15489");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        boolean boolean7 = node3.isOr();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node11.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node18 = node11.getChildAtIndex(0);
        boolean boolean19 = node11.isExprResult();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isNull();
        boolean boolean25 = node23.isThis();
        boolean boolean26 = node11.hasChild(node23);
        com.google.javascript.rhino.Node node27 = node3.useSourceInfoIfMissingFromForTree(node11);
        boolean boolean28 = node11.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15490");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        java.lang.String str37 = node34.toString();
        boolean boolean38 = node34.isThrow();
        boolean boolean39 = node34.isCatch();
        java.lang.String str43 = node34.toString(false, false, true);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(41);
        com.google.javascript.rhino.Node node46 = node45.getParent();
        com.google.javascript.rhino.Node node47 = node34.useSourceInfoIfMissingFromForTree(node45);
        boolean boolean48 = node34.wasEmptyNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TYPEOF" + "'", str37, "TYPEOF");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TYPEOF" + "'", str43, "TYPEOF");
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test15491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15491");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean42 = strList19.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int53 = strList51.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList51.spliterator();
        boolean boolean55 = strList51.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition58 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition60 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition61 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean62 = typePosition61.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList63 = com.google.common.collect.ImmutableList.of(typePosition56, typePosition57, typePosition58, typePosition59, typePosition60, typePosition61);
        int int64 = strList51.indexOf((java.lang.Object) typePosition61);
        com.google.javascript.rhino.Node node65 = typePosition61.getItem();
        boolean boolean66 = strList19.contains((java.lang.Object) node65);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean70 = jSDocInfoBuilder68.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        jSDocInfoBuilder68.markName("hi!", staticSourceFile72, (int) (short) 0, (int) (short) 100);
        boolean boolean76 = jSDocInfoBuilder68.recordNoTypeCheck();
        boolean boolean77 = jSDocInfoBuilder68.recordExpose();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node81.addChildrenToFront(node85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = jSDocInfoBuilder68.build(node85);
        boolean boolean88 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo87.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList90 = jSDocInfo87.getTemplateTypeNames();
        boolean boolean91 = strList19.equals((java.lang.Object) strList90);
        java.util.ListIterator<java.lang.String> strItor92 = strList90.listIterator();
        int int93 = strList90.size();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList90.replaceAll(strUnaryOperator94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(typePositionList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(jSDocInfo87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSTypeExpression89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test15492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15492");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        node4.removeProp(10);
        node4.setVarArgs(true);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int59 = node58.getSourceOffset();
        com.google.javascript.rhino.Node node60 = node52.useSourceInfoIfMissingFromForTree(node58);
        boolean boolean61 = node60.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node60.getStaticSourceFile();
        boolean boolean63 = node60.isDo();
        com.google.javascript.rhino.Node node64 = node4.useSourceInfoFrom(node60);
        com.google.javascript.rhino.InputId inputId65 = node64.getInputId();
        boolean boolean66 = node64.isVar();
        node64.setDouble((double) 37);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(inputId65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test15493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15493");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strList62.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor66 = strList62.listIterator();
        int int67 = strList62.size();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator68 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList62.replaceAll(strUnaryOperator68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSpliterator65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
    }

    @Test
    public void test15494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15494");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        node32.detachChildren();
        boolean boolean37 = node32.isSyntheticBlock();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(51, node32, 2, 12);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int51 = node50.getSourceOffset();
        com.google.javascript.rhino.Node node52 = node44.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet59);
        com.google.javascript.rhino.Node node62 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.InputId inputId64 = node62.getInputId();
        boolean boolean65 = node62.isDelProp();
        boolean boolean66 = node62.isNumber();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) '4', "");
        com.google.javascript.rhino.Node node70 = node62.copyInformationFromForTree(node69);
        node32.addChildrenToBack(node70);
        boolean boolean72 = node32.isBlock();
        boolean boolean73 = node32.isBreak();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(inputId64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test15495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15495");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.setIsSyntheticBlock(true);
        boolean boolean7 = node4.isReturn();
        boolean boolean8 = node4.isCatch();
        boolean boolean9 = node4.isStringKey();
        boolean boolean10 = node4.isBlock();
        boolean boolean11 = node4.isBlock();
        boolean boolean12 = node4.isFor();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj18 = node16.getProp(43);
        boolean boolean19 = node16.isCall();
        int int20 = node16.getSourcePosition();
        node16.setWasEmptyNode(true);
        node4.addChildrenToBack(node16);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        boolean boolean30 = node27.isCall();
        boolean boolean31 = node27.isQuotedString();
        boolean boolean32 = node27.isObjectLit();
        boolean boolean33 = node27.isOr();
        boolean boolean34 = node27.isNull();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int39 = node38.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType40 = node38.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder41 = node38.getJsDocBuilderForNode();
        node38.putBooleanProp(30, false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node38.getJsDocBuilderForNode();
        java.lang.String str46 = node27.checkTreeEquals(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        int int54 = node50.getSourcePosition();
        java.lang.String str58 = node50.toString(false, true, false);
        boolean boolean59 = node50.isNot();
        boolean boolean60 = node50.isString();
        com.google.javascript.rhino.Node node61 = node50.getLastSibling();
        boolean boolean62 = node50.isParamList();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(46, node4, node38, node50, 39, 35);
        boolean boolean66 = node65.hasOneChild();
        boolean boolean67 = node65.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 176180 + "'", int20 == 176180);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder41);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str46, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 176180 + "'", int54 == 176180);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "STRING " + "'", str58, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test15496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15496");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        java.lang.String str25 = jSDocInfo20.getBlockDescription();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.hasTypedefType();
        boolean boolean29 = jSDocInfo20.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test15497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15497");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        java.lang.String str37 = node34.toString();
        boolean boolean38 = node34.isThrow();
        boolean boolean39 = node34.isCatch();
        java.lang.String str43 = node34.toString(false, false, true);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(41);
        com.google.javascript.rhino.Node node46 = node45.getParent();
        com.google.javascript.rhino.Node node47 = node34.useSourceInfoIfMissingFromForTree(node45);
        node45.setVarArgs(true);
        node45.putBooleanProp(221199, true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TYPEOF" + "'", str37, "TYPEOF");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TYPEOF" + "'", str43, "TYPEOF");
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test15498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15498");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = strList19.asList();
        java.util.ListIterator<java.lang.String> strItor55 = strList19.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            strList19.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strItor55);
    }

    @Test
    public void test15499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15499");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(40, "hi!");
        java.lang.String str17 = node16.getSourceFileName();
        node16.putBooleanProp(30, false);
        node3.addChildToFront(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node3.children();
        boolean boolean23 = node3.isTypeOf();
        boolean boolean24 = node3.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15500");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean3 = jSDocInfoBuilder1.recordOverride();
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.recordDeprecated();
        jSDocInfoBuilder1.recordOriginalCommentString("STRING ");
        jSDocInfoBuilder1.markText("TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n", (int) (byte) 100, 37, (int) (byte) 1, 44);
        boolean boolean14 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }
}

